package de.uka.ipd.sdq.dsexplore.opt4j.optimizer.heuristic.operators;

import org.opt4j.core.problem.Genotype;
import org.opt4j.operator.copy.Copy;

import de.uka.ipd.sdq.dsexplore.launch.DSEWorkflowConfiguration;
import de.uka.ipd.sdq.dsexplore.opt4j.representation.DSEIndividualBuilder;

public abstract class AbstractTactic implements ITactic {
	/**
	 * Weight of this heuristics. Used for randomly select a candidate
	 * out of a set of candidates
	 */
	private double heuristicWeight;
	private int numberOfGeneratedCandidates = 0;
	/**
	 * Creates copy of genotypes
	 */
	protected final Copy<Genotype> copy;
	
	/**
	 * Builds individual
	 */
	protected final DSEIndividualBuilder individualBuilder;
	
	/**
	 * @param copy Creates copy of genotypes
	 * @param individualBuilder Builds individual
	 */
	public AbstractTactic(Copy<Genotype> copy,
			DSEIndividualBuilder individualBuilder, DSEWorkflowConfiguration configuration) {
		this.copy = copy;
		this.individualBuilder = individualBuilder;
	}

	final protected void increaseCounterOfGeneratedCandidates() {
		numberOfGeneratedCandidates++;
	}
	
	/**
	 * @return Weight used for selecting candidate out of a set of candidates
	 */
	final public double getHeuristicWeight() {
		return heuristicWeight;
	}
	
	final protected void setHeuristicWeight(double weight) {
		heuristicWeight = weight;
	}
	
	/**
	 * @return Number of candidates generated by this heuristic
	 */
	final public int getNumberOfGeneratedCandidates() {
		return numberOfGeneratedCandidates;
	}

}
