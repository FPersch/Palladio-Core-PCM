«EXTENSION m2t_transforms::java_names»
«EXTENSION m2t_transforms::pcm»
«EXTENSION m2t_transforms::sensors»
«EXTENSION m2t_transforms::sim::accuracyInfluence»
«IMPORT system»
«IMPORT core::composition»
«IMPORT usagemodel»
«IMPORT core::entity»
«IMPORT repository»
«IMPORT parameter»
«IMPORT seff»
«IMPORT seff_performance»
«IMPORT qualityannotation»

«REM»This generic pre call does not include simulation of network failures and latency. «ENDREM»
«DEFINE GenericPreCall(Object call,List[VariableUsage] parameterUsages, String prefix) FOR OperationSignature»
	try {
	«EXPAND m2t_transforms::sim::calls::PrepareSimulatedStackFrame(parameterUsages) FOR this»

	«IF ExternalCallAction.isInstance(call)»
		«EXPAND m2t_transforms::sensors::StartResponseTimeMeasurementTM FOR this.externalCallActionDescription(call)»
	«ELSE»
		«EXPAND m2t_transforms::sensors::StartResponseTimeMeasurementTM FOR this.entryLevelSystemCallActionDescription(call)»
	«ENDIF»
	de.uka.ipd.sdq.simucomframework.variables.stackframe.SimulatedStackframe<Object> callResult =
«ENDDEFINE»

«REM»This generic post call does not include simulation of network failures and latency. «ENDREM»
«DEFINE GenericPostCall(Object call, List[VariableUsage] outParameterUsages) FOR OperationSignature»
	// Stop the time measurement
	«IF ExternalCallAction.isInstance(call)»
		«EXPAND m2t_transforms::sensors::EndResponseTimeMeasurementTM FOR this.externalCallActionDescription(call)»
	«ELSE»
		«EXPAND m2t_transforms::sensors::EndResponseTimeMeasurementTM FOR "Call_"+this.javaSignature()+" <EntryLevelSystemCall id: "+((Entity)call).id+" >"»
	«ENDIF»
	«REM»Handle accuracy influence analysis. «ENDREM»
	«IF AbstractAction.isInstance(call)»
		«IF getQualityAnnotationRepository() != null»
			«IF ((AbstractAction)call).getRdseff().getQualityAnnotation() != null»
				«LET ((AbstractAction)call).getRdseff().getQualityAnnotation() AS qualityAnnotation»
					«EXPAND m2t_transforms::sim::accuracy::CheckAccuracy(((AbstractAction)call).getRdseff(), (AbstractAction)call) FOREACH qualityAnnotation.validForParameterPartitions.typeSelect(PCMParameterPartition)»
				«ENDLET»
			«ELSE»
				«REM»Accuracy analysis was requested but no quality annotation could be found for this RDSEFF«ENDREM»
				SeverityAndIssue issue = AccuracyIssueFactory.createMissingQualityAnnotationIssue("«((AbstractAction)call).getRdseff().getResourceName()»", "«((AbstractAction)call).getRdseff().id»");
				config.addIssue(issue);
			«ENDIF»
		«ELSE»
			«REM»Accuracy analysis was not requested. Do nothing.«ENDREM»
		«ENDIF»
	«ENDIF»

	«FOREACH outParameterUsages AS pu»
		«LET pu.parameterUsageLHS() AS lhs_prefix»
			// Copy out parameter «lhs_prefix» to local stack frame
			«FOREACH pu.variableCharacterisation_VariableUsage AS vc»
				«IF pu.namedReference__VariableUsage.isInnerReference()»
					methodBodyStackFrame.addValue("«lhs_prefix+'.'+vc.type.toString()»",
					   	new de.uka.ipd.sdq.simucomframework.variables.EvaluationProxy("«vc.specification_VariableCharacterisation.specification.specificationString()»",callResult.copyFrame()));
				«ELSE»
					methodBodyStackFrame.addValue("«lhs_prefix+'.'+vc.type.toString()»",
					   	ctx.evaluate("«vc.specification_VariableCharacterisation.specification.specificationString()»",callResult));
				«ENDIF»
			«ENDFOREACH»
		«ENDLET»
	«ENDFOREACH»
	} catch (java.rmi.RemoteException e) {
		
	}
	finally
	{
		«EXPAND m2t_transforms::sim::calls::TidySimulatedStackFrame FOR this»
	}
	// END Simulate an external call
«ENDDEFINE»

