«EXTENSION m2t_transforms::java_names»
«EXTENSION m2t_transforms::pcm»
«EXTENSION org::eclipse::xtend::util::stdlib::counter»
«IMPORT system»
«IMPORT composition»
«IMPORT usagemodel»
«IMPORT entity»
«IMPORT repository»
«IMPORT allocation»
					
«DEFINE Main FOR UsageModel»
	«counterReset("c1")»
	«counterReset("c2")»
	
	«FILE "Main.java"»
	«FOREACH this.usageScenario_UsageModel AS us»
		«EXPAND WorkloadDriverClass(us) FOR us.workload_UsageScenario»
	«ENDFOREACH»
		public class Main extends de.uka.ipd.sdq.prototype.framework.AbstractMain {

			@Override
			protected void initialiseThreads(
					de.uka.ipd.sdq.sensorframework.entities.ExperimentRun expRun,
					de.uka.ipd.sdq.sensorframework.entities.TimeSpanSensor timeSensor)
			{
				«FOREACH this.usageScenario_UsageModel AS us»
					«EXPAND WorkloadDriver(us) FOR us.workload_UsageScenario»
				«ENDFOREACH»
			}
		
			@Override
			protected void setupResources()
			{	
				ResourceEnvironmentFactory.setUpResources(runProps.getOptionValue('H'), runProps.getOptionValue('p'), runProps.getOptionValue('s'), getAccuracy());
			}
			
			@Override
			protected void initialiseSystems() 
			{
				«FOREACH this.usageScenario_UsageModel.querySystemCalls().getSystemsFromCalls() AS us»
					«us.fqn()».main(null);
				«ENDFOREACH»			
			}
			
			@Override
			protected String[][] getSystems()
			{
				String[][] systems = {
				«FOREACH this.usageScenario_UsageModel.querySystemCalls().getSystemsFromCalls() AS sys SEPARATOR ","»
					{"«sys.fqn()»", "«sys.javaName()»"}
				«ENDFOREACH»
				};
				
				return systems;
			}
			
			@Override
			protected void initAllocationFactory() {
				AllocationFactory.initSingleton(new AllocationFactory());
			}
			
			/**
			 * @param args
			 */
			public static void main(String[] args)
			{
				new Main().run(args);
			}
		}
	«ENDFILE»
«ENDDEFINE»

«DEFINE UsageScenario(Allocation a) FOR UsageScenario»
	«FILE this.implementationPackage().fqnToDirectoryPath() + "/" + this.javaName() + ".java"»
		package «this.implementationPackage()»;
		public class «this.javaName()» implements java.lang.Runnable
		{
			protected static org.apache.log4j.Logger logger = org.apache.log4j.Logger.getRootLogger();
		
			«EXPAND m2t_transforms::usage::SystemMemberVar FOREACH this.querySystemCalls().providedRole_EntryLevelSystemCall.toSet()»

			public «this.javaName()»(String ip) {
				«EXPAND CreateSystemVar FOREACH this.querySystemCalls().getSystemsFromCalls()»
			
	            «EXPAND ContextInit FOREACH this.querySystemCalls().providedRole_EntryLevelSystemCall.toSet()»
				
		        «EXPAND UsageScenarioAdditionsTM FOR this»
			}
			
			«EXPAND ScenarioRunner(this) FOR this.scenarioBehaviour_UsageScenario»
			
			public void run() {
				scenarioRunner();
			}
		}
	«ENDFILE»
«ENDDEFINE» 

«DEFINE UsageScenarioAdditionsTM FOR UsageScenario»
«ENDDEFINE»

«DEFINE CreateSystemVar FOR System»
«ENDDEFINE»

«DEFINE ContextInit FOR OperationProvidedRole»  
    {
		//get the business interface
		
		«REM»
		// This is the old EJB version
		//Object obj=context.lookup(«this.providedInterface__OperationProvidedRole.fqn()».class.getName());
		//convert obj
		//«this.portMemberVar()» = («this.providedInterface__OperationProvidedRole.fqn()»)obj;
		//«this.portMemberVar()» = my«this.providingEntity_ProvidedRole.javaName()».«this.portGetter()»();
		«ENDREM»
		
		// Wait for system
		«this.providingEntity_ProvidedRole.fqnInterface()» my«this.providingEntity_ProvidedRole.javaName()» = null;
		
		while (true) {
			try {		
				my«this.providingEntity_ProvidedRole.javaName()» = («this.providingEntity_ProvidedRole.fqnInterface()»)java.rmi.Naming.lookup("//" + ip + "/«this.providingEntity_ProvidedRole.javaName()»");
				«this.portMemberVar()» = my«this.providingEntity_ProvidedRole.javaName()».«this.portGetter()»();
		
			} catch (java.net.MalformedURLException e) {
				logger.error("Remote URI malformed. This should never happen, strange model names used?");
			} catch (java.rmi.RemoteException e) {
				logger.error("Error while waiting for system. " + e);
			} catch (java.rmi.NotBoundException e) {
				logger.info("System missing: " + e.getMessage());
				try {
					Thread.sleep(3000);
				} catch (InterruptedException innerE) {
					logger.error("Error while waiting for system. " + e);
				}
				continue;
			}
			
			break;
		}
	}

«ENDDEFINE»



«DEFINE WorkloadDriverClass(UsageScenario u) FOR Workload»
	«ERROR "OAW GENERATION ERROR [m2t_transforms/prototype/usage.xpt]: WorkloadDriverClass(UsageScenario u) should never get called here!"»
«ENDDEFINE»

«DEFINE WorkloadDriver(UsageScenario u) FOR Workload»
	«ERROR "OAW GENERATION ERROR [m2t_transforms/prototype/usage.xpt]: WorkloadDriver(UsageScenario u) should never get called here!"»
«ENDDEFINE»

«DEFINE WorkloadDriver(UsageScenario u) FOR OpenWorkload»
   this.threads.add(new «u.javaName()»Thread(expRun, timeSensor, runProps));
«ENDDEFINE»

«DEFINE WorkloadDriverClass(UsageScenario u) FOR OpenWorkload»
class «u.javaName()»Thread extends de.uka.ipd.sdq.prototype.framework.AbstractOpenScenarioThread {

	public «u.javaName()»Thread(
			de.uka.ipd.sdq.sensorframework.entities.ExperimentRun expRun,
			de.uka.ipd.sdq.sensorframework.entities.TimeSpanSensor timeSensor,
			de.uka.ipd.sdq.prototype.framework.RunProperties runProps)
	{
		super(expRun,timeSensor,runProps,"«this.interArrivalTime_OpenWorkload.specification.specificationString()»");
	}

	@Override
	protected Runnable getScenarioRunner(de.uka.ipd.sdq.prototype.framework.RunProperties runProps)
	{
		return new «u.fqn()»((runProps.hasOption('R') ? runProps.getOptionValue('R') : de.uka.ipd.sdq.prototype.framework.RmiRegistry.LOCALHOST));
	}
}


«ENDDEFINE»


«DEFINE WorkloadDriver(UsageScenario u) FOR ClosedWorkload»
	{
		int count = «this.population»;
		if (runProps.hasOption("c")) {
			count = (Integer)runProps.getOptionObject("c");
		}
		for (int i = 0; i < count; i++) {
			threads.add(new «u.javaName()»Thread(expRun, timeSensor, runProps));
		}
	}
«ENDDEFINE»

«DEFINE WorkloadDriverClass(UsageScenario u) FOR ClosedWorkload»
class «u.javaName()»Thread extends de.uka.ipd.sdq.prototype.framework.AbstractClosedScenarioThread {
	
	public «u.javaName()»Thread(
			de.uka.ipd.sdq.sensorframework.entities.ExperimentRun expRun,
			de.uka.ipd.sdq.sensorframework.entities.TimeSpanSensor timeSensor,
			de.uka.ipd.sdq.prototype.framework.RunProperties runProps)
	{
		super(expRun,timeSensor,runProps);
	}

	@Override
	protected Runnable getScenarioRunner(de.uka.ipd.sdq.prototype.framework.RunProperties runProps)
	{
		return new «u.fqn()»((runProps.hasOption('R') ? runProps.getOptionValue('R') : de.uka.ipd.sdq.prototype.framework.RmiRegistry.LOCALHOST));
	}
}
«ENDDEFINE»

«DEFINE UsageScenarioAddition FOR UsageScenario»

		//FIXME: why is expRun needed?
        // expRun = de.uka.ipd.sdq.prototype.framework.AbstractMain.getLatestExperimentRun();
        
        //FIXME: declare and initialise sensors  

		ctx.getStack().createAndPushNewStackFrame();
		de.uka.ipd.sdq.simucomframework.variables.cache.StoExCache
				.initialiseStoExCache(new de.uka.ipd.sdq.probfunction.math.impl.DefaultRandomGenerator());

«ENDDEFINE»

«DEFINE ScenarioRunner(UsageScenario us) FOR ScenarioBehaviour»
	private	de.uka.ipd.sdq.simucomframework.variables.StackContext ctx = new de.uka.ipd.sdq.simucomframework.variables.StackContext();
	
	@org.junit.Test public void scenarioRunner()
	{
	«PROTECT CSTART '/*' CEND '*/' ID this.id»
		de.uka.ipd.sdq.simucomframework.variables.stackframe.SimulatedStackframe<Object> outerStackframe = ctx.getStack().createAndPushNewStackFrame();
		
		«EXPAND m2t_transforms::sensors::StartResponseTimeMeasurementTM FOR us.entityName.javaString()»
		{
			«EXPAND m2t_transforms::usage::UserActions FOR this.actions_ScenarioBehaviour.typeSelect(Start).get(0)»
		}
		«EXPAND m2t_transforms::sensors::EndResponseTimeMeasurementTM FOR us.entityName.javaString()»

		ctx.getStack().removeStackFrame();
	«ENDPROTECT»
	}
«ENDDEFINE»