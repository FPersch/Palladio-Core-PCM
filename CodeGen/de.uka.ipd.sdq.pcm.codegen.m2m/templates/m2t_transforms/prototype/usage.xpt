«EXTENSION m2t_transforms::java_names»
«EXTENSION m2t_transforms::pcm»
«IMPORT system»
«IMPORT composition»
«IMPORT usagemodel»
«IMPORT entity»
«IMPORT repository»
«IMPORT allocation»

«DEFINE Main FOR UsageModel»
	«FILE "Main.java"»
	«FOREACH this.usageScenario_UsageModel AS us»
		«EXPAND WorkloadDriverClass(us) FOR us.workload_UsageScenario»
	«ENDFOREACH»
		public class Main extends de.uka.ipd.sdq.prototype.framework.AbstractMain {

			@Override
			protected void initialiseThreads(
					de.uka.ipd.sdq.sensorframework.entities.ExperimentRun expRun,
					de.uka.ipd.sdq.sensorframework.entities.TimeSpanSensor timeSensor) {
				«FOREACH this.usageScenario_UsageModel AS us»
					«EXPAND WorkloadDriver(us) FOR us.workload_UsageScenario»
				«ENDFOREACH»
			}
		
			@Override
			protected void setupResources() {
				ResourceEnvironmentFactory.setUpResources();
			}
			
			/**
			 * @param args
			 */
			public static void main(String[] args) {
				new Main().run(args);
			}
		}
	«ENDFILE»
«ENDDEFINE»

«DEFINE WorkloadDriverClass(UsageScenario u) FOR Workload»
	«ERROR "OAW GENERATION ERROR [m2t_transforms/prototype/usage.xpt]: This should never get called!"»
«ENDDEFINE»

«DEFINE WorkloadDriver(UsageScenario u) FOR Workload»
	«ERROR "OAW GENERATION ERROR [m2t_transforms/prototype/usage.xpt]: This should never get called!"»
«ENDDEFINE»

«DEFINE WorkloadDriverClass(UsageScenario u) FOR OpenWorkload»
class «u.javaName()»Thread extends de.uka.ipd.sdq.prototype.framework.AbstractOpenScenarioThread {

	public «u.javaName()»Thread(
			de.uka.ipd.sdq.sensorframework.entities.ExperimentRun expRun,
			de.uka.ipd.sdq.sensorframework.entities.TimeSpanSensor timeSensor,
					org.apache.commons.cli.CommandLine commandLine) {
		super(expRun,timeSensor,commandLine,"«this.interArrivalTime_OpenWorkload»");
	}

	@Override
	protected Runnable getScenarioRunner(org.apache.commons.cli.CommandLine commandLine) {
		return new «u.fqn()»();
	}


«ENDDEFINE»


«DEFINE WorkloadDriver(UsageScenario u) FOR ClosedWorkload»
	int count = «this.population»;
	if (cmdLine.hasOption("c")) {
		count = (Integer)cmdLine.getOptionObject("c");
	}
	for (int i = 0; i < count; i++) {
		threads.add(new «u.javaName()»Thread(expRun, timeSensor, cmdLine));
	}
«ENDDEFINE»

«DEFINE WorkloadDriverClass(UsageScenario u) FOR ClosedWorkload»
class «u.javaName()»Thread extends de.uka.ipd.sdq.prototype.framework.AbstractClosedScenarioThread {
	
	public defaultUsageScenarioThread(
			de.uka.ipd.sdq.sensorframework.entities.ExperimentRun expRun,
			de.uka.ipd.sdq.sensorframework.entities.TimeSpanSensor timeSensor,
					org.apache.commons.cli.CommandLine commandLine) {
		super(expRun,timeSensor,commandLine);
	}

	@Override
	protected Runnable getScenarioRunner(org.apache.commons.cli.CommandLine commandLine) {
		return new «u.fqn()»();
	}
}
«ENDDEFINE»

