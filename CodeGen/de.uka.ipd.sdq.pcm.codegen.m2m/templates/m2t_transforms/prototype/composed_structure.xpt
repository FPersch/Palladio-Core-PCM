«IMPORT core::composition»
«IMPORT core::entity»
«IMPORT completions»
«IMPORT repository»
«IMPORT system»
«EXTENSION m2t_transforms::java_names»
«EXTENSION m2t_transforms::pcm»


«DEFINE Constructor FOR ComposedProvidingRequiringEntity»

    «REM»Create constructor without closing curly brace«ENDREM»
	«EXPAND m2t_transforms::composed_structure::ComposedPREConstructorStartTM FOR this»
		
		«REM»This is still inside the constructor.«ENDREM»
		logger.info("Creating composed structure «this.entityName»");
		
		«EXPAND AllChildMemberVarInit FOR this»
	    
	    «IF System.isInstance(this)»
			this.setContext(new «this.fqnContext()»());
		«ENDIF»
	      
		«IF InterfaceProvidingEntity.isInstance(this)»
			/* And finally, my ports */
			try{
			«EXPAND PortInit(this) FOREACH this.providedRoles_InterfaceProvidingEntity.typeSelect(OperationProvidedRole)»
			} catch(java.rmi.RemoteException e){
			  logger.error("Failed to initialise port for «this.entityName»");
			}
			
			«EXPAND m2t_transforms::composed_structure::PortInit(this) FOREACH this.providedRoles_InterfaceProvidingEntity.typeSelect(InfrastructureProvidedRole)»
		«ENDIF»
	} «REM»End constructor «ENDREM»
«ENDDEFINE»


«DEFINE PortInit(ComposedStructure cs) FOR OperationProvidedRole»
	«this.portMemberVar()» = new «this.fqnPort()»(
		«IF cs.hasProvidedDelegationConnector(this)»
			«IF System.isInstance(cs)»
				my«cs.getProvidedDelegationConnector(this).assemblyContext_ProvidedDelegationConnector.javaName()».getComponent().«cs.getProvidedDelegationConnector(this).innerProvidedRole_ProvidedDelegationConnector.portGetter()»()
			«ELSE»
				my«cs.getProvidedDelegationConnector(this).assemblyContext_ProvidedDelegationConnector.javaName()».«cs.getProvidedDelegationConnector(this).innerProvidedRole_ProvidedDelegationConnector.portGetter()»()
			«ENDIF»
		«ELSE»
		   null
		«ENDIF», this, assemblyContext
		);
«ENDDEFINE»


«DEFINE ComposedPREConstructorStartTM FOR ComposedProvidingRequiringEntity»
   public «this.className()»(String assemblyContext) {
«ENDDEFINE»

«DEFINE AllChildMemberVarInit FOR ComposedProvidingRequiringEntity»
	«IF !System.isInstance(this)»
		«EXPAND ChildMemberVarInit FOREACH this.assemblyContexts__ComposedStructure»
	«ENDIF»
«ENDDEFINE»

«DEFINE ChildMemberStartMain FOR AssemblyContext»
	«this.encapsulatedComponent__AssemblyContext.fqn()».main("", "«this.id»");
«ENDDEFINE»

«DEFINE ChildMemberVarInit FOR AssemblyContext»
	my«this.javaName()» = new «this.encapsulatedComponent__AssemblyContext.fqn()»("«this.id»");	
«ENDDEFINE»

«DEFINE ChildInitTM(ComposedStructure s) FOR AssemblyContext»
    
  «IF BasicComponent.isInstance(this.encapsulatedComponent__AssemblyContext)»
	//Initialise Component Parameters
	de.uka.ipd.sdq.simucomframework.variables.stackframe.SimulatedStackframe<Object> componentStackFrame = 
		new de.uka.ipd.sdq.simucomframework.variables.stackframe.SimulatedStackframe<Object>();
	«FOREACH this.configParameterUsages__AssemblyContext AS pu»
		«FOREACH pu.variableCharacterisation_VariableUsage AS vc»
			componentStackFrame.addValue("«pu.parameterUsageLHS()+'.'+vc.type.toString()»",
			   	new de.uka.ipd.sdq.simucomframework.variables.EvaluationProxy("«vc.specification_VariableCharacterisation.specification.specificationString()»",
			   	new de.uka.ipd.sdq.simucomframework.variables.stackframe.SimulatedStackframe<Object>()));
		«ENDFOREACH»
	«ENDFOREACH»
		
	my«this.javaName()».setComponentFrame(componentStackFrame);
  «ENDIF»
«ENDDEFINE»

 
«DEFINE ChildMemberVar FOR AssemblyContext»
	«IF System.isInstance(this.parentStructure__AssemblyContext)»
		/**
		 *  Port for component «this.encapsulatedComponent__AssemblyContext.javaName()»
		 */
		protected de.uka.ipd.sdq.prototype.framework.port.IPort<«this.encapsulatedComponent__AssemblyContext.fqn()»> my«this.javaName()» = null;
	
	«ELSE»
		/**
		 *  Subcomponent «this.encapsulatedComponent__AssemblyContext.javaName()»
		 */
		protected «this.encapsulatedComponent__AssemblyContext.fqn()» my«this.javaName()» = null;	
	«ENDIF»
«ENDDEFINE»

 
«DEFINE InnerImplementation FOR ComposedStructure»
      /* Composed child components member variables */
      «EXPAND ChildMemberVar FOREACH this.assemblyContexts__ComposedStructure»
            
      /**
      * Inner Structure initialisation
      */
      «IF System.isInstance(this)»
	  @SuppressWarnings("unchecked")
      «ENDIF»
      private void initInnerComponents() {

		 try {
			«IF System.isInstance(this)»
				«EXPAND InitRMI(this) FOREACH this.assemblyContexts__ComposedStructure»
			«ENDIF»

			«IF this.assemblyContexts__ComposedStructure.size > 0» 
			  /* First, initialise composite child structures */
			  «FOREACH this.assemblyContexts__ComposedStructure.select(c|ComposedStructure.isInstance(c.encapsulatedComponent__AssemblyContext)) AS child»
				  init«child.javaName()»();
			  «ENDFOREACH»
			  
			  /* Then initialise basic components */
			  «FOREACH this.assemblyContexts__ComposedStructure.select(c|!ComposedStructure.isInstance(c.encapsulatedComponent__AssemblyContext)) AS child»
				  init«child.javaName()»();
			  «ENDFOREACH»
			  
    	  «ENDIF»
    	  }
			catch (java.rmi.RemoteException e) {
				e.printStackTrace();
			}
      }

      «EXPAND Init(this) FOREACH this.assemblyContexts__ComposedStructure»
      /* Inner Structure initialisation end */
«ENDDEFINE»

«DEFINE InitRMI(ComposedStructure s) FOR AssemblyContext»
	«LET this.encapsulatedComponent__AssemblyContext.providedRoles_InterfaceProvidingEntity.get(0) AS e»
		my«this.javaName()» = (de.uka.ipd.sdq.prototype.framework.port.IPort<«this.encapsulatedComponent__AssemblyContext.fqn()»>) de.uka.ipd.sdq.prototype.framework.registry.RmiRegistry.lookup("«((OperationProvidedRole)e).portClassName()»_«this.id»");
«REM»		my«this.javaName()» = (de.uka.ipd.sdq.prototype.framework.port.IPort<«this.encapsulatedComponent__AssemblyContext.fqn()»>) de.uka.ipd.sdq.prototype.framework.registry.RmiRegistry.lookup("«((OperationProvidedRole)e).portClassName()»");«ENDREM»
	«ENDLET»
«ENDDEFINE»

«DEFINE Init(ComposedStructure s) FOR AssemblyContext»
   private void init«this.javaName()»() throws java.rmi.RemoteException { 
      «this.encapsulatedComponent__AssemblyContext.fqnContext()» context = new «this.encapsulatedComponent__AssemblyContext.fqnContext()»(
         «EXPAND PortQuery(s,this) FOREACH this.encapsulatedComponent__AssemblyContext.requiredRoles_InterfaceRequiringEntity.typeSelect(OperationRequiredRole) SEPARATOR ","»
         «IF this.encapsulatedComponent__AssemblyContext.requiredRoles_InterfaceRequiringEntity.typeSelect(InfrastructureRequiredRole).size > 0»
         	«IF this.encapsulatedComponent__AssemblyContext.requiredRoles_InterfaceRequiringEntity.typeSelect(OperationRequiredRole).size > 0»,
         	«ENDIF»
         	«EXPAND m2t_transforms::composed_structure::PortQuery(s,this) FOREACH this.encapsulatedComponent__AssemblyContext.requiredRoles_InterfaceRequiringEntity.typeSelect(InfrastructureRequiredRole) SEPARATOR ","»
     	«ENDIF»
      );
      «EXPAND m2t_transforms::composed_structure::ChildInitTM(s) FOR this»
      
      «REM»((de.uka.ipd.sdq.prototype.framework.port.IPort<«this.encapsulatedComponent__AssemblyContext.fqn()»>)«this.javaName()»).setContext(context);«ENDREM»
      my«this.javaName()».setContext(context);
   }
«ENDDEFINE»

«DEFINE ComposedStructureStart FOR ComposedProvidingRequiringEntity»
   package «this.implementationPackage()»;
  
  
   public class «this.className()» implements «this.fqnInterface()», java.io.Serializable  
   {
   		private static final long serialVersionUID = 1L;
   
		private static org.apache.log4j.Logger logger = 
			org.apache.log4j.Logger.getLogger(«this.className()».class.getName());
	  «EXPAND Constructor FOR this»		
      «EXPAND m2t_transforms::composed_structure::InnerImplementation FOR this»
«ENDDEFINE»


// -----------------------------------
// Get the right port to bind
// If the component is unbound, a null pointer is generated
// -----------------------------------
«DEFINE PortQuery(ComposedStructure s, AssemblyContext ctx) FOR OperationRequiredRole»
	«IF hasConnector(s,ctx,this)»
		«LET (AssemblyConnector)getConnector(s,ctx,this) AS connector»
			/* From Connector «connector.id» */
			«IF System.isInstance(s)»
				my«connector.providingAssemblyContext_AssemblyConnector.javaName()».getComponent().«connector.providedRole_AssemblyConnector.portGetter()»()
			«ELSE»
				my«connector.providingAssemblyContext_AssemblyConnector.javaName()».«connector.providedRole_AssemblyConnector.portGetter()»()
			«ENDIF»
	   	«ENDLET»
	«ELSE» 
		«IF hasRequiredDelegationConnector(s,ctx,this)»
			«IF Completion.isInstance(s)»
				«EXPAND m2t_transforms::delegator_class::DelegatorClass(s.javaName()+"Delegator") FOR this.requiredInterface__OperationRequiredRole»
				new «this.requiredInterface__OperationRequiredRole.implementationPackage()».delegates.«s.javaName()+"Delegator"»«this.requiredInterface__OperationRequiredRole.javaName()»
				(
			«ENDIF»
			«LET getRequiredDelegationConnector(s,ctx,this) AS connector»
				this.myContext.getRole«connector.outerRequiredRole_RequiredDelegationConnector.javaName()»()
	   		«ENDLET»
			«IF Completion.isInstance(s)»
				)
			«ENDIF»
	    «ELSE»
	        null
	    «ENDIF»
    «ENDIF»
«ENDDEFINE»