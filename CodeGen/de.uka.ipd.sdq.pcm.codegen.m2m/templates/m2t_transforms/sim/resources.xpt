«EXTENSION m2t_transforms::java_names»
«EXTENSION m2t_transforms::pcm»
«IMPORT repository»
«IMPORT seff::performance»
«IMPORT resourcetype»
«IMPORT resourceenvironment»

// ----------------------------
// Templates to generate simulated resources and resource environments
// ----------------------------

// Load the resource demand on a simulated resource
«DEFINE ResourceDemand FOR ParametricResourceDemand»
   {
      double demand = de.uka.ipd.sdq.simucomframework.variables.converter.NumberConverter.toDouble(ctx.evaluate("«this.specification_ParametericResourceDemand.specification.specificationString()»",Double.class));
      ctx.findResource(this.assemblyContextID).loadActiveResource(ctx.getThread(),"«this.requiredResource_ParametricResourceDemand.entityName»",demand);
   }
«ENDDEFINE»

// ----------------------------
// Templates for a simulated resource environment
// Generate a class which contains the model information
// and sets up simulated resources accordingly
// ----------------------------
«DEFINE ResourceEnvironmentRoot FOR resourceenvironment::ResourceEnvironment»
	«FILE "main/ResourceEnvironment.java"»
		package main;
		
		public class ResourceEnvironment implements de.uka.ipd.sdq.simucomframework.resources.IResourceContainerFactory {
			
			private static final ResourceEnvironment instance = new ResourceEnvironment();
			
			public static ResourceEnvironment getInstance() {
				return instance;
			}
		
		   «EXPAND ResourceContainerInit FOR this»
		}
	«ENDFILE»
«ENDDEFINE»

«DEFINE ResourceContainerInit FOR ResourceEnvironment»
	public String[] getResourceContainerIDList() {
		return new String[] { 
			«FOREACH this.resourceContainer_ResourceEnvironment AS rc SEPARATOR ","»
				"«rc.id»"
			«ENDFOREACH»
		};
	}

	public String[] getLinkingResourceContainerIDList() {
		return new String[] { 
			«FOREACH this.linkingResources AS rc SEPARATOR ","»
				"«rc.id»"
			«ENDFOREACH»
		};
	}
	
	public java.util.ArrayList<String> getFromResourceContainerID(String linkingResourceContainerID) {
		java.util.ArrayList<String> resultList = new java.util.ArrayList<String>();
		«FOREACH this.linkingResources AS rc»
			if(linkingResourceContainerID.equals("«rc.id»")) {
			«FOREACH rc.connectedResourceContainers.id AS id»
				resultList.add("«id»");
			«ENDFOREACH»
			}
		«ENDFOREACH»
		return resultList;
	}
	
	public java.util.ArrayList<String> getToResourceContainerID(String linkingResourceContainerID) {
		java.util.ArrayList<String> resultList = new java.util.ArrayList<String>();
		«FOREACH this.linkingResources AS rc»
			if (linkingResourceContainerID.equals("«rc.id»")) {
			«FOREACH rc.connectedResourceContainers.id AS id»
				resultList.add("«id»");
			«ENDFOREACH»
			}
		«ENDFOREACH»
		return resultList;
	}
	
	public String getLinkingResourceContainerID(String fromResourceContainerID, String toResourceContainerID) {
		for (String id: getLinkingResourceContainerIDList()) {
			if (getFromResourceContainerID(id).contains(fromResourceContainerID) && getToResourceContainerID(id).contains(toResourceContainerID)) {
				return id;
			}
		}
		return null;
	}
	
	public void fillResourceContainer(de.uka.ipd.sdq.simucomframework.resources.SimulatedResourceContainer rc) {
		«EXPAND ResourceContainerCase FOREACH this.resourceContainer_ResourceEnvironment SEPARATOR " else "»
		else
			throw new RuntimeException("Unknown resource container should be initialised. This should never happen");	
	}

	public void fillLinkingResourceContainer(de.uka.ipd.sdq.simucomframework.resources.SimulatedLinkingResourceContainer rc) {
		«EXPAND LinkingResourceCase FOREACH this.linkingResources SEPARATOR " else "»
		«IF this.linkingResources.size > 0»
		else
			throw new RuntimeException("Unknown resource container should be initialised. This should never happen");
		«ENDIF»	
	}

«ENDDEFINE»

«DEFINE ResourceContainerCase FOR ResourceContainer»
	if (rc.getResourceContainerID().equals("«this.id»")) {
		«EXPAND ActiveResourceAdd FOREACH this.activeResourceSpecifications_ResourceContainer»
		«REM» Refactor!
		«EXPAND PassiveResourceAdd FOREACH this.passiveResourceSpecifications_ResourceContainer»
		«ENDREM»
	}
«ENDDEFINE»

«DEFINE LinkingResourceCase FOR LinkingResource»
	if (rc.getResourceContainerID().equals("«this.id»")) {
		«EXPAND LinkingResourceAdd FOR this.communicationLinkResourceSpecifications»
	}
«ENDDEFINE»

«DEFINE LinkingResourceAdd FOR CommunicationLinkResourceSpecification»
	rc.addActiveResource(
		"«this.communicationLinkResourceType_CommunicationLinkResourceSpecification.entityName»",
		"«((LinkingResource)this.eContainer).entityName.specificationString()» [«this.communicationLinkResourceType_CommunicationLinkResourceSpecification.entityName»] <«((LinkingResource)this.eContainer).id»>",
		"«this.throughput_CommunicationLinkResourceSpecification.specification.specificationString()»",
		"«this.latency_CommunicationLinkResourceSpecification.specification.specificationString()»",
		«this.failureProbability»);
«ENDDEFINE»

«DEFINE ActiveResourceAdd FOR ProcessingResourceSpecification»
	rc.addActiveResource(
		"«this.activeResourceType_ActiveResourceSpecification.entityName»",
		"«((ResourceContainer)this.eContainer).entityName.specificationString()» [«this.activeResourceType_ActiveResourceSpecification.entityName»] <«((ResourceContainer)this.eContainer).id»>",
		"«this.processingRate_ProcessingResourceSpecification.specification.specificationString()»",
		«this.MTTF»,
		«this.MTTR»,
		"TODO: unit!",
		de.uka.ipd.sdq.simucomframework.resources.SchedulingStrategy.«this.schedulingPolicy»);
«ENDDEFINE»

«REM»TODO: Refactor
«DEFINE PassiveResourceAdd FOR PassiveResourceSpecification»
	rc.addPassiveResource(
		"«this.passiveResourceType_PassiveResourceSpecification.entityName»",
		«this.capacity»);
«ENDDEFINE»
«ENDREM»
