%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 1 492 80
%%HiResBoundingBox: 0.000000 1.000000 491.500000 80.000000
%%Title: LOGO_Uni-KA2005_schwarz_engl.eps
%%Creator: Adobe Illustrator(R) X
%%AI8_CreatorVersion: 10.0%AI9_PrintingDataBegin%%For: PuK
%%CreationDate: 8/5/2005
%%CropBox: 0 0 491.7442 79.7461
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI10"
%ADOEndClientInjection: DocumentHeader "AI10"
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)
%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.13 0)
%%+ procset Adobe_CoolType_Core (2.12 0)
%%+ procset Adobe_AGM_Core (2.0 0)
%%+ procset Adobe_AGM_Utils (1.0 0)
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%AI7_Thumbnail: 128 24 8
%%BeginData: 4418 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD05FFFD0BA8FD74FFA8FD0BFF7DFD72FF7DA87DA8A8A87DA8A8A8
%7DA8A8A852FD5FFFA8FD0BFFA8A8FFFFFF7DFD0EF85227FD0AFF7D52FFFF
%7D52FD05FF277DFD10FF7D27FF27FFFFF87D52FF7D7DFFFFFFF87DFF2727
%A8FD07FF527DFD0CFF527DFD0AFFA8277D7D527D52A852A8FFFF7DA8F8FF
%FFA8A8FD0DF852FFF852FD09FF527DFFFF527DA8FF7DA8FFA8A8A8FFFFA8
%FFA87D7DFFA8FF7DFFA87DFFFFA8FFF8FFFFFF7DFFFF5252FFFFFFF8A852
%27FFFFFF7DA8FFA8A87D7D52FFA8A8FFFFFD04A8FFFFA87D527DA8FFFF7D
%52FD04FF527DA85252277DA8F8A8FFFF52A8A8527DFF7DFD0CF852FFFFF8
%F852FD08FF7D52FFFF7D527DF852F8A8277D27A8A8F87DF827F8527DF827
%7D2727277D277DF87D7DF852F8A82727A8FFFFF827F8A8FFA82727F8527D
%F827527D7D2727527DF8277D27FF527D52F827F8A827F827F8FFFFFFF8FF
%FFFF527DFFFFF8A8FFFF27A8A827A8FFA8F8F8F87D7DA8A8A87DA8A87DFF
%FFFFF8F8F8FD08FF5252FFFF527D5252FFFD04527D527D527DF87D522752
%52FF7DF852A8A827FFF8FFA87D52F87D7D52FFFFFFF827277DFFFF7D7D27
%275252FF7D5252F852A8A827FF7D52FF7D527D52FF27A8F8525227A8FF7D
%F8FFFFFF7D52FFFFF8FD0427A8FFF87DFF7DF8F8F87DFD07FF7DFFFFFFF8
%F8F8FD08FF7D27FFFF52527D52FF527D277DA8F8F8A852F8FD047D52FFA8
%7D27F87D27FFF8FF52F8A8F8A8527DFFFFFFF87DA8F8A8A8F85252277D52
%FF527D7D7D27277D27FFA827FF527D527DFF277DF827A852FFFFA8F8FFFF
%FF527DFFFFF8A8FFFF27A8FFF8A8FFA8F8F8F8A8FD07FF7DFFFFFFF8F8F8
%FD08FFA827F827F8A8527DFF7D525252FF2727FFA8F827F87D527DFF52F8
%52F8A827FFF87D522752F87D7D27FFFFFFF8A8FF7DF8A8F852F852527DFF
%7D5252F827F8A827FFA8F82727527D52FF27A8FD0427FFFFFFF8FFFFFF7D
%52FFFFF8A8FFFF52A8FFF87DFF7DF8F8F87DFD07FF7DFFFFFFF8F8F8FD09
%FFA87D52FFFFA8A8FFA8A8A8FFFFA8A8FFFFA8527DFFA8A8FFA87D52FFA8
%A8FFFF7DFF7DA8A8A8FF7DA8FFFFA8A8FFFFA8A8FF7DFF7DA8A8FFA8A8A8
%7D7DA8A8A8FFFFA87DA8A8A8FFFFA8A8FF7D7DA8FFFFFF277DFFFF527DFF
%FFF8A8FFFF27A87D52A8FFA8F8F8F8A8FD07FF7DFFFFFFF8F8F8FD5CFF27
%FD0BFFA827A87DFF7DF8F8F87DFD07FF7DFFFFFFF8F8F8FD5CFFA8FD0CFF
%A8FFA8FFA8F8F8F8A8FD07FF7DFFFFFFF8F8F8FD6BFF7DFF7DF8F8F87DFD
%07FF7DFFFFFFF8F8F8FD08FFA8527DA8FD13FF7DFD04FF7DFFFF7DFFFFFF
%7DA8FD0BFFA87DFD0CFFA852FD0CFF7DFD06FFA8FFFFFF7DFFA87DA8FF7D
%A8FFA87DFFA8FFA8F8F8F8FD087D52FFFFFFF8F8F8FD08FF527D7D52FFA8
%A8FFA8A8FFFF7DFFA87DA8FF7DFFA8A87D527DFFFFFF27FF7D7DA87DA87D
%FD04A8FFA8A8FF7DFF7DFFA87D27A8A8FFA8FD07FF527DA8A8A8FFFFA8A8
%A87DFFA87D27FF7DFFFFA852A8FFFF52F8FF5252527D5227A827A8A87DFF
%7DF8F852FD0CFFF8F827FD08FF7D272752A82727A82727A8F827527D52F8
%7D277D27527DF8527DFFFF27FFA85227522752A8277D522727FD055227A8
%5227A827527DFFFFA8A8FFFFFF527D27525252A827A8F8527D2752275252
%F8A827527DFFFFA827FF52F827FFA827A8F8277DFFA8A8F852FD0DFFF852
%FD09FF52A8527D7D5227A827277D275252277DF8A852A852A87D7DA87DFF
%FF27FF52A827FF277DA852F8FFF87D277DA8A82727A87D27FF2727FD04FF
%7DFFFFFF52A827FF277DA827A87D52A827FF275252277D7D52A8FFFFFF52
%FF52FF27A827A8FF7DA827FFFF5252FD0EFF7DFD0AFF7DA8FF27A82752A8
%5227A852277D7D2752A87DFF5227A87DA87DFFFF7D2752A852FF527DA8A8
%52FF7D277D7DA8A82727A87D7D7DA852FD08FF7DA87D277D7D2727A87D7D
%A8522752A85252FF2752A8FFFFFF52FF7D27527D2727A85227A8FFFFFF52
%FD0DF87DFD3FFF27FD32FF27FD0BF87DFD74FF52FD09F87DFDFCFFFDF3FF
%FF
%%EndData
%%EndComments
% EPSF created by ps2eps 1.54
%%BeginProlog
save
countdictstack
mark
newpath
/showpage {} def
/setpagedevice {pop} def
%%EndProlog
%%Page 1 1
%ADOBeginClientInjection: DocumentProlog Start "AI10"
%ADOEndClientInjection: DocumentProlog Start "AI10"
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 60 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/bdict
{
	mark
}bdf
/edict
{
	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
}def
	
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup /Cyan eq{
						pop (_Cyan_)
					}{
						dup /Magenta eq{
							pop (_Magenta_)
						}{
							dup /Yellow eq{
								pop (_Yellow_)
							}{
								dup /Black eq{
									pop (_Black_)
								}{
									dup () cvn eq{
										pop (Process)
									}if
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	
	AGMUTIL_GSTATE_flt setflat
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/rdline
{
	currentfile AGMUTIL_str256 readline pop
} bdf
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/AGMUTIL_imagefile nd
/AGMUTIL_imbuf nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put
	exch
	load exec
}def
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf
		1 1 Height { 
			pop
			DataSource dup type /filetype eq{
				AGMUTIL_imbuf readstring pop
			}{
				exec
			} ifelse
			AGMUTIL_imagefile exch writestring
		}for
		true
	}ifelse
	end
}def
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		1 dict begin
		/flushbuffer Width cvi string def
		1 1 Height cvi
			{
			pop
			0 1 DataSource length 1 sub
				{
				DataSource exch get
				dup type dup 
				/filetype eq
					{
					exch flushbuffer readstring pop pop
					}if
				/arraytype eq
					{
					exec pop
					}if
				}for
			}for
		end
		}
		{
		/DataSource load type dup 
		/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 div mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		/arraytype eq
			{
			1 1 Height { pop DataSource pop } for
			}if
		}ifelse
	end
}bdf
/addprocs
{
     2{/exec load}repeat
     3 1 roll
     [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
    currentdict 2 index known{
    	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
	    addprocs /TransferFunction xdf 
	    currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 205 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_src256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_will_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/knockout_unitsq nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/stkpath_clp_npth
{
	strokepath clip newpath
} def
/stk_n_clp_npth
{
	gsave stroke grestore clip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
			
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
		
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp exch put
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	
	/AGMCORE_will_host_separate xdf
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
		
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 8 def
											
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/LeaveColorUnchanged eq
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
						currentgray 0 eq
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						Adobe_AGM_Core/AGMCORE_name xddf
						false
						currentpagedevice/OverrideSeparations known
							{
							currentpagedevice/OverrideSeparations get
								{
								/HqnSpots /ProcSet resourcestatus
									{
									pop pop pop true
									}if
								}if
							}if					
							{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
							}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace
							false
							currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
							not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				true exch
					{
					convert_spot_to_process and
					}
				forall
				}{
				false exch
					{
					convert_spot_to_process or
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	AGMCORE_host_sep AGMCORE_will_host_separate not and {
		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def
		AGMCORE_color_space_onhost_seps
	}if
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/clip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&clip /clip load put
			/clip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&clip
			}def
		}if
		/eoclip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put
			/eoclip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&eoclip
			}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	}def
	
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
		
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get dup /Separation eq
					{
						pop
						dup length array copy
						dup dup 1 get
						current_spot_alias
						{
							dup map_alias
							{
								begin
								/sep_colorspace_dict currentdict AGMCORE_gput
								pop pop	pop
									
								[ 
									/Separation Name 
									CSA map_csa
									dup /MappedCSA xdf 
									/sep_colorspace_proc load
								]
								dup Name
								end
							}if
						}if
						map_reserved_ink_name 1 exch put
					}{
						/DeviceN eq 
						{
							dup length array copy
							dup dup 1 get [ 
								exch {
									current_spot_alias{
										dup map_alias{
											/Name get exch pop
										}if
									}if
									map_reserved_ink_name
								} forall 
							] 1 exch put
						}if
					}ifelse
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				AGMCORE_&&&setcolorspace
			}def
		}if	
	}{
		
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		
		/n_color_components
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop 1
			}{
				/DeviceCMYK eq{
					4
				}{
					3
				}ifelse
			}ifelse
		} def
		
		/setcolor_devicecolor
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
	
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/spclp /stkpath_clp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/s /stroke ldf
	/sclp /stk_n_clp_npth ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/current_ink
{
	dup length 0 eq{
		pop true
	}{
		Adobe_AGM_Core/ink_result false put
		{
			dup /ProcessCyan eq{
				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf
			}{
				dup /ProcessMagenta eq{
					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf
				}{
					dup /ProcessYellow eq{
						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf
					}{
						dup /ProcessBlack eq{
							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf
						}{
							dup /sep_colorspace_dict AGMCORE_gget dup null eq{
								pop false ink_result or Adobe_AGM_Core/ink_result xddf
							}{
								/Name get eq{
									1 setsepcolor
									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf
								}{
									false ink_result or Adobe_AGM_Core/ink_result xddf
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			pop 
		} forall
		ink_result
	}ifelse
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
							}{
								Name inRip_spot_has_ink not
							}ifelse
							{
		 						/pop cvx 1
							}if
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		/MappedCSA CSA map_csa def
		AGMCORE_host_sep level2 not and{
			0 0 0 0 setcmykcolor
		}{
			[/Indexed MappedCSA 
			level2 not has_color not and{
				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
					pop [/DeviceGray]
				}if
				HiVal GrayLookup
			}{
				HiVal 
				currentdict/RangeArray known{
					{ 
						/indexed_colorspace_dict AGMCORE_gget begin
						Lookup exch 
						dup HiVal gt{
							pop HiVal
						}if
						NComponents mul NComponents getinterval {} forall
						NComponents 1 sub -1 0{
							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
							NComponents 1 roll
						}for
						end
					} bind
				}{
					Lookup
				}ifelse
			}ifelse
			] setcolorspace_opt
			
			set_crd
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor
	}{
		setcolor
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave 
		dup begin
		1 setgray
		0 0 ImageMatrix itransform 
		Width Height ImageMatrix idtransform rectfill 
		end
		grestore
		}if
	consumeimagedata
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/get_csd_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		Adobe_AGM_Core begin
		/AGMCORE_CSD_Name xdf
		AGMCORE_CSD_cache
		{
			dup /Name get AGMCORE_CSD_Name eq
			{
				exch pop exit
			}{
				pop
			}ifelse
			pop
		}forall
		end
	}if
}def
/cachepattern_level2
{
	4 dict begin
	/comparebuffer exch def
	/holdbuffer exch def
	/readbuffer 1024 string def
	/LZWFilter holdbuffer /LZWEncode filter def
	{
		currentfile readbuffer readline not
			{pop exit}
		if
		dup LZWFilter exch writestring
		LZWFilter (\n) writestring
		comparebuffer eq
			{exit}
		if
	}loop
	LZWFilter closefile
	end
}def
/cachepattern_level3
{
	3 dict begin
	/comparebuffer exch def
	/readbuffer 1024 string def
	/DoEOL false def
	{ 
		DoEOL
			{
			(\n)
			/DoEOL false def
			}
			{
			currentfile readbuffer readline not
				{pop ()}
				{
				dup length 0 eq
					{ pop(\n)}
					{
					dup comparebuffer eq
						{pop ()}
						{/DoEOL true def}
					ifelse
					}
				ifelse
				}
			ifelse
			}
		ifelse
	} /ReusableStreamDecode filter
	end
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
	}if
}def
/make_pattern
{
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
	makepattern
}def
/exec_file
	statusdict /currentfilenameextend known{
		{
			0 () /SubFileDecode filter cvx exec
		}
	}{
		
		{cvx exec}
	}ifelse
def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			false sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/AGMCORE_ctm_stack bdict
	/push_ctm {
		stack length size le{
			stack dup length 2 mul array 
			dup /stack exch def
			copy pop
		}if
		stack size 3 -1 roll put
		/size size 1 add def
	}
	/pop_ctm {
		/size size 1 sub def
		size 0 lt{ 
			/size 0 def
		}if
		stack size get
	}
	/stack 1 array
	/size 0 
edict 
def
/save_ctm
{
	matrix currentmatrix AGMCORE_ctm_stack begin 
		push_ctm 
	end
}def
/restore_ctm
{
	AGMCORE_ctm_stack begin
		pop_ctm 
	end
	setmatrix
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
/rdcmntline {
	currentfile AGMCORE_str256 readline pop
	(%) anchorsearch {pop} if
} def
/set_spot_alias_ary
{
	/AGMCORE_SpotAliasAry where{
		pop pop
	}{
		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
		true set_spot_alias
	}ifelse
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry{
				dup/Name get AGMCORE_name eq{
					save exch
					/Adobe_AGM_Core currentdict def
					/CSD get get_csd
					exch restore
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	
	Adobe_AGM_Core begin
	/setcustomcolor
	{
		
		dup /customcolor_tint exch AGMCORE_gput
		
		current_spot_alias{
			1 index 4 get map_alias{
				mark 3 1 roll
				setsepcolorspace
				counttomark 0 ne{
					setsepcolor
				}if
				pop
				pop
			}{
				AGMCORE_&setcustomcolor
			}ifelse
		}{
			AGMCORE_&setcustomcolor
		}ifelse
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		fill grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		currentdict /lw_initializepage known not
			{
			/lw_initializepage /initializepage load def
			/initializepage
				{
				lw_initializepage
				/initializepage {} def
				}def
			}if
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
}def
/driver_check_media_override
{
	Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
	{
		Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
	}if
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
end
systemdict /setpacking known
{
	setpacking
} if
userdict/Adobe_CoolType_Core 60 dict dup begin put/Level2? systemdict
/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?
not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def
/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dict
def}if currentpacking true setpacking/@_SaveStackLevels{Adobe_CoolType_Data
begin @opStackCountByLevel @opStackLevel 2 copy known not{2 copy 3 dict dup
/args 7 index 5 add array put put get}{get dup/args get dup length 3 index lt{
dup length 5 add array exch 1 index exch 0 exch putinterval 1 index exch/args
exch put}{pop}ifelse}ifelse begin count 2 sub 1 index lt{pop count 1 sub}if
dup/argCount exch def dup 0 gt{exch 1 index 2 add 1 roll args exch 0 exch
getinterval astore pop}{pop}ifelse count 1 sub/restCount exch def end
/@opStackLevel @opStackLevel 1 add def countdictstack 1 sub
@dictStackCountByLevel exch @dictStackLevel exch put/@dictStackLevel
@dictStackLevel 1 add def end}bind def/@_RestoreStackLevels{
Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub def
@opStackCountByLevel @opStackLevel get begin count restCount sub dup 0 gt{{pop
}repeat}{pop}ifelse args 0 argCount getinterval{}forall end/@dictStackLevel
@dictStackLevel 1 sub def @dictStackCountByLevel @dictStackLevel get end
countdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bind def
/@_PopStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub
def/@dictStackLevel @dictStackLevel 1 sub def end}bind def/@Raise{exch cvx
exch errordict exch get exec stop}bind def/@ReRaise{cvx $error/errorname get
errordict exch get exec stop}bind def/@Stopped{0 @#Stopped}bind def/@#Stopped{
@_SaveStackLevels stopped{@_RestoreStackLevels true}{@_PopStackLevels false}
ifelse}bind def/@Arg{Adobe_CoolType_Data begin @opStackCountByLevel
@opStackLevel 1 sub get/args get exch get end}bind def/doc_setup{
Adobe_CoolType_Core begin/mov/moveto load def/nfnt/newencodedfont load def
/mfnt/makefont load def/sfnt/setfont load def/ufnt/undefinefont load def/chp
/charpath load def/awsh/awidthshow load def/wsh/widthshow load def/ash/ashow
load def/sh/show load def end userdict/Adobe_CoolType_Data 6 dict dup begin
/AddWidths? false def/CC 0 def/charcode 2 string def/@opStackCountByLevel 32
dict def/@opStackLevel 0 def/@dictStackCountByLevel 32 dict def
/@dictStackLevel 0 def end put}bind def/doc_trailer{currentdict
Adobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}
bind def/page_trailer{end}bind def/unload{systemdict/languagelevel known{
systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{
undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck
{bind}if def}ifelse}def/findfont dup systemdict begin userdict begin
/globaldict where{/globaldict get begin}if dup where pop exch get/globaldict
where{pop end}if end end def/systemfindfont/findfont load def/undefinefont{pop
}ndf/copyfont{currentglobal 3 1 roll 1 index gcheck setglobal dup null eq{0}{
dup length}ifelse 2 index length add 1 add dict begin exch{1 index/FID eq{pop
pop}{def}ifelse}forall dup null eq{pop}{{def}forall}ifelse currentdict end
exch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal dup
length array copy exch setglobal}bind def/newencodedfont{currentglobal{
SharedFontDirectory 3 index known{SharedFontDirectory 3 index get
/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory
3 index get/FontReferenced known}{SharedFontDirectory 3 index known{
SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}
ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}
if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1
roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1
index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exch
dup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if def
currentdict end definefont pop}ifelse}bind def/SetSubstituteStrategy{
$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategies
known{exch $Strategies exch 2 copy known{get 2 copy maxlength exch maxlength
add dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init get
exec}if end/$Strategy exch def}{pop pop pop}ifelse}{pop pop}ifelse end}bind
def/scff{$SubstituteFont begin dup type/stringtype eq{dup length exch}{null}
ifelse/$sname exch def/$slen exch def end{findfont}@Stopped{dup length dup 21
add string dup 4 3 roll 0 exch 128 string cvs putinterval exch 1 index exch
(_was-malformed-so-was)putinterval cvn{findfont}@Stopped{pop/Courier findfont}
if}if $SubstituteFont begin/$sname null def/$slen 0 def end}bind def
/isWidthsOnlyFont{dup/WidthsOnly known{pop pop true}{dup/FDepVector known{
/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}{dup/FDArray known{
/FDArray get{isWidthsOnlyFont dup{exit}if}forall}{pop}ifelse}ifelse}ifelse}
bind def/?set{$SubstituteFont begin/$substituteFound false def/$fontname 4
index def/$doSmartSub false def end 3 index findfont $SubstituteFont begin
$substituteFound{false}{dup/FontName known{dup/FontName get $fontname eq 1
index/DistillerFauxFont known not and/currentdistillerparams where{pop false 2
index isWidthsOnlyFont not and}if}{false}ifelse}ifelse exch pop/$doSmartSub
true def end{exch pop exch pop exch 2 dict dup/Found 3 index put exch findfont
exch}{exch exec exch findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup
/FontName 4 index put copyfont definefont pop}bind def/?str1 256 string def
/?str2 256 string def/?add{1 index type/integertype eq{exch true 4 2}{false 3
1}ifelse roll 1 index findfont dup/Widths known{Adobe_CoolType_Data/AddWidths?
true put gsave dup 1000 scalefont setfont}if/Downloaded known{exec exch{exch
?str2 cvs exch findfont/Downloaded get 1 dict begin/Downloaded 1 index def
?str1 cvs length ?str1 1 index 1 add 3 index putinterval exch length 1 add 1
index add ?str1 2 index(*)putinterval ?str1 0 2 index getinterval cvn findfont
?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getinterval
cvn put dup/Downloaded Downloaded put end copyfont dup/FontName get exch
definefont pop pop pop}{pop}ifelse}{pop exch{findfont dup/Found get dup length
exch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index
?str2 cvs putinterval ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add
getinterval cvn 1 dict exch 1 index exch/FontName exch put copyfont dup
/FontName get exch definefont pop}{pop}ifelse}ifelse Adobe_CoolType_Data
/AddWidths? get{grestore Adobe_CoolType_Data/AddWidths? false put}if}bind def
/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont
/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloaded
known{moveto pop pop}{pop pop moveto}ifelse}bind def setpacking userdict
/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont dup $error exch 2
copy known{get}{pop pop{pop/Courier}bind}ifelse def/currentdistillerparams
where dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{
get/Error eq}{pop pop false}ifelse}if not{countdictstack array dictstack 0 get
begin userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128
string def/$slen 0 def/$sname null def/$match false def/$fontname null def
/$substituteFound false def/$doSmartSub true def/$depth 0 def/$fontname null
def/$italicangle 26.5 def/$dstack null def/$Strategies 10 dict dup begin
/$Type3Underprint{currentglobal exch false setglobal 11 dict begin/UseFont
exch $WMode 0 ne{dup length dict copy dup/WMode $WMode put/UseFont exch
definefont}if def/FontName $fontname dup type/stringtype eq{cvn}if def
/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/Encoding 256 array dup 0 1
255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]def/CCInfo 7 dict dup begin
/cc null def/x 0 def/y 0 def end def/BuildChar{exch begin CCInfo begin 1
string dup 0 3 index put exch pop/cc exch def UseFont 1000 scalefont setfont
cc stringwidth/y exch def/x exch def x y setcharwidth $SubstituteFont
/$Strategy get/$Underprint get exec 0 0 moveto cc show x y moveto end end}bind
def currentdict end exch setglobal}bind def/$GetaTint 2 dict dup begin
/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch def $fontname
exch dup/FontName known{dup/FontName get dup type/stringtype eq{cvn}if}{
/unnamedfont}ifelse exch $deepcopyfont exch 1 index exch/FontBasedOn exch put
dup/FontName $fontname dup type/stringtype eq{cvn}if put definefont}bind def
/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def 500 120 translate}
ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]setcolorspace}{0
setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120 sub x 10 div exch
moveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlineto closepath gsave
Level2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}forall pop
grestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{currentglobal
exch dup gcheck setglobal null copyfont begin/FontBasedOn currentdict/FontName
known{FontName dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse def/FontName
$fontname dup type/stringtype eq{cvn}if def/currentdistillerparams where{pop}{
/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dup
begin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dup
sin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}
ifelse FontName currentdict end definefont exch setglobal}bind def end def
/$None 1 dict dup begin/$BuildFont{}bind def end def end def/$Oblique
SetSubstituteStrategy/$findfontByEnum{dup type/stringtype eq{cvn}if dup
/$fontname exch def $sname null eq{$str cvs dup length $slen sub $slen
getinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exch
putinterval/$match false def $SubstituteFont/$dstack countdictstack array
dictstack put mark{$fontpat 0 $slen 7 add getinterval{/$match exch def exit}
$str filenameforall}stopped{cleardictstack currentdict true $SubstituteFont
/$dstack get{exch{1 index eq{pop false}{true}ifelse}{begin false}ifelse}forall
pop}if cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch pop
pop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin
/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5
/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]
def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]def
end def end def/$cmapname null def/$deepcopyfont{dup/FontType get 0 eq{1 dict
dup/FontName/copied put copyfont begin/FDepVector FDepVector copyarray 0 1 2
index length 1 sub{2 copy get $deepcopyfont dup/FontName/copied put/copied
exch definefont 3 copy put pop pop}for def currentdict end}{$Strategies
/$Type3Underprint get exec}ifelse}bind def/$buildfontname{length $str 1 index
(-)putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapname
length add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontname
exch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}
ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1
index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}
ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall
{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup
/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo get
dup/Registry get Registry eq exch/Ordering get Ordering eq and and{exch
restore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{
$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end end
currentdict/$error known currentdict/languagelevel known and dup{pop $error
/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{
/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin
/$substituteFound true def dup length $slen gt $sname null ne or $slen 0 gt
and{$sname null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{
$sname}ifelse dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMap
findresource/CIDSystemInfo get{def}forall $findfontByROS}{128 string cvs dup
(-)search{3 1 roll search{3 1 roll pop{dup cvi}stopped{pop pop pop pop pop
$findfontByEnum}{4 2 roll pop pop exch length exch 2 index length 2 index sub
exch 1 sub -1 0{$str cvs dup length 4 index 0 4 index 4 3 roll add getinterval
exch 1 index exch 3 index exch putinterval dup/CMap resourcestatus{pop pop 4 1
roll pop pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo get{
def}forall $findfontByROS true exit}{pop}ifelse}for dup type/booleantype eq{
pop}{pop pop $findfontByEnum}ifelse}ifelse}{pop pop pop $findfontByEnum}ifelse
}{pop pop $findfontByEnum}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0
def end}}{{$SubstituteFont begin/$substituteFound true def dup length $slen gt
$sname null ne or $slen 0 gt and{$findfontByEnum}{//SubstituteFont exec}ifelse
end}}ifelse bind readonly def Adobe_CoolType_Core/scfindfont/systemfindfont
load put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontName
known{dup/FontName get dup 3 index ne}{/noname true}ifelse dup{
/$origfontnamefound 2 index def/$origfontname 4 index def/$substituteFound
true def}if exch pop{$slen 0 gt $sname null ne 3 index length $slen gt or and{
pop dup $findfontByEnum findfont dup maxlength 1 add dict begin{1 index/FID eq
{pop pop}{def}ifelse}forall currentdict end definefont dup/FontName known{dup
/FontName get}{null}ifelse $origfontnamefound ne{$origfontname $str cvs print
( substitution revised, using )print dup/FontName known{dup/FontName get}{
(unspecified font)}ifelse $str cvs print(.
)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end end
Adobe_CoolType_Core/findfont{$SubstituteFont begin $depth 0 eq{/$fontname 1
index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if
/$depth $depth 1 add def end scfindfont $SubstituteFont begin/$depth $depth 1
sub def $substituteFound $depth 0 eq and $doSmartSub and{currentdict/$Strategy
known{$Strategy/$BuildFont get exec}if}if end}bind put}if end end
systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelse
exch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25
add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exch
def/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun known
not ct_Level2? and or def/ct_UseNativeCapability? systemdict/composefont known
def/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def
/ct_BuildCharDict 15 dict dup begin/charcode 2 string def/dst_string 1500
string def/nullstring()def/usewidths? true def end def ct_Level2?{setglobal}{
pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevel
known{pop/CIDFont findresource/GlyphDirectory get}{1 index/CIDFont
findresource/GlyphDirectory get dup type/dicttype eq{dup dup maxlength exch
length sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFont
findresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+
{systemdict/languagelevel known{currentglobal false setglobal 3 dict begin/vm
exch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vm
setglobal/gvm currentglobal def $ gcheck setglobal}if ?{$ begin}if}def/?{$
type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data
/AddWidths? known{currentdict Adobe_CoolType_Data begin begin AddWidths?{
Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcode
exch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256 mod put
stringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 3
1 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{
$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevel known{gvm
setglobal}if end}def/:{string currentfile exch readstring pop}executeonly def
end ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09
/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C
/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F
/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42
/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55
/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68
/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B
/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E
/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1
/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4
/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7
/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA
/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED
/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.001
0 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx exch
errordict exch get exec stop}bind def/ct_reraise{cvx $error/errorname get
(Error: )print dup(                    )cvs print errordict exch get exec stop
}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1 roll{2 index exch get exch 8
bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility
/ct_BuildCharDict get begin/dst_index 0 def dup dst_string length gt{dup
string/dst_string exch def}if 1 index ct_CID_STR_SIZE idiv/arrayIndex exch def
2 index arrayIndex get 2 index arrayIndex ct_CID_STR_SIZE mul sub{dup 3 index
add 2 index length le{2 index getinterval dst_string dst_index 2 index
putinterval length dst_index add/dst_index exch def exit}{1 index length 1
index sub dup 4 1 roll getinterval dst_string dst_index 2 index putinterval
pop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2
index dup length arrayIndex gt{arrayIndex get}{pop exit}ifelse 0}ifelse}loop
pop pop pop dst_string 0 dst_index getinterval end}bind def ct_Level2?{
/ct_resourcestatus currentglobal mark true setglobal{/unknowninstancename
/Category resourcestatus}stopped{cleartomark setglobal true}{cleartomark
currentglobal not exch setglobal}ifelse{{mark 3 1 roll/Category findresource
begin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecode
filter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}
ifelse}ifelse ct_Vars/vm get setglobal end}}{{resourcestatus}}ifelse bind def
/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal
/Generic/Category findresource dup length dict copy dup/InstanceType/dicttype
put/CIDFont exch/Category defineresource pop setglobal}ifelse
ct_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)
def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def
/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1
begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMap
defineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def
/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2
copy known{get dup dup maxlength exch length eq{dup length 10 add dict copy
ct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop
/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1
index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop
/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource
/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copy
known{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop
/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus
/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init
{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()
/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup
(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring
}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelse
load exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZE
le{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put
}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1
exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2
index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch
1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2
index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec pop
dup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop pop
false exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArray
get 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc
1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop pop
pop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 0
1 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index
2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin
/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{
ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin
/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{
currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end
/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def
/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSET
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{
exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exch
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 roll
GlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}
for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontName
currentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartData
ct_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSet
ct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop
/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInit
ct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSet
defineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def
/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSet
defineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index begin
CIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCode
exch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop
0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}
ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}
ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval
/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid
0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 roll
true charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}
def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidth
moveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aload
pop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}
ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{
currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dup
maxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}
{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def
/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1
dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdict
end/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup
/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring put
rootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfont
ct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{
currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidth
setlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDict
ct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dup
ct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}
ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private
3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869
internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Private
get mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse get
exec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def
/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get begin
ct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def
/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def
/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding
ct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11
dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def
/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load def
ct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def
/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def
/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def
/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def
/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string def
currentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def
/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dup
not{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WMode
exch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrix
matrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}if
def/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{
2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if array
def BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont
/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProc
known{CIDFont/CDevProc get/CDevProc exch def}if currentdict end
BaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVector
exch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 mul
def FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16
BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}
for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefont
setfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths get
begin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2
index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astore
def}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def
/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop pop
exch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName
3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}
bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMap
ct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind
def currentdict readonly pop end end
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 65 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/idximg /indexed_imageormask ldf
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				AGMIMG_&image
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get
		dup /DeviceGray eq{
			pop AGMCORE_black_plate not
		}{
			/DeviceCMYK eq{
				AGMCORE_is_cmyk_sep not
			}if
		}ifelse
	}{
		false
	}ifelse
}def
/imageormask
{
	begin
		SkipImageProc not{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					image
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					AGMCORE_host_sep{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
  	 						currentoverprint not{
  			 					1 AGMCORE_&setgray
  	 							knockout_image_samples
  			 					currentdict imageormask_sys
  			 				}{
  			 					currentdict ignoreimagedata
  			 				}ifelse
				 		}ifelse
					}{
						imagemask
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								MultipleDataSources{
									4 {pop} repeat
									/DataSource [
										DataSource 0 get /exec cvx
										DataSource 1 get /exec cvx
										DataSource 2 get /exec cvx
										DataSource 3 get /exec cvx
										/AGMCORE_get_ink_data cvx
									] cvx def
								}{
									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def
								}ifelse
	
								/Decode [ Decode 0 get Decode 1 get ] def
								/MultipleDataSources false def
								/NComponents 1 def
								/Operator /image def
								AGMCORE_is_cmyk_sep{
									currentoverprint InksUsed current_ink not and{
										currentdict consumeimagedata
									}{
										invert_image_samples
						 				1 AGMCORE_&setgray
										currentdict imageormask_sys
									}ifelse
								}{
										currentdict ignoreimagedata
								}ifelse
							}{
									
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								image
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentoverprint InksUsed current_ink not and{
								}{
									currentcolorspace overprint_plate not{
										knockout_unitsq
									}if
								}ifelse
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc not{
		save mark 
	
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentoverprint InksUsed current_ink not and{
						}{
							currentdict/ImageMatrix get concat
							knockout_unitsq
						}ifelse
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
							currentdict consumeimagedata 
 							currentoverprint not Name (All) eq or{
								gsave 
								knockout_unitsq
								grestore
		 					}if
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}if
	end
	end
}def
/imageormask_l2_overprint
{
	
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
		
						mark exch
						dup	dup dup
		
						
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
		
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
	
 		currentdict
 		AGMCORE_host_sep{
 			
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{
					knockout_unitsq
				}if
			}{
	 			AGMCORE_is_cmyk_sep{
					Operator /imagemask eq{
						imageormask_sys
					}{
						level2{
							indexed_image_lev2_sep
						}{
							indexed_image_lev1_sep
						}ifelse
					}ifelse
				}{
					currentoverprint not{
						knockout_image_samples
		 				imageormask_sys
		 			}{
		 				currentdict consumeimagedata
		 			}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				imageormask
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		
		currentcolorspace 
		dup 1 /DeviceGray put
		dup 3 [
			currentcolorspace 3 get 
			{
				exch 4 mul 4 getinterval {} forall
				AGMCORE_get_ink_data 255 div 1 exch sub
			} /exec cvx
		] cvx put
		setcolorspace
		
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			AGMIMG_&image
		}ifelse
			
	end end
}def
/OPIimage
{
	dup type /dicttype ne{
		10 dict begin
			/DataSource xdf
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/ImageType 1 def
			/Decode [0 1 def]
			currentdict
		end
	}if
	dup begin
		/NComponents 1 cdndf
		/MultipleDataSources false cdndf
		/SkipImageProc {false} cdndf
		/HostSepColorImage false cdndf
		/Decode [
				0 
				currentcolorspace 0 get /Indexed eq{
					2 BitsPerComponent exp 1 sub
				}{
					1
				}ifelse
		] cdndf
		/Operator /image cdndf
	end
	/sep_colorspace_dict AGMCORE_gget null eq{
		imageormask
	}{
		gsave
		dup begin invert_image_samples end
		sep_imageormask
		grestore
	}ifelse
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/InksUsed [] def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		bdict
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		edict
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		dup 4 get map_alias{
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
						
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
					
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%ADOBeginClientInjection: DocumentProlog End "AI10"
%ADOEndClientInjection: DocumentProlog End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%ADOBeginClientInjection: DocumentSetup Start "AI10"
%ADOEndClientInjection: DocumentSetup Start "AI10"
Adobe_AGM_Utils begin
2 2010 true Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
%ADOBeginClientInjection: DocumentSetup End "AI10"
%ADOEndClientInjection: DocumentSetup End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%ADOBeginClientInjection: PageSetup Start "AI10"
%ADOEndClientInjection: PageSetup Start "AI10"
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%ADOBeginClientInjection: PageSetup End "AI10"
%ADOEndClientInjection: PageSetup End "AI10"
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -79.7461 translate
[1 0 0 1 0 0 ]  concat
mark
/0 
[/DeviceGray] add_csa
/CSA /0 
/1 
[/DeviceCMYK] add_csa
/CSA /1 
/2 
[/DeviceRGB] add_csa
/CSA /2 
cleartomark
800 path_rez
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 79.7461 li
491.744 79.7461 li
491.744 0 li
clp
[1 0 0 1 0 0 ] concat
%ADOBeginClientInjection: BeginPageContent "AI10"
%ADOEndClientInjection: BeginPageContent "AI10"
.346191 57.6304 mo
11.3857 68.7056 li
23.1309 56.96 li
23.1309 23.1323 li
56.957 23.1323 li
68.7002 11.3862 li
57.5327 .346191 li
22.4731 .346191 li
.346191 22.4097 li
.346191 57.6304 li
false sop
0 0 0 0 cmyk
f
22.4731 79.7461 mo
57.5327 79.7461 li
79.7417 57.6304 li
79.7417 22.4097 li
68.7002 11.3862 li
56.957 23.1323 li
56.957 56.96 li
23.1309 56.96 li
11.3857 68.7056 li
22.4731 79.7461 li
0 0 0 1 cmyk
f
23.1309 56.96 mo
23.1309 23.1323 li
56.957 23.1323 li
56.957 56.96 li
23.1309 56.96 li
cp
11.3857 68.7056 mo
68.6616 68.666 li
68.7021 11.3867 li
11.3857 11.3867 li
11.3857 68.7056 li
0 0 0 0 cmyk
f
11.3857 68.7056 mo
23.1309 56.96 li
23.1309 23.1323 li
56.957 23.1323 li
68.7021 11.3867 li
11.3857 11.3867 li
11.3857 68.7056 li
0 0 0 1 cmyk
f
.6923 lw
0 lc
0 lj
3.8637 ml
[] 0 dsh
true sadj
68.4526 11.6284 mo
57.5327 .346191 li
22.4731 .346191 li
.346191 22.4097 li
.346191 57.6304 li
11.6328 68.4585 li
56.957 22.8154 mo
56.957 56.96 li
21.7573 56.96 li
0 0 0 1 cmyk
s
129.348 11.7129 mo
129.348 25.3882 li
129.348 27.5732 129.215 28.8979 128.752 30.0898 cv
128.023 31.9771 126.003 33.0039 123.023 33.0039 cv
120.375 33.0039 118.388 31.9111 117.626 30.0898 cv
117.196 28.9971 116.998 27.6064 116.998 25.3882 cv
116.998 11.7129 li
113.852 11.7129 li
113.852 25.4214 li
113.852 28.5337 114.083 29.8911 114.878 31.646 cv
116.136 34.3945 119.05 35.8184 123.321 35.8184 cv
127.195 35.8184 130.077 34.3281 131.434 31.646 cv
132.262 29.9907 132.494 28.6001 132.494 25.4214 cv
132.494 11.7129 li
129.348 11.7129 li
true sop
0 0 0 1 cmyk
f
137.185 35.4209 mo
140.099 35.4209 li
140.099 26.0503 li
140.099 24.4277 140.265 23.4014 140.695 22.5405 cv
141.357 21.249 142.946 20.3882 144.635 20.3882 cv
145.894 20.3882 147.02 20.8848 147.582 21.7456 cv
148.112 22.5405 148.245 23.1362 148.245 24.9907 cv
148.245 35.4209 li
151.158 35.4209 li
151.158 24.8584 li
151.158 22.1431 151.059 21.5806 150.396 20.3882 cv
149.536 18.832 147.582 17.8716 145.297 17.8716 cv
142.946 17.8716 141.059 18.832 139.867 20.686 cv
139.801 20.686 li
139.801 18.269 li
137.185 18.269 li
137.185 35.4209 li
0 0 0 1 cmyk
f
155.584 35.4209 mo
158.498 35.4209 li
158.498 18.269 li
155.584 18.269 li
155.584 35.4209 li
cp
155.584 15.0571 mo
158.498 15.0571 li
158.498 11.7129 li
155.584 11.7129 li
155.584 15.0571 li
0 0 0 1 cmyk
ef
168.123 35.4209 mo
170.838 35.4209 li
177.328 18.269 li
174.348 18.269 li
170.54 28.7324 li
170.01 30.1563 169.745 30.9175 169.48 32.0103 cv
169.415 32.0103 li
169.083 30.686 168.785 29.7256 168.354 28.5337 cv
164.679 18.269 li
161.6 18.269 li
168.123 35.4209 li
0 0 0 1 cmyk
f
191.566 29.8911 mo
190.705 32.3081 189.249 33.4009 187.03 33.4009 cv
184.017 33.4009 182.03 31.2158 181.832 27.5732 cv
194.646 27.5732 li
194.646 27.2422 194.679 26.9775 194.679 26.812 cv
194.679 21.3486 191.632 17.8716 186.864 17.8716 cv
181.931 17.8716 178.818 21.4146 178.818 26.9775 cv
178.818 32.5068 181.897 35.8184 187.03 35.8184 cv
190.937 35.8184 193.586 33.8647 194.546 30.2554 cv
191.566 29.8911 li
cp
181.997 25.1895 mo
182.196 22.2759 184.182 20.2559 186.864 20.2559 cv
188.752 20.2559 190.474 21.3813 191.136 23.0044 cv
191.434 23.6992 191.5 24.0308 191.599 25.1895 cv
181.997 25.1895 li
0 0 0 1 cmyk
ef
198.111 35.4209 mo
200.992 35.4209 li
200.992 26.4146 li
200.992 22.8384 202.151 20.8521 204.27 20.8521 cv
204.999 20.8521 205.693 21.0503 206.422 21.481 cv
207.415 18.7988 li
206.389 18.1699 205.462 17.8716 204.436 17.8716 cv
202.879 17.8716 201.952 18.6001 200.793 20.8521 cv
200.727 20.8521 li
200.727 18.269 li
198.111 18.269 li
198.111 35.4209 li
0 0 0 1 cmyk
f
208.829 30.2886 mo
209.491 34.0967 211.809 35.8184 216.18 35.8184 cv
220.252 35.8184 223.1 33.5669 223.1 30.3882 cv
223.1 28.4673 222.173 27.0767 220.417 26.3481 cv
219.491 25.9512 218.498 25.6196 216.146 24.9907 cv
212.57 24.0635 212.107 23.7656 212.107 22.4741 cv
212.107 21.0835 213.497 20.2559 215.815 20.2559 cv
218.067 20.2559 219.325 21.2158 219.59 23.0703 cv
222.438 22.6729 li
222.272 21.6465 222.173 21.3154 221.875 20.7192 cv
220.948 18.8652 218.729 17.8716 215.617 17.8716 cv
211.842 17.8716 209.292 19.8584 209.292 22.8052 cv
209.292 24.3618 210.087 25.7856 211.345 26.481 cv
212.272 27.0107 213.431 27.4409 215.285 27.9043 cv
217.206 28.3682 li
219.358 28.8979 220.087 29.4937 220.087 30.686 cv
220.087 32.3413 218.53 33.4341 216.146 33.4341 cv
213.531 33.4341 212.041 32.209 211.709 29.8579 cv
208.829 30.2886 li
0 0 0 1 cmyk
f
226.361 35.4209 mo
229.275 35.4209 li
229.275 18.269 li
226.361 18.269 li
226.361 35.4209 li
cp
226.361 15.0571 mo
229.275 15.0571 li
229.275 11.7129 li
226.361 11.7129 li
226.361 15.0571 li
0 0 0 1 cmyk
ef
240.423 32.8052 mo
239.86 32.9043 239.529 32.9375 239.165 32.9375 cv
237.808 32.9375 237.509 32.5068 237.509 30.5532 cv
237.509 20.521 li
240.423 20.521 li
240.423 18.269 li
237.509 18.269 li
237.509 12.2427 li
234.596 13.9976 li
234.596 18.269 li
232.477 18.269 li
232.477 20.521 li
234.596 20.521 li
234.596 30.3882 li
234.596 32.6396 234.629 32.9707 234.927 33.7651 cv
235.391 34.9907 236.715 35.6528 238.635 35.6528 cv
239.397 35.6528 239.927 35.5864 240.854 35.3877 cv
240.423 32.8052 li
0 0 0 1 cmyk
f
246.307 14.8916 mo
249.353 14.8916 li
249.353 11.5806 li
246.307 11.5806 li
246.307 14.8916 li
cp
252.366 14.8916 mo
255.379 14.8916 li
255.379 11.5806 li
252.366 11.5806 li
252.366 14.8916 li
cp
258.724 35.4209 mo
258.326 34.7256 258.193 34.4277 258.028 33.666 cv
257.829 32.6729 257.796 32.0435 257.796 28.2358 cv
257.796 24.3286 li
257.796 22.1763 257.729 21.6797 257.366 20.7524 cv
256.67 18.8652 254.484 17.8716 251.107 17.8716 cv
247.697 17.8716 245.346 18.8979 244.154 20.9512 cv
243.79 21.5806 243.658 21.9775 243.393 23.1694 cv
246.24 23.5337 li
246.869 21.0835 247.962 20.2559 250.71 20.2559 cv
253.624 20.2559 254.85 21.3154 254.85 23.7656 cv
254.85 24.5273 li
253.757 24.8911 251.936 25.2559 249.65 25.5205 cv
248.161 25.686 247.73 25.7856 247.002 25.9839 cv
244.386 26.7124 242.896 28.5337 242.896 30.8848 cv
242.896 33.8979 245.181 35.8184 248.757 35.8184 cv
251.107 35.8184 253.028 35.0566 255.081 33.3018 cv
255.181 34.1958 255.346 34.7588 255.677 35.4209 cv
258.724 35.4209 li
cp
254.85 27.8716 mo
254.85 29.9243 254.552 30.9175 253.591 31.9111 cv
252.631 32.9375 251.107 33.5337 249.485 33.5337 cv
247.333 33.5337 246.008 32.4741 246.008 30.8184 cv
246.008 29.0635 247.035 28.335 250.081 27.9043 cv
252.101 27.6064 253.855 27.2095 254.85 26.812 cv
254.85 27.8716 li
0 0 0 1 cmyk
ef
269.01 32.8052 mo
268.447 32.9043 268.116 32.9375 267.752 32.9375 cv
266.395 32.9375 266.097 32.5068 266.097 30.5532 cv
266.097 20.521 li
269.01 20.521 li
269.01 18.269 li
266.097 18.269 li
266.097 12.2427 li
263.183 13.9976 li
263.183 18.269 li
261.063 18.269 li
261.063 20.521 li
263.183 20.521 li
263.183 30.3882 li
263.183 32.6396 263.215 32.9707 263.514 33.7651 cv
263.977 34.9907 265.302 35.6528 267.222 35.6528 cv
267.983 35.6528 268.514 35.5864 269.44 35.3877 cv
269.01 32.8052 li
0 0 0 1 cmyk
f
281.372 35.4209 mo
284.484 35.4209 li
284.484 27.2095 li
288.392 23.4346 li
296.802 35.4209 li
300.941 35.4209 li
290.577 21.3154 li
300.511 11.7129 li
296.272 11.7129 li
284.484 23.4678 li
284.484 11.7129 li
281.372 11.7129 li
281.372 35.4209 li
0 0 0 1 cmyk
f
317.927 35.4209 mo
317.53 34.7256 317.397 34.4277 317.231 33.666 cv
317.033 32.6729 317 32.0435 317 28.2358 cv
317 24.3286 li
317 22.1763 316.934 21.6797 316.569 20.7524 cv
315.874 18.8652 313.688 17.8716 310.312 17.8716 cv
306.901 17.8716 304.55 18.8979 303.357 20.9512 cv
302.994 21.5806 302.861 21.9775 302.597 23.1694 cv
305.444 23.5337 li
306.073 21.0835 307.166 20.2559 309.914 20.2559 cv
312.828 20.2559 314.053 21.3154 314.053 23.7656 cv
314.053 24.5273 li
312.96 24.8911 311.139 25.2559 308.854 25.5205 cv
307.364 25.686 306.935 25.7856 306.205 25.9839 cv
303.59 26.7124 302.1 28.5337 302.1 30.8848 cv
302.1 33.8979 304.385 35.8184 307.961 35.8184 cv
310.312 35.8184 312.232 35.0566 314.285 33.3018 cv
314.384 34.1958 314.55 34.7588 314.881 35.4209 cv
317.927 35.4209 li
cp
314.053 27.8716 mo
314.053 29.9243 313.755 30.9175 312.795 31.9111 cv
311.835 32.9375 310.312 33.5337 308.688 33.5337 cv
306.537 33.5337 305.212 32.4741 305.212 30.8184 cv
305.212 29.0635 306.239 28.335 309.285 27.9043 cv
311.305 27.6064 313.06 27.2095 314.053 26.812 cv
314.053 27.8716 li
0 0 0 1 cmyk
ef
321.228 35.4209 mo
324.107 35.4209 li
324.107 26.4146 li
324.107 22.8384 325.267 20.8521 327.386 20.8521 cv
328.114 20.8521 328.81 21.0503 329.538 21.481 cv
330.531 18.7988 li
329.505 18.1699 328.578 17.8716 327.551 17.8716 cv
325.995 17.8716 325.068 18.6001 323.909 20.8521 cv
323.843 20.8521 li
323.843 18.269 li
321.228 18.269 li
321.228 35.4209 li
0 0 0 1 cmyk
f
332.772 35.4209 mo
335.653 35.4209 li
335.653 11.7129 li
332.772 11.7129 li
332.772 35.4209 li
0 0 0 1 cmyk
f
338.705 30.2886 mo
339.367 34.0967 341.686 35.8184 346.057 35.8184 cv
350.129 35.8184 352.977 33.5669 352.977 30.3882 cv
352.977 28.4673 352.049 27.0767 350.295 26.3481 cv
349.367 25.9512 348.374 25.6196 346.023 24.9907 cv
342.447 24.0635 341.983 23.7656 341.983 22.4741 cv
341.983 21.0835 343.374 20.2559 345.691 20.2559 cv
347.943 20.2559 349.201 21.2158 349.467 23.0703 cv
352.314 22.6729 li
352.148 21.6465 352.049 21.3154 351.751 20.7192 cv
350.824 18.8652 348.605 17.8716 345.493 17.8716 cv
341.719 17.8716 339.169 19.8584 339.169 22.8052 cv
339.169 24.3618 339.964 25.7856 341.222 26.481 cv
342.149 27.0107 343.308 27.4409 345.162 27.9043 cv
347.083 28.3682 li
349.235 28.8979 349.963 29.4937 349.963 30.686 cv
349.963 32.3413 348.407 33.4341 346.023 33.4341 cv
343.407 33.4341 341.917 32.209 341.586 29.8579 cv
338.705 30.2886 li
0 0 0 1 cmyk
f
356.388 35.4209 mo
359.268 35.4209 li
359.268 26.4146 li
359.268 22.8384 360.427 20.8521 362.546 20.8521 cv
363.274 20.8521 363.97 21.0503 364.698 21.481 cv
365.691 18.7988 li
364.665 18.1699 363.738 17.8716 362.712 17.8716 cv
361.155 17.8716 360.229 18.6001 359.069 20.8521 cv
359.003 20.8521 li
359.003 18.269 li
356.388 18.269 li
356.388 35.4209 li
0 0 0 1 cmyk
f
379.588 35.4209 mo
382.171 35.4209 li
382.171 18.269 li
379.29 18.269 li
379.29 27.4409 li
379.29 29.2954 379.124 30.123 378.694 31.0171 cv
378.064 32.3745 376.442 33.3018 374.754 33.3018 cv
373.131 33.3018 371.84 32.4741 371.442 31.1826 cv
371.178 30.355 371.178 30.0898 371.178 27.772 cv
371.178 18.269 li
368.264 18.269 li
368.264 28.8979 li
368.264 31.4805 368.363 32.0767 369.059 33.3018 cv
369.887 34.8247 371.906 35.8184 374.091 35.8184 cv
376.409 35.8184 378.264 34.8247 379.521 32.9043 cv
379.588 32.9043 li
379.588 35.4209 li
0 0 0 1 cmyk
f
386.149 35.4209 mo
389.03 35.4209 li
389.03 26.0171 li
389.03 24.229 389.229 23.3354 389.759 22.4409 cv
390.454 21.2158 392.01 20.3882 393.566 20.3882 cv
394.758 20.3882 395.917 20.8848 396.514 21.6465 cv
397.01 22.2759 397.209 23.1694 397.209 24.5601 cv
397.209 35.4209 li
400.123 35.4209 li
400.123 24.5601 li
400.123 22.4409 399.924 21.3154 399.328 20.2891 cv
398.467 18.7988 396.48 17.8716 394.229 17.8716 cv
392.076 17.8716 390.421 18.6333 389.03 20.2227 cv
389.03 11.7129 li
386.149 11.7129 li
386.149 35.4209 li
0 0 0 1 cmyk
f
416.138 29.8911 mo
415.276 32.3081 413.819 33.4009 411.602 33.4009 cv
408.588 33.4009 406.602 31.2158 406.402 27.5732 cv
419.217 27.5732 li
419.217 27.2422 419.25 26.9775 419.25 26.812 cv
419.25 21.3486 416.203 17.8716 411.436 17.8716 cv
406.502 17.8716 403.39 21.4146 403.39 26.9775 cv
403.39 32.5068 406.469 35.8184 411.602 35.8184 cv
415.509 35.8184 418.157 33.8647 419.117 30.2554 cv
416.138 29.8911 li
cp
406.568 25.1895 mo
406.767 22.2759 408.754 20.2559 411.436 20.2559 cv
413.323 20.2559 415.045 21.3813 415.707 23.0044 cv
416.005 23.6992 416.071 24.0308 416.171 25.1895 cv
406.568 25.1895 li
0 0 0 1 cmyk
ef
437.902 42.374 mo
436.942 40.8511 436.578 40.2222 435.816 38.5664 cv
433.896 34.4604 433.068 30.8516 433.068 26.8452 cv
433.068 24.9575 433.267 23.0371 433.664 21.1831 cv
434.459 17.5737 434.923 16.2822 437.704 11.647 cv
437.902 11.3159 li
435.816 11.3159 li
435.022 12.3423 434.757 12.7725 434.028 13.9644 cv
431.247 18.501 430.055 22.3418 430.055 26.812 cv
430.055 31.2158 431.214 35.0234 433.93 39.5933 cv
434.724 40.9502 434.988 41.3481 435.816 42.374 cv
437.902 42.374 li
0 0 0 1 cmyk
f
447.594 38.0283 mo
450.739 38.0283 li
450.739 17.1348 li
458.587 17.1348 li
458.587 14.3203 li
439.813 14.3203 li
439.813 17.1348 li
447.594 17.1348 li
447.594 38.0283 li
0 0 0 1 cmyk
f
461.953 38.0283 mo
465.099 38.0283 li
465.099 26.8696 li
477.417 26.8696 li
477.417 38.0283 li
480.563 38.0283 li
480.563 14.3203 li
477.417 14.3203 li
477.417 24.0552 li
465.099 24.0552 li
465.099 14.3203 li
461.953 14.3203 li
461.953 38.0283 li
0 0 0 1 cmyk
f
485.982 42.374 mo
486.811 41.3481 487.075 40.9502 487.87 39.5933 cv
490.585 35.0234 491.744 31.2158 491.744 26.8452 cv
491.777 22.3418 490.552 18.501 487.771 13.9644 cv
487.042 12.7725 486.777 12.3423 485.982 11.3159 cv
483.896 11.3159 li
484.095 11.647 li
485.056 13.2363 485.618 14.3286 485.916 14.9248 cv
487.737 18.5669 488.73 22.7393 488.73 26.8452 cv
488.73 30.8516 487.903 34.4604 485.982 38.5664 cv
485.221 40.2222 484.856 40.8511 483.896 42.374 cv
485.982 42.374 li
0 0 0 1 cmyk
f
113.688 67.75 mo
113.688 52.7188 li
120.335 52.7188 li
121.667 52.7188 122.68 52.854 123.373 53.1235 cv
124.066 53.3936 124.62 53.8701 125.034 54.5532 cv
125.449 55.2363 125.656 55.9912 125.656 56.8174 cv
125.656 57.8833 125.313 58.7817 124.626 59.5127 cv
123.94 60.2437 122.88 60.708 121.447 60.9063 cv
121.972 61.1587 122.371 61.4077 122.644 61.6528 cv
123.223 62.1851 123.77 62.8525 124.285 63.6563 cv
126.874 67.75 li
124.392 67.75 li
122.415 64.6206 li
121.837 63.7178 121.361 63.0269 120.988 62.5479 cv
120.614 62.0693 120.279 61.7329 119.984 61.5396 cv
119.688 61.3462 119.388 61.2114 119.082 61.1353 cv
118.857 61.0869 118.491 61.0625 117.981 61.0625 cv
115.688 61.0625 li
115.688 67.75 li
113.688 67.75 li
cp
115.688 59.3438 mo
119.938 59.3438 li
120.841 59.3438 121.545 59.25 122.05 59.062 cv
122.554 58.8745 122.938 58.5737 123.2 58.1606 cv
123.462 57.7476 123.594 57.2983 123.594 56.8135 cv
123.594 56.1035 123.339 55.5195 122.83 55.0615 cv
122.32 54.604 121.516 54.375 120.417 54.375 cv
115.688 54.375 li
115.688 59.3438 li
false sop
0 0 0 1 cmyk
f
137.175 64.2188 mo
139.072 64.4688 li
138.771 65.5879 138.214 66.4561 137.401 67.0737 cv
136.588 67.6914 135.55 68 134.287 68 cv
132.695 68 131.433 67.5088 130.5 66.5254 cv
129.567 65.5425 129.102 64.1636 129.102 62.3892 cv
129.102 60.5532 129.573 59.1284 130.516 58.1147 cv
131.458 57.1011 132.681 56.5938 134.184 56.5938 cv
135.639 56.5938 136.827 57.0918 137.75 58.0869 cv
138.671 59.082 139.133 60.4824 139.133 62.2871 cv
139.133 62.397 139.129 62.5615 139.123 62.7813 cv
131.008 62.7813 li
131.076 63.9731 131.415 64.8857 132.023 65.519 cv
132.632 66.1523 133.392 66.4688 134.302 66.4688 cv
134.979 66.4688 135.557 66.29 136.036 65.9321 cv
136.514 65.5747 136.894 65.0034 137.175 64.2188 cv
cp
131.102 61.25 mo
137.195 61.25 li
137.113 60.335 136.88 59.6484 136.497 59.1904 cv
135.907 58.4805 135.144 58.125 134.205 58.125 cv
133.355 58.125 132.641 58.4087 132.062 58.9756 cv
131.483 59.5425 131.163 60.3008 131.102 61.25 cv
0 0 0 1 cmyk
f
141.811 64.4688 mo
143.624 64.2188 li
143.726 64.9453 144.01 65.502 144.478 65.8887 cv
144.945 66.2754 145.599 66.4688 146.438 66.4688 cv
147.284 66.4688 147.912 66.2969 148.322 65.9521 cv
148.731 65.6079 148.936 65.2041 148.936 64.7402 cv
148.936 64.3242 148.756 63.9971 148.397 63.7583 cv
148.146 63.5947 147.521 63.3867 146.52 63.1343 cv
145.171 62.7915 144.236 62.4951 143.714 62.2446 cv
143.192 61.9946 142.797 61.6484 142.527 61.2061 cv
142.258 60.7642 142.124 60.2759 142.124 59.7407 cv
142.124 59.2539 142.234 58.8032 142.456 58.3882 cv
142.678 57.9736 142.98 57.6294 143.362 57.355 cv
143.648 57.1426 144.039 56.9624 144.534 56.8149 cv
145.029 56.6675 145.56 56.5938 146.126 56.5938 cv
146.979 56.5938 147.728 56.7173 148.373 56.9639 cv
149.018 57.2104 149.494 57.5444 149.801 57.9658 cv
150.108 58.3872 150.32 58.9507 150.436 59.6563 cv
148.624 59.9063 li
148.542 59.3467 148.305 58.9102 147.914 58.5962 cv
147.522 58.2822 146.969 58.125 146.254 58.125 cv
145.409 58.125 144.807 58.2651 144.446 58.5444 cv
144.085 58.8237 143.905 59.1509 143.905 59.5259 cv
143.905 59.7642 143.979 59.979 144.129 60.1699 cv
144.279 60.3677 144.514 60.5313 144.834 60.6606 cv
145.018 60.729 145.559 60.8857 146.458 61.1309 cv
147.759 61.4805 148.667 61.7671 149.184 61.9897 cv
149.701 62.2124 150.106 62.5366 150.401 62.9614 cv
150.695 63.3862 150.842 63.9141 150.842 64.5449 cv
150.842 65.1621 150.663 65.7432 150.305 66.2881 cv
149.946 66.833 149.429 67.2549 148.753 67.5527 cv
148.078 67.8506 147.313 68 146.46 68 cv
145.047 68 143.97 67.7031 143.229 67.1094 cv
142.488 66.5156 142.016 65.6357 141.811 64.4688 cv
0 0 0 1 cmyk
f
161.664 64.2188 mo
163.561 64.4688 li
163.26 65.5879 162.704 66.4561 161.891 67.0737 cv
161.078 67.6914 160.04 68 158.776 68 cv
157.184 68 155.922 67.5088 154.989 66.5254 cv
154.057 65.5425 153.591 64.1636 153.591 62.3892 cv
153.591 60.5532 154.062 59.1284 155.005 58.1147 cv
155.947 57.1011 157.17 56.5938 158.673 56.5938 cv
160.128 56.5938 161.316 57.0918 162.239 58.0869 cv
163.161 59.082 163.622 60.4824 163.622 62.2871 cv
163.622 62.397 163.619 62.5615 163.612 62.7813 cv
155.497 62.7813 li
155.565 63.9731 155.904 64.8857 156.513 65.519 cv
157.122 66.1523 157.881 66.4688 158.791 66.4688 cv
159.468 66.4688 160.046 66.29 160.525 65.9321 cv
161.003 65.5747 161.383 65.0034 161.664 64.2188 cv
cp
155.591 61.25 mo
161.685 61.25 li
161.602 60.335 161.369 59.6484 160.986 59.1904 cv
160.396 58.4805 159.633 58.125 158.694 58.125 cv
157.845 58.125 157.13 58.4087 156.551 58.9756 cv
155.972 59.5425 155.652 60.3008 155.591 61.25 cv
0 0 0 1 cmyk
f
174.144 66.375 mo
173.469 66.9692 172.813 67.3887 172.178 67.6333 cv
171.543 67.8774 170.861 68 170.134 68 cv
168.932 68 168.008 67.7065 167.362 67.1196 cv
166.717 66.5327 166.394 65.7827 166.394 64.8696 cv
166.394 64.3345 166.516 63.8452 166.76 63.4023 cv
167.003 62.96 167.323 62.6045 167.718 62.3369 cv
168.113 62.0693 168.558 61.8667 169.053 61.729 cv
169.417 61.6333 169.966 61.5405 170.701 61.4512 cv
172.198 61.2725 173.301 61.0596 174.009 60.8125 cv
174.016 60.5605 174.019 60.4004 174.019 60.332 cv
174.019 59.583 173.844 59.0552 173.496 58.7485 cv
173.023 58.333 172.322 58.125 171.393 58.125 cv
170.523 58.125 169.882 58.2769 169.468 58.5796 cv
169.054 58.8823 168.749 59.4185 168.55 60.1875 cv
166.707 59.9375 li
166.871 59.1675 167.142 58.5454 167.519 58.0718 cv
167.896 57.5981 168.441 57.2334 169.155 56.9775 cv
169.868 56.7217 170.695 56.5938 171.634 56.5938 cv
172.567 56.5938 173.325 56.7031 173.908 56.9214 cv
174.491 57.1396 174.919 57.4141 175.194 57.7451 cv
175.468 58.0762 175.66 58.4937 175.77 58.9985 cv
175.832 59.3125 175.863 59.8818 175.863 60.7065 cv
175.863 63.1807 li
175.863 64.9058 175.9 65.9946 175.976 66.4478 cv
176.052 66.9009 176.202 67.335 176.425 67.75 cv
174.519 67.75 li
174.325 67.3584 174.2 66.8999 174.144 66.375 cv
cp
174.019 62.25 mo
173.343 62.5264 172.33 62.7617 170.979 62.9551 cv
170.213 63.0654 169.672 63.1899 169.355 63.3281 cv
169.038 63.4668 168.793 63.6689 168.621 63.9346 cv
168.449 64.2007 168.363 64.4961 168.363 64.8208 cv
168.363 65.3188 168.55 65.7334 168.925 66.0649 cv
169.3 66.397 169.849 66.5625 170.572 66.5625 cv
171.287 66.5625 171.923 66.4063 172.481 66.0933 cv
173.039 65.7808 173.448 65.3506 173.709 64.8037 cv
173.909 64.3818 174.009 63.7588 174.009 62.9351 cv
174.019 62.25 li
0 0 0 1 cmyk
f
179.853 67.75 mo
179.853 56.8438 li
181.509 56.8438 li
181.509 58.4897 li
181.929 57.7178 182.317 57.209 182.673 56.9629 cv
183.029 56.7168 183.42 56.5938 183.847 56.5938 cv
184.464 56.5938 185.091 56.793 185.728 57.1914 cv
185.081 58.8853 li
184.638 58.6284 184.194 58.5 183.751 58.5 cv
183.354 58.5 182.998 58.6216 182.683 58.8647 cv
182.367 59.1079 182.141 59.4453 182.004 59.877 cv
181.799 60.5352 181.697 61.2544 181.697 62.0356 cv
181.697 67.75 li
179.853 67.75 li
0 0 0 1 cmyk
f
195.126 63.75 mo
196.939 64 li
196.741 65.2515 196.234 66.231 195.419 66.9385 cv
194.604 67.6465 193.602 68 192.415 68 cv
190.927 68 189.731 67.5122 188.827 66.5356 cv
187.922 65.5596 187.47 64.1602 187.47 62.3379 cv
187.47 61.1597 187.664 60.1289 188.053 59.2451 cv
188.441 58.3613 189.032 57.6987 189.826 57.2568 cv
190.62 56.8149 191.484 56.5938 192.417 56.5938 cv
193.596 56.5938 194.561 56.895 195.31 57.4971 cv
196.06 58.0996 196.54 58.9546 196.751 60.0625 cv
194.97 60.3125 li
194.8 59.5869 194.499 59.0405 194.066 58.6743 cv
193.634 58.3081 193.112 58.125 192.5 58.125 cv
191.574 58.125 190.822 58.4585 190.244 59.1245 cv
189.666 59.791 189.376 60.8452 189.376 62.2866 cv
189.376 63.749 189.655 64.8115 190.214 65.4746 cv
190.772 66.1377 191.5 66.4688 192.399 66.4688 cv
193.121 66.4688 193.724 66.2466 194.207 65.8022 cv
194.69 65.3579 194.997 64.6738 195.126 63.75 cv
0 0 0 1 cmyk
f
199.656 67.75 mo
199.656 52.7188 li
201.5 52.7188 li
201.5 58.0947 li
202.362 57.0942 203.45 56.5938 204.764 56.5938 cv
205.572 56.5938 206.273 56.7534 206.868 57.0718 cv
207.463 57.3901 207.889 57.8301 208.146 58.3916 cv
208.403 58.9531 208.531 59.7681 208.531 60.8364 cv
208.531 67.75 li
206.688 67.75 li
206.688 60.8374 li
206.688 59.9131 206.487 59.2402 206.086 58.8193 cv
205.686 58.3984 205.119 58.1875 204.386 58.1875 cv
203.838 58.1875 203.323 58.3296 202.84 58.6138 cv
202.357 58.8979 202.013 59.2832 201.808 59.7695 cv
201.603 60.2559 201.5 60.9268 201.5 61.7822 cv
201.5 67.75 li
199.656 67.75 li
0 0 0 1 cmyk
f
229.574 52.7188 mo
231.574 52.7188 li
231.574 61.3994 li
231.574 62.9097 231.403 64.1089 231.063 64.9971 cv
230.722 65.8857 230.107 66.6084 229.218 67.165 cv
228.33 67.7217 227.163 68 225.719 68 cv
224.315 68 223.167 67.7573 222.275 67.2725 cv
221.383 66.7871 220.746 66.085 220.365 65.166 cv
219.983 64.2471 219.792 62.9917 219.792 61.3994 cv
219.792 52.7188 li
221.792 52.7188 li
221.792 61.3975 li
221.792 62.7036 221.913 63.666 222.153 64.2852 cv
222.394 64.9043 222.808 65.3813 223.395 65.7163 cv
223.981 66.0513 224.698 66.2188 225.546 66.2188 cv
226.997 66.2188 228.031 65.8872 228.648 65.2236 cv
229.265 64.5605 229.574 63.2852 229.574 61.3975 cv
229.574 52.7188 li
0 0 0 1 cmyk
f
235.8 67.75 mo
235.8 56.8438 li
237.457 56.8438 li
237.457 58.3921 li
238.26 57.1934 239.42 56.5938 240.937 56.5938 cv
241.596 56.5938 242.202 56.7119 242.754 56.9482 cv
243.307 57.1846 243.721 57.4946 243.996 57.8779 cv
244.27 58.2617 244.462 58.7168 244.572 59.2441 cv
244.641 59.5869 244.675 60.186 244.675 61.042 cv
244.675 67.75 li
242.832 67.75 li
242.832 61.1074 li
242.832 60.3535 242.759 59.79 242.615 59.4165 cv
242.47 59.043 242.214 58.7446 241.847 58.522 cv
241.479 58.2993 241.047 58.1875 240.552 58.1875 cv
239.761 58.1875 239.079 58.438 238.505 58.938 cv
237.931 59.4385 237.644 60.3877 237.644 61.7861 cv
237.644 67.75 li
235.8 67.75 li
0 0 0 1 cmyk
f
248.666 54.8125 mo
248.666 52.7188 li
250.51 52.7188 li
250.51 54.8125 li
248.666 54.8125 li
cp
248.666 67.75 mo
248.666 56.8438 li
250.51 56.8438 li
250.51 67.75 li
248.666 67.75 li
0 0 0 1 cmyk
f
257.47 67.75 mo
253.33 56.8438 li
255.302 56.8438 li
257.645 63.375 li
257.898 64.0801 258.133 64.813 258.346 65.5728 cv
258.51 64.9976 258.739 64.3062 259.034 63.4985 cv
261.465 56.8438 li
263.361 56.8438 li
259.25 67.75 li
257.47 67.75 li
0 0 0 1 cmyk
f
273.59 64.2188 mo
275.486 64.4688 li
275.186 65.5879 274.629 66.4561 273.816 67.0737 cv
273.003 67.6914 271.965 68 270.701 68 cv
269.109 68 267.848 67.5088 266.915 66.5254 cv
265.982 65.5425 265.517 64.1636 265.517 62.3892 cv
265.517 60.5532 265.987 59.1284 266.931 58.1147 cv
267.873 57.1011 269.096 56.5938 270.599 56.5938 cv
272.054 56.5938 273.242 57.0918 274.164 58.0869 cv
275.086 59.082 275.548 60.4824 275.548 62.2871 cv
275.548 62.397 275.544 62.5615 275.537 62.7813 cv
267.423 62.7813 li
267.491 63.9731 267.829 64.8857 268.438 65.519 cv
269.047 66.1523 269.807 66.4688 270.717 66.4688 cv
271.394 66.4688 271.972 66.29 272.45 65.9321 cv
272.929 65.5747 273.309 65.0034 273.59 64.2188 cv
cp
267.517 61.25 mo
273.61 61.25 li
273.527 60.335 273.295 59.6484 272.911 59.1904 cv
272.322 58.4805 271.559 58.125 270.62 58.125 cv
269.771 58.125 269.056 58.4087 268.477 58.9756 cv
267.897 59.5425 267.578 60.3008 267.517 61.25 cv
0 0 0 1 cmyk
f
278.944 67.75 mo
278.944 56.8438 li
280.601 56.8438 li
280.601 58.4897 li
281.021 57.7178 281.409 57.209 281.765 56.9629 cv
282.12 56.7168 282.512 56.5938 282.938 56.5938 cv
283.556 56.5938 284.183 56.793 284.819 57.1914 cv
284.173 58.8853 li
283.729 58.6284 283.286 58.5 282.843 58.5 cv
282.446 58.5 282.09 58.6216 281.774 58.8647 cv
281.458 59.1079 281.232 59.4453 281.096 59.877 cv
280.891 60.5352 280.788 61.2544 280.788 62.0356 cv
280.788 67.75 li
278.944 67.75 li
0 0 0 1 cmyk
f
286.374 64.4688 mo
288.187 64.2188 li
288.288 64.9453 288.573 65.502 289.041 65.8887 cv
289.508 66.2754 290.161 66.4688 291.001 66.4688 cv
291.847 66.4688 292.475 66.2969 292.885 65.9521 cv
293.294 65.6079 293.499 65.2041 293.499 64.7402 cv
293.499 64.3242 293.319 63.9971 292.96 63.7583 cv
292.709 63.5947 292.083 63.3867 291.082 63.1343 cv
289.733 62.7915 288.799 62.4951 288.277 62.2446 cv
287.755 61.9946 287.359 61.6484 287.09 61.2061 cv
286.82 60.7642 286.687 60.2759 286.687 59.7407 cv
286.687 59.2539 286.797 58.8032 287.019 58.3882 cv
287.24 57.9736 287.543 57.6294 287.925 57.355 cv
288.211 57.1426 288.602 56.9624 289.097 56.8149 cv
289.592 56.6675 290.122 56.5938 290.689 56.5938 cv
291.542 56.5938 292.291 56.7173 292.936 56.9639 cv
293.581 57.2104 294.057 57.5444 294.364 57.9658 cv
294.671 58.3872 294.883 58.9507 294.999 59.6563 cv
293.187 59.9063 li
293.104 59.3467 292.868 58.9102 292.477 58.5962 cv
292.085 58.2822 291.531 58.125 290.816 58.125 cv
289.972 58.125 289.369 58.2651 289.009 58.5444 cv
288.647 58.8237 288.468 59.1509 288.468 59.5259 cv
288.468 59.7642 288.542 59.979 288.692 60.1699 cv
288.842 60.3677 289.076 60.5313 289.396 60.6606 cv
289.58 60.729 290.122 60.8857 291.021 61.1309 cv
292.321 61.4805 293.23 61.7671 293.747 61.9897 cv
294.264 62.2124 294.669 62.5366 294.964 62.9614 cv
295.258 63.3862 295.405 63.9141 295.405 64.5449 cv
295.405 65.1621 295.226 65.7432 294.867 66.2881 cv
294.509 66.833 293.992 67.2549 293.316 67.5527 cv
292.641 67.8506 291.876 68 291.022 68 cv
289.609 68 288.532 67.7031 287.792 67.1094 cv
287.051 66.5156 286.578 65.6357 286.374 64.4688 cv
0 0 0 1 cmyk
f
298.779 54.8125 mo
298.779 52.7188 li
300.623 52.7188 li
300.623 54.8125 li
298.779 54.8125 li
cp
298.779 67.75 mo
298.779 56.8438 li
300.623 56.8438 li
300.623 67.75 li
298.779 67.75 li
0 0 0 1 cmyk
f
308.6 66.104 mo
308.85 67.7344 li
308.328 67.8433 307.862 67.8979 307.451 67.8979 cv
306.779 67.8979 306.259 67.7915 305.889 67.5791 cv
305.519 67.3667 305.258 67.0874 305.106 66.7412 cv
304.956 66.395 304.881 65.6665 304.881 64.5562 cv
304.881 58.2729 li
303.506 58.2729 li
303.506 56.8354 li
304.881 56.8354 li
304.881 54.1387 li
306.725 53.0313 li
306.725 56.8354 li
308.6 56.8354 li
308.6 58.2729 li
306.725 58.2729 li
306.725 64.666 li
306.725 65.1943 306.757 65.5342 306.822 65.6851 cv
306.888 65.8364 306.995 65.9565 307.144 66.0454 cv
307.292 66.1348 307.505 66.1792 307.781 66.1792 cv
307.988 66.1792 308.261 66.1543 308.6 66.104 cv
0 0 0 1 cmyk
f
311.495 71.9634 mo
311.245 70.2422 li
311.652 70.3516 312.008 70.4063 312.312 70.4063 cv
312.726 70.4063 313.057 70.3374 313.305 70.2007 cv
313.554 70.063 313.757 69.8711 313.916 69.624 cv
314.033 69.4385 314.223 68.979 314.485 68.2451 cv
314.52 68.1421 314.575 67.9912 314.651 67.7925 cv
310.526 56.8438 li
312.494 56.8438 li
314.766 63.1411 li
315.06 63.9399 315.323 64.7798 315.557 65.6602 cv
315.771 64.8311 316.026 64.0132 316.321 63.2065 cv
318.651 56.8438 li
320.496 56.8438 li
316.37 67.9346 li
315.925 69.1357 315.579 69.9634 315.333 70.4165 cv
315.005 71.0273 314.628 71.4751 314.204 71.7603 cv
313.78 72.0449 313.273 72.1875 312.686 72.1875 cv
312.329 72.1875 311.933 72.1128 311.495 71.9634 cv
0 0 0 1 cmyk
f
351.608 67.75 mo
351.608 58.2813 li
349.983 58.2813 li
349.983 56.8438 li
351.608 56.8438 li
351.608 55.6914 li
351.608 54.9639 351.673 54.4233 351.804 54.0698 cv
351.982 53.5942 352.296 53.2085 352.746 52.9126 cv
353.196 52.6167 353.824 52.4688 354.631 52.4688 cv
355.15 52.4688 355.725 52.5303 356.354 52.6528 cv
356.077 54.2578 li
355.694 54.1904 355.332 54.1563 354.99 54.1563 cv
354.43 54.1563 354.033 54.2754 353.801 54.5127 cv
353.568 54.75 353.452 55.1948 353.452 55.8462 cv
353.452 56.8438 li
355.577 56.8438 li
355.577 58.2813 li
353.452 58.2813 li
353.452 67.75 li
351.608 67.75 li
0 0 0 1 cmyk
f
357.473 62.2969 mo
357.473 60.2764 358.033 58.7793 359.156 57.8062 cv
360.095 56.998 361.238 56.5938 362.587 56.5938 cv
364.086 56.5938 365.312 57.0854 366.264 58.0684 cv
367.215 59.0518 367.691 60.4097 367.691 62.1426 cv
367.691 63.5474 367.48 64.6523 367.06 65.457 cv
366.639 66.2617 366.025 66.8867 365.221 67.332 cv
364.416 67.7773 363.538 68 362.587 68 cv
361.06 68 359.826 67.5103 358.885 66.5308 cv
357.943 65.5513 357.473 64.1396 357.473 62.2969 cv
cp
359.379 62.2915 mo
359.379 63.6875 359.683 64.7329 360.291 65.4272 cv
360.899 66.1216 361.664 66.4688 362.587 66.4688 cv
363.502 66.4688 364.264 66.1201 364.872 65.4219 cv
365.48 64.7241 365.785 63.6602 365.785 62.23 cv
365.785 60.8823 365.479 59.8613 364.867 59.167 cv
364.256 58.4727 363.495 58.125 362.587 58.125 cv
361.664 58.125 360.899 58.4707 360.291 59.1616 cv
359.683 59.853 359.379 60.896 359.379 62.2915 cv
0 0 0 1 cmyk
f
378.15 67.75 mo
378.15 66.1494 li
377.301 67.3833 376.147 68 374.689 68 cv
374.046 68 373.445 67.8765 372.888 67.6304 cv
372.33 67.3838 371.916 67.0737 371.646 66.7007 cv
371.375 66.3276 371.185 65.8701 371.075 65.3291 cv
371 64.9663 370.963 64.3911 370.963 63.603 cv
370.963 56.8438 li
372.807 56.8438 li
372.807 62.8936 li
372.807 63.8594 372.844 64.5098 372.92 64.8452 cv
373.036 65.3315 373.283 65.7129 373.66 65.9902 cv
374.038 66.2676 374.505 66.4063 375.061 66.4063 cv
375.616 66.4063 376.137 66.2642 376.624 65.98 cv
377.111 65.6958 377.456 65.3091 377.659 64.8193 cv
377.861 64.3301 377.963 63.6196 377.963 62.688 cv
377.963 56.8438 li
379.807 56.8438 li
379.807 67.75 li
378.15 67.75 li
0 0 0 1 cmyk
f
383.828 67.75 mo
383.828 56.8438 li
385.484 56.8438 li
385.484 58.3921 li
386.288 57.1934 387.448 56.5938 388.965 56.5938 cv
389.624 56.5938 390.229 56.7119 390.782 56.9482 cv
391.335 57.1846 391.749 57.4946 392.023 57.8779 cv
392.298 58.2617 392.49 58.7168 392.601 59.2441 cv
392.669 59.5869 392.703 60.186 392.703 61.042 cv
392.703 67.75 li
390.859 67.75 li
390.859 61.1074 li
390.859 60.3535 390.787 59.79 390.643 59.4165 cv
390.498 59.043 390.242 58.7446 389.875 58.522 cv
389.507 58.2993 389.075 58.1875 388.58 58.1875 cv
387.789 58.1875 387.107 58.438 386.533 58.938 cv
385.959 59.4385 385.672 60.3877 385.672 61.7861 cv
385.672 67.75 li
383.828 67.75 li
0 0 0 1 cmyk
f
403.787 67.75 mo
403.787 66.3652 li
403.092 67.4551 402.07 68 400.723 68 cv
399.849 68 399.045 67.7603 398.313 67.2808 cv
397.58 66.8013 397.012 66.1318 396.609 65.272 cv
396.207 64.4121 396.006 63.4238 396.006 62.3071 cv
396.006 61.2183 396.188 60.23 396.553 59.3428 cv
396.917 58.4556 397.464 57.7754 398.193 57.3027 cv
398.923 56.8301 399.737 56.5938 400.639 56.5938 cv
401.299 56.5938 401.888 56.7329 402.403 57.0103 cv
402.919 57.2876 403.339 57.6489 403.662 58.0942 cv
403.662 52.7188 li
405.506 52.7188 li
405.506 67.75 li
403.787 67.75 li
cp
397.912 62.3022 mo
397.912 63.6978 398.21 64.7412 398.805 65.4321 cv
399.4 66.1235 400.103 66.4688 400.912 66.4688 cv
401.729 66.4688 402.422 66.1387 402.993 65.4785 cv
403.564 64.8184 403.85 63.8105 403.85 62.4561 cv
403.85 60.9648 403.559 59.8701 402.978 59.1719 cv
402.396 58.4741 401.681 58.125 400.829 58.125 cv
399.999 58.125 399.305 58.4604 398.748 59.1309 cv
398.19 59.8018 397.912 60.8589 397.912 62.3022 cv
0 0 0 1 cmyk
f
416.977 64.2188 mo
418.873 64.4688 li
418.572 65.5879 418.016 66.4561 417.203 67.0737 cv
416.39 67.6914 415.352 68 414.088 68 cv
412.496 68 411.234 67.5088 410.302 66.5254 cv
409.369 65.5425 408.903 64.1636 408.903 62.3892 cv
408.903 60.5532 409.374 59.1284 410.317 58.1147 cv
411.26 57.1011 412.482 56.5938 413.985 56.5938 cv
415.44 56.5938 416.629 57.0918 417.551 58.0869 cv
418.473 59.082 418.935 60.4824 418.935 62.2871 cv
418.935 62.397 418.931 62.5615 418.924 62.7813 cv
410.81 62.7813 li
410.878 63.9731 411.216 64.8857 411.825 65.519 cv
412.434 66.1523 413.193 66.4688 414.104 66.4688 cv
414.78 66.4688 415.358 66.29 415.837 65.9321 cv
416.315 65.5747 416.695 65.0034 416.977 64.2188 cv
cp
410.903 61.25 mo
416.997 61.25 li
416.914 60.335 416.682 59.6484 416.298 59.1904 cv
415.709 58.4805 414.945 58.125 414.007 58.125 cv
413.157 58.125 412.442 58.4087 411.863 58.9756 cv
411.284 59.5425 410.965 60.3008 410.903 61.25 cv
0 0 0 1 cmyk
f
429.456 67.75 mo
429.456 66.3652 li
428.761 67.4551 427.739 68 426.391 68 cv
425.517 68 424.714 67.7603 423.981 67.2808 cv
423.248 66.8013 422.681 66.1318 422.278 65.272 cv
421.876 64.4121 421.675 63.4238 421.675 62.3071 cv
421.675 61.2183 421.856 60.23 422.222 59.3428 cv
422.586 58.4556 423.133 57.7754 423.862 57.3027 cv
424.591 56.8301 425.406 56.5938 426.308 56.5938 cv
426.968 56.5938 427.556 56.7329 428.072 57.0103 cv
428.588 57.2876 429.008 57.6489 429.331 58.0942 cv
429.331 52.7188 li
431.175 52.7188 li
431.175 67.75 li
429.456 67.75 li
cp
423.581 62.3022 mo
423.581 63.6978 423.878 64.7412 424.474 65.4321 cv
425.068 66.1235 425.771 66.4688 426.581 66.4688 cv
427.397 66.4688 428.091 66.1387 428.662 65.4785 cv
429.232 64.8184 429.519 63.8105 429.519 62.4561 cv
429.519 60.9648 429.228 59.8701 428.646 59.1719 cv
428.065 58.4741 427.349 58.125 426.498 58.125 cv
425.667 58.125 424.974 58.4604 424.416 59.1309 cv
423.859 59.8018 423.581 60.8589 423.581 62.3022 cv
0 0 0 1 cmyk
f
448.592 67.75 mo
446.748 67.75 li
446.748 55.9888 li
446.304 56.4126 445.722 56.8364 445.002 57.2603 cv
444.281 57.6841 443.634 58.002 443.061 58.2139 cv
443.061 56.4297 li
444.092 55.9443 444.993 55.3564 445.765 54.666 cv
446.536 53.9756 447.083 53.3057 447.404 52.6563 cv
448.592 52.6563 li
448.592 67.75 li
0 0 0 1 cmyk
f
457.324 59.6104 mo
456.553 59.3296 455.981 58.9292 455.609 58.4087 cv
455.237 57.8882 455.051 57.2651 455.051 56.5391 cv
455.051 55.4434 455.444 54.5225 456.23 53.7759 cv
457.017 53.0298 458.063 52.6563 459.369 52.6563 cv
460.682 52.6563 461.738 53.0381 462.539 53.8018 cv
463.338 54.5654 463.738 55.4946 463.738 56.5903 cv
463.738 57.2891 463.555 57.897 463.188 58.4136 cv
462.821 58.9307 462.264 59.3296 461.517 59.6104 cv
462.445 59.9106 463.151 60.395 463.637 61.0635 cv
464.121 61.7319 464.363 62.5298 464.363 63.4575 cv
464.363 64.7397 463.908 65.8174 463 66.6904 cv
462.09 67.5635 460.895 68 459.41 68 cv
457.928 68 456.73 67.562 455.821 66.6855 cv
454.912 65.8091 454.457 64.7158 454.457 63.4063 cv
454.457 62.4307 454.705 61.6138 455.203 60.9556 cv
455.699 60.2974 456.406 59.8491 457.324 59.6104 cv
cp
456.363 63.4067 mo
456.363 63.9312 456.485 64.438 456.729 64.9277 cv
456.972 65.418 457.341 65.7974 457.836 66.0659 cv
458.331 66.3345 458.861 66.4688 459.426 66.4688 cv
460.314 66.4688 461.041 66.1865 461.607 65.6216 cv
462.174 65.0571 462.457 64.3394 462.457 63.4683 cv
462.457 62.5835 462.166 61.8521 461.582 61.2739 cv
460.999 60.6958 460.26 60.4063 459.365 60.4063 cv
458.49 60.4063 457.771 60.6924 457.208 61.2637 cv
456.645 61.8354 456.363 62.5498 456.363 63.4067 cv
cp
456.957 56.4854 mo
456.957 57.1968 457.183 57.7783 457.633 58.2295 cv
458.083 58.6807 458.678 58.9063 459.416 58.9063 cv
460.133 58.9063 460.715 58.6826 461.162 58.2344 cv
461.609 57.7866 461.832 57.2378 461.832 56.5879 cv
461.832 55.9111 461.602 55.3418 461.142 54.8799 cv
460.681 54.4185 460.099 54.1875 459.395 54.1875 cv
458.684 54.1875 458.1 54.4136 457.643 54.8647 cv
457.186 55.3159 456.957 55.8564 456.957 56.4854 cv
0 0 0 1 cmyk
f
477.031 65.9688 mo
477.031 67.75 li
467.063 67.75 li
467.049 67.3057 467.12 66.8779 467.278 66.4673 cv
467.532 65.79 467.938 65.1245 468.497 64.4702 cv
469.057 63.8159 469.863 63.0601 470.918 62.2026 cv
472.555 60.856 473.66 59.7915 474.233 59.0103 cv
474.807 58.229 475.094 57.4883 475.094 56.7871 cv
475.094 56.0571 474.831 55.4414 474.308 54.9399 cv
473.784 54.4385 473.102 54.1875 472.26 54.1875 cv
471.369 54.1875 470.657 54.4531 470.123 54.9834 cv
469.589 55.5142 469.319 56.249 469.313 57.1875 cv
467.406 57 li
467.536 55.5864 468.026 54.5093 468.876 53.7681 cv
469.727 53.0269 470.868 52.6563 472.301 52.6563 cv
473.747 52.6563 474.892 53.0562 475.734 53.8555 cv
476.578 54.6553 477 55.646 477 56.8281 cv
477 57.4297 476.877 58.021 476.631 58.6016 cv
476.385 59.1826 475.978 59.7939 475.407 60.4365 cv
474.837 61.0791 473.889 61.96 472.563 63.0801 cv
471.452 64.0088 470.739 64.6392 470.423 64.9702 cv
470.106 65.3013 469.845 65.6343 469.639 65.9688 cv
477.031 65.9688 li
0 0 0 1 cmyk
f
480.157 63.8125 mo
482.063 63.6563 li
482.207 64.5908 482.539 65.293 483.059 65.7632 cv
483.578 66.2339 484.214 66.4688 484.966 66.4688 cv
485.873 66.4688 486.632 66.1348 487.242 65.4658 cv
487.852 64.7969 488.157 63.9097 488.157 62.8042 cv
488.157 61.7534 487.865 60.9248 487.283 60.3174 cv
486.7 59.71 485.924 59.4063 484.953 59.4063 cv
484.349 59.4063 483.811 59.5425 483.338 59.8149 cv
482.865 60.0874 482.492 60.4404 482.22 60.875 cv
480.501 60.625 li
481.97 52.9063 li
489.407 52.9063 li
489.407 54.6563 li
483.43 54.6563 li
482.627 58.7217 li
483.527 58.0947 484.472 57.7813 485.461 57.7813 cv
486.771 57.7813 487.875 58.2358 488.775 59.1445 cv
489.676 60.0537 490.126 61.2222 490.126 62.6499 cv
490.126 64.0098 489.729 65.1851 488.937 66.1758 cv
487.972 67.3921 486.655 68 484.987 68 cv
483.62 68 482.504 67.6182 481.639 66.8535 cv
480.773 66.0889 480.28 65.0752 480.157 63.8125 cv
0 0 0 1 cmyk
f
332.754 61.7295 mo
332.754 60.5273 333.729 59.5547 334.93 59.5547 cv
336.131 59.5547 337.105 60.5273 337.105 61.7295 cv
337.105 62.9316 336.131 63.9053 334.93 63.9053 cv
333.729 63.9053 332.754 62.9316 332.754 61.7295 cv
0 0 0 1 cmyk
f
1.0274 lw
332.754 61.7295 mo
332.754 60.5273 333.729 59.5547 334.93 59.5547 cv
336.131 59.5547 337.105 60.5273 337.105 61.7295 cv
337.105 62.9316 336.131 63.9053 334.93 63.9053 cv
333.729 63.9053 332.754 62.9316 332.754 61.7295 cv
cp
0 0 0 0 cmyk
s
%ADOBeginClientInjection: EndPageContent "AI10"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI10"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%ADOBeginClientInjection: PageTrailer Start "AI10"
%ADOEndClientInjection: PageTrailer Start "AI10"
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%ADOBeginClientInjection: PageTrailer End "AI10"
%ADOEndClientInjection: PageTrailer End "AI10"
%ADOBeginClientInjection: DocumentTrailer Start "AI10"
%ADOEndClientInjection: DocumentTrailer Start "AI10"
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%ADOBeginClientInjection: DocumentTrailer End "AI10"
%ADOEndClientInjection: DocumentTrailer End "AI10"
%%Trailer
cleartomark
countdictstack
exch sub { end } repeat
restore
%%EOF
