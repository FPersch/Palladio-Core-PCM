% This file was created with JabRef 2.4.2.
% Encoding: Cp1252

@INPROCEEDINGS{Crew97,
  author = {Roger F. Crew},
  title = {ASTLOG: A Language for Examining Abstrakt Sysntax Trees},
  booktitle = {Proceedings of the Conference on Domain-Specific Languages},
  year = {1997},
  address = {Santa Barbara},
  month = {Oktober},
  owner = {Christina},
  timestamp = {2009.04.14},
  url = {http://www.usenix.org/publications/library/proceedings/dsl97/full_papers/crew/crew.pdf}
}

@INPROCEEDINGS{Gold05,
  author = {Simon F. Goldsmith  and Robert O'Callahan and Alex Aiken},
  title = {Relational queries over program traces},
  booktitle = {OOPSLA '05: Proceedings of the 20th annual ACM SIGPLAN conference
	on Object-oriented programming, systems, languages, and applications},
  year = {2005},
  pages = {385--402},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {Instrumenting programs with code to monitor runtime behavior is a
	common technique for pro?ling and debugging. In practice, instrumentation
	is either inserted manually by programmers, or automatically by specialized
	tools that monitor particular properties.
	
	We propose Program Trace Query Language (PTQL), a language based on
	relational queries over program traces, in which programmers can
	write expressive, declarative queries about program behavior. We
	also describe our compiler, PARTIQLE. Given a PTQL query and a Java
	program, PARTIQLE instruments the program to execute the query online.
	We apply several PTQL queries to a set of benchmark programs, including
	the Apache Tomcat Web server. Our queries reveal signi?cant performance
	bugs in the jack SpecJVM98 benchmark, in Tomcat, and in the IBM Java
	class library, as well as some correct though uncomfortably subtle
	code in the Xerces XML parser. We present performance measurements
	demonstrating that our prototype system has usable performance.},
  doi = {http://doi.acm.org/10.1145/1094811.1094841},
  isbn = {1-59593-031-0},
  keywords = {Partiqle, PTQL, program trace query language, relational},
  location = {San Diego, CA, USA}
}

@INPROCEEDINGS{Mart05,
  author = {Michael Martin and Benjamin Livshits and Monica Lam},
  title = {Finding Application Errors and Security Flaws Using PQL: a Program
	Query Language.},
  booktitle = {Object-Oriented Programming, Systems, Languages and Applications
	(OOPSLA)},
  year = {2005},
  month = {October},
  owner = {Christina Pildner},
  timestamp = {2009.04.22},
  url = {http://www.truststc.org/pubs/397.html}
}

@INPROCEEDINGS{Parr09,
  author = {Pierre Parrend},
  title = {Enhancing Automated Detection of Vulnerabilities in Java Components},
  booktitle = {Forth International Conference on Availability, Reliability and Security
	(AReS 2009)},
  year = {2009},
  address = {Fukuoka, Japan},
  month = {March},
  owner = {Christina},
  timestamp = {2009.04.14},
  url = {http://www.rzo.free.fr/parrend09ares.php}
}

@INPROCEEDINGS{Parr08,
  author = {Pierre Parrend and St\'{e}phane Fr\'{e}not},
  title = {Classification of Component Vulnerabilities in Java Service Oriented
	Programming ({SOP}) Platforms},
  booktitle = {Conference on Component-based Software Engineering (CBSE'2008)},
  year = {2008},
  volume = {5282/2008},
  series = {LNCS},
  address = {Karlsruhe, Germany},
  month = {October},
  publisher = {Springer Berlin / Heidelberg},
  owner = {Christina Pildner},
  timestamp = {2009.04.22}
}

@TECHREPORT{PF07a,
  author = {Pierre Parrend and St\'{e}phane Fr\'{e}not},
  title = {Java components vulnerabilities - an experimental classification
	targeted at the OSGi platform},
  institution = {INRIA},
  year = {2007},
  type = {Research Report},
  number = {RR-6231},
  month = {06},
  abstract = {The OSGi Platform finds a growing interest in two different applications
	domains: embedded systems, and applications servers. However, the
	security properties of this platform are hardly studied, which is
	likely to hinder its use in production systems. This is all the more
	important that the dynamic aspect of OSGi-based applications, that
	can be extended at runtime, make them vulnerable to malicious code
	injection. We therefore perform a systematic audit of the OSGi platform
	so as to build a vulnerability catalog that intends to reference
	OSGi Vulnerabilities originating in the Core Specification, and in
	behaviors related to the use of the Java language. Standard Services
	are not considered. To support this audit, a Semi-formal Vulnerability
	Pattern is defined, that enables to uniquely characterize fundamental
	properties for each vulnerability, to include verbose description
	in the pattern, to reference known security protections, and to track
	the implementation status of the proof-of-concept OSGi Bundles that
	exploit the vulnerability. Based on the analysis of the catalog,
	a robust OSGi Platform is built, and recommendations are made to
	enhance the OSGi Specifications.},
  owner = {Christina Pildner},
  timestamp = {2009.04.23}
}

@ARTICLE{Ruta04,
  author = {Nick Rutar and Christian B. Almazan and Jeffrey S. Foster},
  title = {A Comparison of Bug Finding Tools for Java},
  journal = {Software Reliability Engineering, International Symposium on},
  year = {2004},
  volume = {0},
  pages = {245-256},
  abstract = {Bugs in software are costly and difficult to find and fix. In recent
	years, many tools and techniques have been developed for automatically
	finding bugs by analyzing source code or intermediate code statically
	(at compile time). Different tools and techniques have different
	tradeoffs, but the practical impact of these tradeoffs is not well
	understood. In this paper, we apply five bug finding tools, specifically
	Bandera, ESC/Java 2, FindBugs, JLint, and PMD, to a variety of Java
	programs. By using a variety of tools, we are able to cross-check
	their bug reports and warnings. Our experimental results show that
	none of the tools strictly subsumes another, and indeed the tools
	often find nonoverlapping bugs. We discuss the techniques each of
	the tools is based on, and we suggest how particular techniques affect
	the output of the tools. Finally, we propose a meta-tool that combines
	the output of the tools together, looking for particular lines of
	code, methods, and classes that many tools warn about.},
  address = {Los Alamitos, CA, USA},
  doi = {http://doi.ieeecomputersociety.org/10.1109/ISSRE.2004.1},
  issn = {1071-9458},
  owner = {Christina Pildner},
  publisher = {IEEE Computer Society},
  timestamp = {2009.04.22}
}

