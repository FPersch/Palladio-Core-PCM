% This file was created with JabRef 2.4.2.
% Encoding: Cp1252

@INPROCEEDINGS{Crew1997,
  author = {Roger F. Crew},
  title = {ASTLOG: A Language for Examining Abstrakt Sysntax Trees},
  booktitle = {Proceedings of the Conference on Domain-Specific Languages},
  year = {1997},
  address = {Santa Barbara},
  month = {Oktober},
  owner = {Christina},
  timestamp = {2009.04.14},
  url = {http://www.usenix.org/publications/library/proceedings/dsl97/full_papers/crew/crew.pdf}
}

@INPROCEEDINGS{Martin2005,
  author = {Michael Martin and Benjamin Livshits and Monica Lam},
  title = {Finding Application Errors and Security Flaws Using PQL: a Program
	Query Language.},
  booktitle = {Object-Oriented Programming, Systems, Languages and Applications
	(OOPSLA)},
  year = {2005},
  month = {October},
  url = {http://www.truststc.org/pubs/397.html}
}

@INPROCEEDINGS{Parrend2009,
  author = {Pierre Parrend},
  title = {Enhancing Automated Detection of Vulnerabilities in Java Components},
  booktitle = {Forth International Conference on Availability, Reliability and Security
	(AReS 2009)},
  year = {2009},
  address = {Fukuoka, Japan},
  month = {March},
  owner = {Christina},
  timestamp = {2009.04.14},
  url = {http://www.rzo.free.fr/parrend09ares.php}
}

@INPROCEEDINGS{parrend08cbse,
  author = {Pierre Parrend and St\'{e}phane Fr\'{e}not},
  title = {Classification of Component Vulnerabilities in Java Service Oriented
	Programming ({SOP}) Platforms},
  booktitle = {Conference on Component-based Software Engineering (CBSE'2008)},
  year = {2008},
  volume = {5282/2008},
  series = {LNCS},
  address = {Karlsruhe, Germany},
  month = {October},
  publisher = {Springer Berlin / Heidelberg}
}

@ARTICLE{Rutar2004,
  author = {Nick Rutar and Christian B. Almazan and Jeffrey S. Foster},
  title = {A Comparison of Bug Finding Tools for Java},
  journal = {Software Reliability Engineering, International Symposium on},
  year = {2004},
  volume = {0},
  pages = {245-256},
  abstract = {Bugs in software are costly and difficult to find and fix. In recent
	years, many tools and techniques have been developed for automatically
	finding bugs by analyzing source code or intermediate code statically
	(at compile time). Different tools and techniques have different
	tradeoffs, but the practical impact of these tradeoffs is not well
	understood. In this paper, we apply five bug finding tools, specifically
	Bandera, ESC/Java 2, FindBugs, JLint, and PMD, to a variety of Java
	programs. By using a variety of tools, we are able to cross-check
	their bug reports and warnings. Our experimental results show that
	none of the tools strictly subsumes another, and indeed the tools
	often find nonoverlapping bugs. We discuss the techniques each of
	the tools is based on, and we suggest how particular techniques affect
	the output of the tools. Finally, we propose a meta-tool that combines
	the output of the tools together, looking for particular lines of
	code, methods, and classes that many tools warn about.},
  address = {Los Alamitos, CA, USA},
  doi = {http://doi.ieeecomputersociety.org/10.1109/ISSRE.2004.1},
  issn = {1071-9458},
  publisher = {IEEE Computer Society}
}

@comment{jabref-meta: selector_publisher:}

@comment{jabref-meta: selector_author:}

@comment{jabref-meta: selector_journal:}

@comment{jabref-meta: selector_keywords:}

