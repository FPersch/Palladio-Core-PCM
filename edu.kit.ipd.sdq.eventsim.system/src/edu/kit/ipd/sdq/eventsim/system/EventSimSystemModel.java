package edu.kit.ipd.sdq.eventsim.system;

import java.util.Map;

import org.apache.log4j.Logger;

import de.uka.ipd.sdq.pcm.core.composition.AssemblyContext;
import de.uka.ipd.sdq.pcm.repository.OperationSignature;
import de.uka.ipd.sdq.pcm.usagemodel.EntryLevelSystemCall;
import de.uka.ipd.sdq.scheduler.ISchedulingFactory;
import de.uka.ipd.sdq.scheduler.factory.SchedulingFactory;
import de.uka.ipd.sdq.simulation.ISimulationListener;
import edu.kit.ipd.sdq.eventsim.AbstractEventSimModel;
import edu.kit.ipd.sdq.eventsim.entities.Request;
import edu.kit.ipd.sdq.eventsim.entities.User;
import edu.kit.ipd.sdq.eventsim.resources.staticstructure.AllocationRegistry;
import edu.kit.ipd.sdq.eventsim.resources.staticstructure.PassiveResourceRegistry;
import edu.kit.ipd.sdq.eventsim.resources.staticstructure.SimulatedResourceContainer;
import edu.kit.ipd.sdq.eventsim.resources.staticstructure.SimulatedResourceEnvironment;
import edu.kit.ipd.sdq.eventsim.resources.staticstructure.commands.BuildAndRegisterPassiveResources;
import edu.kit.ipd.sdq.eventsim.resources.staticstructure.commands.BuildResourceAllocation;
import edu.kit.ipd.sdq.eventsim.resources.staticstructure.commands.BuildSimulatedResourceEnvironment;
import edu.kit.ipd.sdq.eventsim.staticstructure.ComponentInstance;
import edu.kit.ipd.sdq.eventsim.system.command.BuildComponentInstances;
import edu.kit.ipd.sdq.eventsim.system.command.FindAssemblyContextForSystemCall;
import edu.kit.ipd.sdq.eventsim.system.command.parameter.InstallExternalCallParameterHandling;
import edu.kit.ipd.sdq.eventsim.system.debug.DebugSeffTraversalListener;
import edu.kit.ipd.sdq.eventsim.system.events.BeginSeffTraversalEvent;
import edu.kit.ipd.sdq.eventsim.system.interpreter.seff.SeffBehaviourInterpreter;
import edu.kit.ipd.sdq.eventsim.system.interpreter.seff.SeffInterpreterConfiguration;
import edu.kit.ipd.sdq.eventsim.system.probespec.commands.BuildResponseTimeCalculators;
import edu.kit.ipd.sdq.eventsim.system.probespec.commands.MountExternalCallProbes;
import edu.kit.ipd.sdq.simcomp.component.ISimulationMiddleware;
import edu.kit.ipd.sdq.simcomp.component.IUser;
import edu.kit.ipd.sdq.simcomp.event.system.SystemRequestStart;
import edu.kit.ipd.sdq.simcomp.middleware.simulation.SimulationModel;

/**
 * The simulation model. This is the central class of an EventSim simulation
 * run. Before the simulation starts, it initialises the simulation in the
 * {@code init()} method. During the simulation, it provides information about
 * the PCM model that is to be simulated, the simulation configuration and the
 * simulation status. Finally, it cleans up after a simulation run in the
 * {finalise()} method.
 * <p>
 * Instances are created by using the static {@code create} method that builds
 * the simulation model in accordance with a specified simulation configuration.
 * 
 * @author Philipp Merkle
 * 
 */
public class EventSimSystemModel extends AbstractEventSimModel {

	private static final Logger logger = Logger.getLogger(EventSimSystemModel.class);

	private SeffBehaviourInterpreter seffInterpreter;

	public EventSimSystemModel(ISimulationMiddleware middleware) {
		super(middleware);
	}

	public void init() {

		// initialise behavior interpreters
		seffInterpreter = new SeffBehaviourInterpreter(new SeffInterpreterConfiguration(), this);

		// install debug traversal listeners, if debugging is enabled
		if (logger.isDebugEnabled()) {
			DebugSeffTraversalListener.install(this.seffInterpreter.getConfiguration());
		}

		// setup handling for PCM parameter characterisations
		this.execute(new InstallExternalCallParameterHandling(this.seffInterpreter.getConfiguration()));

		// initialize the probe specification
		this.initProbeSpecification();

		// notify registered listeners that the simulation is about to start...
		//this.notifyStartListeners();
	}

	/**
	 * Initializes the Probe Specification by setting up the calculators and mounting the probes.
	 */
	private void initProbeSpecification() {

		// build calculators
		this.execute(new BuildResponseTimeCalculators(this));

		// mount probes
		this.execute(new MountExternalCallProbes(this.seffInterpreter.getConfiguration(), this.getSimulationMiddleware()));
	}

	/**
	 * Handles the simulation of a service call. Service calls are usually
	 * generated by a workload simulation component.
	 * 
	 * @param user
	 *            The user which initiated the call
	 * @param call
	 *            The called service in form of a PCM entry level system call
	 *            action
	 */
	public void callService(IUser user, EntryLevelSystemCall call) {
		// find the component which provides the call
		final AssemblyContext assemblyCtx = this.execute(new FindAssemblyContextForSystemCall(call));
		final ComponentInstance component = this.getComponent(assemblyCtx);
		final OperationSignature signature = call.getOperationSignature__EntryLevelSystemCall();

		// spawn a new EventSim request
		User eventSimUser = (User) user;
		final Request request = new Request(this, call, eventSimUser);
		this.getSimulationMiddleware().triggerEvent(new SystemRequestStart(request));

		new BeginSeffTraversalEvent(this, component, signature, eventSimUser.getUserState()).schedule(request, 0);
	}

	/*
	public void finalise() {
		// TODO (SimComp): move the finalize of all EventSim model to a good place based on event
		// notify observers that the simulation is finished (below we just clean up...)
		this.notifyStopListeners();

		// notify active entities that the simulation is finished (and
		// therefore, also their
		// existence in the simulated system)
		//for (EventSimEntity entity : activeEntitiesList) {
		//	assert entity.getState().equals(EventSimEntity.EntityState.ENTERED_SYSTEM) : "Found an entity in the " + "list of active entities which is in the state " + entity.getState() + ", and therefore can not be an active entity.";
		//	entity.notifyLeftSystem();
		//}
		//assert activeEntitiesList.isEmpty() : "There are some entities left in the list of active entities, though " + "each of them was asked to leave the system.";

		// notify active resources about the simulation stop
		deactivateResources();

		// clean up
		if (logger.isDebugEnabled()) {
			logger.debug("Cleaning up...");
		}
		EventSimEntity.resetIdGenerator();
		probeSpecContext.finish();
		AbstractActiveResource.cleanProcesses();

		if (logger.isEnabledFor(Level.INFO))
			logger.info("Simulation took " + this.getSimulationMiddleware().getSimulationControl().getCurrentSimulationTime() + " simulation seconds");

	}

	private void deactivateResources() {
		for (SimulatedResourceContainer c : this.resourceEnvironment.getResourceContainers()) {
			for (SimActiveResource r : c.getResources()) {
				r.deactivateResource();
			}
		}
	}
	*/

	public SeffBehaviourInterpreter getSeffInterpreter() {
		return seffInterpreter;
	}

	/**
	 * Notfies all simulation observers that the simulation is about to start
	 */
	private void notifyStartListeners() {
		for (final ISimulationListener l : this.getEventSimConfig().getListeners()) {
			l.simulationStart();
		}
	}

	/**
	 * Notfies all simulation observers that the simulation has stopped
	 */
	private void notifyStopListeners() {
		for (final ISimulationListener l : this.getEventSimConfig().getListeners()) {
			l.simulationStop();
		}
	}

	public ISchedulingFactory getSchedulingFactory() {
		return schedulingFactory;
	}

}
