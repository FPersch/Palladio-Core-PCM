//
// FileType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace BibTeXProviderXML
{
	public class FileType : Altova.Xml.Node
	{
		#region Forward constructors
		public FileType() : base() { SetCollectionParents(); }
		public FileType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public FileType(XmlNode node) : base(node) { SetCollectionParents(); }
		public FileType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

			for (int i = 0; i < DomChildCount(NodeType.Attribute, "", "Extension"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "Extension", i);
				InternalAdjustPrefix(DOMNode, false);
			}
		}


		#region Extension accessor methods
		public int GetExtensionMinCount()
		{
			return 1;
		}

		public int ExtensionMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetExtensionMaxCount()
		{
			return 1;
		}

		public int ExtensionMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetExtensionCount()
		{
			return DomChildCount(NodeType.Attribute, "", "Extension");
		}

		public int ExtensionCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "Extension");
			}
		}

		public bool HasExtension()
		{
			return HasDomChild(NodeType.Attribute, "", "Extension");
		}

		public SchemaString GetExtensionAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "Extension", index)));
		}

		public SchemaString GetExtension()
		{
			return GetExtensionAt(0);
		}

		public SchemaString Extension
		{
			get
			{
				return GetExtensionAt(0);
			}
		}

		public void RemoveExtensionAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "Extension", index);
		}

		public void RemoveExtension()
		{
			while (HasExtension())
				RemoveExtensionAt(0);
		}

		public void AddExtension(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "Extension", newValue.ToString());
		}

		public void InsertExtensionAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "Extension", index, newValue.ToString());
		}

		public void ReplaceExtensionAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "Extension", index, newValue.ToString());
		}
		#endregion // Extension accessor methods

		#region Extension collection
        public ExtensionCollection	MyExtensions = new ExtensionCollection( );

        public class ExtensionCollection: IEnumerable
        {
            FileType parent;
            public FileType Parent
			{
				set
				{
					parent = value;
				}
			}
			public ExtensionEnumerator GetEnumerator() 
			{
				return new ExtensionEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ExtensionEnumerator: IEnumerator 
        {
			int nIndex;
			FileType parent;
			public ExtensionEnumerator(FileType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ExtensionCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetExtensionAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Extension collection

        private void SetCollectionParents()
        {
            MyExtensions.Parent = this; 
	}
}
}
