//
// MimeTypesType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace WebserverXML
{
	public class MimeTypesType : Altova.Xml.Node
	{
		#region Forward constructors
		public MimeTypesType() : base() { SetCollectionParents(); }
		public MimeTypesType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public MimeTypesType(XmlNode node) : base(node) { SetCollectionParents(); }
		public MimeTypesType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

			for (int i = 0; i < DomChildCount(NodeType.Attribute, "", "default-content-type"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "default-content-type", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			for (int i = 0; i < DomChildCount(NodeType.Element, "", "MimeType"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "MimeType", i);
				InternalAdjustPrefix(DOMNode, false);
				new MimeTypeType(DOMNode).AdjustPrefix();
			}
		}


		#region default_content_type accessor methods
		public int Getdefault_content_typeMinCount()
		{
			return 1;
		}

		public int default_content_typeMinCount
		{
			get
			{
				return 1;
			}
		}

		public int Getdefault_content_typeMaxCount()
		{
			return 1;
		}

		public int default_content_typeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int Getdefault_content_typeCount()
		{
			return DomChildCount(NodeType.Attribute, "", "default-content-type");
		}

		public int default_content_typeCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "default-content-type");
			}
		}

		public bool Hasdefault_content_type()
		{
			return HasDomChild(NodeType.Attribute, "", "default-content-type");
		}

		public SchemaString Getdefault_content_typeAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "default-content-type", index)));
		}

		public SchemaString Getdefault_content_type()
		{
			return Getdefault_content_typeAt(0);
		}

		public SchemaString default_content_type
		{
			get
			{
				return Getdefault_content_typeAt(0);
			}
		}

		public void Removedefault_content_typeAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "default-content-type", index);
		}

		public void Removedefault_content_type()
		{
			while (Hasdefault_content_type())
				Removedefault_content_typeAt(0);
		}

		public void Adddefault_content_type(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "default-content-type", newValue.ToString());
		}

		public void Insertdefault_content_typeAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "default-content-type", index, newValue.ToString());
		}

		public void Replacedefault_content_typeAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "default-content-type", index, newValue.ToString());
		}
		#endregion // default_content_type accessor methods

		#region default_content_type collection
        public default_content_typeCollection	Mydefault_content_types = new default_content_typeCollection( );

        public class default_content_typeCollection: IEnumerable
        {
            MimeTypesType parent;
            public MimeTypesType Parent
			{
				set
				{
					parent = value;
				}
			}
			public default_content_typeEnumerator GetEnumerator() 
			{
				return new default_content_typeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class default_content_typeEnumerator: IEnumerator 
        {
			int nIndex;
			MimeTypesType parent;
			public default_content_typeEnumerator(MimeTypesType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.default_content_typeCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.Getdefault_content_typeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // default_content_type collection

		#region MimeType accessor methods
		public int GetMimeTypeMinCount()
		{
			return 0;
		}

		public int MimeTypeMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetMimeTypeMaxCount()
		{
			return Int32.MaxValue;
		}

		public int MimeTypeMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetMimeTypeCount()
		{
			return DomChildCount(NodeType.Element, "", "MimeType");
		}

		public int MimeTypeCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "MimeType");
			}
		}

		public bool HasMimeType()
		{
			return HasDomChild(NodeType.Element, "", "MimeType");
		}

		public MimeTypeType GetMimeTypeAt(int index)
		{
			return new MimeTypeType(GetDomChildAt(NodeType.Element, "", "MimeType", index));
		}

		public MimeTypeType GetMimeType()
		{
			return GetMimeTypeAt(0);
		}

		public MimeTypeType MimeType
		{
			get
			{
				return GetMimeTypeAt(0);
			}
		}

		public void RemoveMimeTypeAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "MimeType", index);
		}

		public void RemoveMimeType()
		{
			while (HasMimeType())
				RemoveMimeTypeAt(0);
		}

		public void AddMimeType(MimeTypeType newValue)
		{
			AppendDomElement("", "MimeType", newValue);
		}

		public void InsertMimeTypeAt(MimeTypeType newValue, int index)
		{
			InsertDomElementAt("", "MimeType", index, newValue);
		}

		public void ReplaceMimeTypeAt(MimeTypeType newValue, int index)
		{
			ReplaceDomElementAt("", "MimeType", index, newValue);
		}
		#endregion // MimeType accessor methods

		#region MimeType collection
        public MimeTypeCollection	MyMimeTypes = new MimeTypeCollection( );

        public class MimeTypeCollection: IEnumerable
        {
            MimeTypesType parent;
            public MimeTypesType Parent
			{
				set
				{
					parent = value;
				}
			}
			public MimeTypeEnumerator GetEnumerator() 
			{
				return new MimeTypeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class MimeTypeEnumerator: IEnumerator 
        {
			int nIndex;
			MimeTypesType parent;
			public MimeTypeEnumerator(MimeTypesType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.MimeTypeCount );
			}
			public MimeTypeType  Current 
			{
				get 
				{
					return(parent.GetMimeTypeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // MimeType collection

        private void SetCollectionParents()
        {
            Mydefault_content_types.Parent = this; 
            MyMimeTypes.Parent = this; 
	}
}
}
