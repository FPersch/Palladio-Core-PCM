//
// FileNameType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace WebserverXML
{
	public class FileNameType : Altova.Xml.Node
	{
		#region Forward constructors
		public FileNameType() : base() { SetCollectionParents(); }
		public FileNameType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public FileNameType(XmlNode node) : base(node) { SetCollectionParents(); }
		public FileNameType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

			for (int i = 0; i < DomChildCount(NodeType.Attribute, "", "id"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "id", i);
				InternalAdjustPrefix(DOMNode, false);
			}
		}


		#region id accessor methods
		public int GetidMinCount()
		{
			return 1;
		}

		public int idMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetidMaxCount()
		{
			return 1;
		}

		public int idMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetidCount()
		{
			return DomChildCount(NodeType.Attribute, "", "id");
		}

		public int idCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "id");
			}
		}

		public bool Hasid()
		{
			return HasDomChild(NodeType.Attribute, "", "id");
		}

		public SchemaString GetidAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "id", index)));
		}

		public SchemaString Getid()
		{
			return GetidAt(0);
		}

		public SchemaString id
		{
			get
			{
				return GetidAt(0);
			}
		}

		public void RemoveidAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "id", index);
		}

		public void Removeid()
		{
			while (Hasid())
				RemoveidAt(0);
		}

		public void Addid(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "id", newValue.ToString());
		}

		public void InsertidAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "id", index, newValue.ToString());
		}

		public void ReplaceidAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "id", index, newValue.ToString());
		}
		#endregion // id accessor methods

		#region id collection
        public idCollection	Myids = new idCollection( );

        public class idCollection: IEnumerable
        {
            FileNameType parent;
            public FileNameType Parent
			{
				set
				{
					parent = value;
				}
			}
			public idEnumerator GetEnumerator() 
			{
				return new idEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class idEnumerator: IEnumerator 
        {
			int nIndex;
			FileNameType parent;
			public idEnumerator(FileNameType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.idCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetidAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // id collection

        private void SetCollectionParents()
        {
            Myids.Parent = this; 
	}
}
}
