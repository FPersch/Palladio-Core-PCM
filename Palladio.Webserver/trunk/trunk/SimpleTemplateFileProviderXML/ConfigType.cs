//
// ConfigType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace SimpleTemplateFileProviderXML
{
	public class ConfigType : Altova.Xml.Node
	{
		#region Forward constructors
		public ConfigType() : base() { SetCollectionParents(); }
		public ConfigType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public ConfigType(XmlNode node) : base(node) { SetCollectionParents(); }
		public ConfigType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

			for (int i = 0; i < DomChildCount(NodeType.Attribute, "", "xmlns:xsi"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "xmlns:xsi", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			for (int i = 0; i < DomChildCount(NodeType.Attribute, "", "xsi:noNamespaceSchemaLocation"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "xsi:noNamespaceSchemaLocation", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			for (int i = 0; i < DomChildCount(NodeType.Element, "", "HandledFileTypes"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "HandledFileTypes", i);
				InternalAdjustPrefix(DOMNode, false);
				new HandledFileTypesType(DOMNode).AdjustPrefix();
			}

			for (int i = 0; i < DomChildCount(NodeType.Element, "", "Variablesname"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "Variablesname", i);
				InternalAdjustPrefix(DOMNode, false);
				new VariablesnameType(DOMNode).AdjustPrefix();
			}
		}


		#region xmlns_xsi accessor methods
		public int Getxmlns_xsiMinCount()
		{
			return 1;
		}

		public int xmlns_xsiMinCount
		{
			get
			{
				return 1;
			}
		}

		public int Getxmlns_xsiMaxCount()
		{
			return 1;
		}

		public int xmlns_xsiMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int Getxmlns_xsiCount()
		{
			return DomChildCount(NodeType.Attribute, "", "xmlns:xsi");
		}

		public int xmlns_xsiCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "xmlns:xsi");
			}
		}

		public bool Hasxmlns_xsi()
		{
			return HasDomChild(NodeType.Attribute, "", "xmlns:xsi");
		}

		public SchemaString Getxmlns_xsiAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "xmlns:xsi", index)));
		}

		public SchemaString Getxmlns_xsi()
		{
			return Getxmlns_xsiAt(0);
		}

		public SchemaString xmlns_xsi
		{
			get
			{
				return Getxmlns_xsiAt(0);
			}
		}

		public void Removexmlns_xsiAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "xmlns:xsi", index);
		}

		public void Removexmlns_xsi()
		{
			while (Hasxmlns_xsi())
				Removexmlns_xsiAt(0);
		}

		public void Addxmlns_xsi(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "xmlns:xsi", newValue.ToString());
		}

		public void Insertxmlns_xsiAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "xmlns:xsi", index, newValue.ToString());
		}

		public void Replacexmlns_xsiAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "xmlns:xsi", index, newValue.ToString());
		}
		#endregion // xmlns_xsi accessor methods

		#region xmlns_xsi collection
        public xmlns_xsiCollection	Myxmlns_xsis = new xmlns_xsiCollection( );

        public class xmlns_xsiCollection: IEnumerable
        {
            ConfigType parent;
            public ConfigType Parent
			{
				set
				{
					parent = value;
				}
			}
			public xmlns_xsiEnumerator GetEnumerator() 
			{
				return new xmlns_xsiEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class xmlns_xsiEnumerator: IEnumerator 
        {
			int nIndex;
			ConfigType parent;
			public xmlns_xsiEnumerator(ConfigType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.xmlns_xsiCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.Getxmlns_xsiAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // xmlns_xsi collection

		#region xsi_noNamespaceSchemaLocation accessor methods
		public int Getxsi_noNamespaceSchemaLocationMinCount()
		{
			return 1;
		}

		public int xsi_noNamespaceSchemaLocationMinCount
		{
			get
			{
				return 1;
			}
		}

		public int Getxsi_noNamespaceSchemaLocationMaxCount()
		{
			return 1;
		}

		public int xsi_noNamespaceSchemaLocationMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int Getxsi_noNamespaceSchemaLocationCount()
		{
			return DomChildCount(NodeType.Attribute, "", "xsi:noNamespaceSchemaLocation");
		}

		public int xsi_noNamespaceSchemaLocationCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "xsi:noNamespaceSchemaLocation");
			}
		}

		public bool Hasxsi_noNamespaceSchemaLocation()
		{
			return HasDomChild(NodeType.Attribute, "", "xsi:noNamespaceSchemaLocation");
		}

		public SchemaString Getxsi_noNamespaceSchemaLocationAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "xsi:noNamespaceSchemaLocation", index)));
		}

		public SchemaString Getxsi_noNamespaceSchemaLocation()
		{
			return Getxsi_noNamespaceSchemaLocationAt(0);
		}

		public SchemaString xsi_noNamespaceSchemaLocation
		{
			get
			{
				return Getxsi_noNamespaceSchemaLocationAt(0);
			}
		}

		public void Removexsi_noNamespaceSchemaLocationAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "xsi:noNamespaceSchemaLocation", index);
		}

		public void Removexsi_noNamespaceSchemaLocation()
		{
			while (Hasxsi_noNamespaceSchemaLocation())
				Removexsi_noNamespaceSchemaLocationAt(0);
		}

		public void Addxsi_noNamespaceSchemaLocation(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "xsi:noNamespaceSchemaLocation", newValue.ToString());
		}

		public void Insertxsi_noNamespaceSchemaLocationAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "xsi:noNamespaceSchemaLocation", index, newValue.ToString());
		}

		public void Replacexsi_noNamespaceSchemaLocationAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "xsi:noNamespaceSchemaLocation", index, newValue.ToString());
		}
		#endregion // xsi_noNamespaceSchemaLocation accessor methods

		#region xsi_noNamespaceSchemaLocation collection
        public xsi_noNamespaceSchemaLocationCollection	Myxsi_noNamespaceSchemaLocations = new xsi_noNamespaceSchemaLocationCollection( );

        public class xsi_noNamespaceSchemaLocationCollection: IEnumerable
        {
            ConfigType parent;
            public ConfigType Parent
			{
				set
				{
					parent = value;
				}
			}
			public xsi_noNamespaceSchemaLocationEnumerator GetEnumerator() 
			{
				return new xsi_noNamespaceSchemaLocationEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class xsi_noNamespaceSchemaLocationEnumerator: IEnumerator 
        {
			int nIndex;
			ConfigType parent;
			public xsi_noNamespaceSchemaLocationEnumerator(ConfigType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.xsi_noNamespaceSchemaLocationCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.Getxsi_noNamespaceSchemaLocationAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // xsi_noNamespaceSchemaLocation collection

		#region HandledFileTypes accessor methods
		public int GetHandledFileTypesMinCount()
		{
			return 1;
		}

		public int HandledFileTypesMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetHandledFileTypesMaxCount()
		{
			return 1;
		}

		public int HandledFileTypesMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetHandledFileTypesCount()
		{
			return DomChildCount(NodeType.Element, "", "HandledFileTypes");
		}

		public int HandledFileTypesCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "HandledFileTypes");
			}
		}

		public bool HasHandledFileTypes()
		{
			return HasDomChild(NodeType.Element, "", "HandledFileTypes");
		}

		public HandledFileTypesType GetHandledFileTypesAt(int index)
		{
			return new HandledFileTypesType(GetDomChildAt(NodeType.Element, "", "HandledFileTypes", index));
		}

		public HandledFileTypesType GetHandledFileTypes()
		{
			return GetHandledFileTypesAt(0);
		}

		public HandledFileTypesType HandledFileTypes
		{
			get
			{
				return GetHandledFileTypesAt(0);
			}
		}

		public void RemoveHandledFileTypesAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "HandledFileTypes", index);
		}

		public void RemoveHandledFileTypes()
		{
			while (HasHandledFileTypes())
				RemoveHandledFileTypesAt(0);
		}

		public void AddHandledFileTypes(HandledFileTypesType newValue)
		{
			AppendDomElement("", "HandledFileTypes", newValue);
		}

		public void InsertHandledFileTypesAt(HandledFileTypesType newValue, int index)
		{
			InsertDomElementAt("", "HandledFileTypes", index, newValue);
		}

		public void ReplaceHandledFileTypesAt(HandledFileTypesType newValue, int index)
		{
			ReplaceDomElementAt("", "HandledFileTypes", index, newValue);
		}
		#endregion // HandledFileTypes accessor methods

		#region HandledFileTypes collection
        public HandledFileTypesCollection	MyHandledFileTypess = new HandledFileTypesCollection( );

        public class HandledFileTypesCollection: IEnumerable
        {
            ConfigType parent;
            public ConfigType Parent
			{
				set
				{
					parent = value;
				}
			}
			public HandledFileTypesEnumerator GetEnumerator() 
			{
				return new HandledFileTypesEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class HandledFileTypesEnumerator: IEnumerator 
        {
			int nIndex;
			ConfigType parent;
			public HandledFileTypesEnumerator(ConfigType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.HandledFileTypesCount );
			}
			public HandledFileTypesType  Current 
			{
				get 
				{
					return(parent.GetHandledFileTypesAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // HandledFileTypes collection

		#region Variablesname accessor methods
		public int GetVariablesnameMinCount()
		{
			return 1;
		}

		public int VariablesnameMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetVariablesnameMaxCount()
		{
			return 1;
		}

		public int VariablesnameMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetVariablesnameCount()
		{
			return DomChildCount(NodeType.Element, "", "Variablesname");
		}

		public int VariablesnameCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Variablesname");
			}
		}

		public bool HasVariablesname()
		{
			return HasDomChild(NodeType.Element, "", "Variablesname");
		}

		public VariablesnameType GetVariablesnameAt(int index)
		{
			return new VariablesnameType(GetDomChildAt(NodeType.Element, "", "Variablesname", index));
		}

		public VariablesnameType GetVariablesname()
		{
			return GetVariablesnameAt(0);
		}

		public VariablesnameType Variablesname
		{
			get
			{
				return GetVariablesnameAt(0);
			}
		}

		public void RemoveVariablesnameAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Variablesname", index);
		}

		public void RemoveVariablesname()
		{
			while (HasVariablesname())
				RemoveVariablesnameAt(0);
		}

		public void AddVariablesname(VariablesnameType newValue)
		{
			AppendDomElement("", "Variablesname", newValue);
		}

		public void InsertVariablesnameAt(VariablesnameType newValue, int index)
		{
			InsertDomElementAt("", "Variablesname", index, newValue);
		}

		public void ReplaceVariablesnameAt(VariablesnameType newValue, int index)
		{
			ReplaceDomElementAt("", "Variablesname", index, newValue);
		}
		#endregion // Variablesname accessor methods

		#region Variablesname collection
        public VariablesnameCollection	MyVariablesnames = new VariablesnameCollection( );

        public class VariablesnameCollection: IEnumerable
        {
            ConfigType parent;
            public ConfigType Parent
			{
				set
				{
					parent = value;
				}
			}
			public VariablesnameEnumerator GetEnumerator() 
			{
				return new VariablesnameEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class VariablesnameEnumerator: IEnumerator 
        {
			int nIndex;
			ConfigType parent;
			public VariablesnameEnumerator(ConfigType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.VariablesnameCount );
			}
			public VariablesnameType  Current 
			{
				get 
				{
					return(parent.GetVariablesnameAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Variablesname collection

        private void SetCollectionParents()
        {
            Myxmlns_xsis.Parent = this; 
            Myxsi_noNamespaceSchemaLocations.Parent = this; 
            MyHandledFileTypess.Parent = this; 
            MyVariablesnames.Parent = this; 
	}
}
}
