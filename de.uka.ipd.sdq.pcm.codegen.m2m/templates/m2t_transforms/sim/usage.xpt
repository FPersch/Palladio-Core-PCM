«EXTENSION m2t_transforms::java_names»
«EXTENSION m2t_transforms::pcm»
«IMPORT system»
«IMPORT core::composition»
«IMPORT usagemodel»
«IMPORT core::entity»
«IMPORT repository»
«IMPORT allocation»

«DEFINE Main FOR UsageModel»
	«FILE "main/SimuComControl.java"»
		package main;
		
		/**
		* Main class of this SimuCom instance. Used as entry by the SimuCom Framework. The 
		* simulation starts executing in the abstract base class and calls the methods of this 
		* class as template methods from the template method design pattern. This class is instanciated
		* by the SimuCom framework simulation loader via the simulation dock and Eclipse's service
		* instanciation mechanismn.
		**/
		public class SimuComControl extends de.uka.ipd.sdq.simucomframework.AbstractMain 
		{
			// Override abstract framework method and return the workloads of this usage model
			protected de.uka.ipd.sdq.simucomframework.usage.IWorkloadDriver[] getWorkloads() {
				«LET this.usageScenario_UsageModel.querySystemCalls().providedRole_EntryLevelSystemCall.providingEntity_ProvidedRole.uniqueSystemList() AS systemList»
					// Create «systemList.size» System(s)
					«FOREACH systemList AS system»
						«system.fqn()» my«system.javaName()» = new «system.fqn()»();
						«EXPAND UsageScenarioConstructorContextInit FOR system»
					«ENDFOREACH»
				return new de.uka.ipd.sdq.simucomframework.usage.IWorkloadDriver[] {
					«EXPAND WorkloadDriver FOREACH this.usageScenario_UsageModel SEPARATOR ","»
				};
				«ENDLET»
			}

			// Return the generated resource container class
			protected de.uka.ipd.sdq.simucomframework.resources.IResourceContainerFactory getResourceContainerFactory(){
				return new ResourceEnvironment();
			}
			
			@Override
			protected void setupCalculators() {
				«EXPAND InitCalculatorsTM FOREACH this.usageScenario_UsageModel»
			}
			
		}
	«ENDFILE»
«ENDDEFINE»

«DEFINE UsageScenarioConstructorContextInit FOR System»
		«this.fqnContext()» context«this.javaName()» = 
			new «this.fqnContext()»
				(«EXPAND m2t_transforms::usage::DummyRequiredSystemTM(this) FOREACH this.requiredRoles_InterfaceRequiringEntity.typeSelect(OperationRequiredRole) SEPARATOR ","»);
      	my«this.javaName()».setContext(context«this.javaName()»);
«ENDDEFINE»


«DEFINE UsageScenario(Allocation a) FOR UsageScenario»
	«EXPAND m2t_transforms::sim::usage_factory::UsageScenarioFactory FOR this»
	«FILE this.implementationPackage().fqnToDirectoryPath() + "/" + this.javaName() + ".java"»
		package «this.implementationPackage()»;
		public class «this.javaName()» 
		implements de.uka.ipd.sdq.simucomframework.usage.IScenarioRunner
		{
			«EXPAND m2t_transforms::usage::SystemMemberVar FOREACH this.querySystemCalls().providedRole_EntryLevelSystemCall.toSet()»
			private de.uka.ipd.sdq.simucomframework.Context ctx = null;
			«EXPAND UsageScenarioConstructor(a) FOR this»
			
			«EXPAND ScenarioRunner(this) FOR this.scenarioBehaviour_UsageScenario»
		}
	«ENDFILE»
«ENDDEFINE» 

«DEFINE ScenarioRunner(UsageScenario us) FOR ScenarioBehaviour»
	public void scenarioRunner(de.uka.ipd.sdq.simucomframework.abstractSimEngine.SimProcess thread) {
		
		// Store our thread in the context. The thread is used later to suspend execution in case
		// of waiting at a resource
		ctx.setSimProcess(thread);
		
		«EXPAND m2t_transforms::sensors::StartResponseTimeMeasurementTM FOR us.entityName.javaVariableName()»
		{
		
			// Here comes the usage scenario code...
			«EXPAND m2t_transforms::usage::UserActions FOR this.actions_ScenarioBehaviour.typeSelect(Start).get(0)»
		
		}
		«EXPAND m2t_transforms::sensors::EndResponseTimeMeasurementTM FOR us.entityName.javaVariableName()»
		
		// A run through this usage model is complete
		// The counter for main measurements is incremented by the SimProcess.internalLifeCycle that called this 
		// ctx.getModel().increaseMainMeasurementsCount();
	}
«ENDDEFINE»

«DEFINE WorkloadDriver FOR UsageScenario»
	new «EXPAND WorkloadClass(this) FOR this.workload_UsageScenario»
«ENDDEFINE»

«DEFINE WorkloadClass(UsageScenario u) FOR Workload»
	«ERROR "OAW GENERATION ERROR [m2t_transforms/sim/usage.xpt]: AbstractWorkload found! This is imposible!"»
«ENDDEFINE»

«DEFINE WorkloadClass(UsageScenario u) FOR ClosedWorkload»
	«LET u.querySystemCalls().providedRole_EntryLevelSystemCall.providingEntity_ProvidedRole.uniqueSystemList() AS systemList»
		de.uka.ipd.sdq.simucomframework.usage.ClosedWorkload(
			new «u.implementationPackage()+"."+u.javaName()+"Factory"»(getModel(),«EXPAND SystemVariableParameter FOREACH systemList SEPARATOR ","»),«this.population»)
	«ENDLET»
«ENDDEFINE»

«DEFINE SystemVariableParameter FOR System»
	my«this.javaName()»
«ENDDEFINE»

«DEFINE SystemVariableDecl FOR System»
	«this.fqn()» my«this.javaName()»
«ENDDEFINE»

«DEFINE WorkloadClass(UsageScenario u) FOR OpenWorkload»
	«LET u.querySystemCalls().providedRole_EntryLevelSystemCall.providingEntity_ProvidedRole.uniqueSystemList() AS systemList»
		de.uka.ipd.sdq.simucomframework.usage.OpenWorkload(getModel(),
			new «u.implementationPackage()+"."+u.javaName()+"Factory"»(getModel(),«EXPAND SystemVariableParameter FOREACH systemList SEPARATOR ","»),
			"«this.interArrivalTime_OpenWorkload.specification.specificationString()»")
	«ENDLET»
«ENDDEFINE»

«DEFINE UsageScenarioConstructor(Allocation a) FOR UsageScenario»
	«LET this.querySystemCalls().providedRole_EntryLevelSystemCall.providingEntity_ProvidedRole.uniqueSystemList() AS systemList»
		public «this.javaName()»(de.uka.ipd.sdq.simucomframework.model.SimuComModel model,«EXPAND SystemVariableDecl FOREACH systemList SEPARATOR ","») {
			ctx = new «a.fqnAllocationContext()»(model);
			ctx.getStack().createAndPushNewStackFrame();
			«EXPAND m2t_transforms::usage::UsageScenarioConstructorContextInit(a) FOR this»
		}
	«ENDLET»
«ENDDEFINE»

«REM»Template Method for the calculator initialization«ENDREM»
«DEFINE InitCalculatorsTM FOR UsageScenario»
«ENDDEFINE»
