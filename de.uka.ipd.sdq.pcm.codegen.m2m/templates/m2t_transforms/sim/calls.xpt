«EXTENSION m2t_transforms::java_names»
«EXTENSION m2t_transforms::pcm»
«IMPORT system»
«IMPORT core::composition»
«IMPORT usagemodel»
«IMPORT core::entity»
«IMPORT repository»
«IMPORT parameter»
«IMPORT seff»

«DEFINE PreCall(Object call, String prefix, List[VariableUsage] parameterUsages) FOR OperationSignature»
	«IF ExternalCallAction.isInstance(call)»
		// If the call goes over network, simulate the possibility of a communication link failure.
		// This only works in case that the "simulate linking resources" option is deactivated.
		if ((ctx.getModel().getConfig().getSimulateFailures()) && (!ctx.getModel().getConfig().getSimulateLinkingResources())) {
			de.uka.ipd.sdq.simucomframework.resources.AbstractSimulatedResourceContainer fromContainer = null;
			de.uka.ipd.sdq.simucomframework.resources.AbstractSimulatedResourceContainer toContainer = null;
			try {
				fromContainer = ctx.findResource(this.assemblyContextID);
				toContainer = ctx.findResource(«prefix»getComponentAssemblyContextID());
		   	} catch (de.uka.ipd.sdq.simucomframework.exceptions.ResourceContainerNotFound exception) {
				// If the call is system external, no target resource container will be found.
			    // In this case, assume there is no possibility for comm link failures.
		   	}
			if ((fromContainer != null) && (toContainer != null) && (!fromContainer.getResourceContainerID().equals(toContainer.getResourceContainerID()))) {
				String linkingResourceID = main.ResourceEnvironment.getInstance().getLinkingResourceContainerID(fromContainer.getResourceContainerID(), toContainer.getResourceContainerID());
				if (linkingResourceID == null) {
					linkingResourceID = main.ResourceEnvironment.getInstance().getLinkingResourceContainerID(toContainer.getResourceContainerID(), fromContainer.getResourceContainerID());
				}
				de.uka.ipd.sdq.simucomframework.resources.SimulatedLinkingResourceContainer linkingContainer = ctx.findLinkingResource(linkingResourceID);
				double failureProbability = linkingContainer.getActiveResources().iterator().next().getFailureProbability();
				if ((failureProbability > 0.0) && (Math.random() < failureProbability)) {
   		   		   de.uka.ipd.sdq.simucomframework.exceptions.EnvironmentFailureException.raise("LAN");
  				}
  		    }
		}
	«ENDIF»		
	«EXPAND PrepareSimulatedStackFrame(parameterUsages) FOR this»
	«IF ExternalCallAction.isInstance(call)»
		«EXPAND m2t_transforms::sensors::StartResponseTimeMeasurementTM FOR "Call "+this.interface_Signature.entityName+"."+this.javaSignature()+" <Component: "+((ExternalCallAction)call).findContainerComponent().entityName+", AssemblyCtx: \"+this.assemblyContextID+\", CallID: "+((ExternalCallAction)call).id+">"»
	«ELSE»
		«EXPAND m2t_transforms::sensors::StartResponseTimeMeasurementTM FOR "Call_"+this.javaSignature()»
	«ENDIF»		
	de.uka.ipd.sdq.simucomframework.variables.stackframe.SimulatedStackframe<Object> callResult =	
«ENDDEFINE»

«DEFINE PrepareSimulatedStackFrame(List[VariableUsage] parameterUsages) FOR OperationSignature»
	// Start Simulate an external call
	try{
	de.uka.ipd.sdq.simucomframework.variables.stackframe.SimulatedStackframe<Object> currentFrame = ctx.getStack().currentStackFrame();
	// prepare stackframe
	de.uka.ipd.sdq.simucomframework.variables.stackframe.SimulatedStackframe<Object> stackframe = ctx.getStack().createAndPushNewStackFrame();
	«FOREACH parameterUsages AS pu»
		«LET pu.parameterUsageLHS() AS lhs_prefix»
			«FOREACH pu.variableCharacterisation_VariableUsage AS vc»
				«IF pu.namedReference_VariableUsage.isInnerReference()»
					stackframe.addValue("«lhs_prefix+'.'+vc.type.toString()»",
					   	new de.uka.ipd.sdq.simucomframework.variables.EvaluationProxy("«vc.specification_VariableCharacterisation.specification.specificationString()»",currentFrame.copyFrame()));
				«ELSE»
					stackframe.addValue("«lhs_prefix+'.'+vc.type.toString()»",
					   	ctx.evaluate("«vc.specification_VariableCharacterisation.specification.specificationString()»",currentFrame));
				«ENDIF»
			«ENDFOREACH»
		«ENDLET»
	«ENDFOREACH» 
«ENDDEFINE»
«DEFINE TidySimulatedStackFrame FOR OperationSignature»
 	ctx.getStack().removeStackFrame();
«ENDDEFINE»
«DEFINE PostCall(Object call, String prefix, List[VariableUsage] outParameterUsages) FOR OperationSignature»
	«IF ExternalCallAction.isInstance(call)»
		// If the return comes over network, simulate the possibility of a communication link failure.
		// This only works in case that the "simulate linking resources" option is deactivated.
		if ((ctx.getModel().getConfig().getSimulateFailures()) && (!ctx.getModel().getConfig().getSimulateLinkingResources())) {
			de.uka.ipd.sdq.simucomframework.resources.AbstractSimulatedResourceContainer fromContainer = null;
			de.uka.ipd.sdq.simucomframework.resources.AbstractSimulatedResourceContainer toContainer = null;
			try {
				fromContainer = ctx.findResource(this.assemblyContextID);
				toContainer = ctx.findResource(«prefix»getComponentAssemblyContextID());
		   	} catch (de.uka.ipd.sdq.simucomframework.exceptions.ResourceContainerNotFound exception) {
				// If the call is system external, no target resource container will be found.
			    // In this case, assume there is no possibility for comm link failures.
		   	}
			if ((fromContainer != null) && (toContainer != null) && (!fromContainer.getResourceContainerID().equals(toContainer.getResourceContainerID()))) {
				String linkingResourceID = main.ResourceEnvironment.getInstance().getLinkingResourceContainerID(fromContainer.getResourceContainerID(), toContainer.getResourceContainerID());
				if (linkingResourceID == null) {
					linkingResourceID = main.ResourceEnvironment.getInstance().getLinkingResourceContainerID(toContainer.getResourceContainerID(), fromContainer.getResourceContainerID());
				}
				de.uka.ipd.sdq.simucomframework.resources.SimulatedLinkingResourceContainer linkingContainer = ctx.findLinkingResource(linkingResourceID);
				double failureProbability = linkingContainer.getActiveResources().iterator().next().getFailureProbability();
				if ((failureProbability > 0.0) && (Math.random() < failureProbability)) {
   		   		   de.uka.ipd.sdq.simucomframework.exceptions.EnvironmentFailureException.raise("LAN");
  				}
  		    }
		}
	«ENDIF»		
	// Stop the time measurement
	«IF ExternalCallAction.isInstance(call)»
		«EXPAND m2t_transforms::sensors::EndResponseTimeMeasurementTM FOR "Call "+this.interface_Signature.entityName+"."+this.javaSignature()+" <Component: "+((ExternalCallAction)call).findContainerComponent().entityName+", AssemblyCtx: \"+this.assemblyContextID+\", CallID: "+((ExternalCallAction)call).id+">"»
	«ELSE»
		«EXPAND m2t_transforms::sensors::EndResponseTimeMeasurementTM FOR "Call_"+this.javaSignature()»
	«ENDIF»		

	«FOREACH outParameterUsages AS pu»
		«LET pu.parameterUsageLHS() AS lhs_prefix»
			// Copy out parameter «lhs_prefix» to local stack frame
			«FOREACH pu.variableCharacterisation_VariableUsage AS vc»
				«IF pu.namedReference_VariableUsage.isInnerReference()»
					methodBodyStackFrame.addValue("«lhs_prefix+'.'+vc.type.toString()»",
					   	new de.uka.ipd.sdq.simucomframework.variables.EvaluationProxy("«vc.specification_VariableCharacterisation.specification.specificationString()»",callResult.copyFrame()));
				«ELSE»
					methodBodyStackFrame.addValue("«lhs_prefix+'.'+vc.type.toString()»",
					   	ctx.evaluate("«vc.specification_VariableCharacterisation.specification.specificationString()»",callResult));
				«ENDIF»
			«ENDFOREACH»
		«ENDLET»
	«ENDFOREACH» 
	}
	finally
	{
		«EXPAND TidySimulatedStackFrame FOR this»
	}
	// END Simulate an external call
«ENDDEFINE»

