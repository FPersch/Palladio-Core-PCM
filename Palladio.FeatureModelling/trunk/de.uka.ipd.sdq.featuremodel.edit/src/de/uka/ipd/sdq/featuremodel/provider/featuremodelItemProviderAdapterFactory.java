/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package de.uka.ipd.sdq.featuremodel.provider;

import de.uka.ipd.sdq.featuremodel.util.featuremodelAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class featuremodelItemProviderAdapterFactory extends featuremodelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public featuremodelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uka.ipd.sdq.featuremodel.FeatureDiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureDiagramItemProvider featureDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link de.uka.ipd.sdq.featuremodel.FeatureDiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureDiagramAdapter() {
		if (featureDiagramItemProvider == null) {
			featureDiagramItemProvider = new FeatureDiagramItemProvider(this);
		}

		return featureDiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uka.ipd.sdq.featuremodel.RequiredConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequiredConstraintItemProvider requiredConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link de.uka.ipd.sdq.featuremodel.RequiredConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequiredConstraintAdapter() {
		if (requiredConstraintItemProvider == null) {
			requiredConstraintItemProvider = new RequiredConstraintItemProvider(this);
		}

		return requiredConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uka.ipd.sdq.featuremodel.ProhibitsConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProhibitsConstraintItemProvider prohibitsConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link de.uka.ipd.sdq.featuremodel.ProhibitsConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProhibitsConstraintAdapter() {
		if (prohibitsConstraintItemProvider == null) {
			prohibitsConstraintItemProvider = new ProhibitsConstraintItemProvider(this);
		}

		return prohibitsConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uka.ipd.sdq.featuremodel.DefaultValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DefaultValueItemProvider defaultValueItemProvider;

	/**
	 * This creates an adapter for a {@link de.uka.ipd.sdq.featuremodel.DefaultValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDefaultValueAdapter() {
		if (defaultValueItemProvider == null) {
			defaultValueItemProvider = new DefaultValueItemProvider(this);
		}

		return defaultValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uka.ipd.sdq.featuremodel.PrimitiveAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrimitiveAttributeItemProvider primitiveAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link de.uka.ipd.sdq.featuremodel.PrimitiveAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrimitiveAttributeAdapter() {
		if (primitiveAttributeItemProvider == null) {
			primitiveAttributeItemProvider = new PrimitiveAttributeItemProvider(this);
		}

		return primitiveAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uka.ipd.sdq.featuremodel.EnumerationRange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumerationRangeItemProvider enumerationRangeItemProvider;

	/**
	 * This creates an adapter for a {@link de.uka.ipd.sdq.featuremodel.EnumerationRange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumerationRangeAdapter() {
		if (enumerationRangeItemProvider == null) {
			enumerationRangeItemProvider = new EnumerationRangeItemProvider(this);
		}

		return enumerationRangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uka.ipd.sdq.featuremodel.IntegerIntervalRange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerIntervalRangeItemProvider integerIntervalRangeItemProvider;

	/**
	 * This creates an adapter for a {@link de.uka.ipd.sdq.featuremodel.IntegerIntervalRange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerIntervalRangeAdapter() {
		if (integerIntervalRangeItemProvider == null) {
			integerIntervalRangeItemProvider = new IntegerIntervalRangeItemProvider(this);
		}

		return integerIntervalRangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uka.ipd.sdq.featuremodel.ContinousIntervalRange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContinousIntervalRangeItemProvider continousIntervalRangeItemProvider;

	/**
	 * This creates an adapter for a {@link de.uka.ipd.sdq.featuremodel.ContinousIntervalRange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContinousIntervalRangeAdapter() {
		if (continousIntervalRangeItemProvider == null) {
			continousIntervalRangeItemProvider = new ContinousIntervalRangeItemProvider(this);
		}

		return continousIntervalRangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uka.ipd.sdq.featuremodel.ElementListingAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementListingAttributeItemProvider elementListingAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link de.uka.ipd.sdq.featuremodel.ElementListingAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementListingAttributeAdapter() {
		if (elementListingAttributeItemProvider == null) {
			elementListingAttributeItemProvider = new ElementListingAttributeItemProvider(this);
		}

		return elementListingAttributeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (featureDiagramItemProvider != null) featureDiagramItemProvider.dispose();
		if (requiredConstraintItemProvider != null) requiredConstraintItemProvider.dispose();
		if (prohibitsConstraintItemProvider != null) prohibitsConstraintItemProvider.dispose();
		if (defaultValueItemProvider != null) defaultValueItemProvider.dispose();
		if (primitiveAttributeItemProvider != null) primitiveAttributeItemProvider.dispose();
		if (enumerationRangeItemProvider != null) enumerationRangeItemProvider.dispose();
		if (integerIntervalRangeItemProvider != null) integerIntervalRangeItemProvider.dispose();
		if (continousIntervalRangeItemProvider != null) continousIntervalRangeItemProvider.dispose();
		if (elementListingAttributeItemProvider != null) elementListingAttributeItemProvider.dispose();
	}

}
