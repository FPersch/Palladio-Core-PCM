«EXTENSION m2t_transforms::pcm»
«EXTENSION m2t_transforms::java_names»
«IMPORT system»
«IMPORT composition»
«IMPORT usagemodel»
«IMPORT entity»
«IMPORT repository»
«IMPORT seff»
«IMPORT resourcetype»
«IMPORT allocation»
«IMPORT parameter»
«IMPORT qosannotations»

«AROUND m2t_transforms::repository::ProvidesComponentTypeTM FOR ProvidesComponentType»
   «EXPAND m2t_transforms::java_core::ComponentImplementation FOR this»
«ENDAROUND»

«AROUND m2t_transforms::java_core::ParameterListTM FOR Signature»
	Context ctx
«ENDAROUND»

«AROUND m2t_transforms::java_core::ParameterUsageListTM FOR Signature»
   ctx
«ENDAROUND»

«AROUND m2t_transforms::java_core::ImportsTM FOR Object»
   import de.uka.ipd.sdq.simucomframework.Context;
   import de.uka.ipd.sdq.simucomframework.SimulatedComponent;   
   import de.uka.ipd.sdq.simucomframework.SimulatedSystem;
   import de.uka.ipd.sdq.simucomframework.AbstractUsageScenario;
   import de.uka.ipd.sdq.simucomframework.IUsageScenario;
   import de.uka.ipd.sdq.simucomframework.model.SimuComModel;
   import de.uka.ipd.sdq.simucomframework.resources.SimulatedResourceContainer;
   import desmoj.core.simulator.SimProcess;
«ENDAROUND»

«AROUND m2t_transforms::seff::Action FOR CollectionIteratorAction»
   for (int iterationCount = 0, maxIterationCount = (Integer)ctx.evaluate("«this.parameter_CollectionIteratorAction.parameterName».NUMBER_OF_ELEMENTS",Integer.class); 
            iterationCount < maxIterationCount; iterationCount++){
       	de.uka.ipd.sdq.simucomframework.stackframe.SimulatedStackframe loopFrame = ctx.getStack().createAndPushNewStackFrame(ctx.getStack().currentStackFrame());
       	ctx.evaluateInner(loopFrame, "«this.parameter_CollectionIteratorAction.parameterName».INNER");

       «EXPAND m2t_transforms::java_core::Actions FOR this.bodyBehaviour_Loop.steps_Behaviour.findStart()»
	   ctx.getStack().removeStackFrame();
   } 
«ENDAROUND»

«AROUND m2t_transforms::seff::Action FOR LoopAction»
   for (int iterationCount = 0, maxIterationCount = (Integer)ctx.evaluate("«this.iterations_LoopAction.specification.javaString()»",Integer.class); 
            iterationCount < maxIterationCount; iterationCount++){
       «EXPAND m2t_transforms::java_core::Actions FOR this.bodyBehaviour_Loop.steps_Behaviour.findStart()»
   } 
«ENDAROUND»

«AROUND m2t_transforms::seff::Action FOR BranchAction»
	«EXPAND m2t_transforms::sim::Branch FOR this»
«ENDAROUND»

«AROUND m2t_transforms::seff::Action FOR InternalAction»
	«EXPAND m2t_transforms::resources::ResourceDemands FOR this»
«ENDAROUND»


«AROUND m2t_transforms::usage::AllocationContextTM FOR Allocation»
	private Context ctx = null;
«ENDAROUND»

«AROUND m2t_transforms::usage::DummyRequiredSystemTM(System s) FOR RequiredRole»
	«EXPAND m2t_transforms::dummies::DummyComponent(s) FOR this»
	new «s.implementationPackage()».«this.fqnDummyComponent()»()
«ENDAROUND»

«AROUND m2t_transforms::java_core::ComponentConstructorTM FOR ProvidesComponentType»
	private String assemblyContextID = null;
	
	public «this.javaName()» (String assemblyContextID) {
		this.assemblyContextID = assemblyContextID;
	}
«ENDAROUND»

«AROUND m2t_transforms::composed_structure::ComponentConstructorParametersTM FOR AssemblyContext»
	"«this.id»"
«ENDAROUND»

«AROUND m2t_transforms::calls::PreCallTM(List[VariableUsage] parameterUsages) FOR Signature»
	// Start Simulate an external call
	{
	SimulatedStackframe currentFrame = ctx.getStack().currentStackFrame();
	// prepare stackframe
	de.uka.ipd.sdq.simucomframework.stackframe.SimulatedStackframe stackframe = ctx.getStack().createAndPushNewStackFrame();
	«FOREACH parameterUsages AS pu»
		«LET pu.parameterUsageLHS() AS lhs_prefix»
			«FOREACH pu.variableCharacterisation_VariableUsage AS vc»
				«IF pu.namedReference_VariableUsage.isInnerReference()»
					stackframe.addValue("«lhs_prefix+'.'+vc.type.toString()»",
					   	new de.uka.ipd.sdq.simucomframework.EvaluationProxy("«vc.specification.javaString()»",currentFrame.copyFrame()));
				«ELSE»
					stackframe.addValue("«lhs_prefix+'.'+vc.type.toString()»",
					   	ctx.evaluate("«vc.specification.javaString()»",currentFrame));
				«ENDIF»
			«ENDFOREACH»
		«ENDLET»
	«ENDFOREACH» 
	// Start a resonse time measurement
	double startTime = ctx.getModel().currentTime().getTimeValue();
«ENDAROUND»

«AROUND m2t_transforms::calls::PostCallTM FOR Signature»
	// Stop the resonse time measurement
	ctx.getModel().getSensorFactory().addMeasurement("Usage_«this.javaSignature()»",
		ctx.getModel().currentTime().getTimeValue()-startTime);
 	ctx.getStack().removeStackFrame();
	}
	// END Simulate an external call
«ENDAROUND»

«AROUND DummyMethodBodyTM(System s,RequiredRole r) FOR Signature»
	«LET s.qosAnnotations_System.specifiedExecutionTimes_QoSAnnotations.select(spet|spet.role_SpecifiedExecutionTime==r && spet.signature_SpecifiedTimeConsumption==this) AS annotations»
		«IF annotations.size == 1»
			double delay = (Double)ctx.evaluate("«annotations.get(0).specification.javaString()»");
			ctx.getThread().hold(new desmoj.core.simulator.SimTime(delay));
		«ENDIF»
	«ENDLET»
«ENDAROUND»