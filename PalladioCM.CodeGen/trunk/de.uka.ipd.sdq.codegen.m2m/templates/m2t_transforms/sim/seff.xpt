«EXTENSION m2t_transforms::java_names»
«EXTENSION m2t_transforms::pcm»
«IMPORT seff»
«IMPORT repository»

// ----------------------------
// SimuCom templates for parts of a SEFF
// ----------------------------
«DEFINE Action FOR CollectionIteratorAction»
   for (int iterationCount = 0, maxIterationCount = (Integer)ctx.evaluate("«this.parameter_CollectionIteratorAction.parameterName».NUMBER_OF_ELEMENTS",Integer.class); 
            iterationCount < maxIterationCount; iterationCount++){
       	de.uka.ipd.sdq.simucomframework.variables.stackframe.SimulatedStackframe loopFrame = ctx.getStack().createAndPushNewStackFrame(ctx.getStack().currentStackFrame());
       	ctx.evaluateInner(loopFrame, "«this.parameter_CollectionIteratorAction.parameterName».INNER");

       «EXPAND m2t_transforms::java_core::Actions FOR this.bodyBehaviour_Loop.steps_Behaviour.findStart()»
	   ctx.getStack().removeStackFrame();
   } 
«ENDDEFINE»

«DEFINE Action FOR LoopAction»
   for (int iterationCount = 0, maxIterationCount = (Integer)ctx.evaluate("«this.iterations_LoopAction.specification.specificationString()»",Integer.class); 
            iterationCount < maxIterationCount; iterationCount++){
       «EXPAND m2t_transforms::java_core::Actions FOR this.bodyBehaviour_Loop.steps_Behaviour.findStart()»
   } 
«ENDDEFINE»

«DEFINE Action FOR InternalAction»
	«EXPAND m2t_transforms::resources::ResourceDemands FOR this»
«ENDDEFINE»

«DEFINE Action FOR BranchAction»
	{
		«IF ProbabilisticBranchTransition.isInstance(this.branches_Branch.get(0))»
			double u = Math.random();
			double sum = 0;
			«EXPAND BranchTransition FOREACH this.branches_Branch SEPARATOR ""»
		«ELSE»
			«EXPAND BranchTransition FOREACH this.branches_Branch SEPARATOR " else "»
			else
				throw new RuntimeException("No branch condition evaluated to true :-(");
		«ENDIF»
	}
«ENDDEFINE»

«DEFINE BranchTransition FOR AbstractBranchTransition»
   «ERROR "Unknown branch transition found!"»
«ENDDEFINE»

«DEFINE BranchTransition FOR GuardedBranchTransition»
	if ((Boolean)ctx.evaluate("«this.branchCondition_BranchTransition.specification.specificationString()»") == true)
	{
		«EXPAND m2t_transforms::java_core::Actions FOR this.branchBehaviour_BranchTransition.steps_Behaviour.findStart()»
	}
«ENDDEFINE»

«DEFINE BranchTransition FOR ProbabilisticBranchTransition»
	if (sum <= u && u < sum + «this.branchProbability» )
	{
		«EXPAND m2t_transforms::java_core::Actions FOR this.branchBehaviour_BranchTransition.steps_Behaviour.findStart()»
	}
	sum += «this.branchProbability»;
«ENDDEFINE»

«DEFINE Action FOR AquireAction»
	// Aquire «this.resourceType_Aquire.entityName»
	ctx.findResource(this.assemblyContextID).aquirePassiveResource(ctx.getThread(),"«this.resourceType_Aquire.entityName»");
«ENDDEFINE»

«DEFINE Action FOR ReleaseAction»
	// Release «this.resourceType_Release.entityName»
	ctx.findResource(this.assemblyContextID).releasePassiveResource("«this.resourceType_Release.entityName»");
«ENDDEFINE»

«DEFINE Action FOR StartAction»
	«IF ResourceDemandingSEFF.isInstance(this.eContainer)»
	de.uka.ipd.sdq.simucomframework.variables.stackframe.SimulatedStackframe resultStackFrame = 
		new de.uka.ipd.sdq.simucomframework.variables.stackframe.SimulatedStackframe();
	de.uka.ipd.sdq.simucomframework.variables.stackframe.SimulatedStackframe methodBodyStackFrame = 
		ctx.getStack().currentStackFrame();
	«ENDIF»
	«IF BasicComponent.isInstance(this.eContainer.eContainer) && false»
		«LET (BasicComponent)this.eContainer.eContainer AS bc»
			«FOREACH bc.internalVariables_BasicComponent AS pu»
				«FOREACH pu.variableCharacterisation_VariableUsage AS vc»
					ctx.getStack().currentStackFrame().addValue("«pu.parameterUsageLHS()+'.'+vc.type.toString()»",
					   	ctx.evaluate("«vc.specification.javaString()»",ctx.getStack().currentStackFrame()));
				«ENDFOREACH»
			«ENDFOREACH»
		«ENDLET»
	«ENDIF»
«ENDDEFINE»

«DEFINE Action FOR StopAction»
	«IF ResourceDemandingSEFF.isInstance(this.eContainer)»
	return resultStackFrame;
	«ENDIF»
«ENDDEFINE»

«DEFINE Action FOR SetVariableAction»
	«FOREACH this.variableUsage_SetVariableAction.variableCharacterisation_VariableUsage AS vc»
	resultStackFrame.addValue("«this.variableUsage_SetVariableAction.parameterUsageLHS()».«vc.type.toString()»",
		ctx.evaluate("«vc.specification.javaString()»"));
	«ENDFOREACH»
«ENDDEFINE»

«DEFINE Action FOR ForkAction»
	{
		de.uka.ipd.sdq.simucomframework.fork.ForkedBehaviourProcess[] forks =
			new de.uka.ipd.sdq.simucomframework.fork.ForkedBehaviourProcess[]{ 
			«FOREACH this.forkedBehaviours_Fork AS f SEPARATOR ","»
				new de.uka.ipd.sdq.simucomframework.fork.ForkedBehaviourProcess(ctx,assemblyContextID){
					public void executeBehaviour() {
						«EXPAND m2t_transforms::java_core::Actions FOR f.steps_Behaviour.findStart()» 
					}
				}
			«ENDFOREACH»
			};
		new de.uka.ipd.sdq.simucomframework.fork.ForkExecutor(ctx.getThread(),forks).run();
	}
«ENDDEFINE»