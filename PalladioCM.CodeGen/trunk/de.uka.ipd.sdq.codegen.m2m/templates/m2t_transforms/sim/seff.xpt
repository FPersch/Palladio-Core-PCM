«EXTENSION m2t_transforms::java_names»
«EXTENSION m2t_transforms::pcm»
«IMPORT seff»
«IMPORT repository»
«IMPORT completions»

// ----------------------------
// SimuCom templates for parts of a SEFF
// ----------------------------
«DEFINE Action FOR CollectionIteratorAction»
   for (int iterationCount = 0, maxIterationCount = (Integer)ctx.evaluate("«this.parameter_CollectionIteratorAction.parameterName».NUMBER_OF_ELEMENTS",Integer.class); 
            iterationCount < maxIterationCount; iterationCount++){
       	de.uka.ipd.sdq.simucomframework.variables.stackframe.SimulatedStackframe loopFrame = ctx.getStack().createAndPushNewStackFrame(ctx.getStack().currentStackFrame());
       	ctx.evaluateInner(loopFrame, "«this.parameter_CollectionIteratorAction.parameterName».INNER");

       «EXPAND m2t_transforms::java_core::Actions FOR this.bodyBehaviour_Loop.steps_Behaviour.findStart()»
	   ctx.getStack().removeStackFrame();
   } 
«ENDDEFINE»

«DEFINE Action FOR LoopAction»
   for (int iterationCount = 0, maxIterationCount = (Integer)ctx.evaluate("«this.iterations_LoopAction.specification.specificationString()»",Integer.class); 
            iterationCount < maxIterationCount; iterationCount++){
       «EXPAND m2t_transforms::java_core::Actions FOR this.bodyBehaviour_Loop.steps_Behaviour.findStart()»
   } 
«ENDDEFINE»

«DEFINE Action FOR InternalAction»
	«EXPAND m2t_transforms::resources::ResourceDemands FOR this»
«ENDDEFINE»

«DEFINE Action FOR BranchAction»
	{
		«LET this.id.javaVariableName() AS counterID»
			«IF ProbabilisticBranchTransition.isInstance(this.branches_Branch.get(0))»
				double u«counterID» = Math.random();
				double sum«counterID» = 0;
				«EXPAND BranchTransition(counterID) FOREACH this.branches_Branch SEPARATOR ""»
			«ELSE»
				«EXPAND BranchTransition(counterID) FOREACH this.branches_Branch SEPARATOR " else "»
				else
					throw new RuntimeException("No branch condition evaluated to true :-(");
			«ENDIF»
		«ENDLET»
	}
«ENDDEFINE»

«DEFINE BranchTransition(String counterNumber) FOR AbstractBranchTransition»
   «ERROR "Unknown branch transition found!"»
«ENDDEFINE»

«DEFINE BranchTransition(String counterNumber) FOR GuardedBranchTransition»
	if ((Boolean)ctx.evaluate("«this.branchCondition_BranchTransition.specification.specificationString()»") == true)
	{
		«EXPAND m2t_transforms::java_core::Actions FOR this.branchBehaviour_BranchTransition.steps_Behaviour.findStart()»
	}
«ENDDEFINE»

«DEFINE BranchTransition(String counterNumber) FOR ProbabilisticBranchTransition»
	if (sum«counterNumber» <= u«counterNumber» && u«counterNumber» < sum«counterNumber» + «this.branchProbability» )
	{
		«EXPAND m2t_transforms::java_core::Actions FOR this.branchBehaviour_BranchTransition.steps_Behaviour.findStart()»
	}
	sum«counterNumber» += «this.branchProbability»;
«ENDDEFINE»

«DEFINE Action FOR AquireAction»
	// Aquire «this.resourceType_Aquire.entityName»
	((de.uka.ipd.sdq.simucomframework.resources.SimulatedResourceContainer)ctx.findResource(this.assemblyContextID))
		.aquirePassiveResource(ctx.getThread(),"«this.resourceType_Aquire.entityName»");
«ENDDEFINE»

«DEFINE Action FOR ReleaseAction»
	// Release «this.resourceType_Release.entityName»
	((de.uka.ipd.sdq.simucomframework.resources.SimulatedResourceContainer)ctx.findResource(this.assemblyContextID))
		.releasePassiveResource("«this.resourceType_Release.entityName»");
«ENDDEFINE»

«DEFINE Action FOR StartAction»
	«IF ResourceDemandingSEFF.isInstance(this.eContainer)»
		de.uka.ipd.sdq.simucomframework.variables.stackframe.SimulatedStackframe resultStackFrame = 
			new de.uka.ipd.sdq.simucomframework.variables.stackframe.SimulatedStackframe();
		de.uka.ipd.sdq.simucomframework.variables.stackframe.SimulatedStackframe methodBodyStackFrame = 
			ctx.getStack().currentStackFrame();
		if (this.myComponentStackFrame.getContents().size() > 0) {
			methodBodyStackFrame.addVariables(this.myComponentStackFrame);
		}
	«ENDIF»
«ENDDEFINE»

«DEFINE Action FOR StopAction»
	«IF ResourceDemandingSEFF.isInstance(this.eContainer)»
	return resultStackFrame;
	«ENDIF»
«ENDDEFINE»

«DEFINE Action FOR SetVariableAction»
	«LET this.variableUsage_SetVariableAction AS pu»
		«FOREACH pu.variableCharacterisation_VariableUsage AS vc»
			«IF pu.namedReference_VariableUsage.isInnerReference()»
				resultStackFrame.addValue("«this.variableUsage_SetVariableAction.parameterUsageLHS()».«vc.type.toString()»",
				   	new de.uka.ipd.sdq.simucomframework.variables.EvaluationProxy("«vc.specification.specificationString()»",methodBodyStackFrame.copyFrame()));
			«ELSE»
				resultStackFrame.addValue("«this.variableUsage_SetVariableAction.parameterUsageLHS()».«vc.type.toString()»",
					ctx.evaluate("«vc.specification.specificationString()»"));
			«ENDIF»
		«ENDFOREACH»
	«ENDLET»
«ENDDEFINE»

«DEFINE Action FOR ForkAction»
	{
		de.uka.ipd.sdq.simucomframework.fork.ForkedBehaviourProcess[] forks =
			new de.uka.ipd.sdq.simucomframework.fork.ForkedBehaviourProcess[]{ 
			«FOREACH this.forkedBehaviours_Fork AS f SEPARATOR ","»
				new de.uka.ipd.sdq.simucomframework.fork.ForkedBehaviourProcess(ctx,assemblyContextID){
					public void executeBehaviour() {
						«EXPAND m2t_transforms::java_core::Actions FOR f.steps_Behaviour.findStart()» 
					}
				}
			«ENDFOREACH»
			};
		new de.uka.ipd.sdq.simucomframework.fork.ForkExecutor(ctx.getThread(),forks).run();
	}
«ENDDEFINE»

«DEFINE Action FOR DelegatingExternalCallAction»
	de.uka.ipd.sdq.simucomframework.variables.stackframe.SimulatedStackframe callResult =	
   	myContext.getRole«this.calledService_ExternalService.interface_Signature.javaName()»().«this.calledService_ExternalService.javaSignature()» 
	   	(«EXPAND m2t_transforms::java_core::ParameterUsageListTM FOR this.calledService_ExternalService»);
	resultStackFrame = callResult;
«ENDDEFINE»
