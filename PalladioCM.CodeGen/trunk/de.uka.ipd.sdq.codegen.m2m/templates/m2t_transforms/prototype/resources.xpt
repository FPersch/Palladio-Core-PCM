«IMPORT repository»
«IMPORT seff»
«IMPORT resourcetype»
«IMPORT resourceenvironment»
«EXTENSION m2t_transforms::java_names»
«EXTENSION m2t_transforms::pcm»

// ----------------------------
// Templates to generate simulated resources and resource environments
// ----------------------------

// Load the resource demand on a simulated resource
«DEFINE ResourceDemand FOR ParametricResourceDemand»
   {
      double demand = (Double) ctx.evaluate("«this.specification.specificationString()»",Double.class);
      // TODO: Consume different resource types actively
      try {
		//Thread.sleep((long) (demand * 1000));
		//TODO: Erstmal nur CPU, sonst hier unterscheiden!
		String neededResource = "«this.requiredResource_ParametricResourceDemand.entityName»";
		
		if (neededResource.equals("cpu")){
		  de.uka.ipd.sdq.prototype.framework.strategies.DemandConsumerStrategiesRegistry.singleton()
		    .getStrategyFor(de.uka.ipd.sdq.prototype.framework.resourcetypes.ResourceTypeEnum.CPU).consume(demand);
		} else
		{
		  de.uka.ipd.sdq.prototype.framework.strategies.DemandConsumerStrategiesRegistry.singleton()
		    .getStrategyFor(de.uka.ipd.sdq.prototype.framework.resourcetypes.ResourceTypeEnum.HDD).consume(demand);
		}
	  } catch (Exception e) {
		e.printStackTrace();
		System.exit(-1);
	  }
   }
«ENDDEFINE»

// ----------------------------
// Templates for setup of the resource environment
// Generate a class which contains the model information
// and sets up the resource strategies accordingly
// ----------------------------
«DEFINE ResourceEnvironmentRoot FOR resourceenvironment::ResourceEnvironment»
	«FILE "ResourceEnvironmentFactory.java"»
		public class ResourceEnvironmentFactory {
		
			/* All resources are located on this machine, regardless of their resource container
			 * in the model */
			public static void setUpResources(){
		   		«EXPAND ResourceContainerInit FOREACH this.resourceContainer_ResourceEnvironment SEPARATOR " "»
			}
		}
	«ENDFILE»
«ENDDEFINE»

«DEFINE ResourceContainerInit FOR ResourceContainer»

		//active Resources of container «this.id»		
		«EXPAND ActiveResourceAdd FOREACH this.activeResourceSpecifications_ResourceContainer»

«REM»
Refactor!
		//passive Resources	of container «this.id»
		«EXPAND PassiveResourceAdd FOREACH this.passiveResourceSpecifications_ResourceContainer»
«ENDREM»

«ENDDEFINE»

«DEFINE ActiveResourceAdd FOR ProcessingResourceSpecification»

	if ("«this.activeResourceType_ActiveResourceSpecification.entityName»".equals("cpu")) {
	  de.uka.ipd.sdq.prototype.framework.strategies.DemandConsumerStrategiesRegistry.singleton()
	    .registerStrategyFor(de.uka.ipd.sdq.prototype.framework.resourcetypes.ResourceTypeEnum.CPU, new de.uka.ipd.sdq.prototype.framework.strategies.FibonacciCPUStrategy(«this.processingRate»));
	} else { 
	  de.uka.ipd.sdq.prototype.framework.strategies.DemandConsumerStrategiesRegistry.singleton()
	    .registerStrategyFor(de.uka.ipd.sdq.prototype.framework.resourcetypes.ResourceTypeEnum.HDD, new de.uka.ipd.sdq.prototype.framework.strategies.ReadLargeChunksHDDStrategy(«this.processingRate»));
	}
	
«ENDDEFINE»

«REM»
Refactor!
	«DEFINE PassiveResourceAdd FOR PassiveResourceSpecification»
			de.uka.ipd.sdq.prototype.framework.strategies.PassiveResourceRegistry.singleton()
			  .addPassiveResource(new de.uka.ipd.sdq.prototype.framework.strategies.PassiveResource(
			    «this.capacity»,
			    "«this.passiveResourceType_PassiveResourceSpecification.entityName»"));
	
	«ENDDEFINE»
«ENDREM»