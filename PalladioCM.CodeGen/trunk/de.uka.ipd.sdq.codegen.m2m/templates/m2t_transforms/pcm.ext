import core::entity;
import repository;
import seff;
import system;
import core::composition;
import usagemodel;
import parameter;
import stoex;
import completions;

findStart(List[AbstractAction] actions) :
   actions.typeSelect(StartAction).first();
   
connectors(ComposedStructure s) : 
   s.compositeAssemblyConnectors_ComposedStructure;

test(AssemblyConnector c, AssemblyContext ctx, RequiredRole r):
   c.requiredRole_CompositeAssemblyConnector.id == r.id && c.requiringChildComponentContext_CompositeAssemblyConnector.id == ctx.id;

hasConnector(ComposedStructure s, AssemblyContext ctx, RequiredRole r) :
   connectors(s).select(con|test(con,ctx,r)).size == 1; 
   
getConnector(ComposedStructure s, AssemblyContext ctx, RequiredRole r) :
   connectors(s).select(con|test(con,ctx,r)).get(0); 

hasProvidedDelegationConnector(ComposedStructure s, ProvidedRole p) :
   s.providedDelegationConnectors_ComposedStructure.select(dc|dc.outerProvidedRole_ProvidedDelegationConnector == p).size == 1;
   
getProvidedDelegationConnector(ComposedStructure s, ProvidedRole p) :
   s.providedDelegationConnectors_ComposedStructure.select(dc|dc.outerProvidedRole_ProvidedDelegationConnector == p).get(0);
   
hasRequiredDelegationConnector(ComposedStructure s, AssemblyContext ctx, RequiredRole r) :
   s.requiredDelegationConnectors_ComposedStructure.select(dc|dc.innerRequiredRole_RequiredDelegationConnector ==  r).size == 1;    
   
getRequiredDelegationConnector(ComposedStructure s, AssemblyContext ctx, RequiredRole r) :
   s.requiredDelegationConnectors_ComposedStructure.select(dc|dc.innerRequiredRole_RequiredDelegationConnector ==  r).get(0);  
   
List[EntryLevelSystemCall] querySytemCallsInLoops(ScenarioBehaviour scenBe):
	scenBe.actions_ScenarioBehaviour.typeSelect(Loop).collect(l|querySystemCalls(l.bodyBehaviour_Loop)).flatten();

List[EntryLevelSystemCall] querySytemCallsInBraches(ScenarioBehaviour scenBe):
	scenBe.actions_ScenarioBehaviour.typeSelect(Branch).collect(b|b.branchTransitions_Branch.branchedBehaviour_BranchTransition.querySystemCalls()).flatten();
	
List[EntryLevelSystemCall] querySystemCalls(ScenarioBehaviour scenBe) :
  scenBe.actions_ScenarioBehaviour.typeSelect(EntryLevelSystemCall).
  union(scenBe.querySytemCallsInLoops()).
  union(scenBe.querySytemCallsInBraches());

querySystemCalls(UsageScenario us) :
  querySystemCalls(us.scenarioBehaviour_UsageScenario);
  
getID(VariableReference vr) :
  vr.referenceName;

getID(AbstractNamedReference nsr):
  'this is never called';
  
getID(NamespaceReference nsr):
  nsr.referenceName + '.' + nsr.innerReference_NamespaceReference.getID();

parameterUsageLHS(VariableUsage vu) :
  vu.namedReference_VariableUsage.getID();
  
isInnerReference(VariableReference vr) :
  vr.referenceName == "INNER";

isInnerReference(AbstractNamedReference nsr):
  false;
  
isInnerReference(NamespaceReference nsr):
  nsr.referenceName == "INNER" || nsr.innerReference_NamespaceReference.isInnerReference();
  
collectRepositories(System s):
  s.childComponentContexts_ComposedStructure.encapsulatedComponent_ChildComponentContext.collectRepositories().
  	union(s.providedRoles_InterfaceProvidingEntity.collectRepositories()).
  	union(s.requiredRoles_InterfaceRequiringEntity.collectRepositories()).toSet();
  
collectRepositories(ProvidedRole pr):
	pr.providedInterface__ProvidedRole.repository_Interface;
	
collectRepositories(RequiredRole rr):
	rr.requiredInterface__RequiredRole.repository_Interface;
	
collectRepositories(ProvidesComponentType pct):
	pct.repository_ProvidesComponentType;
	
collectRepositories(CompositeComponent cc):
	cc.childComponentContexts_ComposedStructure.encapsulatedComponent_ChildComponentContext.collectRepositories().addAll(
		{cc.repository_ProvidesComponentType});
		
hasSEFF(Signature service, ProvidesComponentType c):
	!BasicComponent.isInstance(c) ? false : ((BasicComponent)c).serviceEffectSpecifications__BasicComponent.select(e|e.describedService__SEFF==service).size > 0;
	
getSEFF(Signature service, ProvidesComponentType c):
	((BasicComponent)c).serviceEffectSpecifications__BasicComponent.select(e|e.describedService__SEFF==service).get(0);
	
getAllCompletions(ComposedStructure s):
	s.childComponentContexts_ComposedStructure.encapsulatedComponent_ChildComponentContext.typeSelect(Completion).
		 union(s.childComponentContexts_ComposedStructure.encapsulatedComponent_ChildComponentContext.
		 		select(comp|comp != null && ComposedStructure.isInstance(comp) && !Completion.isInstance(comp)).
		 		typeSelect(ComposedStructure).collect(cs|cs.getAllCompletions()));
		 		
AbstractAction findStopAction(AbstractAction a):
	StopAction.isInstance(a) ? a : (a.successor_AbstractAction != null ? findStopAction(a.successor_AbstractAction) : null);

AbstractUserAction findStop(AbstractUserAction a):
	Stop.isInstance(a) ? a : (a.successor != null ? findStop(a.successor) : null);
	
List[InterfaceProvidingEntity] getProvidingEntities(List[ProvidedRole] pr) :
	getProvidingEntitiesRecursive(pr,0);
	
List[InterfaceProvidingEntity] getProvidingEntitiesRecursive(List[ProvidedRole] pr, int i) :
	i < pr.size
		? (getProvidingEntitiesRecursive(pr,i+1).contains(pr.get(i).providingEntity_ProvidedRole) ? getProvidingEntitiesRecursive(pr,i+1) : getProvidingEntitiesRecursive(pr,i+1).union({pr.get(i).providingEntity_ProvidedRole}) ) 
		: {};