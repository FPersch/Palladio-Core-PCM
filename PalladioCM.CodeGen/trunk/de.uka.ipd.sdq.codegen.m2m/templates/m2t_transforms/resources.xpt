«IMPORT repository»
«IMPORT seff»
«IMPORT resourcetype»
«IMPORT resourceenvironment»

«EXTENSION m2t_transforms::java_names»
«EXTENSION m2t_transforms::pcm»

«DEFINE ResourceDemands FOR AbstractResourceDemandingAction»
   «FOREACH this.resourceDemand_Action AS resDemand»
   {
      double demand = (Double) ctx.evaluate("«resDemand.specification.javaString()»",Double.class);
      ctx.findResource(this.assemblyContextID).loadActiveResource(ctx.getThread(),"«resDemand.requiredResource_ParametricResourceDemand.entityName»",demand);
   }
   «ENDFOREACH»
«ENDDEFINE»

«DEFINE Aquire FOR AquireAction»
   ctx.findResource(this.assemblyContextID).aquirePassiveResource(ctx.getThread(),"«this.resourceType_Aquire.entityName»");
«ENDDEFINE»

«DEFINE Release FOR ReleaseAction»
   ctx.findResource(this.assemblyContextID).releasePassiveResource("«this.resourceType_Release.entityName»");
«ENDDEFINE»

«DEFINE ResourceContainerInit FOR ResourceEnvironment»
	public String[] getResourceContainerIDList() {
		return new String[] { 
			«FOREACH this.resourceContainer_ResourceEnvironment AS rc SEPARATOR ","»
				"«rc.id»"
			«ENDFOREACH»
		};
	}
	
	public void fillResourceContainer(de.uka.ipd.sdq.simucomframework.resources.SimulatedResourceContainer rc) {
		«EXPAND ResourceContainerCase FOREACH this.resourceContainer_ResourceEnvironment SEPARATOR " else "»
		else
			throw new RuntimeException("Unknown resource container should be initialised. This should never happen");	
	}
«ENDDEFINE»

«DEFINE ResourceContainerCase FOR ResourceContainer»
	if (rc.getId().equals("«this.id»") {
		«EXPAND ActiveResourceAdd FOREACH this.activeResourceSpecifications_ResourceContainer»
		«EXPAND PassiveResourceAdd FOREACH this.passiveResourceSpecifications_ResourceContainer»
	}
«ENDDEFINE»

«DEFINE ActiveResourceAdd FOR ProcessingResourceSpecification»
	rc.addActiveResource(
		"«this.activeResourceType_ActiveResourceSpecification.entityName»",
		«this.processingRate»,
		"«this.units.javaString()»");
«ENDDEFINE»

«DEFINE PassiveResourceAdd FOR PassiveResourceSpecification»
	rc.addPassiveResource(
		"«this.passiveResourceType_PassiveResourceSpecification.entityName»",
		«this.capacity»);
«ENDDEFINE»
