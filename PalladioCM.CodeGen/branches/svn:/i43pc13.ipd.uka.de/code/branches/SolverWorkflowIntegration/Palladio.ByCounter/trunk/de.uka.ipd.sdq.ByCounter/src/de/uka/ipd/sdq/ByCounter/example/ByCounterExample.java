package de.uka.ipd.sdq.ByCounter.example;

import java.io.File;
import java.util.List;

import de.uka.ipd.sdq.ByCounter.execution.BytecodeCounter;
import de.uka.ipd.sdq.ByCounter.execution.CountingResult;
import de.uka.ipd.sdq.ByCounter.execution.CountingResultCollector;
import de.uka.ipd.sdq.ByCounter.utils.MethodDescriptor;

/**
 * <p>
 * This example class demonstrates the usage of ByCounter in different 
 * scenarios. This includes usage of the options, description of the 
 * methods to instrument and aggregation of results. This class should be studied as source code.
 * </p>
 * <p>
 * See the ByCounter documentation for a more thorough exploration
 * of these examples.
 * </p>
 * 
 * @author Martin Krogmann
 * @author Michael Kuperberg
 * @since 0.1
 * @version 1.1
 */
public class ByCounterExample {
	
	/**
	 * Examplary constructor with one argument.
	 * @param number An unimportant number.
	 */
	public ByCounterExample(int number) {
		// we have nothing to do
		// this is for demonstration purposes only
	}
	
	/**
	 * This dummy method is here to get instrumented in the example.
	 * @param str Some {@link String} that gets printed.
	 * @param f Some float that contributes to the result.
	 * @return An int value that is computed based on input (cf. source code).
	 */
	public static int dummyMethodToBeInstrumented(String str, float f) {
		System.out.println(str);
		if(f > 0) {
			return -1;
		}
		int result = (int)(2*f);
		return result;
	}
	
	/**
	 * Quickstart example of the most basic ByCounter usage.
	 */
	@SuppressWarnings("deprecation")
	public static void example1() {		
		//1. Set up a BytecodeCounter instance to use ByCounter, using a parameterless constructor. 
		BytecodeCounter counter = new BytecodeCounter();

		//2. Specify the method to be instrumented
		MethodDescriptor myMethod = new MethodDescriptor(
				"de.uka.ipd.sdq.ByCounter.example.ByCounterExample",
				"public static int dummyMethodToBeInstrumented(java.lang.String str, float f)");
		
		//3. now tell ByCounter to instrument the specified method
		counter.instrument(myMethod);

		//3.99 If the class which contains the method that we want to execute 
		// has no default constructor, we need to provide construction parameters.
		// If a default constructor is available, you can skip this step.
		MethodDescriptor constructor = MethodDescriptor.forConstructor(
				"de.uka.ipd.sdq.ByCounter.example", "ByCounterExample", 
				"public ByCounterExample(int number)");
		counter.setConstructionParameters(constructor, new Object[]{8});
		
		//4. let ByCounter execute the method (note that this class must be reloaded! TODO check)
		counter.execute(myMethod, new Object[] {"Hello world!", 0.0f});
		
		//5. now that ByCounter has completed counting, we can fetch the results,
		//i.e. get the results list from CountingResultCollector
		List<CountingResult> results = 
			CountingResultCollector.getInstance().getAllCountingResults_nonRecursively();
		
		//6. output the results to the console/log
		for(CountingResult r : results) {
			CountingResultCollector.getInstance().logResult(r, true, true);
		}
		
		//7. clear the results as we do not need them anymore
		CountingResultCollector.getInstance().clearResults();
	}

	/**
	 * Example of ByCounter usage with options.
	 */
	public static void example2() {
		//1. Set up a BytecodeCounter instance to use ByCounter. 
		BytecodeCounter counter = new BytecodeCounter();
		
		//2. In this example, we do not want to use the CountingResultCollector, so
		// we tell ByCounter to write to a log file instead.
		counter.getInstrumentationParams().setUseResultCollector(false);
		counter.getInstrumentationParams().setResultLogFileName(
				"myResults" + File.separatorChar + "fun_{$CLASSNAME}_{$METHODNAME}.log");
		
		//3. we want to keep the class files that are generated by ByCounter 
		// (to see what the instrumented file looks like), so we write the classes to disk
		counter.getInstrumentationParams().setWriteClassesToDisk(true);

		//3.99 If the class which contains the method that we want to execute 
		// has no default constructor, we need to provide construction parameters.
		// If a default constructor is available, you can skip this step.
		MethodDescriptor constructor = MethodDescriptor.forConstructor(
				"de.uka.ipd.sdq.ByCounter.example", "ByCounterExample", 
				"public ByCounterExample(int number)");
		counter.setConstructionParameters(constructor, new Object[]{8});
		
		//4. we want to know more about the usage of arrays in our code
		counter.getInstrumentationParams().setUseArrayParameterRecording(true);

		//5. as in the first example, we specify the method to instrument
		MethodDescriptor myMethod = new MethodDescriptor(
				"de.uka.ipd.sdq.ByCounter.example.ByCounterExample",
				"public static int dummyMethodToBeInstrumented(java.lang.String str, float f)");
		
		//6. ... we tell ByCounter to instrument the specified method
		counter.instrument(myMethod);
		
		//7. ... make ByCounter execute the method (note that this class must be reloaded! TODO check)
		counter.execute(myMethod, new Object[] {"Hello world!", 0.0f});
		
		//(8.)  since we wrote the results to a log file, we are done with this example
	}
	
	/**
	 * The application entry point.
	 * @param args No arguments are accepted.
	 */
	public static void main(String[] args) {
		example1();
		example2();
	}

}
