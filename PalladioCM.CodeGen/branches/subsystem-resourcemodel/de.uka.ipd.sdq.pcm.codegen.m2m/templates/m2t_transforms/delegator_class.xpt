«EXTENSION m2t_transforms::java_names»
«IMPORT repository»
«IMPORT resourcetype»

«DEFINE DelegatorClass(String prefix) FOR Interface»
   «FILE (this.implementationPackage()+".delegates").fqnToDirectoryPath()+"/"+prefix+this.javaName()+".java"»
	  package «this.implementationPackage()».delegates;
	  // Delegator class for interface «this.entityName»
	  public class «prefix»«this.javaName()» implements «this.fqn()»
	  {
		private static org.apache.log4j.Logger logger = 
			org.apache.log4j.Logger.getLogger(«this.fqn()».class.getName());
	  
	     protected «this.fqn()» myInnerPort = null;
	     
	     public «prefix»«this.javaName()»(«this.fqn()» myInnerPort){
	        this.myInnerPort = myInnerPort;
	     }
	     «EXPAND Delegator FOREACH this.signatures__Interface»
	  }
	«ENDFILE»
«ENDDEFINE»

«DEFINE DelegatorClass(String prefix) FOR ResourceInterface»
   «FILE (this.implementationPackage()+".delegates").fqnToDirectoryPath()+"/"+prefix+this.javaName()+".java"»
	  package «this.implementationPackage()».delegates;
	  // Delegator class for interface «this.entityName»
	  public class «prefix»«this.javaName()» implements «this.fqn()»
	  {
		private static org.apache.log4j.Logger logger = 
			org.apache.log4j.Logger.getLogger(«this.fqn()».class.getName());
	  
	     protected «this.fqn()» myInnerPort = null;
	     
	     public «prefix»«this.javaName()»(«this.fqn()» myInnerPort){
	        this.myInnerPort = myInnerPort;
	     }
	     «EXPAND Delegator FOREACH this.resourceServices_ResourceInterface»
	  }
	«ENDFILE»
«ENDDEFINE»

«DEFINE Delegator FOR Signature»
   public «EXPAND m2t_transforms::java_core::Signature FOR this» {
		logger.debug("Delegating «this.serviceName»");
		// Pre
		ctx.setEvaluationMode(de.uka.ipd.sdq.simucomframework.variables.stoexvisitor.VariableMode.EXCEPTION_ON_NOT_FOUND);
		«EXPAND m2t_transforms::java_core::ReturnTypeTM FOR this» result = myInnerPort.«this.javaSignature()»(
		     «EXPAND m2t_transforms::java_core::ParameterUsageListTM FOR this»);
		// Post
		ctx.setEvaluationMode(de.uka.ipd.sdq.simucomframework.variables.stoexvisitor.VariableMode.RETURN_DEFAULT_ON_NOT_FOUND);
		return result;
   }   
«ENDDEFINE»

«DEFINE Delegator FOR ResourceService»
   public «EXPAND m2t_transforms::java_core::ResourceService FOR this» {
		logger.debug("Delegating «this.serviceName»");
		// Pre
		ctx.setEvaluationMode(de.uka.ipd.sdq.simucomframework.variables.stoexvisitor.VariableMode.EXCEPTION_ON_NOT_FOUND);
		«EXPAND m2t_transforms::java_core::ReturnTypeTM FOR this» result = myInnerPort.«this.javaResourceService()»(
		     «EXPAND m2t_transforms::java_core::ParameterUsageListTM FOR this»);
		// Post
		ctx.setEvaluationMode(de.uka.ipd.sdq.simucomframework.variables.stoexvisitor.VariableMode.RETURN_DEFAULT_ON_NOT_FOUND);
		return result;
   }   
«ENDDEFINE»