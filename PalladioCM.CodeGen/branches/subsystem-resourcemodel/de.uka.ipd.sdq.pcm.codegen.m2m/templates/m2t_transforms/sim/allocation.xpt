«EXTENSION m2t_transforms::java_names»
«EXTENSION m2t_transforms::pcm»
«IMPORT repository»
«IMPORT entity»
«IMPORT system»
«IMPORT core::composition»
«IMPORT allocation»
«IMPORT resourceenvironment»
«IMPORT resourcerepository»

//------------------------------
// Allocation Context
// 1.) Generate a simulated resource environment
// 2.) Generate a context class which can be queried
//     to retrieve the resource container of the component in the 
//     current context
//------------------------------
«DEFINE Allocation FOR Allocation»
	«EXPAND m2t_transforms::sim::resources::ResourceEnvironmentRoot FOR this.targetResourceEnvironment_Allocation»
	«EXPAND InfrastructureComponentRoot FOREACH this.infrastructureComponentScopes_Allocation»
	«EXPAND AllocationRuntimeContext FOR this»
«ENDDEFINE»

«DEFINE AllocationRuntimeContext FOR Allocation»
	«FOREACH this.infrastructureComponentScopes_Allocation AS is»
			«EXPAND InfrastructureComponentInit FOR is»
	«ENDFOREACH»
	«FILE this.fqnAllocationContext().fqnToDirectoryPath()+".java"»
		package «this.fqnAllocationContextPackage()»;
		 
		public class «this.fqnAllocationContextClass()» 
		extends de.uka.ipd.sdq.simucomframework.Context {
			public «this.fqnAllocationContextClass()»(de.uka.ipd.sdq.simucomframework.model.SimuComModel myModel) {
				super(myModel);
			}
			
			protected void initialiseAssemblyContextLookup() {
				«EXPAND AssemblyContextLink FOREACH this.allocationContexts_Allocation»
				«EXPAND AssemblyContextLink FOREACH this.infrastructureComponentScopes_Allocation»
			}
			
			«FOREACH this.infrastructureComponentScopes_Allocation AS is»
				«is.fqn()» my«is.javaName()» = null;
			«ENDFOREACH»
			
			protected void initialiseAllocationConnectors() {
			«FOREACH this.infrastructureComponentScopes_Allocation AS is»
			my«is.javaName()» = new «is.fqn()»();
        	«is.fqnContext()» «is.id.javaVariableName()»_context«this.javaName()» = 
			new «is.fqnContext()»(
			«FOREACH is.assemblyContexts_ComposedStructure AS is_as»
			«EXPAND m2t_transforms::composed_structure::PortQuery(is, is_as) FOREACH is_as.encapsulatedComponent_AssemblyContext.requiredRoles_InterfaceRequiringEntity SEPARATOR ","»);
			«ENDFOREACH»
	      	my«is.javaName()».setContext(«is.id.javaVariableName()»_context«this.javaName()»);


			«ENDFOREACH»
				«EXPAND AllocationConnectors FOR this»
			}
			
		}
	«ENDFILE»
«ENDDEFINE»

«DEFINE InfrastructureComponentRoot FOR InfrastructureComponentScope»
	«EXPAND InfrastructureComponentResourceInterfaces FOR this»
«ENDDEFINE»

«DEFINE InfrastructureComponentResourceInterfaces FOR InfrastructureComponentScope»
	«FOREACH this.providedRoles_InterfaceProvidingEntity AS ir»
	   «EXPAND m2t_transforms::sim::resources::InterfaceFile FOR ir.providedInterface__ProvidedRole»
	«ENDFOREACH»
«ENDDEFINE»

// The following rule assumes the current 1:1 relationship between allocation context and
// assembly context!
«DEFINE AssemblyContextLink FOR AllocationContext»
	linkAssemblyContextAndResourceContainer("«this.assemblyContext_AllocationContext.id»","«this.resourceContainer_AllocationContext.id»");
	«IF CompositeComponent.isInstance(this.assemblyContext_AllocationContext.encapsulatedComponent_AssemblyContext)»
		«EXPAND CompositeAllocation(this) FOREACH ((CompositeComponent)this.assemblyContext_AllocationContext.encapsulatedComponent_AssemblyContext).assemblyContexts_ComposedStructure»
	«ENDIF»
«ENDDEFINE»

«DEFINE CompositeAllocation(AllocationContext allocCxt) FOR AssemblyContext»
	linkAssemblyContextAndResourceContainer("«this.id»","«allocCxt.resourceContainer_AllocationContext.id»");
	«IF CompositeComponent.isInstance(this.encapsulatedComponent_AssemblyContext)»
		«EXPAND CompositeAllocation(allocCxt) FOREACH ((CompositeComponent)this.encapsulatedComponent_AssemblyContext).assemblyContexts_ComposedStructure»
	«ENDIF»
«ENDDEFINE»

«DEFINE AssemblyContextLink FOR InfrastructureComponentScope»
«FOREACH this.assemblyContexts_ComposedStructure AS as»
linkAssemblyContextAndResourceContainer("«as.id»","«this.resourceContainer_InfrastructureComponentScope.id»");
«IF CompositeComponent.isInstance(as.encapsulatedComponent_AssemblyContext)»
		«EXPAND CompositeAllocation(this) FOREACH ((CompositeComponent)as.encapsulatedComponent_AssemblyContext).assemblyContexts_ComposedStructure»
	«ENDIF»
«ENDFOREACH»
«ENDDEFINE»

«DEFINE CompositeAllocation(InfrastructureComponentScope infrScope) FOR AssemblyContext»
	linkAssemblyContextAndResourceContainer("«this.id»","«infrScope.resourceContainer_InfrastructureComponentScope.id»");
	«IF CompositeComponent.isInstance(this.encapsulatedComponent_AssemblyContext)»
		«EXPAND CompositeAllocation(infrScope) FOREACH ((CompositeComponent)this.encapsulatedComponent_AssemblyContext).assemblyContexts_ComposedStructure»
	«ENDIF»
«ENDDEFINE»

«DEFINE InfrastructureComponentInit FOR InfrastructureComponentScope»
«FILE this.getFileName()»
«EXPAND m2t_transforms::composed_structure::ComposedStructureStart FOR this»
    «EXPAND m2t_transforms::provided_ports::ProvidedPorts FOR this»
	«EXPAND m2t_transforms::context_pattern::RequiredInterfaces FOR this»
	«EXPAND m2t_transforms::resource_context_pattern::RequiredResourceInterfaces FOR this»
	«EXPAND m2t_transforms::composed_structure::ComposedStructureEnd FOR this»
«ENDFILE»	 
«ENDDEFINE»

«DEFINE AllocationConnectors FOR Allocation»
	// Create all temporary resource context variables
	«REM»TODO: Do this only once for each assemblyContext! Currently buggy if more than 1 AllocationConnector reference the same AssemblyContext!«ENDREM»
	«FOREACH this.allocationConnectors_Allocation.fromAssemblyContext_AllocationConnector AS as»
	«as.encapsulatedComponent_AssemblyContext.fqnContextResourceInterface()» «as.id.javaVariableName()»_«as.encapsulatedComponent_AssemblyContext.javaName()» = ((«as.encapsulatedComponent_AssemblyContext.fqn()»)main.AssemblyContextRegistry.getComponentInstance("«as.id.javaVariableName()»")).getResourceContext();
	«ENDFOREACH»

	«FOREACH this.allocationConnectors_Allocation AS ac»
	«IF InfrastructureComponentAllocationConnector.isInstance(ac)»
	«ac.fromAssemblyContext_AllocationConnector.id.javaVariableName()»_«ac.fromAssemblyContext_AllocationConnector.encapsulatedComponent_AssemblyContext.javaName()».setRole«ac.resourceRequiredRole_AllocationConnector.javaName()»(my«((InfrastructureComponentAllocationConnector)ac).toInfrastructureComponentScope_InfrastructureComponentAllocationConnector.javaName()».«((InfrastructureComponentAllocationConnector)ac).providedRole_AllocationConnector.portGetter()»());
	«ELSEIF ResourceAllocationConnector.isInstance(ac)»
	«ac.fromAssemblyContext_AllocationConnector.id.javaVariableName()»_«ac.fromAssemblyContext_AllocationConnector.encapsulatedComponent_AssemblyContext.javaName()».setRole«ac.resourceRequiredRole_AllocationConnector.javaName()»((«((ResourceAllocationConnector)ac).toProcessingResourceSpecification_ResourceAllocationConnector.activeResourceType_ActiveResourceSpecification.resourceProvidedRole_ResourceInterfaceProvidingEntity.providedResourceInterface_ResourceProvidedRole.fqn()»)main.ResourceRegistry.getResourceInstance(findResource("«ac.fromAssemblyContext_AllocationConnector.id.javaString()»").getResourceContainerID()+"_«((ResourceAllocationConnector)ac).toProcessingResourceSpecification_ResourceAllocationConnector.activeResourceType_ActiveResourceSpecification.javaName()»"));
	«ELSEIF ControllerAllocationConnector.isInstance(ac)»
	«REM»TODO«ENDREM»
	«ENDIF»
	«ENDFOREACH»
«ENDDEFINE»