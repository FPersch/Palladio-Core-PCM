<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Palladio.RegularExpressions</name>
    </assembly>
    <members>
        <member name="T:Palladio.RegularExpressions.DefaultRegEx.AbstractRegEx">
            <summary>
            </summary>
        </member>
        <member name="T:Palladio.RegularExpressions.IRegEx">
            <summary>
            Syntax tree of a regular expression. Follows the composite pattern.
            </summary>
        </member>
        <member name="M:Palladio.RegularExpressions.IRegEx.Simplify">
            <summary>
            Simplifies the regular expression.
            </summary>
        </member>
        <member name="M:Palladio.RegularExpressions.IRegEx.Accept(Palladio.FiniteStateMachines.IInput[])">
            <summary>
            True, if this expression accepts <c>word</c>,
            false otherwise.
            </summary>
        </member>
        <member name="P:Palladio.RegularExpressions.IRegEx.Expression">
            <summary>
            The actual regular expression encoded in the syntax tree.
            </summary>
        </member>
        <member name="M:Palladio.RegularExpressions.DefaultRegEx.AbstractRegEx.Match(Palladio.FiniteStateMachines.IMatchable)">
            <summary>
            A match is a more specialised comparison of two objects.
            </summary>
            <param name="other">Another object which should be matched.</param>
            <returns>True, if this object an the other object match, false otherwise.</returns>
        </member>
        <member name="M:Palladio.RegularExpressions.DefaultRegEx.AbstractRegEx.Simplify">
            <summary>
            Added for further development. 
            </summary>
        </member>
        <member name="M:Palladio.RegularExpressions.DefaultRegEx.AbstractRegEx.Accept(Palladio.FiniteStateMachines.IInput[])">
            <summary>
            Added for further development. 
            </summary>
        </member>
        <member name="P:Palladio.RegularExpressions.DefaultRegEx.AbstractRegEx.Attributes">
            <summary>
            A list of attributes attached an object. 
            </summary>
        </member>
        <member name="P:Palladio.RegularExpressions.DefaultRegEx.AbstractRegEx.Expression">
            <summary>
            Added for further development. 
            </summary>
        </member>
        <member name="T:Palladio.RegularExpressions.DefaultRegEx.Alternative">
            <summary>
            </summary>
        </member>
        <member name="T:Palladio.RegularExpressions.IAlternative">
            <summary>
            Alternative / union of two regular expressions: <c>R1 | R2</c>.
            </summary>
        </member>
        <member name="P:Palladio.RegularExpressions.IAlternative.AlternativeOne">
            <summary>
            First alternative.
            </summary>
        </member>
        <member name="P:Palladio.RegularExpressions.IAlternative.AlternativeTwo">
            <summary>
            Second alternative.
            </summary>
        </member>
        <member name="T:Palladio.RegularExpressions.DefaultRegEx.Loop">
            <summary>
            </summary>
        </member>
        <member name="T:Palladio.RegularExpressions.ILoop">
            <summary>
            Loop / Kleene star of a regular expression R: <c>R*</c>.
            </summary>
        </member>
        <member name="P:Palladio.RegularExpressions.ILoop.InnerExpression">
            <summary>
            Expression that is looped.
            </summary>
        </member>
        <member name="T:Palladio.RegularExpressions.DefaultRegEx.Sequence">
            <summary>
            </summary>
        </member>
        <member name="T:Palladio.RegularExpressions.ISequence">
            <summary>
            Sequence / concatenation of two regular expressions R1 and R2: <c>R1R2</c>.
            </summary>
        </member>
        <member name="P:Palladio.RegularExpressions.ISequence.Predecessor">
            <summary>
            Expression R1 in sequence R1R2.
            </summary>
        </member>
        <member name="P:Palladio.RegularExpressions.ISequence.Successor">
            <summary>
            Expression R2 in sequence R1R2.
            </summary>
        </member>
        <member name="T:Palladio.RegularExpressions.DefaultRegEx.Symbol">
            <summary>
            </summary>
        </member>
        <member name="T:Palladio.RegularExpressions.ISymbol">
            <summary>
            Regular expression of a single input symbol.
            </summary>
        </member>
        <member name="P:Palladio.RegularExpressions.ISymbol.InputSymbol">
            <summary>
            Input symbol of the regular expression.
            </summary>
        </member>
        <member name="T:Palladio.RegularExpressions.GNFA.FSMToRegexConverter">
            <summary>
            Algorithm for the conversion of a FSM to a regular expression that
            accepts the same language. The conversion is done by constructing the
            GNFA and systematically removing states until only the start and accept state
            are left.
            </summary>
        </member>
        <member name="M:Palladio.RegularExpressions.GNFA.FSMToRegexConverter.Convert(Palladio.FiniteStateMachines.IFiniteStateMachine)">
            <summary>
            Returns a regular expression that accepts the same language as
            the FSM.
            </summary>
            <param name="fsm"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.RegularExpressions.GNFA.FSMToRegexConverter.CreateGNFA(Palladio.FiniteStateMachines.IFiniteStateMachine)">
            <summary>
            Adds a unique accept state and new start state to the fsm. Furthermore, 
            all input symbols are converted to regular expressions.
            </summary>
            <param name="fsm"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.RegularExpressions.GNFA.FSMToRegexConverter.MeltTransitions(Palladio.FiniteStateMachines.IEditableFiniteStateMachine@)">
            <summary>
            Melts all transitions in fsm that have the same source and destination state.
            For n transitions you get an Input as regular expression with n alternatives.
            </summary>
            <param name="fsm"></param>
        </member>
        <member name="M:Palladio.RegularExpressions.GNFA.FSMToRegexConverter.ConvertGNFA(Palladio.FiniteStateMachines.IEditableFiniteStateMachine@,Palladio.FiniteStateMachines.IState)">
            <summary>
            Removes state and all connected transitions from gnfa and introduces a new
            transition whose regular expression is equivalent to those transitions.
            </summary>
            <param name="gnfa"></param>
            <param name="state"></param>
        </member>
        <member name="M:Palladio.RegularExpressions.GNFA.FSMToRegexConverter.DeleteState(Palladio.FiniteStateMachines.IEditableFiniteStateMachine@,Palladio.FiniteStateMachines.IState)">
            <summary>
            Deletes state and all connected transitions in gnfa.
            </summary>
            <param name="gnfa"></param>
            <param name="state"></param>
        </member>
        <member name="M:Palladio.RegularExpressions.GNFA.FSMToRegexConverter.GetOutgoingTransitions(Palladio.FiniteStateMachines.IFiniteStateMachine,Palladio.FiniteStateMachines.IState)">
            <summary>
            Returns the transitions in gnfa leaving state.
            </summary>
            <param name="gnfa"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.RegularExpressions.GNFA.FSMToRegexConverter.GetIncomingTransitions(Palladio.FiniteStateMachines.IFiniteStateMachine,Palladio.FiniteStateMachines.IState)">
            <summary>
            Returns the transitions in gnfa pointing to state.
            </summary>
            <param name="gnfa"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.RegularExpressions.GNFA.FSMToRegexConverter.CreateMergedTransition(Palladio.FiniteStateMachines.IEditableFiniteStateMachine,Palladio.FiniteStateMachines.IState,Palladio.FiniteStateMachines.IState,Palladio.FiniteStateMachines.IState)">
            <summary>
            For three states si,sj, and sr the merged transition from si to sj is returned. It
            is equivalent to all transitions going direclty from si to sj or over sr. If there 
            is no such transition null is returned.
            </summary>
            <param name="gnfa"></param>
            <param name="si"></param>
            <param name="sj"></param>
            <param name="sr"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.RegularExpressions.GNFA.FSMToRegexConverter.CreateTransition(Palladio.FiniteStateMachines.IState,Palladio.RegularExpressions.IRegEx,Palladio.FiniteStateMachines.IState)">
            <summary>
            Creates a transition with a regular expression as input symbol.
            </summary>
            <param name="si"></param>
            <param name="regEx"></param>
            <param name="sj"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.RegularExpressions.GNFA.FSMToRegexConverter.GetTotalExpressionForTransition(Palladio.RegularExpressions.IRegEx,Palladio.RegularExpressions.IRegEx,Palladio.RegularExpressions.IRegEx)">
            <summary>
            Returns the complete regular expression of the following form: r1 r2* r3
            null pointers for r1...r4 are allowed.
            r1 and r3 must exists to construct the left side of the expression.
            If the complete expression cannot be constructed due to missing subexpressions
            null is returned.
            </summary>
            <param name="r1"></param>
            <param name="r2"></param>
            <param name="r3"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.RegularExpressions.GNFA.FSMToRegexConverter.GetRegexFromTransition(Palladio.FiniteStateMachines.ITransition)">
            <summary>
            Returns the regular expression associated with the transition.
            </summary>
            <param name="transition"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.RegularExpressions.GNFA.FSMToRegexConverter.PickState(Palladio.FiniteStateMachines.IFiniteStateMachine)">
            <summary>
            Picks a state from the gnfa that is not the start or accept state.
            </summary>
            <param name="gnfa"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.RegularExpressions.GNFA.FSMToRegexConverter.Melt(Palladio.FiniteStateMachines.ITransition,Palladio.FiniteStateMachines.ITransition)">
            <summary>
            Melts two transitions which have the same source- and destination-state.
            </summary>
            <param name="ti"></param>
            <param name="tj"></param>
            <returns></returns>
        </member>
        <member name="T:Palladio.RegularExpressions.Tests.Helper">
            <summary>
            Description of Helper.	
            </summary>
        </member>
        <member name="M:Palladio.RegularExpressions.Tests.Helper.CreateTransition(System.String,Palladio.FiniteStateMachines.IMatchable,System.String)">
            <summary>
            Creates a new transition
            </summary>
            <param name="sourceState">Source state.</param>
            <param name="input">Input symbol.</param>
            <param name="destinationState">Destination state.</param>
            <returns></returns>
        </member>
        <member name="M:Palladio.RegularExpressions.Tests.Helper.CreateTransition(Palladio.FiniteStateMachines.IState,Palladio.FiniteStateMachines.IInput,Palladio.FiniteStateMachines.IState)">
            <summary>
            Creates a new transition
            </summary>
            <param name="from">Source state.</param>
            <param name="input">Input symbol.</param>
            <param name="to">Destination state.</param>
            <returns></returns>
        </member>
        <member name="M:Palladio.RegularExpressions.Tests.Helper.CreateTransition(Palladio.FiniteStateMachines.IState,Palladio.FiniteStateMachines.IMatchable,Palladio.FiniteStateMachines.IState)">
            <summary>
            Creates a new transition
            </summary>
            <param name="from">Source state.</param>
            <param name="m">Input symbol.</param>
            <param name="to">Destination state.</param>
            <returns></returns>
        </member>
        <member name="M:Palladio.RegularExpressions.Tests.Helper.CopyTransition(Palladio.FiniteStateMachines.ITransition)">
            <summary>
            Creates a copy of the transition.
            </summary>
            <param name="transition"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.RegularExpressions.Tests.Helper.CreateStates(System.String[])">
            <summary>
            Creates a StateHash out of an array of strings.
            </summary>
            <param name="anIDArray"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.RegularExpressions.Tests.Helper.CreateState(System.String)">
            <summary>
            Creates a state with the given ID.
            </summary>
            <param name="anID"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.RegularExpressions.Tests.Helper.CreateAttributeHash">
            <summary>
            Creates an AttributeHash.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Palladio.RegularExpressions.Tests.TestBuilder">
            <summary>
            Description of TestCMBuilder.	
            </summary>
        </member>
        <member name="M:Palladio.RegularExpressions.Tests.TestBuilder.CreateTestMarkovModel">
            <summary>
            A
            </summary>
            <returns></returns>
        </member>
        <member name="M:Palladio.RegularExpressions.Tests.TestBuilder.CreateTestMeltingFSM">
            <summary>
            B
            </summary>
            <returns></returns>
        </member>
        <member name="M:Palladio.RegularExpressions.Tests.TestBuilder.CreateTestRegexFSMSimple">
            <summary>
            C
            </summary>
            <returns></returns>
        </member>
        <member name="M:Palladio.RegularExpressions.Tests.TestBuilder.CreateTestRegexFSMComplex">
            <summary>
            D
            </summary>
            <returns></returns>
        </member>
        <member name="M:Palladio.RegularExpressions.Tests.TestBuilder.CreateTestRegexFSM1">
            <summary>
            E
            </summary>
            <returns></returns>
        </member>
        <member name="M:Palladio.RegularExpressions.Tests.TestBuilder.CreateLoopFSM">
            <summary>
            IFiniteStateMachine with Attributes.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Palladio.RegularExpressions.RegexFactory">
            <summary>
            Factory for creating regular expressions with attributes.
            </summary>
        </member>
        <member name="M:Palladio.RegularExpressions.RegexFactory.FSMToRegex(Palladio.FiniteStateMachines.IFiniteStateMachine)">
            <summary>
            Returns a regular expression that accepts the same language as
            the FSM.
            </summary>
            <param name="fsm"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.RegularExpressions.RegexFactory.Alternative(Palladio.RegularExpressions.IRegEx,Palladio.RegularExpressions.IRegEx)">
            <summary>
            Creates a new alternative / union.
            </summary>
            <param name="regExOne"></param>
            <param name="regExTwo"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.RegularExpressions.RegexFactory.Alternative(Palladio.Attributes.IAttributeHash,Palladio.RegularExpressions.IRegEx,Palladio.RegularExpressions.IRegEx)">
            <summary>
            Creates a new alternative / union.
            </summary>
            <param name="attributeHash"></param>
            <param name="regExOne"></param>
            <param name="regExTwo"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.RegularExpressions.RegexFactory.Sequence(Palladio.RegularExpressions.IRegEx,Palladio.RegularExpressions.IRegEx)">
            <summary>
            Creates a sequence  / concatenation.
            </summary>
            <param name="regExOne"></param>
            <param name="regExTwo"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.RegularExpressions.RegexFactory.Sequence(Palladio.Attributes.IAttributeHash,Palladio.RegularExpressions.IRegEx,Palladio.RegularExpressions.IRegEx)">
            <summary>
            Creates a sequence  / concatenation.
            </summary>
            <param name="attributeHash"></param>
            <param name="regExOne"></param>
            <param name="regExTwo"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.RegularExpressions.RegexFactory.Loop(Palladio.RegularExpressions.IRegEx)">
            <summary>
            Creates a loop / Kleene star.
            </summary>
            <param name="regEx"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.RegularExpressions.RegexFactory.Loop(Palladio.Attributes.IAttributeHash,Palladio.RegularExpressions.IRegEx)">
            <summary>
            Creates a loop / Kleene star.
            </summary>
            <param name="attributeHash"></param>
            <param name="regEx"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.RegularExpressions.RegexFactory.Symbol(Palladio.FiniteStateMachines.IInput)">
            <summary>
            Creates a new symbol from an input symbol.
            </summary>
            <param name="inputSymbol"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.RegularExpressions.RegexFactory.Symbol(Palladio.Attributes.IAttributeHash,Palladio.FiniteStateMachines.IInput)">
            <summary>
            Creates a new symbol from an input symbol and associated attributeHash to it.
            </summary>
            <param name="attributeHash"></param>
            <param name="inputSymbol"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.RegularExpressions.RegexFactory.CreateAttributeHash">
            <summary>
            Creates an empty attribute hash.
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
