//
// ConfigType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace BibTeXProviderXML
{
	public class ConfigType : Altova.Xml.Node
	{
		#region Forward constructors
		public ConfigType() : base() { SetCollectionParents(); }
		public ConfigType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public ConfigType(XmlNode node) : base(node) { SetCollectionParents(); }
		public ConfigType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

			for (int i = 0; i < DomChildCount(NodeType.Attribute, "", "xmlns:xsi"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "xmlns:xsi", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			for (int i = 0; i < DomChildCount(NodeType.Attribute, "", "xsi:noNamespaceSchemaLocation"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "xsi:noNamespaceSchemaLocation", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			for (int i = 0; i < DomChildCount(NodeType.Element, "", "DataSource"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "DataSource", i);
				InternalAdjustPrefix(DOMNode, false);
				new DataSourceType(DOMNode).AdjustPrefix();
			}

			for (int i = 0; i < DomChildCount(NodeType.Element, "", "DatabaseName"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "DatabaseName", i);
				InternalAdjustPrefix(DOMNode, false);
				new DatabaseNameType(DOMNode).AdjustPrefix();
			}

			for (int i = 0; i < DomChildCount(NodeType.Element, "", "DatabaseTableName"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "DatabaseTableName", i);
				InternalAdjustPrefix(DOMNode, false);
				new DatabaseTableNameType(DOMNode).AdjustPrefix();
			}

			for (int i = 0; i < DomChildCount(NodeType.Element, "", "SearchedBibTeXFieldNames"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "SearchedBibTeXFieldNames", i);
				InternalAdjustPrefix(DOMNode, false);
				new SearchedBibTeXFieldNamesType(DOMNode).AdjustPrefix();
			}

			for (int i = 0; i < DomChildCount(NodeType.Element, "", "HandledFileTypes"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "HandledFileTypes", i);
				InternalAdjustPrefix(DOMNode, false);
				new HandledFileTypesType(DOMNode).AdjustPrefix();
			}

			for (int i = 0; i < DomChildCount(NodeType.Element, "", "ErrorMessageOnConnectionProblems"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "ErrorMessageOnConnectionProblems", i);
				InternalAdjustPrefix(DOMNode, false);
				new ErrorMessageOnConnectionProblemsType(DOMNode).AdjustPrefix();
			}
		}


		#region xmlns_xsi accessor methods
		public int Getxmlns_xsiMinCount()
		{
			return 1;
		}

		public int xmlns_xsiMinCount
		{
			get
			{
				return 1;
			}
		}

		public int Getxmlns_xsiMaxCount()
		{
			return 1;
		}

		public int xmlns_xsiMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int Getxmlns_xsiCount()
		{
			return DomChildCount(NodeType.Attribute, "", "xmlns:xsi");
		}

		public int xmlns_xsiCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "xmlns:xsi");
			}
		}

		public bool Hasxmlns_xsi()
		{
			return HasDomChild(NodeType.Attribute, "", "xmlns:xsi");
		}

		public SchemaString Getxmlns_xsiAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "xmlns:xsi", index)));
		}

		public SchemaString Getxmlns_xsi()
		{
			return Getxmlns_xsiAt(0);
		}

		public SchemaString xmlns_xsi
		{
			get
			{
				return Getxmlns_xsiAt(0);
			}
		}

		public void Removexmlns_xsiAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "xmlns:xsi", index);
		}

		public void Removexmlns_xsi()
		{
			while (Hasxmlns_xsi())
				Removexmlns_xsiAt(0);
		}

		public void Addxmlns_xsi(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "xmlns:xsi", newValue.ToString());
		}

		public void Insertxmlns_xsiAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "xmlns:xsi", index, newValue.ToString());
		}

		public void Replacexmlns_xsiAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "xmlns:xsi", index, newValue.ToString());
		}
		#endregion // xmlns_xsi accessor methods

		#region xmlns_xsi collection
        public xmlns_xsiCollection	Myxmlns_xsis = new xmlns_xsiCollection( );

        public class xmlns_xsiCollection: IEnumerable
        {
            ConfigType parent;
            public ConfigType Parent
			{
				set
				{
					parent = value;
				}
			}
			public xmlns_xsiEnumerator GetEnumerator() 
			{
				return new xmlns_xsiEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class xmlns_xsiEnumerator: IEnumerator 
        {
			int nIndex;
			ConfigType parent;
			public xmlns_xsiEnumerator(ConfigType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.xmlns_xsiCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.Getxmlns_xsiAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // xmlns_xsi collection

		#region xsi_noNamespaceSchemaLocation accessor methods
		public int Getxsi_noNamespaceSchemaLocationMinCount()
		{
			return 1;
		}

		public int xsi_noNamespaceSchemaLocationMinCount
		{
			get
			{
				return 1;
			}
		}

		public int Getxsi_noNamespaceSchemaLocationMaxCount()
		{
			return 1;
		}

		public int xsi_noNamespaceSchemaLocationMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int Getxsi_noNamespaceSchemaLocationCount()
		{
			return DomChildCount(NodeType.Attribute, "", "xsi:noNamespaceSchemaLocation");
		}

		public int xsi_noNamespaceSchemaLocationCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "xsi:noNamespaceSchemaLocation");
			}
		}

		public bool Hasxsi_noNamespaceSchemaLocation()
		{
			return HasDomChild(NodeType.Attribute, "", "xsi:noNamespaceSchemaLocation");
		}

		public SchemaString Getxsi_noNamespaceSchemaLocationAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "xsi:noNamespaceSchemaLocation", index)));
		}

		public SchemaString Getxsi_noNamespaceSchemaLocation()
		{
			return Getxsi_noNamespaceSchemaLocationAt(0);
		}

		public SchemaString xsi_noNamespaceSchemaLocation
		{
			get
			{
				return Getxsi_noNamespaceSchemaLocationAt(0);
			}
		}

		public void Removexsi_noNamespaceSchemaLocationAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "xsi:noNamespaceSchemaLocation", index);
		}

		public void Removexsi_noNamespaceSchemaLocation()
		{
			while (Hasxsi_noNamespaceSchemaLocation())
				Removexsi_noNamespaceSchemaLocationAt(0);
		}

		public void Addxsi_noNamespaceSchemaLocation(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "xsi:noNamespaceSchemaLocation", newValue.ToString());
		}

		public void Insertxsi_noNamespaceSchemaLocationAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "xsi:noNamespaceSchemaLocation", index, newValue.ToString());
		}

		public void Replacexsi_noNamespaceSchemaLocationAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "xsi:noNamespaceSchemaLocation", index, newValue.ToString());
		}
		#endregion // xsi_noNamespaceSchemaLocation accessor methods

		#region xsi_noNamespaceSchemaLocation collection
        public xsi_noNamespaceSchemaLocationCollection	Myxsi_noNamespaceSchemaLocations = new xsi_noNamespaceSchemaLocationCollection( );

        public class xsi_noNamespaceSchemaLocationCollection: IEnumerable
        {
            ConfigType parent;
            public ConfigType Parent
			{
				set
				{
					parent = value;
				}
			}
			public xsi_noNamespaceSchemaLocationEnumerator GetEnumerator() 
			{
				return new xsi_noNamespaceSchemaLocationEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class xsi_noNamespaceSchemaLocationEnumerator: IEnumerator 
        {
			int nIndex;
			ConfigType parent;
			public xsi_noNamespaceSchemaLocationEnumerator(ConfigType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.xsi_noNamespaceSchemaLocationCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.Getxsi_noNamespaceSchemaLocationAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // xsi_noNamespaceSchemaLocation collection

		#region DataSource accessor methods
		public int GetDataSourceMinCount()
		{
			return 1;
		}

		public int DataSourceMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetDataSourceMaxCount()
		{
			return 1;
		}

		public int DataSourceMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetDataSourceCount()
		{
			return DomChildCount(NodeType.Element, "", "DataSource");
		}

		public int DataSourceCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "DataSource");
			}
		}

		public bool HasDataSource()
		{
			return HasDomChild(NodeType.Element, "", "DataSource");
		}

		public DataSourceType GetDataSourceAt(int index)
		{
			return new DataSourceType(GetDomChildAt(NodeType.Element, "", "DataSource", index));
		}

		public DataSourceType GetDataSource()
		{
			return GetDataSourceAt(0);
		}

		public DataSourceType DataSource
		{
			get
			{
				return GetDataSourceAt(0);
			}
		}

		public void RemoveDataSourceAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "DataSource", index);
		}

		public void RemoveDataSource()
		{
			while (HasDataSource())
				RemoveDataSourceAt(0);
		}

		public void AddDataSource(DataSourceType newValue)
		{
			AppendDomElement("", "DataSource", newValue);
		}

		public void InsertDataSourceAt(DataSourceType newValue, int index)
		{
			InsertDomElementAt("", "DataSource", index, newValue);
		}

		public void ReplaceDataSourceAt(DataSourceType newValue, int index)
		{
			ReplaceDomElementAt("", "DataSource", index, newValue);
		}
		#endregion // DataSource accessor methods

		#region DataSource collection
        public DataSourceCollection	MyDataSources = new DataSourceCollection( );

        public class DataSourceCollection: IEnumerable
        {
            ConfigType parent;
            public ConfigType Parent
			{
				set
				{
					parent = value;
				}
			}
			public DataSourceEnumerator GetEnumerator() 
			{
				return new DataSourceEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class DataSourceEnumerator: IEnumerator 
        {
			int nIndex;
			ConfigType parent;
			public DataSourceEnumerator(ConfigType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.DataSourceCount );
			}
			public DataSourceType  Current 
			{
				get 
				{
					return(parent.GetDataSourceAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // DataSource collection

		#region DatabaseName accessor methods
		public int GetDatabaseNameMinCount()
		{
			return 1;
		}

		public int DatabaseNameMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetDatabaseNameMaxCount()
		{
			return 1;
		}

		public int DatabaseNameMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetDatabaseNameCount()
		{
			return DomChildCount(NodeType.Element, "", "DatabaseName");
		}

		public int DatabaseNameCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "DatabaseName");
			}
		}

		public bool HasDatabaseName()
		{
			return HasDomChild(NodeType.Element, "", "DatabaseName");
		}

		public DatabaseNameType GetDatabaseNameAt(int index)
		{
			return new DatabaseNameType(GetDomChildAt(NodeType.Element, "", "DatabaseName", index));
		}

		public DatabaseNameType GetDatabaseName()
		{
			return GetDatabaseNameAt(0);
		}

		public DatabaseNameType DatabaseName
		{
			get
			{
				return GetDatabaseNameAt(0);
			}
		}

		public void RemoveDatabaseNameAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "DatabaseName", index);
		}

		public void RemoveDatabaseName()
		{
			while (HasDatabaseName())
				RemoveDatabaseNameAt(0);
		}

		public void AddDatabaseName(DatabaseNameType newValue)
		{
			AppendDomElement("", "DatabaseName", newValue);
		}

		public void InsertDatabaseNameAt(DatabaseNameType newValue, int index)
		{
			InsertDomElementAt("", "DatabaseName", index, newValue);
		}

		public void ReplaceDatabaseNameAt(DatabaseNameType newValue, int index)
		{
			ReplaceDomElementAt("", "DatabaseName", index, newValue);
		}
		#endregion // DatabaseName accessor methods

		#region DatabaseName collection
        public DatabaseNameCollection	MyDatabaseNames = new DatabaseNameCollection( );

        public class DatabaseNameCollection: IEnumerable
        {
            ConfigType parent;
            public ConfigType Parent
			{
				set
				{
					parent = value;
				}
			}
			public DatabaseNameEnumerator GetEnumerator() 
			{
				return new DatabaseNameEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class DatabaseNameEnumerator: IEnumerator 
        {
			int nIndex;
			ConfigType parent;
			public DatabaseNameEnumerator(ConfigType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.DatabaseNameCount );
			}
			public DatabaseNameType  Current 
			{
				get 
				{
					return(parent.GetDatabaseNameAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // DatabaseName collection

		#region DatabaseTableName accessor methods
		public int GetDatabaseTableNameMinCount()
		{
			return 1;
		}

		public int DatabaseTableNameMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetDatabaseTableNameMaxCount()
		{
			return 1;
		}

		public int DatabaseTableNameMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetDatabaseTableNameCount()
		{
			return DomChildCount(NodeType.Element, "", "DatabaseTableName");
		}

		public int DatabaseTableNameCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "DatabaseTableName");
			}
		}

		public bool HasDatabaseTableName()
		{
			return HasDomChild(NodeType.Element, "", "DatabaseTableName");
		}

		public DatabaseTableNameType GetDatabaseTableNameAt(int index)
		{
			return new DatabaseTableNameType(GetDomChildAt(NodeType.Element, "", "DatabaseTableName", index));
		}

		public DatabaseTableNameType GetDatabaseTableName()
		{
			return GetDatabaseTableNameAt(0);
		}

		public DatabaseTableNameType DatabaseTableName
		{
			get
			{
				return GetDatabaseTableNameAt(0);
			}
		}

		public void RemoveDatabaseTableNameAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "DatabaseTableName", index);
		}

		public void RemoveDatabaseTableName()
		{
			while (HasDatabaseTableName())
				RemoveDatabaseTableNameAt(0);
		}

		public void AddDatabaseTableName(DatabaseTableNameType newValue)
		{
			AppendDomElement("", "DatabaseTableName", newValue);
		}

		public void InsertDatabaseTableNameAt(DatabaseTableNameType newValue, int index)
		{
			InsertDomElementAt("", "DatabaseTableName", index, newValue);
		}

		public void ReplaceDatabaseTableNameAt(DatabaseTableNameType newValue, int index)
		{
			ReplaceDomElementAt("", "DatabaseTableName", index, newValue);
		}
		#endregion // DatabaseTableName accessor methods

		#region DatabaseTableName collection
        public DatabaseTableNameCollection	MyDatabaseTableNames = new DatabaseTableNameCollection( );

        public class DatabaseTableNameCollection: IEnumerable
        {
            ConfigType parent;
            public ConfigType Parent
			{
				set
				{
					parent = value;
				}
			}
			public DatabaseTableNameEnumerator GetEnumerator() 
			{
				return new DatabaseTableNameEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class DatabaseTableNameEnumerator: IEnumerator 
        {
			int nIndex;
			ConfigType parent;
			public DatabaseTableNameEnumerator(ConfigType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.DatabaseTableNameCount );
			}
			public DatabaseTableNameType  Current 
			{
				get 
				{
					return(parent.GetDatabaseTableNameAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // DatabaseTableName collection

		#region SearchedBibTeXFieldNames accessor methods
		public int GetSearchedBibTeXFieldNamesMinCount()
		{
			return 1;
		}

		public int SearchedBibTeXFieldNamesMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetSearchedBibTeXFieldNamesMaxCount()
		{
			return 1;
		}

		public int SearchedBibTeXFieldNamesMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetSearchedBibTeXFieldNamesCount()
		{
			return DomChildCount(NodeType.Element, "", "SearchedBibTeXFieldNames");
		}

		public int SearchedBibTeXFieldNamesCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "SearchedBibTeXFieldNames");
			}
		}

		public bool HasSearchedBibTeXFieldNames()
		{
			return HasDomChild(NodeType.Element, "", "SearchedBibTeXFieldNames");
		}

		public SearchedBibTeXFieldNamesType GetSearchedBibTeXFieldNamesAt(int index)
		{
			return new SearchedBibTeXFieldNamesType(GetDomChildAt(NodeType.Element, "", "SearchedBibTeXFieldNames", index));
		}

		public SearchedBibTeXFieldNamesType GetSearchedBibTeXFieldNames()
		{
			return GetSearchedBibTeXFieldNamesAt(0);
		}

		public SearchedBibTeXFieldNamesType SearchedBibTeXFieldNames
		{
			get
			{
				return GetSearchedBibTeXFieldNamesAt(0);
			}
		}

		public void RemoveSearchedBibTeXFieldNamesAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "SearchedBibTeXFieldNames", index);
		}

		public void RemoveSearchedBibTeXFieldNames()
		{
			while (HasSearchedBibTeXFieldNames())
				RemoveSearchedBibTeXFieldNamesAt(0);
		}

		public void AddSearchedBibTeXFieldNames(SearchedBibTeXFieldNamesType newValue)
		{
			AppendDomElement("", "SearchedBibTeXFieldNames", newValue);
		}

		public void InsertSearchedBibTeXFieldNamesAt(SearchedBibTeXFieldNamesType newValue, int index)
		{
			InsertDomElementAt("", "SearchedBibTeXFieldNames", index, newValue);
		}

		public void ReplaceSearchedBibTeXFieldNamesAt(SearchedBibTeXFieldNamesType newValue, int index)
		{
			ReplaceDomElementAt("", "SearchedBibTeXFieldNames", index, newValue);
		}
		#endregion // SearchedBibTeXFieldNames accessor methods

		#region SearchedBibTeXFieldNames collection
        public SearchedBibTeXFieldNamesCollection	MySearchedBibTeXFieldNamess = new SearchedBibTeXFieldNamesCollection( );

        public class SearchedBibTeXFieldNamesCollection: IEnumerable
        {
            ConfigType parent;
            public ConfigType Parent
			{
				set
				{
					parent = value;
				}
			}
			public SearchedBibTeXFieldNamesEnumerator GetEnumerator() 
			{
				return new SearchedBibTeXFieldNamesEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class SearchedBibTeXFieldNamesEnumerator: IEnumerator 
        {
			int nIndex;
			ConfigType parent;
			public SearchedBibTeXFieldNamesEnumerator(ConfigType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.SearchedBibTeXFieldNamesCount );
			}
			public SearchedBibTeXFieldNamesType  Current 
			{
				get 
				{
					return(parent.GetSearchedBibTeXFieldNamesAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // SearchedBibTeXFieldNames collection

		#region HandledFileTypes accessor methods
		public int GetHandledFileTypesMinCount()
		{
			return 1;
		}

		public int HandledFileTypesMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetHandledFileTypesMaxCount()
		{
			return 1;
		}

		public int HandledFileTypesMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetHandledFileTypesCount()
		{
			return DomChildCount(NodeType.Element, "", "HandledFileTypes");
		}

		public int HandledFileTypesCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "HandledFileTypes");
			}
		}

		public bool HasHandledFileTypes()
		{
			return HasDomChild(NodeType.Element, "", "HandledFileTypes");
		}

		public HandledFileTypesType GetHandledFileTypesAt(int index)
		{
			return new HandledFileTypesType(GetDomChildAt(NodeType.Element, "", "HandledFileTypes", index));
		}

		public HandledFileTypesType GetHandledFileTypes()
		{
			return GetHandledFileTypesAt(0);
		}

		public HandledFileTypesType HandledFileTypes
		{
			get
			{
				return GetHandledFileTypesAt(0);
			}
		}

		public void RemoveHandledFileTypesAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "HandledFileTypes", index);
		}

		public void RemoveHandledFileTypes()
		{
			while (HasHandledFileTypes())
				RemoveHandledFileTypesAt(0);
		}

		public void AddHandledFileTypes(HandledFileTypesType newValue)
		{
			AppendDomElement("", "HandledFileTypes", newValue);
		}

		public void InsertHandledFileTypesAt(HandledFileTypesType newValue, int index)
		{
			InsertDomElementAt("", "HandledFileTypes", index, newValue);
		}

		public void ReplaceHandledFileTypesAt(HandledFileTypesType newValue, int index)
		{
			ReplaceDomElementAt("", "HandledFileTypes", index, newValue);
		}
		#endregion // HandledFileTypes accessor methods

		#region HandledFileTypes collection
        public HandledFileTypesCollection	MyHandledFileTypess = new HandledFileTypesCollection( );

        public class HandledFileTypesCollection: IEnumerable
        {
            ConfigType parent;
            public ConfigType Parent
			{
				set
				{
					parent = value;
				}
			}
			public HandledFileTypesEnumerator GetEnumerator() 
			{
				return new HandledFileTypesEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class HandledFileTypesEnumerator: IEnumerator 
        {
			int nIndex;
			ConfigType parent;
			public HandledFileTypesEnumerator(ConfigType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.HandledFileTypesCount );
			}
			public HandledFileTypesType  Current 
			{
				get 
				{
					return(parent.GetHandledFileTypesAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // HandledFileTypes collection

		#region ErrorMessageOnConnectionProblems accessor methods
		public int GetErrorMessageOnConnectionProblemsMinCount()
		{
			return 1;
		}

		public int ErrorMessageOnConnectionProblemsMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetErrorMessageOnConnectionProblemsMaxCount()
		{
			return 1;
		}

		public int ErrorMessageOnConnectionProblemsMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetErrorMessageOnConnectionProblemsCount()
		{
			return DomChildCount(NodeType.Element, "", "ErrorMessageOnConnectionProblems");
		}

		public int ErrorMessageOnConnectionProblemsCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ErrorMessageOnConnectionProblems");
			}
		}

		public bool HasErrorMessageOnConnectionProblems()
		{
			return HasDomChild(NodeType.Element, "", "ErrorMessageOnConnectionProblems");
		}

		public ErrorMessageOnConnectionProblemsType GetErrorMessageOnConnectionProblemsAt(int index)
		{
			return new ErrorMessageOnConnectionProblemsType(GetDomChildAt(NodeType.Element, "", "ErrorMessageOnConnectionProblems", index));
		}

		public ErrorMessageOnConnectionProblemsType GetErrorMessageOnConnectionProblems()
		{
			return GetErrorMessageOnConnectionProblemsAt(0);
		}

		public ErrorMessageOnConnectionProblemsType ErrorMessageOnConnectionProblems
		{
			get
			{
				return GetErrorMessageOnConnectionProblemsAt(0);
			}
		}

		public void RemoveErrorMessageOnConnectionProblemsAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ErrorMessageOnConnectionProblems", index);
		}

		public void RemoveErrorMessageOnConnectionProblems()
		{
			while (HasErrorMessageOnConnectionProblems())
				RemoveErrorMessageOnConnectionProblemsAt(0);
		}

		public void AddErrorMessageOnConnectionProblems(ErrorMessageOnConnectionProblemsType newValue)
		{
			AppendDomElement("", "ErrorMessageOnConnectionProblems", newValue);
		}

		public void InsertErrorMessageOnConnectionProblemsAt(ErrorMessageOnConnectionProblemsType newValue, int index)
		{
			InsertDomElementAt("", "ErrorMessageOnConnectionProblems", index, newValue);
		}

		public void ReplaceErrorMessageOnConnectionProblemsAt(ErrorMessageOnConnectionProblemsType newValue, int index)
		{
			ReplaceDomElementAt("", "ErrorMessageOnConnectionProblems", index, newValue);
		}
		#endregion // ErrorMessageOnConnectionProblems accessor methods

		#region ErrorMessageOnConnectionProblems collection
        public ErrorMessageOnConnectionProblemsCollection	MyErrorMessageOnConnectionProblemss = new ErrorMessageOnConnectionProblemsCollection( );

        public class ErrorMessageOnConnectionProblemsCollection: IEnumerable
        {
            ConfigType parent;
            public ConfigType Parent
			{
				set
				{
					parent = value;
				}
			}
			public ErrorMessageOnConnectionProblemsEnumerator GetEnumerator() 
			{
				return new ErrorMessageOnConnectionProblemsEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ErrorMessageOnConnectionProblemsEnumerator: IEnumerator 
        {
			int nIndex;
			ConfigType parent;
			public ErrorMessageOnConnectionProblemsEnumerator(ConfigType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ErrorMessageOnConnectionProblemsCount );
			}
			public ErrorMessageOnConnectionProblemsType  Current 
			{
				get 
				{
					return(parent.GetErrorMessageOnConnectionProblemsAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ErrorMessageOnConnectionProblems collection

        private void SetCollectionParents()
        {
            Myxmlns_xsis.Parent = this; 
            Myxsi_noNamespaceSchemaLocations.Parent = this; 
            MyDataSources.Parent = this; 
            MyDatabaseNames.Parent = this; 
            MyDatabaseTableNames.Parent = this; 
            MySearchedBibTeXFieldNamess.Parent = this; 
            MyHandledFileTypess.Parent = this; 
            MyErrorMessageOnConnectionProblemss.Parent = this; 
	}
}
}
