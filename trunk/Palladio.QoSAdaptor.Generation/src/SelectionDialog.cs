#region info
///////////////////////////////////////////////////////////////////////////////
// This software has been developed as a part of the diploma thesis 
// "Einfluss von Generatorkonfiguration auf die QoS-Vorhersage für 
// Komponentenadapter" ("Influence of the configuration of a generator on the 
// prediction of the QoS of component adaptors")
// at the 
// University of Oldenburg
// Department of Computing Science
// Software Engineering Group
// Palladio Research Group
// (http://se.informatik.uni-oldenburg.de/research/projects/Palladio)
// 
// Development period: July 2005 - January 2006
// 
// Author: Niels Streekmann
// E-mail: niels.streekmann@informatik.uni-oldenburg.de
///////////////////////////////////////////////////////////////////////////////
#endregion

using System.Collections;
using System.Windows.Forms;
using Palladio.QoSAdaptor.Pattern;

namespace Palladio.QoSAdaptor.Generation
{
	/// <summary>
	/// Creates a GUI to select an artifact for generation. 
	/// </summary>
	public class SelectionDialog : System.Windows.Forms.Form
	{
		#region attributes
		/// <summary>
		/// Erforderliche Designervariable.
		/// </summary>
		private System.ComponentModel.Container components = null;

		/// <summary>
		/// The controller which implements the event handling for this form.
		/// </summary>
		private Generator controller;

		/// <summary>
		/// The pattern for which this form shows chooseable artifacts
		/// </summary>
		private IPatternDescription pattern;

		/// <summary>
		/// Counter used to get the right spaces in the GUI.
		/// </summary>
		private int counter;

		/// <summary>
		/// A counter counting the number of tabs to provide correct tabbing
		/// of the buttons.
		/// </summary>
		private int tabCounter;

		/// <summary>
		/// A list of check boxes. Each box belongs to a chooseable 
		/// artifact. 
		/// </summary>
		private ArrayList checkBoxes;

		/// <summary>
		/// Button to start the generation of the selected artifact.
		/// </summary>
		private Button generatorButton;
		#endregion

		#region constructor
		internal SelectionDialog(IPatternDescription pattern, 
			Generator controller)
		{
			this.pattern = pattern;
			this.controller = controller;
			this.counter = 0;
			this.tabCounter = 0;
			this.checkBoxes = new ArrayList();

			InitializeComponent();

			InitialiseSelection();
		}
		#endregion

		#region properties
		/// <summary>
		/// A list of radio buttons where each button belongs to an artifact.
		/// The button belonging to the adaptor is name "adaptor". The other 
		/// buttons have the same name as the prediction model they belong to.
		/// </summary>
		internal IList CheckBoxes
		{
			get
			{
				return this.checkBoxes;
			}
		}

		/// <summary>
		/// Button to start the generation of the selected artifact.
		/// </summary>
		internal Button GeneratorButton
		{
			get
			{
				return this.generatorButton;
			}
		}
		#endregion

		#region Code generated by the form designer.
		/// <summary>
		/// Die verwendeten Ressourcen bereinigen.
		/// </summary>
		protected override void Dispose( bool disposing )
		{
			if( disposing )
			{
				if(components != null)
				{
					components.Dispose();
				}
			}
			base.Dispose( disposing );
		}

		
		/// <summary>
		/// Erforderliche Methode für die Designerunterstützung. 
		/// Der Inhalt der Methode darf nicht mit dem Code-Editor geändert werden.
		/// </summary>
		private void InitializeComponent()
		{
			System.Resources.ResourceManager resources = new System.Resources.ResourceManager(typeof(SelectionDialog));
			// 
			// SelectionDialog
			// 
			this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
			this.ClientSize = new System.Drawing.Size(292, 273);
			this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
			this.Name = "SelectionDialog";
			this.Text = "Select an artifact for generation";

		}
		#endregion

		#region manual GUI creation
		/// <summary>
		/// Initialises the selection dialog.
		/// </summary>
		private void InitialiseSelection()
		{
			// Add adaptor check box
			AddCheckBox("adaptor", "Adaptor");
			this.counter += 2;

			Label label = new Label();
			label.Name = "predictionModels";
			label.Location = new System.Drawing.Point(15, 
				(10+(this.counter*10)));
			label.Size = new System.Drawing.Size(250, 50);
			label.Text = "------------------------------------------"+
							"-----------------------\n\n"+
							"Prediction Models:";
			this.Controls.Add(label);
			this.counter += 4;

			// Add prediction model check boxes
			foreach (IPredictionModel predictionModel in 
				this.pattern.PredictionModels)
			{
				string name = predictionModel.Name;
				AddCheckBox(name, name);
			}

			AddGeneratorButton();

			int height = 130+(this.counter*10);
			this.Size = new System.Drawing.Size(270, height);
		}

		/// <summary>
		/// Adds a radio button with the given name and text at the current 
		/// position.
		/// </summary>
		/// <param name="name">The name of the new radio button.</param>
		/// <param name="text">The text of the new radio button.</param>
		private void AddCheckBox(string name, string text)
		{
			CheckBox box = new CheckBox();
			box.Location = new System.Drawing.Point(25, 
				(25+(this.counter*10)));
			box.Name = name;
			box.TabIndex = tabCounter;
			box.Text = text;
			this.checkBoxes.Add(box);	
			this.Controls.Add(box);
			this.counter += 2;
			this.tabCounter ++;
		}

	
		/// <summary>
		/// Adds a button to start the generation of the chosen artifact.
		/// </summary>
		private void AddGeneratorButton ()
		{
			this.generatorButton = new Button();
			this.generatorButton.Location = new System.Drawing.Point(75, 
				(64+(this.counter*10)));
			this.generatorButton.Name = "generatorButton";
			this.generatorButton.TabIndex = tabCounter;
			this.generatorButton.Size = new System.Drawing.Size(100, 23);
			this.generatorButton.Text = "Generate";
			this.generatorButton.Click += new System.EventHandler
				(this.controller.Generator_Click);
			this.Controls.Add(this.generatorButton);
			tabCounter++;
		}
		#endregion
	}
}
