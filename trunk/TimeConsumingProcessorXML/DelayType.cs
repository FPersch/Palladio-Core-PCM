//
// DelayType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace TimeConsumingProcessorXML
{
	public class DelayType : Altova.Xml.Node
	{
		#region Forward constructors
		public DelayType() : base() { SetCollectionParents(); }
		public DelayType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public DelayType(XmlNode node) : base(node) { SetCollectionParents(); }
		public DelayType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

			for (int i = 0; i < DomChildCount(NodeType.Attribute, "", "BasicDelay"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "BasicDelay", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			for (int i = 0; i < DomChildCount(NodeType.Attribute, "", "Variance"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "Variance", i);
				InternalAdjustPrefix(DOMNode, false);
			}
		}


		#region BasicDelay accessor methods
		public int GetBasicDelayMinCount()
		{
			return 1;
		}

		public int BasicDelayMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetBasicDelayMaxCount()
		{
			return 1;
		}

		public int BasicDelayMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetBasicDelayCount()
		{
			return DomChildCount(NodeType.Attribute, "", "BasicDelay");
		}

		public int BasicDelayCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "BasicDelay");
			}
		}

		public bool HasBasicDelay()
		{
			return HasDomChild(NodeType.Attribute, "", "BasicDelay");
		}

		public SchemaString GetBasicDelayAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "BasicDelay", index)));
		}

		public SchemaString GetBasicDelay()
		{
			return GetBasicDelayAt(0);
		}

		public SchemaString BasicDelay
		{
			get
			{
				return GetBasicDelayAt(0);
			}
		}

		public void RemoveBasicDelayAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "BasicDelay", index);
		}

		public void RemoveBasicDelay()
		{
			while (HasBasicDelay())
				RemoveBasicDelayAt(0);
		}

		public void AddBasicDelay(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "BasicDelay", newValue.ToString());
		}

		public void InsertBasicDelayAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "BasicDelay", index, newValue.ToString());
		}

		public void ReplaceBasicDelayAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "BasicDelay", index, newValue.ToString());
		}
		#endregion // BasicDelay accessor methods

		#region BasicDelay collection
        public BasicDelayCollection	MyBasicDelays = new BasicDelayCollection( );

        public class BasicDelayCollection: IEnumerable
        {
            DelayType parent;
            public DelayType Parent
			{
				set
				{
					parent = value;
				}
			}
			public BasicDelayEnumerator GetEnumerator() 
			{
				return new BasicDelayEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class BasicDelayEnumerator: IEnumerator 
        {
			int nIndex;
			DelayType parent;
			public BasicDelayEnumerator(DelayType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.BasicDelayCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetBasicDelayAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // BasicDelay collection

		#region Variance accessor methods
		public int GetVarianceMinCount()
		{
			return 1;
		}

		public int VarianceMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetVarianceMaxCount()
		{
			return 1;
		}

		public int VarianceMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetVarianceCount()
		{
			return DomChildCount(NodeType.Attribute, "", "Variance");
		}

		public int VarianceCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "Variance");
			}
		}

		public bool HasVariance()
		{
			return HasDomChild(NodeType.Attribute, "", "Variance");
		}

		public SchemaString GetVarianceAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "Variance", index)));
		}

		public SchemaString GetVariance()
		{
			return GetVarianceAt(0);
		}

		public SchemaString Variance
		{
			get
			{
				return GetVarianceAt(0);
			}
		}

		public void RemoveVarianceAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "Variance", index);
		}

		public void RemoveVariance()
		{
			while (HasVariance())
				RemoveVarianceAt(0);
		}

		public void AddVariance(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "Variance", newValue.ToString());
		}

		public void InsertVarianceAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "Variance", index, newValue.ToString());
		}

		public void ReplaceVarianceAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "Variance", index, newValue.ToString());
		}
		#endregion // Variance accessor methods

		#region Variance collection
        public VarianceCollection	MyVariances = new VarianceCollection( );

        public class VarianceCollection: IEnumerable
        {
            DelayType parent;
            public DelayType Parent
			{
				set
				{
					parent = value;
				}
			}
			public VarianceEnumerator GetEnumerator() 
			{
				return new VarianceEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class VarianceEnumerator: IEnumerator 
        {
			int nIndex;
			DelayType parent;
			public VarianceEnumerator(DelayType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.VarianceCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetVarianceAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Variance collection

        private void SetCollectionParents()
        {
            MyBasicDelays.Parent = this; 
            MyVariances.Parent = this; 
	}
}
}
