//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by CodeSmith.
//     Version: 2.6.0.117
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Reflection;

namespace Palladio.Reliability.WebserverProfiler.Interceptor
{

#region IDispatcher

public class DispatcherInterceptor : Palladio.Webserver.Dispatcher.IDispatcher
{
	#region Properties 
	
	#endregion 
	
	#region Methods

	public void Stop( )
	{
		MethodInfo method = _target.GetType().GetMethod("Stop", new Type[] {});
		long id = InterceptorActions.GetNextCallID();
		InterceptorActions.BeforeCall(id, "IDispatcher", method);
		try
		{
			_target.Stop();
		}
		finally
		{
			InterceptorActions.AfterCall();
		}
	}                                   

	public void Start( )
	{
		MethodInfo method = _target.GetType().GetMethod("Start", new Type[] {});
		long id = InterceptorActions.GetNextCallID();
		InterceptorActions.BeforeCall(id, "IDispatcher", method);
		try
		{
			_target.Start();
		}
		finally
		{
			InterceptorActions.AfterCall();
		}
	}                                   
	#endregion 

	#region Constructor and Data
	
	private Palladio.Webserver.Dispatcher.IDispatcher _target;
	
	public  DispatcherInterceptor(Palladio.Webserver.Dispatcher.IDispatcher target)
	{
		_target = target;
	}
	#endregion
}

#endregion

#region IPortListenerFactory

public class PortListenerFactoryInterceptor : Palladio.Webserver.Dispatcher.IPortListenerFactory
{
	#region Properties 
	
	#endregion 
	
	#region Methods

	public Palladio.Webserver.Dispatcher.IPortListener CreatePortListener( Palladio.Webserver.RequestParser.IRequestParser requestParser, Palladio.Webserver.WebserverMonitor.IWebserverMonitor webserverMonitor, Palladio.Webserver.ConfigReader.IWebserverConfiguration webserverConfiguration, System.Int32 port, System.Net.IPAddress address, Palladio.Webserver.Request.IRequestFactory requestFactory)
	{
		MethodInfo method = _target.GetType().GetMethod("CreatePortListener", new Type[] {typeof(Palladio.Webserver.RequestParser.IRequestParser), typeof(Palladio.Webserver.WebserverMonitor.IWebserverMonitor), typeof(Palladio.Webserver.ConfigReader.IWebserverConfiguration), typeof(System.Int32), typeof(System.Net.IPAddress), typeof(Palladio.Webserver.Request.IRequestFactory)});
		long id = InterceptorActions.GetNextCallID();
		InterceptorActions.BeforeCall(id, "IPortListenerFactory", method);
		Palladio.Webserver.Dispatcher.IPortListener returnValue;
		try
		{
			 returnValue = _target.CreatePortListener(requestParser, webserverMonitor, webserverConfiguration, port, address, requestFactory);
		}
		finally
		{
			InterceptorActions.AfterCall();
		}
		return returnValue;
	}                                   
	#endregion 

	#region Constructor and Data
	
	private Palladio.Webserver.Dispatcher.IPortListenerFactory _target;
	
	public  PortListenerFactoryInterceptor(Palladio.Webserver.Dispatcher.IPortListenerFactory target)
	{
		_target = target;
	}
	#endregion
}

#endregion

#region IRequestHandlerFactory

public class RequestHandlerFactoryInterceptor : Palladio.Webserver.Dispatcher.IRequestHandlerFactory
{
	#region Properties 
	
	#endregion 
	
	#region Methods

	public Palladio.Webserver.Dispatcher.IRequestHandler CreateRequestHandler( Palladio.Webserver.RequestParser.IRequestParser requestParser, Palladio.Webserver.WebserverMonitor.IWebserverMonitor webserverMonitor, Palladio.Webserver.ConfigReader.IWebserverConfiguration webserverConfiguration, System.Int32 port, System.Net.Sockets.Socket clientSocket, Palladio.Webserver.Request.IRequestFactory requestFactory)
	{
		MethodInfo method = _target.GetType().GetMethod("CreateRequestHandler", new Type[] {typeof(Palladio.Webserver.RequestParser.IRequestParser), typeof(Palladio.Webserver.WebserverMonitor.IWebserverMonitor), typeof(Palladio.Webserver.ConfigReader.IWebserverConfiguration), typeof(System.Int32), typeof(System.Net.Sockets.Socket), typeof(Palladio.Webserver.Request.IRequestFactory)});
		long id = InterceptorActions.GetNextCallID();
		InterceptorActions.BeforeCall(id, "IRequestHandlerFactory", method);
		Palladio.Webserver.Dispatcher.IRequestHandler returnValue;
		try
		{
			 returnValue = _target.CreateRequestHandler(requestParser, webserverMonitor, webserverConfiguration, port, clientSocket, requestFactory);
		}
		finally
		{
			InterceptorActions.AfterCall();
		}
		return returnValue;
	}                                   
	#endregion 

	#region Constructor and Data
	
	private Palladio.Webserver.Dispatcher.IRequestHandlerFactory _target;
	
	public  RequestHandlerFactoryInterceptor(Palladio.Webserver.Dispatcher.IRequestHandlerFactory target)
	{
		_target = target;
	}
	#endregion
}

#endregion

#region IPortListener

public class PortListenerInterceptor : Palladio.Webserver.Dispatcher.IPortListener
{
	#region Properties 
	
	public System.Int32 Port
	{
		get 
		{ 
			MethodInfo method = _target.GetType().GetMethod("get_Port");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, "IPortListener", method);
			System.Int32 returnValue;
			try 
			{
				returnValue = _target.Port; 
			}
			finally
			{
				InterceptorActions.AfterCall();
			}
			return returnValue;
		}
	}
	
	public System.Boolean IsRunning
	{
		get 
		{ 
			MethodInfo method = _target.GetType().GetMethod("get_IsRunning");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, "IPortListener", method);
			System.Boolean returnValue;
			try 
			{
				returnValue = _target.IsRunning; 
			}
			finally
			{
				InterceptorActions.AfterCall();
			}
			return returnValue;
		}
		set 
		{ 
			MethodInfo method = _target.GetType().GetMethod("set_IsRunning");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, "IPortListener", method);
			try
			{
				_target.IsRunning = value; 
			}
			finally
			{
				InterceptorActions.AfterCall();
			}
		}
	}
	
	public System.Net.IPAddress Address
	{
		get 
		{ 
			MethodInfo method = _target.GetType().GetMethod("get_Address");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, "IPortListener", method);
			System.Net.IPAddress returnValue;
			try 
			{
				returnValue = _target.Address; 
			}
			finally
			{
				InterceptorActions.AfterCall();
			}
			return returnValue;
		}
	}
	
	#endregion 
	
	#region Methods

	public void StartListen( )
	{
		MethodInfo method = _target.GetType().GetMethod("StartListen", new Type[] {});
		long id = InterceptorActions.GetNextCallID();
		InterceptorActions.BeforeCall(id, "IPortListener", method);
		try
		{
			_target.StartListen();
		}
		finally
		{
			InterceptorActions.AfterCall();
		}
	}                                   
	#endregion 

	#region Constructor and Data
	
	private Palladio.Webserver.Dispatcher.IPortListener _target;
	
	public  PortListenerInterceptor(Palladio.Webserver.Dispatcher.IPortListener target)
	{
		_target = target;
	}
	#endregion
}

#endregion

#region IRequestHandler

public class RequestHandlerInterceptor : Palladio.Webserver.Dispatcher.IRequestHandler
{
	#region Properties 
	
	public System.Net.Sockets.Socket ClientSocket
	{
		get 
		{ 
			MethodInfo method = _target.GetType().GetMethod("get_ClientSocket");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, "IRequestHandler", method);
			System.Net.Sockets.Socket returnValue;
			try 
			{
				returnValue = _target.ClientSocket; 
			}
			finally
			{
				InterceptorActions.AfterCall();
			}
			return returnValue;
		}
		set 
		{ 
			MethodInfo method = _target.GetType().GetMethod("set_ClientSocket");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, "IRequestHandler", method);
			try
			{
				_target.ClientSocket = value; 
			}
			finally
			{
				InterceptorActions.AfterCall();
			}
		}
	}
	
	#endregion 
	
	#region Methods

	public void Stop( )
	{
		MethodInfo method = _target.GetType().GetMethod("Stop", new Type[] {});
		long id = InterceptorActions.GetNextCallID();
		InterceptorActions.BeforeCall(id, "IRequestHandler", method);
		try
		{
			_target.Stop();
		}
		finally
		{
			InterceptorActions.AfterCall();
		}
	}                                   

	public void HandleRequest( )
	{
		MethodInfo method = _target.GetType().GetMethod("HandleRequest", new Type[] {});
		long id = InterceptorActions.GetNextCallID();
		InterceptorActions.BeforeCall(id, "IRequestHandler", method);
		try
		{
			_target.HandleRequest();
		}
		finally
		{
			InterceptorActions.AfterCall();
		}
	}                                   
	#endregion 

	#region Constructor and Data
	
	private Palladio.Webserver.Dispatcher.IRequestHandler _target;
	
	public  RequestHandlerInterceptor(Palladio.Webserver.Dispatcher.IRequestHandler target)
	{
		_target = target;
	}
	#endregion
}

#endregion

#region IConfigReader

public class ConfigReaderInterceptor : Palladio.Webserver.ConfigReader.IConfigReader
{
	#region Properties 
	
	#endregion 
	
	#region Methods

	public WebserverXML.ConfigType ReadConfiguration( System.String configPathFile)
	{
		MethodInfo method = _target.GetType().GetMethod("ReadConfiguration", new Type[] {typeof(System.String)});
		long id = InterceptorActions.GetNextCallID();
		InterceptorActions.BeforeCall(id, "IConfigReader", method);
		WebserverXML.ConfigType returnValue;
		try
		{
			 returnValue = _target.ReadConfiguration(configPathFile);
		}
		finally
		{
			InterceptorActions.AfterCall();
		}
		return returnValue;
	}                                   
	#endregion 

	#region Constructor and Data
	
	private Palladio.Webserver.ConfigReader.IConfigReader _target;
	
	public  ConfigReaderInterceptor(Palladio.Webserver.ConfigReader.IConfigReader target)
	{
		_target = target;
	}
	#endregion
}

#endregion

#region IConfiguration

public class ConfigurationInterceptor : Palladio.Webserver.ConfigReader.IConfiguration
{
	#region Properties 
	
	#endregion 
	
	#region Methods

	public System.Object GetValue( System.String key)
	{
		MethodInfo method = _target.GetType().GetMethod("GetValue", new Type[] {typeof(System.String)});
		long id = InterceptorActions.GetNextCallID();
		InterceptorActions.BeforeCall(id, "IConfiguration", method);
		System.Object returnValue;
		try
		{
			 returnValue = _target.GetValue(key);
		}
		finally
		{
			InterceptorActions.AfterCall();
		}
		return returnValue;
	}                                   
	#endregion 

	#region Constructor and Data
	
	private Palladio.Webserver.ConfigReader.IConfiguration _target;
	
	public  ConfigurationInterceptor(Palladio.Webserver.ConfigReader.IConfiguration target)
	{
		_target = target;
	}
	#endregion
}

#endregion

#region IWebserverConfiguration

public class WebserverConfigurationInterceptor : Palladio.Webserver.ConfigReader.IWebserverConfiguration
{
	#region Properties 
	
	public System.String ConfigFilesPath
	{
		get 
		{ 
			MethodInfo method = _target.GetType().GetMethod("get_ConfigFilesPath");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, "IWebserverConfiguration", method);
			System.String returnValue;
			try 
			{
				returnValue = _target.ConfigFilesPath; 
			}
			finally
			{
				InterceptorActions.AfterCall();
			}
			return returnValue;
		}
		set 
		{ 
			MethodInfo method = _target.GetType().GetMethod("set_ConfigFilesPath");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, "IWebserverConfiguration", method);
			try
			{
				_target.ConfigFilesPath = value; 
			}
			finally
			{
				InterceptorActions.AfterCall();
			}
		}
	}
	
	public System.String DebugFile
	{
		get 
		{ 
			MethodInfo method = _target.GetType().GetMethod("get_DebugFile");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, "IWebserverConfiguration", method);
			System.String returnValue;
			try 
			{
				returnValue = _target.DebugFile; 
			}
			finally
			{
				InterceptorActions.AfterCall();
			}
			return returnValue;
		}
	}
	
	public System.String DocumentRoot
	{
		get 
		{ 
			MethodInfo method = _target.GetType().GetMethod("get_DocumentRoot");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, "IWebserverConfiguration", method);
			System.String returnValue;
			try 
			{
				returnValue = _target.DocumentRoot; 
			}
			finally
			{
				InterceptorActions.AfterCall();
			}
			return returnValue;
		}
	}
	
	public System.Int32[] ListeningPorts
	{
		get 
		{ 
			MethodInfo method = _target.GetType().GetMethod("get_ListeningPorts");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, "IWebserverConfiguration", method);
			System.Int32[] returnValue;
			try 
			{
				returnValue = _target.ListeningPorts; 
			}
			finally
			{
				InterceptorActions.AfterCall();
			}
			return returnValue;
		}
	}
	
	public System.String DefaultMimeType
	{
		get 
		{ 
			MethodInfo method = _target.GetType().GetMethod("get_DefaultMimeType");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, "IWebserverConfiguration", method);
			System.String returnValue;
			try 
			{
				returnValue = _target.DefaultMimeType; 
			}
			finally
			{
				InterceptorActions.AfterCall();
			}
			return returnValue;
		}
	}
	
	public System.String ListenIP
	{
		get 
		{ 
			MethodInfo method = _target.GetType().GetMethod("get_ListenIP");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, "IWebserverConfiguration", method);
			System.String returnValue;
			try 
			{
				returnValue = _target.ListenIP; 
			}
			finally
			{
				InterceptorActions.AfterCall();
			}
			return returnValue;
		}
	}
	
	public System.String LogFile
	{
		get 
		{ 
			MethodInfo method = _target.GetType().GetMethod("get_LogFile");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, "IWebserverConfiguration", method);
			System.String returnValue;
			try 
			{
				returnValue = _target.LogFile; 
			}
			finally
			{
				InterceptorActions.AfterCall();
			}
			return returnValue;
		}
	}
	
	public System.String[] DefaultFileNames
	{
		get 
		{ 
			MethodInfo method = _target.GetType().GetMethod("get_DefaultFileNames");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, "IWebserverConfiguration", method);
			System.String[] returnValue;
			try 
			{
				returnValue = _target.DefaultFileNames; 
			}
			finally
			{
				InterceptorActions.AfterCall();
			}
			return returnValue;
		}
	}
	
	#endregion 
	
	#region Methods

	public System.String GetMimeTypeFor( System.String fileExtension)
	{
		MethodInfo method = _target.GetType().GetMethod("GetMimeTypeFor", new Type[] {typeof(System.String)});
		long id = InterceptorActions.GetNextCallID();
		InterceptorActions.BeforeCall(id, "IWebserverConfiguration", method);
		System.String returnValue;
		try
		{
			 returnValue = _target.GetMimeTypeFor(fileExtension);
		}
		finally
		{
			InterceptorActions.AfterCall();
		}
		return returnValue;
	}                                   
	#endregion 

	#region Constructor and Data
	
	private Palladio.Webserver.ConfigReader.IWebserverConfiguration _target;
	
	public  WebserverConfigurationInterceptor(Palladio.Webserver.ConfigReader.IWebserverConfiguration target)
	{
		_target = target;
	}
	#endregion
}

#endregion

#region IFTPRequestProcessor

public class FTPRequestProcessorInterceptor : Palladio.Webserver.FTPRequestProcessor.IFTPRequestProcessor
{
	#region Properties 
	
	#endregion 
	
	#region Methods
	#endregion 

	#region Constructor and Data
	
	private Palladio.Webserver.FTPRequestProcessor.IFTPRequestProcessor _target;
	
	public  FTPRequestProcessorInterceptor(Palladio.Webserver.FTPRequestProcessor.IFTPRequestProcessor target)
	{
		_target = target;
	}
	#endregion
}

#endregion

#region IHTTPRequestProcessor

public class HTTPRequestProcessorInterceptor : Palladio.Webserver.HTTPRequestProcessor.IHTTPRequestProcessor
{
	#region Properties 
	
	#endregion 
	
	#region Methods

	public void HandleRequest( Palladio.Webserver.Request.IHTTPRequest httpRequest)
	{
		MethodInfo method = _target.GetType().GetMethod("HandleRequest", new Type[] {typeof(Palladio.Webserver.Request.IHTTPRequest)});
		long id = InterceptorActions.GetNextCallID();
		InterceptorActions.BeforeCall(id, "IHTTPRequestProcessor", method);
		try
		{
			_target.HandleRequest(httpRequest);
		}
		finally
		{
			InterceptorActions.AfterCall();
		}
	}                                   
	#endregion 

	#region Constructor and Data
	
	private Palladio.Webserver.HTTPRequestProcessor.IHTTPRequestProcessor _target;
	
	public  HTTPRequestProcessorInterceptor(Palladio.Webserver.HTTPRequestProcessor.IHTTPRequestProcessor target)
	{
		_target = target;
	}
	#endregion
}

#endregion

#region IHTTPRequestProcessorTools

public class HTTPRequestProcessorToolsInterceptor : Palladio.Webserver.HTTPRequestProcessor.IHTTPRequestProcessorTools
{
	#region Properties 
	
	#endregion 
	
	#region Methods

	public System.Byte[] OpenFile( System.String completePath, System.String fileName)
	{
		MethodInfo method = _target.GetType().GetMethod("OpenFile", new Type[] {typeof(System.String), typeof(System.String)});
		long id = InterceptorActions.GetNextCallID();
		InterceptorActions.BeforeCall(id, "IHTTPRequestProcessorTools", method);
		System.Byte[] returnValue;
		try
		{
			 returnValue = _target.OpenFile(completePath, fileName);
		}
		finally
		{
			InterceptorActions.AfterCall();
		}
		return returnValue;
	}                                   

	public System.String GetFileMimeTypeFor( System.String requestedFileType)
	{
		MethodInfo method = _target.GetType().GetMethod("GetFileMimeTypeFor", new Type[] {typeof(System.String)});
		long id = InterceptorActions.GetNextCallID();
		InterceptorActions.BeforeCall(id, "IHTTPRequestProcessorTools", method);
		System.String returnValue;
		try
		{
			 returnValue = _target.GetFileMimeTypeFor(requestedFileType);
		}
		finally
		{
			InterceptorActions.AfterCall();
		}
		return returnValue;
	}                                   

	public System.String BuildCompletePath( System.String requestedPath)
	{
		MethodInfo method = _target.GetType().GetMethod("BuildCompletePath", new Type[] {typeof(System.String)});
		long id = InterceptorActions.GetNextCallID();
		InterceptorActions.BeforeCall(id, "IHTTPRequestProcessorTools", method);
		System.String returnValue;
		try
		{
			 returnValue = _target.BuildCompletePath(requestedPath);
		}
		finally
		{
			InterceptorActions.AfterCall();
		}
		return returnValue;
	}                                   

	public void SendContentDataToClient( System.Byte[] contentDataBytes, System.Net.Sockets.NetworkStream networkStream)
	{
		MethodInfo method = _target.GetType().GetMethod("SendContentDataToClient", new Type[] {typeof(System.Byte[]), typeof(System.Net.Sockets.NetworkStream)});
		long id = InterceptorActions.GetNextCallID();
		InterceptorActions.BeforeCall(id, "IHTTPRequestProcessorTools", method);
		try
		{
			_target.SendContentDataToClient(contentDataBytes, networkStream);
		}
		finally
		{
			InterceptorActions.AfterCall();
		}
	}                                   

	public void SendContentToClient( System.String contentData, System.Net.Sockets.NetworkStream networkStream)
	{
		MethodInfo method = _target.GetType().GetMethod("SendContentToClient", new Type[] {typeof(System.String), typeof(System.Net.Sockets.NetworkStream)});
		long id = InterceptorActions.GetNextCallID();
		InterceptorActions.BeforeCall(id, "IHTTPRequestProcessorTools", method);
		try
		{
			_target.SendContentToClient(contentData, networkStream);
		}
		finally
		{
			InterceptorActions.AfterCall();
		}
	}                                   

	public void SendHTTPError( Palladio.Webserver.Request.IHTTPRequest httpRequest, System.String errorMessage, System.String errorCode)
	{
		MethodInfo method = _target.GetType().GetMethod("SendHTTPError", new Type[] {typeof(Palladio.Webserver.Request.IHTTPRequest), typeof(System.String), typeof(System.String)});
		long id = InterceptorActions.GetNextCallID();
		InterceptorActions.BeforeCall(id, "IHTTPRequestProcessorTools", method);
		try
		{
			_target.SendHTTPError(httpRequest, errorMessage, errorCode);
		}
		finally
		{
			InterceptorActions.AfterCall();
		}
	}                                   

	public void SendHTTPHeader( System.String httpVersion, System.String mimeType, System.Int32 totalBytes, System.String httpStatusCode, System.Net.Sockets.NetworkStream networkStream)
	{
		MethodInfo method = _target.GetType().GetMethod("SendHTTPHeader", new Type[] {typeof(System.String), typeof(System.String), typeof(System.Int32), typeof(System.String), typeof(System.Net.Sockets.NetworkStream)});
		long id = InterceptorActions.GetNextCallID();
		InterceptorActions.BeforeCall(id, "IHTTPRequestProcessorTools", method);
		try
		{
			_target.SendHTTPHeader(httpVersion, mimeType, totalBytes, httpStatusCode, networkStream);
		}
		finally
		{
			InterceptorActions.AfterCall();
		}
	}                                   
	#endregion 

	#region Constructor and Data
	
	private Palladio.Webserver.HTTPRequestProcessor.IHTTPRequestProcessorTools _target;
	
	public  HTTPRequestProcessorToolsInterceptor(Palladio.Webserver.HTTPRequestProcessor.IHTTPRequestProcessorTools target)
	{
		_target = target;
	}
	#endregion
}

#endregion

#region IRequestParser

public class RequestParserInterceptor : Palladio.Webserver.RequestParser.IRequestParser
{
	#region Properties 
	
	#endregion 
	
	#region Methods

	public void HandleRequest( Palladio.Webserver.Request.IRequest request)
	{
		MethodInfo method = _target.GetType().GetMethod("HandleRequest", new Type[] {typeof(Palladio.Webserver.Request.IRequest)});
		long id = InterceptorActions.GetNextCallID();
		InterceptorActions.BeforeCall(id, "IRequestParser", method);
		try
		{
			_target.HandleRequest(request);
		}
		finally
		{
			InterceptorActions.AfterCall();
		}
	}                                   
	#endregion 

	#region Constructor and Data
	
	private Palladio.Webserver.RequestParser.IRequestParser _target;
	
	public  RequestParserInterceptor(Palladio.Webserver.RequestParser.IRequestParser target)
	{
		_target = target;
	}
	#endregion
}

#endregion

#region IRequestProcessor

public class RequestProcessorInterceptor : Palladio.Webserver.RequestProcessor.IRequestProcessor
{
	#region Properties 
	
	#endregion 
	
	#region Methods
	#endregion 

	#region Constructor and Data
	
	private Palladio.Webserver.RequestProcessor.IRequestProcessor _target;
	
	public  RequestProcessorInterceptor(Palladio.Webserver.RequestProcessor.IRequestProcessor target)
	{
		_target = target;
	}
	#endregion
}

#endregion

#region IWebserverMonitor

public class WebserverMonitorInterceptor : Palladio.Webserver.WebserverMonitor.IWebserverMonitor
{
	#region Properties 
	
	#endregion 
	
	#region Methods

	public void WriteLogEntry( System.String logMessage)
	{
		MethodInfo method = _target.GetType().GetMethod("WriteLogEntry", new Type[] {typeof(System.String)});
		long id = InterceptorActions.GetNextCallID();
		InterceptorActions.BeforeCall(id, "IWebserverMonitor", method);
		try
		{
			_target.WriteLogEntry(logMessage);
		}
		finally
		{
			InterceptorActions.AfterCall();
		}
	}                                   

	public void WriteDebugMessage( System.String debugMessage, System.Int32 debugLevel)
	{
		MethodInfo method = _target.GetType().GetMethod("WriteDebugMessage", new Type[] {typeof(System.String), typeof(System.Int32)});
		long id = InterceptorActions.GetNextCallID();
		InterceptorActions.BeforeCall(id, "IWebserverMonitor", method);
		try
		{
			_target.WriteDebugMessage(debugMessage, debugLevel);
		}
		finally
		{
			InterceptorActions.AfterCall();
		}
	}                                   

	public void FinishWriteAccess( )
	{
		MethodInfo method = _target.GetType().GetMethod("FinishWriteAccess", new Type[] {});
		long id = InterceptorActions.GetNextCallID();
		InterceptorActions.BeforeCall(id, "IWebserverMonitor", method);
		try
		{
			_target.FinishWriteAccess();
		}
		finally
		{
			InterceptorActions.AfterCall();
		}
	}                                   

	public void InitializeWriteAccess( )
	{
		MethodInfo method = _target.GetType().GetMethod("InitializeWriteAccess", new Type[] {});
		long id = InterceptorActions.GetNextCallID();
		InterceptorActions.BeforeCall(id, "IWebserverMonitor", method);
		try
		{
			_target.InitializeWriteAccess();
		}
		finally
		{
			InterceptorActions.AfterCall();
		}
	}                                   
	#endregion 

	#region Constructor and Data
	
	private Palladio.Webserver.WebserverMonitor.IWebserverMonitor _target;
	
	public  WebserverMonitorInterceptor(Palladio.Webserver.WebserverMonitor.IWebserverMonitor target)
	{
		_target = target;
	}
	#endregion
}

#endregion

#region IBibTexDB

public class BibTexDBInterceptor : Palladio.Webserver.BibTeXProvider.IBibTexDB
{
	#region Properties 
	
	public System.String ConnectionString
	{
		get 
		{ 
			MethodInfo method = _target.GetType().GetMethod("get_ConnectionString");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, "IBibTexDB", method);
			System.String returnValue;
			try 
			{
				returnValue = _target.ConnectionString; 
			}
			finally
			{
				InterceptorActions.AfterCall();
			}
			return returnValue;
		}
		set 
		{ 
			MethodInfo method = _target.GetType().GetMethod("set_ConnectionString");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, "IBibTexDB", method);
			try
			{
				_target.ConnectionString = value; 
			}
			finally
			{
				InterceptorActions.AfterCall();
			}
		}
	}
	
	#endregion 
	
	#region Methods

	public System.Text.StringBuilder SearchAllEntries( System.String bibTeXTableName)
	{
		MethodInfo method = _target.GetType().GetMethod("SearchAllEntries", new Type[] {typeof(System.String)});
		long id = InterceptorActions.GetNextCallID();
		InterceptorActions.BeforeCall(id, "IBibTexDB", method);
		System.Text.StringBuilder returnValue;
		try
		{
			 returnValue = _target.SearchAllEntries(bibTeXTableName);
		}
		finally
		{
			InterceptorActions.AfterCall();
		}
		return returnValue;
	}                                   

	public System.Text.StringBuilder Search( System.String bibTeXTableName, Palladio.Webserver.Request.IHTTPRequest httpRequest, System.String[] bibTeXFieldNames)
	{
		MethodInfo method = _target.GetType().GetMethod("Search", new Type[] {typeof(System.String), typeof(Palladio.Webserver.Request.IHTTPRequest), typeof(System.String[])});
		long id = InterceptorActions.GetNextCallID();
		InterceptorActions.BeforeCall(id, "IBibTexDB", method);
		System.Text.StringBuilder returnValue;
		try
		{
			 returnValue = _target.Search(bibTeXTableName, httpRequest, bibTeXFieldNames);
		}
		finally
		{
			InterceptorActions.AfterCall();
		}
		return returnValue;
	}                                   
	#endregion 

	#region Constructor and Data
	
	private Palladio.Webserver.BibTeXProvider.IBibTexDB _target;
	
	public  BibTexDBInterceptor(Palladio.Webserver.BibTeXProvider.IBibTexDB target)
	{
		_target = target;
	}
	#endregion
}

#endregion

#region IHTTPRequest

public class HTTPRequestInterceptor : Palladio.Webserver.Request.IHTTPRequest
{
	#region Properties 
	
	public System.String RequestedFileType
	{
		get 
		{ 
			MethodInfo method = _target.GetType().GetMethod("get_RequestedFileType");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, "IHTTPRequest", method);
			System.String returnValue;
			try 
			{
				returnValue = _target.RequestedFileType; 
			}
			finally
			{
				InterceptorActions.AfterCall();
			}
			return returnValue;
		}
		set 
		{ 
			MethodInfo method = _target.GetType().GetMethod("set_RequestedFileType");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, "IHTTPRequest", method);
			try
			{
				_target.RequestedFileType = value; 
			}
			finally
			{
				InterceptorActions.AfterCall();
			}
		}
	}
	
	public System.String RequestedFileName
	{
		get 
		{ 
			MethodInfo method = _target.GetType().GetMethod("get_RequestedFileName");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, "IHTTPRequest", method);
			System.String returnValue;
			try 
			{
				returnValue = _target.RequestedFileName; 
			}
			finally
			{
				InterceptorActions.AfterCall();
			}
			return returnValue;
		}
		set 
		{ 
			MethodInfo method = _target.GetType().GetMethod("set_RequestedFileName");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, "IHTTPRequest", method);
			try
			{
				_target.RequestedFileName = value; 
			}
			finally
			{
				InterceptorActions.AfterCall();
			}
		}
	}
	
	public System.Collections.Hashtable GETHashtable
	{
		get 
		{ 
			MethodInfo method = _target.GetType().GetMethod("get_GETHashtable");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, "IHTTPRequest", method);
			System.Collections.Hashtable returnValue;
			try 
			{
				returnValue = _target.GETHashtable; 
			}
			finally
			{
				InterceptorActions.AfterCall();
			}
			return returnValue;
		}
	}
	
	public System.Net.Sockets.NetworkStream NetworkStream
	{
		get 
		{ 
			MethodInfo method = _target.GetType().GetMethod("get_NetworkStream");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, "IHTTPRequest", method);
			System.Net.Sockets.NetworkStream returnValue;
			try 
			{
				returnValue = _target.NetworkStream; 
			}
			finally
			{
				InterceptorActions.AfterCall();
			}
			return returnValue;
		}
		set 
		{ 
			MethodInfo method = _target.GetType().GetMethod("set_NetworkStream");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, "IHTTPRequest", method);
			try
			{
				_target.NetworkStream = value; 
			}
			finally
			{
				InterceptorActions.AfterCall();
			}
		}
	}
	
	public System.String HttpVersion
	{
		get 
		{ 
			MethodInfo method = _target.GetType().GetMethod("get_HttpVersion");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, "IHTTPRequest", method);
			System.String returnValue;
			try 
			{
				returnValue = _target.HttpVersion; 
			}
			finally
			{
				InterceptorActions.AfterCall();
			}
			return returnValue;
		}
		set 
		{ 
			MethodInfo method = _target.GetType().GetMethod("set_HttpVersion");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, "IHTTPRequest", method);
			try
			{
				_target.HttpVersion = value; 
			}
			finally
			{
				InterceptorActions.AfterCall();
			}
		}
	}
	
	public System.String RequestedDirectoryName
	{
		get 
		{ 
			MethodInfo method = _target.GetType().GetMethod("get_RequestedDirectoryName");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, "IHTTPRequest", method);
			System.String returnValue;
			try 
			{
				returnValue = _target.RequestedDirectoryName; 
			}
			finally
			{
				InterceptorActions.AfterCall();
			}
			return returnValue;
		}
		set 
		{ 
			MethodInfo method = _target.GetType().GetMethod("set_RequestedDirectoryName");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, "IHTTPRequest", method);
			try
			{
				_target.RequestedDirectoryName = value; 
			}
			finally
			{
				InterceptorActions.AfterCall();
			}
		}
	}
	
	public System.Int32 RequestedMethodType
	{
		get 
		{ 
			MethodInfo method = _target.GetType().GetMethod("get_RequestedMethodType");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, "IHTTPRequest", method);
			System.Int32 returnValue;
			try 
			{
				returnValue = _target.RequestedMethodType; 
			}
			finally
			{
				InterceptorActions.AfterCall();
			}
			return returnValue;
		}
		set 
		{ 
			MethodInfo method = _target.GetType().GetMethod("set_RequestedMethodType");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, "IHTTPRequest", method);
			try
			{
				_target.RequestedMethodType = value; 
			}
			finally
			{
				InterceptorActions.AfterCall();
			}
		}
	}
	
	public System.Collections.Hashtable POSTHashtable
	{
		get 
		{ 
			MethodInfo method = _target.GetType().GetMethod("get_POSTHashtable");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, "IHTTPRequest", method);
			System.Collections.Hashtable returnValue;
			try 
			{
				returnValue = _target.POSTHashtable; 
			}
			finally
			{
				InterceptorActions.AfterCall();
			}
			return returnValue;
		}
	}
	
	#endregion 
	
	#region Methods

	public System.String GetPOSTVariableValue( System.String key)
	{
		MethodInfo method = _target.GetType().GetMethod("GetPOSTVariableValue", new Type[] {typeof(System.String)});
		long id = InterceptorActions.GetNextCallID();
		InterceptorActions.BeforeCall(id, "IHTTPRequest", method);
		System.String returnValue;
		try
		{
			 returnValue = _target.GetPOSTVariableValue(key);
		}
		finally
		{
			InterceptorActions.AfterCall();
		}
		return returnValue;
	}                                   

	public System.String GetGETVariableValue( System.String key)
	{
		MethodInfo method = _target.GetType().GetMethod("GetGETVariableValue", new Type[] {typeof(System.String)});
		long id = InterceptorActions.GetNextCallID();
		InterceptorActions.BeforeCall(id, "IHTTPRequest", method);
		System.String returnValue;
		try
		{
			 returnValue = _target.GetGETVariableValue(key);
		}
		finally
		{
			InterceptorActions.AfterCall();
		}
		return returnValue;
	}                                   

	public void SetPOSTVariableValue( System.String key, System.String value)
	{
		MethodInfo method = _target.GetType().GetMethod("SetPOSTVariableValue", new Type[] {typeof(System.String), typeof(System.String)});
		long id = InterceptorActions.GetNextCallID();
		InterceptorActions.BeforeCall(id, "IHTTPRequest", method);
		try
		{
			_target.SetPOSTVariableValue(key, value);
		}
		finally
		{
			InterceptorActions.AfterCall();
		}
	}                                   

	public void SetGETVariableValue( System.String key, System.String value)
	{
		MethodInfo method = _target.GetType().GetMethod("SetGETVariableValue", new Type[] {typeof(System.String), typeof(System.String)});
		long id = InterceptorActions.GetNextCallID();
		InterceptorActions.BeforeCall(id, "IHTTPRequest", method);
		try
		{
			_target.SetGETVariableValue(key, value);
		}
		finally
		{
			InterceptorActions.AfterCall();
		}
	}                                   
	#endregion 

	#region Constructor and Data
	
	private Palladio.Webserver.Request.IHTTPRequest _target;
	
	public  HTTPRequestInterceptor(Palladio.Webserver.Request.IHTTPRequest target)
	{
		_target = target;
	}
	#endregion
}

#endregion

#region IRequest

public class RequestInterceptor : Palladio.Webserver.Request.IRequest
{
	#region Properties 
	
	public System.Net.Sockets.NetworkStream NetworkStream
	{
		get 
		{ 
			MethodInfo method = _target.GetType().GetMethod("get_NetworkStream");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, "IRequest", method);
			System.Net.Sockets.NetworkStream returnValue;
			try 
			{
				returnValue = _target.NetworkStream; 
			}
			finally
			{
				InterceptorActions.AfterCall();
			}
			return returnValue;
		}
		set 
		{ 
			MethodInfo method = _target.GetType().GetMethod("set_NetworkStream");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, "IRequest", method);
			try
			{
				_target.NetworkStream = value; 
			}
			finally
			{
				InterceptorActions.AfterCall();
			}
		}
	}
	
	public System.Int32 Port
	{
		get 
		{ 
			MethodInfo method = _target.GetType().GetMethod("get_Port");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, "IRequest", method);
			System.Int32 returnValue;
			try 
			{
				returnValue = _target.Port; 
			}
			finally
			{
				InterceptorActions.AfterCall();
			}
			return returnValue;
		}
		set 
		{ 
			MethodInfo method = _target.GetType().GetMethod("set_Port");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, "IRequest", method);
			try
			{
				_target.Port = value; 
			}
			finally
			{
				InterceptorActions.AfterCall();
			}
		}
	}
	
	#endregion 
	
	#region Methods
	#endregion 

	#region Constructor and Data
	
	private Palladio.Webserver.Request.IRequest _target;
	
	public  RequestInterceptor(Palladio.Webserver.Request.IRequest target)
	{
		_target = target;
	}
	#endregion
}

#endregion

#region IRequestFactory

public class RequestFactoryInterceptor : Palladio.Webserver.Request.IRequestFactory
{
	#region Properties 
	
	#endregion 
	
	#region Methods

	public Palladio.Webserver.Request.IHTTPRequest CreateHTTPRequest( )
	{
		MethodInfo method = _target.GetType().GetMethod("CreateHTTPRequest", new Type[] {});
		long id = InterceptorActions.GetNextCallID();
		InterceptorActions.BeforeCall(id, "IRequestFactory", method);
		Palladio.Webserver.Request.IHTTPRequest returnValue;
		try
		{
			 returnValue = _target.CreateHTTPRequest();
		}
		finally
		{
			InterceptorActions.AfterCall();
		}
		return returnValue;
	}                                   

	public Palladio.Webserver.Request.IRequest CreateRequest( Palladio.Webserver.WebserverMonitor.IWebserverMonitor webserverMonitor)
	{
		MethodInfo method = _target.GetType().GetMethod("CreateRequest", new Type[] {typeof(Palladio.Webserver.WebserverMonitor.IWebserverMonitor)});
		long id = InterceptorActions.GetNextCallID();
		InterceptorActions.BeforeCall(id, "IRequestFactory", method);
		Palladio.Webserver.Request.IRequest returnValue;
		try
		{
			 returnValue = _target.CreateRequest(webserverMonitor);
		}
		finally
		{
			InterceptorActions.AfterCall();
		}
		return returnValue;
	}                                   
	#endregion 

	#region Constructor and Data
	
	private Palladio.Webserver.Request.IRequestFactory _target;
	
	public  RequestFactoryInterceptor(Palladio.Webserver.Request.IRequestFactory target)
	{
		_target = target;
	}
	#endregion
}

#endregion

}
