//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Palladio.ComponentModel.ModelDataManagement {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    internal class ModelDataSet : DataSet {
        
        private ComponentsDataTable tableComponents;
        
        private InterfacesDataTable tableInterfaces;
        
        private SignaturesDataTable tableSignatures;
        
        private RolesDataTable tableRoles;
        
        private ProtocolsDataTable tableProtocols;
        
        private CompRelationsDataTable tableCompRelations;
        
        private DelegationConnectorsDataTable tableDelegationConnectors;
        
        private AssemblyConnectorsDataTable tableAssemblyConnectors;
        
        private DataRelation relationComponentsRoles;
        
        private DataRelation relationInterfacesRoles;
        
        private DataRelation relationInterfacesSignatures;
        
        private DataRelation relationInterfacesProtocols;
        
        private DataRelation relationComponentsCompRelations;
        
        private DataRelation relationComponentsCompRelations1;
        
        private DataRelation relationRolesDelegationConnectors;
        
        private DataRelation relationRolesDelegationConnectors1;
        
        private DataRelation relationCompRelDelCon;
        
        private DataRelation relationRolesAssemblyConnectors;
        
        private DataRelation relationRolesAssemblyConnectors1;
        
        private DataRelation relationCompRelAsmConProv;
        
        private DataRelation relationCompRelAsmConReq;
        
        public ModelDataSet() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ModelDataSet(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Components"] != null)) {
                    this.Tables.Add(new ComponentsDataTable(ds.Tables["Components"]));
                }
                if ((ds.Tables["Interfaces"] != null)) {
                    this.Tables.Add(new InterfacesDataTable(ds.Tables["Interfaces"]));
                }
                if ((ds.Tables["Signatures"] != null)) {
                    this.Tables.Add(new SignaturesDataTable(ds.Tables["Signatures"]));
                }
                if ((ds.Tables["Roles"] != null)) {
                    this.Tables.Add(new RolesDataTable(ds.Tables["Roles"]));
                }
                if ((ds.Tables["Protocols"] != null)) {
                    this.Tables.Add(new ProtocolsDataTable(ds.Tables["Protocols"]));
                }
                if ((ds.Tables["CompRelations"] != null)) {
                    this.Tables.Add(new CompRelationsDataTable(ds.Tables["CompRelations"]));
                }
                if ((ds.Tables["DelegationConnectors"] != null)) {
                    this.Tables.Add(new DelegationConnectorsDataTable(ds.Tables["DelegationConnectors"]));
                }
                if ((ds.Tables["AssemblyConnectors"] != null)) {
                    this.Tables.Add(new AssemblyConnectorsDataTable(ds.Tables["AssemblyConnectors"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ComponentsDataTable Components {
            get {
                return this.tableComponents;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InterfacesDataTable Interfaces {
            get {
                return this.tableInterfaces;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SignaturesDataTable Signatures {
            get {
                return this.tableSignatures;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RolesDataTable Roles {
            get {
                return this.tableRoles;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProtocolsDataTable Protocols {
            get {
                return this.tableProtocols;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CompRelationsDataTable CompRelations {
            get {
                return this.tableCompRelations;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DelegationConnectorsDataTable DelegationConnectors {
            get {
                return this.tableDelegationConnectors;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AssemblyConnectorsDataTable AssemblyConnectors {
            get {
                return this.tableAssemblyConnectors;
            }
        }
        
        public override DataSet Clone() {
            ModelDataSet cln = ((ModelDataSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Components"] != null)) {
                this.Tables.Add(new ComponentsDataTable(ds.Tables["Components"]));
            }
            if ((ds.Tables["Interfaces"] != null)) {
                this.Tables.Add(new InterfacesDataTable(ds.Tables["Interfaces"]));
            }
            if ((ds.Tables["Signatures"] != null)) {
                this.Tables.Add(new SignaturesDataTable(ds.Tables["Signatures"]));
            }
            if ((ds.Tables["Roles"] != null)) {
                this.Tables.Add(new RolesDataTable(ds.Tables["Roles"]));
            }
            if ((ds.Tables["Protocols"] != null)) {
                this.Tables.Add(new ProtocolsDataTable(ds.Tables["Protocols"]));
            }
            if ((ds.Tables["CompRelations"] != null)) {
                this.Tables.Add(new CompRelationsDataTable(ds.Tables["CompRelations"]));
            }
            if ((ds.Tables["DelegationConnectors"] != null)) {
                this.Tables.Add(new DelegationConnectorsDataTable(ds.Tables["DelegationConnectors"]));
            }
            if ((ds.Tables["AssemblyConnectors"] != null)) {
                this.Tables.Add(new AssemblyConnectorsDataTable(ds.Tables["AssemblyConnectors"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableComponents = ((ComponentsDataTable)(this.Tables["Components"]));
            if ((this.tableComponents != null)) {
                this.tableComponents.InitVars();
            }
            this.tableInterfaces = ((InterfacesDataTable)(this.Tables["Interfaces"]));
            if ((this.tableInterfaces != null)) {
                this.tableInterfaces.InitVars();
            }
            this.tableSignatures = ((SignaturesDataTable)(this.Tables["Signatures"]));
            if ((this.tableSignatures != null)) {
                this.tableSignatures.InitVars();
            }
            this.tableRoles = ((RolesDataTable)(this.Tables["Roles"]));
            if ((this.tableRoles != null)) {
                this.tableRoles.InitVars();
            }
            this.tableProtocols = ((ProtocolsDataTable)(this.Tables["Protocols"]));
            if ((this.tableProtocols != null)) {
                this.tableProtocols.InitVars();
            }
            this.tableCompRelations = ((CompRelationsDataTable)(this.Tables["CompRelations"]));
            if ((this.tableCompRelations != null)) {
                this.tableCompRelations.InitVars();
            }
            this.tableDelegationConnectors = ((DelegationConnectorsDataTable)(this.Tables["DelegationConnectors"]));
            if ((this.tableDelegationConnectors != null)) {
                this.tableDelegationConnectors.InitVars();
            }
            this.tableAssemblyConnectors = ((AssemblyConnectorsDataTable)(this.Tables["AssemblyConnectors"]));
            if ((this.tableAssemblyConnectors != null)) {
                this.tableAssemblyConnectors.InitVars();
            }
            this.relationComponentsRoles = this.Relations["ComponentsRoles"];
            this.relationInterfacesRoles = this.Relations["InterfacesRoles"];
            this.relationInterfacesSignatures = this.Relations["InterfacesSignatures"];
            this.relationInterfacesProtocols = this.Relations["InterfacesProtocols"];
            this.relationComponentsCompRelations = this.Relations["ComponentsCompRelations"];
            this.relationComponentsCompRelations1 = this.Relations["ComponentsCompRelations1"];
            this.relationRolesDelegationConnectors = this.Relations["RolesDelegationConnectors"];
            this.relationRolesDelegationConnectors1 = this.Relations["RolesDelegationConnectors1"];
            this.relationCompRelDelCon = this.Relations["CompRelDelCon"];
            this.relationRolesAssemblyConnectors = this.Relations["RolesAssemblyConnectors"];
            this.relationRolesAssemblyConnectors1 = this.Relations["RolesAssemblyConnectors1"];
            this.relationCompRelAsmConProv = this.Relations["CompRelAsmConProv"];
            this.relationCompRelAsmConReq = this.Relations["CompRelAsmConReq"];
        }
        
        private void InitClass() {
            this.DataSetName = "ModelDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ModelDataSet.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableComponents = new ComponentsDataTable();
            this.Tables.Add(this.tableComponents);
            this.tableInterfaces = new InterfacesDataTable();
            this.Tables.Add(this.tableInterfaces);
            this.tableSignatures = new SignaturesDataTable();
            this.Tables.Add(this.tableSignatures);
            this.tableRoles = new RolesDataTable();
            this.Tables.Add(this.tableRoles);
            this.tableProtocols = new ProtocolsDataTable();
            this.Tables.Add(this.tableProtocols);
            this.tableCompRelations = new CompRelationsDataTable();
            this.Tables.Add(this.tableCompRelations);
            this.tableDelegationConnectors = new DelegationConnectorsDataTable();
            this.Tables.Add(this.tableDelegationConnectors);
            this.tableAssemblyConnectors = new AssemblyConnectorsDataTable();
            this.Tables.Add(this.tableAssemblyConnectors);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("InterfacesSignatures", new DataColumn[] {
                        this.tableInterfaces.guidColumn}, new DataColumn[] {
                        this.tableSignatures.fk_ifaceColumn});
            this.tableSignatures.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ComponentsRoles", new DataColumn[] {
                        this.tableComponents.guidColumn}, new DataColumn[] {
                        this.tableRoles.fk_compColumn});
            this.tableRoles.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("InterfacesRoles", new DataColumn[] {
                        this.tableInterfaces.guidColumn}, new DataColumn[] {
                        this.tableRoles.fk_ifaceColumn});
            this.tableRoles.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("InterfacesProtocols", new DataColumn[] {
                        this.tableInterfaces.guidColumn}, new DataColumn[] {
                        this.tableProtocols.fk_ifaceColumn});
            this.tableProtocols.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ComponentsCompRelations", new DataColumn[] {
                        this.tableComponents.guidColumn}, new DataColumn[] {
                        this.tableCompRelations.fk_childColumn});
            this.tableCompRelations.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.Cascade;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ComponentsCompRelations1", new DataColumn[] {
                        this.tableComponents.guidColumn}, new DataColumn[] {
                        this.tableCompRelations.fk_parentColumn});
            this.tableCompRelations.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.Cascade;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("RolesDelegationConnectors", new DataColumn[] {
                        this.tableRoles.idColumn}, new DataColumn[] {
                        this.tableDelegationConnectors.fk_outer_roleColumn});
            this.tableDelegationConnectors.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("RolesDelegationConnectors1", new DataColumn[] {
                        this.tableRoles.idColumn}, new DataColumn[] {
                        this.tableDelegationConnectors.fk_inner_roleColumn});
            this.tableDelegationConnectors.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("CompRelDelCon", new DataColumn[] {
                        this.tableCompRelations.idColumn}, new DataColumn[] {
                        this.tableDelegationConnectors.fk_inner_comp_relColumn});
            this.tableDelegationConnectors.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("RolesAssemblyConnectors", new DataColumn[] {
                        this.tableRoles.idColumn}, new DataColumn[] {
                        this.tableAssemblyConnectors.fk_prov_roleColumn});
            this.tableAssemblyConnectors.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("RolesAssemblyConnectors1", new DataColumn[] {
                        this.tableRoles.idColumn}, new DataColumn[] {
                        this.tableAssemblyConnectors.fk_req_roleColumn});
            this.tableAssemblyConnectors.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("CompRelAsmConProv", new DataColumn[] {
                        this.tableCompRelations.idColumn}, new DataColumn[] {
                        this.tableAssemblyConnectors.fk_prov_comp_relColumn});
            this.tableAssemblyConnectors.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("CompRelAsmConReq", new DataColumn[] {
                        this.tableCompRelations.idColumn}, new DataColumn[] {
                        this.tableAssemblyConnectors.fk_req_comp_relColumn});
            this.tableAssemblyConnectors.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationComponentsRoles = new DataRelation("ComponentsRoles", new DataColumn[] {
                        this.tableComponents.guidColumn}, new DataColumn[] {
                        this.tableRoles.fk_compColumn}, false);
            this.Relations.Add(this.relationComponentsRoles);
            this.relationInterfacesRoles = new DataRelation("InterfacesRoles", new DataColumn[] {
                        this.tableInterfaces.guidColumn}, new DataColumn[] {
                        this.tableRoles.fk_ifaceColumn}, false);
            this.Relations.Add(this.relationInterfacesRoles);
            this.relationInterfacesSignatures = new DataRelation("InterfacesSignatures", new DataColumn[] {
                        this.tableInterfaces.guidColumn}, new DataColumn[] {
                        this.tableSignatures.fk_ifaceColumn}, false);
            this.Relations.Add(this.relationInterfacesSignatures);
            this.relationInterfacesProtocols = new DataRelation("InterfacesProtocols", new DataColumn[] {
                        this.tableInterfaces.guidColumn}, new DataColumn[] {
                        this.tableProtocols.fk_ifaceColumn}, false);
            this.Relations.Add(this.relationInterfacesProtocols);
            this.relationComponentsCompRelations = new DataRelation("ComponentsCompRelations", new DataColumn[] {
                        this.tableComponents.guidColumn}, new DataColumn[] {
                        this.tableCompRelations.fk_childColumn}, false);
            this.Relations.Add(this.relationComponentsCompRelations);
            this.relationComponentsCompRelations1 = new DataRelation("ComponentsCompRelations1", new DataColumn[] {
                        this.tableComponents.guidColumn}, new DataColumn[] {
                        this.tableCompRelations.fk_parentColumn}, false);
            this.Relations.Add(this.relationComponentsCompRelations1);
            this.relationRolesDelegationConnectors = new DataRelation("RolesDelegationConnectors", new DataColumn[] {
                        this.tableRoles.idColumn}, new DataColumn[] {
                        this.tableDelegationConnectors.fk_outer_roleColumn}, false);
            this.Relations.Add(this.relationRolesDelegationConnectors);
            this.relationRolesDelegationConnectors1 = new DataRelation("RolesDelegationConnectors1", new DataColumn[] {
                        this.tableRoles.idColumn}, new DataColumn[] {
                        this.tableDelegationConnectors.fk_inner_roleColumn}, false);
            this.Relations.Add(this.relationRolesDelegationConnectors1);
            this.relationCompRelDelCon = new DataRelation("CompRelDelCon", new DataColumn[] {
                        this.tableCompRelations.idColumn}, new DataColumn[] {
                        this.tableDelegationConnectors.fk_inner_comp_relColumn}, false);
            this.Relations.Add(this.relationCompRelDelCon);
            this.relationRolesAssemblyConnectors = new DataRelation("RolesAssemblyConnectors", new DataColumn[] {
                        this.tableRoles.idColumn}, new DataColumn[] {
                        this.tableAssemblyConnectors.fk_prov_roleColumn}, false);
            this.Relations.Add(this.relationRolesAssemblyConnectors);
            this.relationRolesAssemblyConnectors1 = new DataRelation("RolesAssemblyConnectors1", new DataColumn[] {
                        this.tableRoles.idColumn}, new DataColumn[] {
                        this.tableAssemblyConnectors.fk_req_roleColumn}, false);
            this.Relations.Add(this.relationRolesAssemblyConnectors1);
            this.relationCompRelAsmConProv = new DataRelation("CompRelAsmConProv", new DataColumn[] {
                        this.tableCompRelations.idColumn}, new DataColumn[] {
                        this.tableAssemblyConnectors.fk_prov_comp_relColumn}, false);
            this.Relations.Add(this.relationCompRelAsmConProv);
            this.relationCompRelAsmConReq = new DataRelation("CompRelAsmConReq", new DataColumn[] {
                        this.tableCompRelations.idColumn}, new DataColumn[] {
                        this.tableAssemblyConnectors.fk_req_comp_relColumn}, false);
            this.Relations.Add(this.relationCompRelAsmConReq);
        }
        
        private bool ShouldSerializeComponents() {
            return false;
        }
        
        private bool ShouldSerializeInterfaces() {
            return false;
        }
        
        private bool ShouldSerializeSignatures() {
            return false;
        }
        
        private bool ShouldSerializeRoles() {
            return false;
        }
        
        private bool ShouldSerializeProtocols() {
            return false;
        }
        
        private bool ShouldSerializeCompRelations() {
            return false;
        }
        
        private bool ShouldSerializeDelegationConnectors() {
            return false;
        }
        
        private bool ShouldSerializeAssemblyConnectors() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ComponentsRowChangeEventHandler(object sender, ComponentsRowChangeEvent e);
        
        public delegate void InterfacesRowChangeEventHandler(object sender, InterfacesRowChangeEvent e);
        
        public delegate void SignaturesRowChangeEventHandler(object sender, SignaturesRowChangeEvent e);
        
        public delegate void RolesRowChangeEventHandler(object sender, RolesRowChangeEvent e);
        
        public delegate void ProtocolsRowChangeEventHandler(object sender, ProtocolsRowChangeEvent e);
        
        public delegate void CompRelationsRowChangeEventHandler(object sender, CompRelationsRowChangeEvent e);
        
        public delegate void DelegationConnectorsRowChangeEventHandler(object sender, DelegationConnectorsRowChangeEvent e);
        
        public delegate void AssemblyConnectorsRowChangeEventHandler(object sender, AssemblyConnectorsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ComponentsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnguid;
            
            private DataColumn columntype;
            
            internal ComponentsDataTable() : 
                    base("Components") {
                this.InitClass();
            }
            
            internal ComponentsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn guidColumn {
                get {
                    return this.columnguid;
                }
            }
            
            internal DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            public ComponentsRow this[int index] {
                get {
                    return ((ComponentsRow)(this.Rows[index]));
                }
            }
            
            public event ComponentsRowChangeEventHandler ComponentsRowChanged;
            
            public event ComponentsRowChangeEventHandler ComponentsRowChanging;
            
            public event ComponentsRowChangeEventHandler ComponentsRowDeleted;
            
            public event ComponentsRowChangeEventHandler ComponentsRowDeleting;
            
            public void AddComponentsRow(ComponentsRow row) {
                this.Rows.Add(row);
            }
            
            public ComponentsRow AddComponentsRow(string guid, System.SByte type) {
                ComponentsRow rowComponentsRow = ((ComponentsRow)(this.NewRow()));
                rowComponentsRow.ItemArray = new object[] {
                        guid,
                        type};
                this.Rows.Add(rowComponentsRow);
                return rowComponentsRow;
            }
            
            public ComponentsRow FindByguid(string guid) {
                return ((ComponentsRow)(this.Rows.Find(new object[] {
                            guid})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ComponentsDataTable cln = ((ComponentsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ComponentsDataTable();
            }
            
            internal void InitVars() {
                this.columnguid = this.Columns["guid"];
                this.columntype = this.Columns["type"];
            }
            
            private void InitClass() {
                this.columnguid = new DataColumn("guid", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnguid);
                this.columntype = new DataColumn("type", typeof(System.SByte), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columntype);
                this.Constraints.Add(new UniqueConstraint("PK_COMP", new DataColumn[] {
                                this.columnguid}, true));
                this.columnguid.AllowDBNull = false;
                this.columnguid.Unique = true;
                this.columnguid.Namespace = "http://tempuri.org/ModelDataSet.xsd";
                this.columntype.Namespace = "http://tempuri.org/ModelDataSet.xsd";
            }
            
            public ComponentsRow NewComponentsRow() {
                return ((ComponentsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ComponentsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ComponentsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ComponentsRowChanged != null)) {
                    this.ComponentsRowChanged(this, new ComponentsRowChangeEvent(((ComponentsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ComponentsRowChanging != null)) {
                    this.ComponentsRowChanging(this, new ComponentsRowChangeEvent(((ComponentsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ComponentsRowDeleted != null)) {
                    this.ComponentsRowDeleted(this, new ComponentsRowChangeEvent(((ComponentsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ComponentsRowDeleting != null)) {
                    this.ComponentsRowDeleting(this, new ComponentsRowChangeEvent(((ComponentsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveComponentsRow(ComponentsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ComponentsRow : DataRow {
            
            private ComponentsDataTable tableComponents;
            
            internal ComponentsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableComponents = ((ComponentsDataTable)(this.Table));
            }
            
            public string guid {
                get {
                    return ((string)(this[this.tableComponents.guidColumn]));
                }
                set {
                    this[this.tableComponents.guidColumn] = value;
                }
            }
            
            public System.SByte type {
                get {
                    try {
                        return ((System.SByte)(this[this.tableComponents.typeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e);
                    }
                }
                set {
                    this[this.tableComponents.typeColumn] = value;
                }
            }
            
            public bool IstypeNull() {
                return this.IsNull(this.tableComponents.typeColumn);
            }
            
            public void SettypeNull() {
                this[this.tableComponents.typeColumn] = System.Convert.DBNull;
            }
            
            public RolesRow[] GetRolesRows() {
                return ((RolesRow[])(this.GetChildRows(this.Table.ChildRelations["ComponentsRoles"])));
            }
            
            public CompRelationsRow[] GetCompRelationsRowsByComponentsCompRelations() {
                return ((CompRelationsRow[])(this.GetChildRows(this.Table.ChildRelations["ComponentsCompRelations"])));
            }
            
            public CompRelationsRow[] GetCompRelationsRowsByComponentsCompRelations1() {
                return ((CompRelationsRow[])(this.GetChildRows(this.Table.ChildRelations["ComponentsCompRelations1"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ComponentsRowChangeEvent : EventArgs {
            
            private ComponentsRow eventRow;
            
            private DataRowAction eventAction;
            
            public ComponentsRowChangeEvent(ComponentsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ComponentsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InterfacesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnguid;
            
            internal InterfacesDataTable() : 
                    base("Interfaces") {
                this.InitClass();
            }
            
            internal InterfacesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn guidColumn {
                get {
                    return this.columnguid;
                }
            }
            
            public InterfacesRow this[int index] {
                get {
                    return ((InterfacesRow)(this.Rows[index]));
                }
            }
            
            public event InterfacesRowChangeEventHandler InterfacesRowChanged;
            
            public event InterfacesRowChangeEventHandler InterfacesRowChanging;
            
            public event InterfacesRowChangeEventHandler InterfacesRowDeleted;
            
            public event InterfacesRowChangeEventHandler InterfacesRowDeleting;
            
            public void AddInterfacesRow(InterfacesRow row) {
                this.Rows.Add(row);
            }
            
            public InterfacesRow AddInterfacesRow(string guid) {
                InterfacesRow rowInterfacesRow = ((InterfacesRow)(this.NewRow()));
                rowInterfacesRow.ItemArray = new object[] {
                        guid};
                this.Rows.Add(rowInterfacesRow);
                return rowInterfacesRow;
            }
            
            public InterfacesRow FindByguid(string guid) {
                return ((InterfacesRow)(this.Rows.Find(new object[] {
                            guid})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                InterfacesDataTable cln = ((InterfacesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new InterfacesDataTable();
            }
            
            internal void InitVars() {
                this.columnguid = this.Columns["guid"];
            }
            
            private void InitClass() {
                this.columnguid = new DataColumn("guid", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnguid);
                this.Constraints.Add(new UniqueConstraint("PK_IFACE", new DataColumn[] {
                                this.columnguid}, true));
                this.columnguid.AllowDBNull = false;
                this.columnguid.Unique = true;
                this.columnguid.Namespace = "http://tempuri.org/ModelDataSet.xsd";
            }
            
            public InterfacesRow NewInterfacesRow() {
                return ((InterfacesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new InterfacesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(InterfacesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InterfacesRowChanged != null)) {
                    this.InterfacesRowChanged(this, new InterfacesRowChangeEvent(((InterfacesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InterfacesRowChanging != null)) {
                    this.InterfacesRowChanging(this, new InterfacesRowChangeEvent(((InterfacesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InterfacesRowDeleted != null)) {
                    this.InterfacesRowDeleted(this, new InterfacesRowChangeEvent(((InterfacesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InterfacesRowDeleting != null)) {
                    this.InterfacesRowDeleting(this, new InterfacesRowChangeEvent(((InterfacesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveInterfacesRow(InterfacesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InterfacesRow : DataRow {
            
            private InterfacesDataTable tableInterfaces;
            
            internal InterfacesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableInterfaces = ((InterfacesDataTable)(this.Table));
            }
            
            public string guid {
                get {
                    return ((string)(this[this.tableInterfaces.guidColumn]));
                }
                set {
                    this[this.tableInterfaces.guidColumn] = value;
                }
            }
            
            public RolesRow[] GetRolesRows() {
                return ((RolesRow[])(this.GetChildRows(this.Table.ChildRelations["InterfacesRoles"])));
            }
            
            public SignaturesRow[] GetSignaturesRows() {
                return ((SignaturesRow[])(this.GetChildRows(this.Table.ChildRelations["InterfacesSignatures"])));
            }
            
            public ProtocolsRow[] GetProtocolsRows() {
                return ((ProtocolsRow[])(this.GetChildRows(this.Table.ChildRelations["InterfacesProtocols"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InterfacesRowChangeEvent : EventArgs {
            
            private InterfacesRow eventRow;
            
            private DataRowAction eventAction;
            
            public InterfacesRowChangeEvent(InterfacesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public InterfacesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SignaturesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnguid;
            
            private DataColumn columnfk_iface;
            
            internal SignaturesDataTable() : 
                    base("Signatures") {
                this.InitClass();
            }
            
            internal SignaturesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn guidColumn {
                get {
                    return this.columnguid;
                }
            }
            
            internal DataColumn fk_ifaceColumn {
                get {
                    return this.columnfk_iface;
                }
            }
            
            public SignaturesRow this[int index] {
                get {
                    return ((SignaturesRow)(this.Rows[index]));
                }
            }
            
            public event SignaturesRowChangeEventHandler SignaturesRowChanged;
            
            public event SignaturesRowChangeEventHandler SignaturesRowChanging;
            
            public event SignaturesRowChangeEventHandler SignaturesRowDeleted;
            
            public event SignaturesRowChangeEventHandler SignaturesRowDeleting;
            
            public void AddSignaturesRow(SignaturesRow row) {
                this.Rows.Add(row);
            }
            
            public SignaturesRow AddSignaturesRow(string guid, InterfacesRow parentInterfacesRowByInterfacesSignatures) {
                SignaturesRow rowSignaturesRow = ((SignaturesRow)(this.NewRow()));
                rowSignaturesRow.ItemArray = new object[] {
                        guid,
                        parentInterfacesRowByInterfacesSignatures[0]};
                this.Rows.Add(rowSignaturesRow);
                return rowSignaturesRow;
            }
            
            public SignaturesRow FindByguid(string guid) {
                return ((SignaturesRow)(this.Rows.Find(new object[] {
                            guid})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SignaturesDataTable cln = ((SignaturesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SignaturesDataTable();
            }
            
            internal void InitVars() {
                this.columnguid = this.Columns["guid"];
                this.columnfk_iface = this.Columns["fk_iface"];
            }
            
            private void InitClass() {
                this.columnguid = new DataColumn("guid", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnguid);
                this.columnfk_iface = new DataColumn("fk_iface", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnfk_iface);
                this.Constraints.Add(new UniqueConstraint("PK_SIG", new DataColumn[] {
                                this.columnguid}, true));
                this.columnguid.AllowDBNull = false;
                this.columnguid.Unique = true;
                this.columnguid.Namespace = "http://tempuri.org/ModelDataSet.xsd";
                this.columnfk_iface.Namespace = "http://tempuri.org/ModelDataSet.xsd";
            }
            
            public SignaturesRow NewSignaturesRow() {
                return ((SignaturesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SignaturesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SignaturesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SignaturesRowChanged != null)) {
                    this.SignaturesRowChanged(this, new SignaturesRowChangeEvent(((SignaturesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SignaturesRowChanging != null)) {
                    this.SignaturesRowChanging(this, new SignaturesRowChangeEvent(((SignaturesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SignaturesRowDeleted != null)) {
                    this.SignaturesRowDeleted(this, new SignaturesRowChangeEvent(((SignaturesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SignaturesRowDeleting != null)) {
                    this.SignaturesRowDeleting(this, new SignaturesRowChangeEvent(((SignaturesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSignaturesRow(SignaturesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SignaturesRow : DataRow {
            
            private SignaturesDataTable tableSignatures;
            
            internal SignaturesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSignatures = ((SignaturesDataTable)(this.Table));
            }
            
            public string guid {
                get {
                    return ((string)(this[this.tableSignatures.guidColumn]));
                }
                set {
                    this[this.tableSignatures.guidColumn] = value;
                }
            }
            
            public string fk_iface {
                get {
                    if (this.Isfk_ifaceNull()) {
                        return "-1";
                    }
                    else {
                        return ((string)(this[this.tableSignatures.fk_ifaceColumn]));
                    }
                }
                set {
                    this[this.tableSignatures.fk_ifaceColumn] = value;
                }
            }
            
            public InterfacesRow InterfacesRow {
                get {
                    return ((InterfacesRow)(this.GetParentRow(this.Table.ParentRelations["InterfacesSignatures"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["InterfacesSignatures"]);
                }
            }
            
            public bool Isfk_ifaceNull() {
                return this.IsNull(this.tableSignatures.fk_ifaceColumn);
            }
            
            public void Setfk_ifaceNull() {
                this[this.tableSignatures.fk_ifaceColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SignaturesRowChangeEvent : EventArgs {
            
            private SignaturesRow eventRow;
            
            private DataRowAction eventAction;
            
            public SignaturesRowChangeEvent(SignaturesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SignaturesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RolesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnid;
            
            private DataColumn columnfk_comp;
            
            private DataColumn columnfk_iface;
            
            private DataColumn columntype;
            
            internal RolesDataTable() : 
                    base("Roles") {
                this.InitClass();
            }
            
            internal RolesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            internal DataColumn fk_compColumn {
                get {
                    return this.columnfk_comp;
                }
            }
            
            internal DataColumn fk_ifaceColumn {
                get {
                    return this.columnfk_iface;
                }
            }
            
            internal DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            public RolesRow this[int index] {
                get {
                    return ((RolesRow)(this.Rows[index]));
                }
            }
            
            public event RolesRowChangeEventHandler RolesRowChanged;
            
            public event RolesRowChangeEventHandler RolesRowChanging;
            
            public event RolesRowChangeEventHandler RolesRowDeleted;
            
            public event RolesRowChangeEventHandler RolesRowDeleting;
            
            public void AddRolesRow(RolesRow row) {
                this.Rows.Add(row);
            }
            
            public RolesRow AddRolesRow(long id, ComponentsRow parentComponentsRowByComponentsRoles, InterfacesRow parentInterfacesRowByInterfacesRoles, System.SByte type) {
                RolesRow rowRolesRow = ((RolesRow)(this.NewRow()));
                rowRolesRow.ItemArray = new object[] {
                        id,
                        parentComponentsRowByComponentsRoles[0],
                        parentInterfacesRowByInterfacesRoles[0],
                        type};
                this.Rows.Add(rowRolesRow);
                return rowRolesRow;
            }
            
            public RolesRow FindByid(long id) {
                return ((RolesRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                RolesDataTable cln = ((RolesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new RolesDataTable();
            }
            
            internal void InitVars() {
                this.columnid = this.Columns["id"];
                this.columnfk_comp = this.Columns["fk_comp"];
                this.columnfk_iface = this.Columns["fk_iface"];
                this.columntype = this.Columns["type"];
            }
            
            private void InitClass() {
                this.columnid = new DataColumn("id", typeof(long), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnid);
                this.columnfk_comp = new DataColumn("fk_comp", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnfk_comp);
                this.columnfk_iface = new DataColumn("fk_iface", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnfk_iface);
                this.columntype = new DataColumn("type", typeof(System.SByte), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columntype);
                this.Constraints.Add(new UniqueConstraint("ROLES_PK", new DataColumn[] {
                                this.columnid}, true));
                this.Constraints.Add(new UniqueConstraint("FK_IFACE_KEY", new DataColumn[] {
                                this.columnfk_comp,
                                this.columnfk_iface,
                                this.columntype}, false));
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columnid.Namespace = "http://tempuri.org/ModelDataSet.xsd";
                this.columnfk_comp.AllowDBNull = false;
                this.columnfk_comp.Namespace = "http://tempuri.org/ModelDataSet.xsd";
                this.columnfk_iface.AllowDBNull = false;
                this.columnfk_iface.Namespace = "http://tempuri.org/ModelDataSet.xsd";
                this.columntype.AllowDBNull = false;
                this.columntype.Namespace = "http://tempuri.org/ModelDataSet.xsd";
            }
            
            public RolesRow NewRolesRow() {
                return ((RolesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new RolesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(RolesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RolesRowChanged != null)) {
                    this.RolesRowChanged(this, new RolesRowChangeEvent(((RolesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RolesRowChanging != null)) {
                    this.RolesRowChanging(this, new RolesRowChangeEvent(((RolesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RolesRowDeleted != null)) {
                    this.RolesRowDeleted(this, new RolesRowChangeEvent(((RolesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RolesRowDeleting != null)) {
                    this.RolesRowDeleting(this, new RolesRowChangeEvent(((RolesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveRolesRow(RolesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RolesRow : DataRow {
            
            private RolesDataTable tableRoles;
            
            internal RolesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableRoles = ((RolesDataTable)(this.Table));
            }
            
            public long id {
                get {
                    return ((long)(this[this.tableRoles.idColumn]));
                }
                set {
                    this[this.tableRoles.idColumn] = value;
                }
            }
            
            public string fk_comp {
                get {
                    return ((string)(this[this.tableRoles.fk_compColumn]));
                }
                set {
                    this[this.tableRoles.fk_compColumn] = value;
                }
            }
            
            public string fk_iface {
                get {
                    return ((string)(this[this.tableRoles.fk_ifaceColumn]));
                }
                set {
                    this[this.tableRoles.fk_ifaceColumn] = value;
                }
            }
            
            public System.SByte type {
                get {
                    return ((System.SByte)(this[this.tableRoles.typeColumn]));
                }
                set {
                    this[this.tableRoles.typeColumn] = value;
                }
            }
            
            public ComponentsRow ComponentsRow {
                get {
                    return ((ComponentsRow)(this.GetParentRow(this.Table.ParentRelations["ComponentsRoles"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ComponentsRoles"]);
                }
            }
            
            public InterfacesRow InterfacesRow {
                get {
                    return ((InterfacesRow)(this.GetParentRow(this.Table.ParentRelations["InterfacesRoles"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["InterfacesRoles"]);
                }
            }
            
            public DelegationConnectorsRow[] GetDelegationConnectorsRowsByRolesDelegationConnectors() {
                return ((DelegationConnectorsRow[])(this.GetChildRows(this.Table.ChildRelations["RolesDelegationConnectors"])));
            }
            
            public DelegationConnectorsRow[] GetDelegationConnectorsRowsByRolesDelegationConnectors1() {
                return ((DelegationConnectorsRow[])(this.GetChildRows(this.Table.ChildRelations["RolesDelegationConnectors1"])));
            }
            
            public AssemblyConnectorsRow[] GetAssemblyConnectorsRowsByRolesAssemblyConnectors() {
                return ((AssemblyConnectorsRow[])(this.GetChildRows(this.Table.ChildRelations["RolesAssemblyConnectors"])));
            }
            
            public AssemblyConnectorsRow[] GetAssemblyConnectorsRowsByRolesAssemblyConnectors1() {
                return ((AssemblyConnectorsRow[])(this.GetChildRows(this.Table.ChildRelations["RolesAssemblyConnectors1"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RolesRowChangeEvent : EventArgs {
            
            private RolesRow eventRow;
            
            private DataRowAction eventAction;
            
            public RolesRowChangeEvent(RolesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public RolesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProtocolsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnguid;
            
            private DataColumn columnfk_iface;
            
            internal ProtocolsDataTable() : 
                    base("Protocols") {
                this.InitClass();
            }
            
            internal ProtocolsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn guidColumn {
                get {
                    return this.columnguid;
                }
            }
            
            internal DataColumn fk_ifaceColumn {
                get {
                    return this.columnfk_iface;
                }
            }
            
            public ProtocolsRow this[int index] {
                get {
                    return ((ProtocolsRow)(this.Rows[index]));
                }
            }
            
            public event ProtocolsRowChangeEventHandler ProtocolsRowChanged;
            
            public event ProtocolsRowChangeEventHandler ProtocolsRowChanging;
            
            public event ProtocolsRowChangeEventHandler ProtocolsRowDeleted;
            
            public event ProtocolsRowChangeEventHandler ProtocolsRowDeleting;
            
            public void AddProtocolsRow(ProtocolsRow row) {
                this.Rows.Add(row);
            }
            
            public ProtocolsRow AddProtocolsRow(string guid, InterfacesRow parentInterfacesRowByInterfacesProtocols) {
                ProtocolsRow rowProtocolsRow = ((ProtocolsRow)(this.NewRow()));
                rowProtocolsRow.ItemArray = new object[] {
                        guid,
                        parentInterfacesRowByInterfacesProtocols[0]};
                this.Rows.Add(rowProtocolsRow);
                return rowProtocolsRow;
            }
            
            public ProtocolsRow FindByguid(string guid) {
                return ((ProtocolsRow)(this.Rows.Find(new object[] {
                            guid})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ProtocolsDataTable cln = ((ProtocolsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ProtocolsDataTable();
            }
            
            internal void InitVars() {
                this.columnguid = this.Columns["guid"];
                this.columnfk_iface = this.Columns["fk_iface"];
            }
            
            private void InitClass() {
                this.columnguid = new DataColumn("guid", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnguid);
                this.columnfk_iface = new DataColumn("fk_iface", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnfk_iface);
                this.Constraints.Add(new UniqueConstraint("PROT_PK", new DataColumn[] {
                                this.columnguid}, true));
                this.columnguid.AllowDBNull = false;
                this.columnguid.Unique = true;
                this.columnguid.Namespace = "http://tempuri.org/ModelDataSet.xsd";
                this.columnfk_iface.Namespace = "http://tempuri.org/ModelDataSet.xsd";
            }
            
            public ProtocolsRow NewProtocolsRow() {
                return ((ProtocolsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ProtocolsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ProtocolsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProtocolsRowChanged != null)) {
                    this.ProtocolsRowChanged(this, new ProtocolsRowChangeEvent(((ProtocolsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProtocolsRowChanging != null)) {
                    this.ProtocolsRowChanging(this, new ProtocolsRowChangeEvent(((ProtocolsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProtocolsRowDeleted != null)) {
                    this.ProtocolsRowDeleted(this, new ProtocolsRowChangeEvent(((ProtocolsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProtocolsRowDeleting != null)) {
                    this.ProtocolsRowDeleting(this, new ProtocolsRowChangeEvent(((ProtocolsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveProtocolsRow(ProtocolsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProtocolsRow : DataRow {
            
            private ProtocolsDataTable tableProtocols;
            
            internal ProtocolsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableProtocols = ((ProtocolsDataTable)(this.Table));
            }
            
            public string guid {
                get {
                    return ((string)(this[this.tableProtocols.guidColumn]));
                }
                set {
                    this[this.tableProtocols.guidColumn] = value;
                }
            }
            
            public string fk_iface {
                get {
                    if (this.Isfk_ifaceNull()) {
                        return "-1";
                    }
                    else {
                        return ((string)(this[this.tableProtocols.fk_ifaceColumn]));
                    }
                }
                set {
                    this[this.tableProtocols.fk_ifaceColumn] = value;
                }
            }
            
            public InterfacesRow InterfacesRow {
                get {
                    return ((InterfacesRow)(this.GetParentRow(this.Table.ParentRelations["InterfacesProtocols"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["InterfacesProtocols"]);
                }
            }
            
            public bool Isfk_ifaceNull() {
                return this.IsNull(this.tableProtocols.fk_ifaceColumn);
            }
            
            public void Setfk_ifaceNull() {
                this[this.tableProtocols.fk_ifaceColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProtocolsRowChangeEvent : EventArgs {
            
            private ProtocolsRow eventRow;
            
            private DataRowAction eventAction;
            
            public ProtocolsRowChangeEvent(ProtocolsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ProtocolsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CompRelationsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnfk_child;
            
            private DataColumn columnfk_parent;
            
            private DataColumn columnid;
            
            internal CompRelationsDataTable() : 
                    base("CompRelations") {
                this.InitClass();
            }
            
            internal CompRelationsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn fk_childColumn {
                get {
                    return this.columnfk_child;
                }
            }
            
            internal DataColumn fk_parentColumn {
                get {
                    return this.columnfk_parent;
                }
            }
            
            internal DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            public CompRelationsRow this[int index] {
                get {
                    return ((CompRelationsRow)(this.Rows[index]));
                }
            }
            
            public event CompRelationsRowChangeEventHandler CompRelationsRowChanged;
            
            public event CompRelationsRowChangeEventHandler CompRelationsRowChanging;
            
            public event CompRelationsRowChangeEventHandler CompRelationsRowDeleted;
            
            public event CompRelationsRowChangeEventHandler CompRelationsRowDeleting;
            
            public void AddCompRelationsRow(CompRelationsRow row) {
                this.Rows.Add(row);
            }
            
            public CompRelationsRow AddCompRelationsRow(ComponentsRow parentComponentsRowByComponentsCompRelations, ComponentsRow parentComponentsRowByComponentsCompRelations1, long id) {
                CompRelationsRow rowCompRelationsRow = ((CompRelationsRow)(this.NewRow()));
                rowCompRelationsRow.ItemArray = new object[] {
                        parentComponentsRowByComponentsCompRelations[0],
                        parentComponentsRowByComponentsCompRelations1[0],
                        id};
                this.Rows.Add(rowCompRelationsRow);
                return rowCompRelationsRow;
            }
            
            public CompRelationsRow FindByid(long id) {
                return ((CompRelationsRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CompRelationsDataTable cln = ((CompRelationsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CompRelationsDataTable();
            }
            
            internal void InitVars() {
                this.columnfk_child = this.Columns["fk_child"];
                this.columnfk_parent = this.Columns["fk_parent"];
                this.columnid = this.Columns["id"];
            }
            
            private void InitClass() {
                this.columnfk_child = new DataColumn("fk_child", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnfk_child);
                this.columnfk_parent = new DataColumn("fk_parent", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnfk_parent);
                this.columnid = new DataColumn("id", typeof(long), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnid);
                this.Constraints.Add(new UniqueConstraint("SK_COMPREL", new DataColumn[] {
                                this.columnfk_child,
                                this.columnfk_parent}, false));
                this.Constraints.Add(new UniqueConstraint("PK_COMPREL", new DataColumn[] {
                                this.columnid}, true));
                this.columnfk_child.Namespace = "http://tempuri.org/ModelDataSet.xsd";
                this.columnfk_parent.Namespace = "http://tempuri.org/ModelDataSet.xsd";
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columnid.Namespace = "http://tempuri.org/ModelDataSet.xsd";
            }
            
            public CompRelationsRow NewCompRelationsRow() {
                return ((CompRelationsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CompRelationsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CompRelationsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CompRelationsRowChanged != null)) {
                    this.CompRelationsRowChanged(this, new CompRelationsRowChangeEvent(((CompRelationsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CompRelationsRowChanging != null)) {
                    this.CompRelationsRowChanging(this, new CompRelationsRowChangeEvent(((CompRelationsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CompRelationsRowDeleted != null)) {
                    this.CompRelationsRowDeleted(this, new CompRelationsRowChangeEvent(((CompRelationsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CompRelationsRowDeleting != null)) {
                    this.CompRelationsRowDeleting(this, new CompRelationsRowChangeEvent(((CompRelationsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCompRelationsRow(CompRelationsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CompRelationsRow : DataRow {
            
            private CompRelationsDataTable tableCompRelations;
            
            internal CompRelationsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCompRelations = ((CompRelationsDataTable)(this.Table));
            }
            
            public string fk_child {
                get {
                    try {
                        return ((string)(this[this.tableCompRelations.fk_childColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e);
                    }
                }
                set {
                    this[this.tableCompRelations.fk_childColumn] = value;
                }
            }
            
            public string fk_parent {
                get {
                    if (this.Isfk_parentNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableCompRelations.fk_parentColumn]));
                    }
                }
                set {
                    this[this.tableCompRelations.fk_parentColumn] = value;
                }
            }
            
            public long id {
                get {
                    return ((long)(this[this.tableCompRelations.idColumn]));
                }
                set {
                    this[this.tableCompRelations.idColumn] = value;
                }
            }
            
            public ComponentsRow ComponentsRowByComponentsCompRelations {
                get {
                    return ((ComponentsRow)(this.GetParentRow(this.Table.ParentRelations["ComponentsCompRelations"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ComponentsCompRelations"]);
                }
            }
            
            public ComponentsRow ComponentsRowByComponentsCompRelations1 {
                get {
                    return ((ComponentsRow)(this.GetParentRow(this.Table.ParentRelations["ComponentsCompRelations1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ComponentsCompRelations1"]);
                }
            }
            
            public bool Isfk_childNull() {
                return this.IsNull(this.tableCompRelations.fk_childColumn);
            }
            
            public void Setfk_childNull() {
                this[this.tableCompRelations.fk_childColumn] = System.Convert.DBNull;
            }
            
            public bool Isfk_parentNull() {
                return this.IsNull(this.tableCompRelations.fk_parentColumn);
            }
            
            public void Setfk_parentNull() {
                this[this.tableCompRelations.fk_parentColumn] = System.Convert.DBNull;
            }
            
            public DelegationConnectorsRow[] GetDelegationConnectorsRows() {
                return ((DelegationConnectorsRow[])(this.GetChildRows(this.Table.ChildRelations["CompRelDelCon"])));
            }
            
            public AssemblyConnectorsRow[] GetAssemblyConnectorsRowsByCompRelAsmConProv() {
                return ((AssemblyConnectorsRow[])(this.GetChildRows(this.Table.ChildRelations["CompRelAsmConProv"])));
            }
            
            public AssemblyConnectorsRow[] GetAssemblyConnectorsRowsByCompRelAsmConReq() {
                return ((AssemblyConnectorsRow[])(this.GetChildRows(this.Table.ChildRelations["CompRelAsmConReq"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CompRelationsRowChangeEvent : EventArgs {
            
            private CompRelationsRow eventRow;
            
            private DataRowAction eventAction;
            
            public CompRelationsRowChangeEvent(CompRelationsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CompRelationsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DelegationConnectorsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnfk_outer_role;
            
            private DataColumn columnfk_inner_comp_rel;
            
            private DataColumn columnfk_inner_role;
            
            private DataColumn columnguid;
            
            internal DelegationConnectorsDataTable() : 
                    base("DelegationConnectors") {
                this.InitClass();
            }
            
            internal DelegationConnectorsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn fk_outer_roleColumn {
                get {
                    return this.columnfk_outer_role;
                }
            }
            
            internal DataColumn fk_inner_comp_relColumn {
                get {
                    return this.columnfk_inner_comp_rel;
                }
            }
            
            internal DataColumn fk_inner_roleColumn {
                get {
                    return this.columnfk_inner_role;
                }
            }
            
            internal DataColumn guidColumn {
                get {
                    return this.columnguid;
                }
            }
            
            public DelegationConnectorsRow this[int index] {
                get {
                    return ((DelegationConnectorsRow)(this.Rows[index]));
                }
            }
            
            public event DelegationConnectorsRowChangeEventHandler DelegationConnectorsRowChanged;
            
            public event DelegationConnectorsRowChangeEventHandler DelegationConnectorsRowChanging;
            
            public event DelegationConnectorsRowChangeEventHandler DelegationConnectorsRowDeleted;
            
            public event DelegationConnectorsRowChangeEventHandler DelegationConnectorsRowDeleting;
            
            public void AddDelegationConnectorsRow(DelegationConnectorsRow row) {
                this.Rows.Add(row);
            }
            
            public DelegationConnectorsRow AddDelegationConnectorsRow(RolesRow parentRolesRowByRolesDelegationConnectors, CompRelationsRow parentCompRelationsRowByCompRelDelCon, RolesRow parentRolesRowByRolesDelegationConnectors1, string guid) {
                DelegationConnectorsRow rowDelegationConnectorsRow = ((DelegationConnectorsRow)(this.NewRow()));
                rowDelegationConnectorsRow.ItemArray = new object[] {
                        parentRolesRowByRolesDelegationConnectors[0],
                        parentCompRelationsRowByCompRelDelCon[2],
                        parentRolesRowByRolesDelegationConnectors1[0],
                        guid};
                this.Rows.Add(rowDelegationConnectorsRow);
                return rowDelegationConnectorsRow;
            }
            
            public DelegationConnectorsRow FindByguid(string guid) {
                return ((DelegationConnectorsRow)(this.Rows.Find(new object[] {
                            guid})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DelegationConnectorsDataTable cln = ((DelegationConnectorsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DelegationConnectorsDataTable();
            }
            
            internal void InitVars() {
                this.columnfk_outer_role = this.Columns["fk_outer_role"];
                this.columnfk_inner_comp_rel = this.Columns["fk_inner_comp_rel"];
                this.columnfk_inner_role = this.Columns["fk_inner_role"];
                this.columnguid = this.Columns["guid"];
            }
            
            private void InitClass() {
                this.columnfk_outer_role = new DataColumn("fk_outer_role", typeof(long), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnfk_outer_role);
                this.columnfk_inner_comp_rel = new DataColumn("fk_inner_comp_rel", typeof(long), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnfk_inner_comp_rel);
                this.columnfk_inner_role = new DataColumn("fk_inner_role", typeof(long), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnfk_inner_role);
                this.columnguid = new DataColumn("guid", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnguid);
                this.Constraints.Add(new UniqueConstraint("PK_DEL", new DataColumn[] {
                                this.columnguid}, true));
                this.Constraints.Add(new UniqueConstraint("SK_DEL", new DataColumn[] {
                                this.columnfk_outer_role,
                                this.columnfk_inner_comp_rel,
                                this.columnfk_inner_role}, false));
                this.columnfk_outer_role.AllowDBNull = false;
                this.columnfk_outer_role.Namespace = "http://tempuri.org/ModelDataSet.xsd";
                this.columnfk_inner_comp_rel.AllowDBNull = false;
                this.columnfk_inner_comp_rel.Namespace = "http://tempuri.org/ModelDataSet.xsd";
                this.columnfk_inner_role.AllowDBNull = false;
                this.columnfk_inner_role.Namespace = "http://tempuri.org/ModelDataSet.xsd";
                this.columnguid.AllowDBNull = false;
                this.columnguid.Unique = true;
                this.columnguid.Namespace = "http://tempuri.org/ModelDataSet.xsd";
            }
            
            public DelegationConnectorsRow NewDelegationConnectorsRow() {
                return ((DelegationConnectorsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DelegationConnectorsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DelegationConnectorsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DelegationConnectorsRowChanged != null)) {
                    this.DelegationConnectorsRowChanged(this, new DelegationConnectorsRowChangeEvent(((DelegationConnectorsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DelegationConnectorsRowChanging != null)) {
                    this.DelegationConnectorsRowChanging(this, new DelegationConnectorsRowChangeEvent(((DelegationConnectorsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DelegationConnectorsRowDeleted != null)) {
                    this.DelegationConnectorsRowDeleted(this, new DelegationConnectorsRowChangeEvent(((DelegationConnectorsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DelegationConnectorsRowDeleting != null)) {
                    this.DelegationConnectorsRowDeleting(this, new DelegationConnectorsRowChangeEvent(((DelegationConnectorsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDelegationConnectorsRow(DelegationConnectorsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DelegationConnectorsRow : DataRow {
            
            private DelegationConnectorsDataTable tableDelegationConnectors;
            
            internal DelegationConnectorsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDelegationConnectors = ((DelegationConnectorsDataTable)(this.Table));
            }
            
            public long fk_outer_role {
                get {
                    return ((long)(this[this.tableDelegationConnectors.fk_outer_roleColumn]));
                }
                set {
                    this[this.tableDelegationConnectors.fk_outer_roleColumn] = value;
                }
            }
            
            public long fk_inner_comp_rel {
                get {
                    return ((long)(this[this.tableDelegationConnectors.fk_inner_comp_relColumn]));
                }
                set {
                    this[this.tableDelegationConnectors.fk_inner_comp_relColumn] = value;
                }
            }
            
            public long fk_inner_role {
                get {
                    return ((long)(this[this.tableDelegationConnectors.fk_inner_roleColumn]));
                }
                set {
                    this[this.tableDelegationConnectors.fk_inner_roleColumn] = value;
                }
            }
            
            public string guid {
                get {
                    return ((string)(this[this.tableDelegationConnectors.guidColumn]));
                }
                set {
                    this[this.tableDelegationConnectors.guidColumn] = value;
                }
            }
            
            public RolesRow RolesRowByRolesDelegationConnectors {
                get {
                    return ((RolesRow)(this.GetParentRow(this.Table.ParentRelations["RolesDelegationConnectors"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["RolesDelegationConnectors"]);
                }
            }
            
            public RolesRow RolesRowByRolesDelegationConnectors1 {
                get {
                    return ((RolesRow)(this.GetParentRow(this.Table.ParentRelations["RolesDelegationConnectors1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["RolesDelegationConnectors1"]);
                }
            }
            
            public CompRelationsRow CompRelationsRow {
                get {
                    return ((CompRelationsRow)(this.GetParentRow(this.Table.ParentRelations["CompRelDelCon"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CompRelDelCon"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DelegationConnectorsRowChangeEvent : EventArgs {
            
            private DelegationConnectorsRow eventRow;
            
            private DataRowAction eventAction;
            
            public DelegationConnectorsRowChangeEvent(DelegationConnectorsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DelegationConnectorsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AssemblyConnectorsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnfk_prov_role;
            
            private DataColumn columnfk_prov_comp_rel;
            
            private DataColumn columnfk_req_role;
            
            private DataColumn columnfk_req_comp_rel;
            
            private DataColumn columnguid;
            
            internal AssemblyConnectorsDataTable() : 
                    base("AssemblyConnectors") {
                this.InitClass();
            }
            
            internal AssemblyConnectorsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn fk_prov_roleColumn {
                get {
                    return this.columnfk_prov_role;
                }
            }
            
            internal DataColumn fk_prov_comp_relColumn {
                get {
                    return this.columnfk_prov_comp_rel;
                }
            }
            
            internal DataColumn fk_req_roleColumn {
                get {
                    return this.columnfk_req_role;
                }
            }
            
            internal DataColumn fk_req_comp_relColumn {
                get {
                    return this.columnfk_req_comp_rel;
                }
            }
            
            internal DataColumn guidColumn {
                get {
                    return this.columnguid;
                }
            }
            
            public AssemblyConnectorsRow this[int index] {
                get {
                    return ((AssemblyConnectorsRow)(this.Rows[index]));
                }
            }
            
            public event AssemblyConnectorsRowChangeEventHandler AssemblyConnectorsRowChanged;
            
            public event AssemblyConnectorsRowChangeEventHandler AssemblyConnectorsRowChanging;
            
            public event AssemblyConnectorsRowChangeEventHandler AssemblyConnectorsRowDeleted;
            
            public event AssemblyConnectorsRowChangeEventHandler AssemblyConnectorsRowDeleting;
            
            public void AddAssemblyConnectorsRow(AssemblyConnectorsRow row) {
                this.Rows.Add(row);
            }
            
            public AssemblyConnectorsRow AddAssemblyConnectorsRow(RolesRow parentRolesRowByRolesAssemblyConnectors, CompRelationsRow parentCompRelationsRowByCompRelAsmConProv, RolesRow parentRolesRowByRolesAssemblyConnectors1, CompRelationsRow parentCompRelationsRowByCompRelAsmConReq, string guid) {
                AssemblyConnectorsRow rowAssemblyConnectorsRow = ((AssemblyConnectorsRow)(this.NewRow()));
                rowAssemblyConnectorsRow.ItemArray = new object[] {
                        parentRolesRowByRolesAssemblyConnectors[0],
                        parentCompRelationsRowByCompRelAsmConProv[2],
                        parentRolesRowByRolesAssemblyConnectors1[0],
                        parentCompRelationsRowByCompRelAsmConReq[2],
                        guid};
                this.Rows.Add(rowAssemblyConnectorsRow);
                return rowAssemblyConnectorsRow;
            }
            
            public AssemblyConnectorsRow FindByguid(string guid) {
                return ((AssemblyConnectorsRow)(this.Rows.Find(new object[] {
                            guid})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AssemblyConnectorsDataTable cln = ((AssemblyConnectorsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AssemblyConnectorsDataTable();
            }
            
            internal void InitVars() {
                this.columnfk_prov_role = this.Columns["fk_prov_role"];
                this.columnfk_prov_comp_rel = this.Columns["fk_prov_comp_rel"];
                this.columnfk_req_role = this.Columns["fk_req_role"];
                this.columnfk_req_comp_rel = this.Columns["fk_req_comp_rel"];
                this.columnguid = this.Columns["guid"];
            }
            
            private void InitClass() {
                this.columnfk_prov_role = new DataColumn("fk_prov_role", typeof(long), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnfk_prov_role);
                this.columnfk_prov_comp_rel = new DataColumn("fk_prov_comp_rel", typeof(long), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnfk_prov_comp_rel);
                this.columnfk_req_role = new DataColumn("fk_req_role", typeof(long), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnfk_req_role);
                this.columnfk_req_comp_rel = new DataColumn("fk_req_comp_rel", typeof(long), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnfk_req_comp_rel);
                this.columnguid = new DataColumn("guid", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnguid);
                this.Constraints.Add(new UniqueConstraint("PK_ASS", new DataColumn[] {
                                this.columnguid}, true));
                this.Constraints.Add(new UniqueConstraint("SK_ASS", new DataColumn[] {
                                this.columnfk_prov_role,
                                this.columnfk_prov_comp_rel,
                                this.columnfk_req_role,
                                this.columnfk_req_comp_rel}, false));
                this.columnfk_prov_role.AllowDBNull = false;
                this.columnfk_prov_role.Namespace = "http://tempuri.org/ModelDataSet.xsd";
                this.columnfk_prov_comp_rel.AllowDBNull = false;
                this.columnfk_prov_comp_rel.Namespace = "http://tempuri.org/ModelDataSet.xsd";
                this.columnfk_req_role.AllowDBNull = false;
                this.columnfk_req_role.Namespace = "http://tempuri.org/ModelDataSet.xsd";
                this.columnfk_req_comp_rel.AllowDBNull = false;
                this.columnfk_req_comp_rel.Namespace = "http://tempuri.org/ModelDataSet.xsd";
                this.columnguid.AllowDBNull = false;
                this.columnguid.Unique = true;
                this.columnguid.Namespace = "http://tempuri.org/ModelDataSet.xsd";
            }
            
            public AssemblyConnectorsRow NewAssemblyConnectorsRow() {
                return ((AssemblyConnectorsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AssemblyConnectorsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AssemblyConnectorsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AssemblyConnectorsRowChanged != null)) {
                    this.AssemblyConnectorsRowChanged(this, new AssemblyConnectorsRowChangeEvent(((AssemblyConnectorsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AssemblyConnectorsRowChanging != null)) {
                    this.AssemblyConnectorsRowChanging(this, new AssemblyConnectorsRowChangeEvent(((AssemblyConnectorsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AssemblyConnectorsRowDeleted != null)) {
                    this.AssemblyConnectorsRowDeleted(this, new AssemblyConnectorsRowChangeEvent(((AssemblyConnectorsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AssemblyConnectorsRowDeleting != null)) {
                    this.AssemblyConnectorsRowDeleting(this, new AssemblyConnectorsRowChangeEvent(((AssemblyConnectorsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAssemblyConnectorsRow(AssemblyConnectorsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AssemblyConnectorsRow : DataRow {
            
            private AssemblyConnectorsDataTable tableAssemblyConnectors;
            
            internal AssemblyConnectorsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAssemblyConnectors = ((AssemblyConnectorsDataTable)(this.Table));
            }
            
            public long fk_prov_role {
                get {
                    return ((long)(this[this.tableAssemblyConnectors.fk_prov_roleColumn]));
                }
                set {
                    this[this.tableAssemblyConnectors.fk_prov_roleColumn] = value;
                }
            }
            
            public long fk_prov_comp_rel {
                get {
                    return ((long)(this[this.tableAssemblyConnectors.fk_prov_comp_relColumn]));
                }
                set {
                    this[this.tableAssemblyConnectors.fk_prov_comp_relColumn] = value;
                }
            }
            
            public long fk_req_role {
                get {
                    return ((long)(this[this.tableAssemblyConnectors.fk_req_roleColumn]));
                }
                set {
                    this[this.tableAssemblyConnectors.fk_req_roleColumn] = value;
                }
            }
            
            public long fk_req_comp_rel {
                get {
                    return ((long)(this[this.tableAssemblyConnectors.fk_req_comp_relColumn]));
                }
                set {
                    this[this.tableAssemblyConnectors.fk_req_comp_relColumn] = value;
                }
            }
            
            public string guid {
                get {
                    return ((string)(this[this.tableAssemblyConnectors.guidColumn]));
                }
                set {
                    this[this.tableAssemblyConnectors.guidColumn] = value;
                }
            }
            
            public RolesRow RolesRowByRolesAssemblyConnectors {
                get {
                    return ((RolesRow)(this.GetParentRow(this.Table.ParentRelations["RolesAssemblyConnectors"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["RolesAssemblyConnectors"]);
                }
            }
            
            public RolesRow RolesRowByRolesAssemblyConnectors1 {
                get {
                    return ((RolesRow)(this.GetParentRow(this.Table.ParentRelations["RolesAssemblyConnectors1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["RolesAssemblyConnectors1"]);
                }
            }
            
            public CompRelationsRow CompRelationsRowByCompRelAsmConProv {
                get {
                    return ((CompRelationsRow)(this.GetParentRow(this.Table.ParentRelations["CompRelAsmConProv"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CompRelAsmConProv"]);
                }
            }
            
            public CompRelationsRow CompRelationsRowByCompRelAsmConReq {
                get {
                    return ((CompRelationsRow)(this.GetParentRow(this.Table.ParentRelations["CompRelAsmConReq"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CompRelAsmConReq"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AssemblyConnectorsRowChangeEvent : EventArgs {
            
            private AssemblyConnectorsRow eventRow;
            
            private DataRowAction eventAction;
            
            public AssemblyConnectorsRowChangeEvent(AssemblyConnectorsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AssemblyConnectorsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
