//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Palladio.ComponentModel.ModelDataManagement {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    internal class ModelDataSet : DataSet {
        
        private ComponentsDataTable tableComponents;
        
        private InterfacesDataTable tableInterfaces;
        
        private ConnectionsDataTable tableConnections;
        
        private SignaturesDataTable tableSignatures;
        
        private RolesDataTable tableRoles;
        
        private ProtocolsDataTable tableProtocols;
        
        private DataRelation relationComponentsComponents;
        
        private DataRelation relationRolesConnections;
        
        private DataRelation relationRolesConnections1;
        
        private DataRelation relationComponentsRoles;
        
        private DataRelation relationInterfacesRoles;
        
        private DataRelation relationInterfacesSignatures;
        
        private DataRelation relationInterfacesProtocols;
        
        public ModelDataSet() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ModelDataSet(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Components"] != null)) {
                    this.Tables.Add(new ComponentsDataTable(ds.Tables["Components"]));
                }
                if ((ds.Tables["Interfaces"] != null)) {
                    this.Tables.Add(new InterfacesDataTable(ds.Tables["Interfaces"]));
                }
                if ((ds.Tables["Connections"] != null)) {
                    this.Tables.Add(new ConnectionsDataTable(ds.Tables["Connections"]));
                }
                if ((ds.Tables["Signatures"] != null)) {
                    this.Tables.Add(new SignaturesDataTable(ds.Tables["Signatures"]));
                }
                if ((ds.Tables["Roles"] != null)) {
                    this.Tables.Add(new RolesDataTable(ds.Tables["Roles"]));
                }
                if ((ds.Tables["Protocols"] != null)) {
                    this.Tables.Add(new ProtocolsDataTable(ds.Tables["Protocols"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ComponentsDataTable Components {
            get {
                return this.tableComponents;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InterfacesDataTable Interfaces {
            get {
                return this.tableInterfaces;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ConnectionsDataTable Connections {
            get {
                return this.tableConnections;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SignaturesDataTable Signatures {
            get {
                return this.tableSignatures;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RolesDataTable Roles {
            get {
                return this.tableRoles;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProtocolsDataTable Protocols {
            get {
                return this.tableProtocols;
            }
        }
        
        public override DataSet Clone() {
            ModelDataSet cln = ((ModelDataSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Components"] != null)) {
                this.Tables.Add(new ComponentsDataTable(ds.Tables["Components"]));
            }
            if ((ds.Tables["Interfaces"] != null)) {
                this.Tables.Add(new InterfacesDataTable(ds.Tables["Interfaces"]));
            }
            if ((ds.Tables["Connections"] != null)) {
                this.Tables.Add(new ConnectionsDataTable(ds.Tables["Connections"]));
            }
            if ((ds.Tables["Signatures"] != null)) {
                this.Tables.Add(new SignaturesDataTable(ds.Tables["Signatures"]));
            }
            if ((ds.Tables["Roles"] != null)) {
                this.Tables.Add(new RolesDataTable(ds.Tables["Roles"]));
            }
            if ((ds.Tables["Protocols"] != null)) {
                this.Tables.Add(new ProtocolsDataTable(ds.Tables["Protocols"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableComponents = ((ComponentsDataTable)(this.Tables["Components"]));
            if ((this.tableComponents != null)) {
                this.tableComponents.InitVars();
            }
            this.tableInterfaces = ((InterfacesDataTable)(this.Tables["Interfaces"]));
            if ((this.tableInterfaces != null)) {
                this.tableInterfaces.InitVars();
            }
            this.tableConnections = ((ConnectionsDataTable)(this.Tables["Connections"]));
            if ((this.tableConnections != null)) {
                this.tableConnections.InitVars();
            }
            this.tableSignatures = ((SignaturesDataTable)(this.Tables["Signatures"]));
            if ((this.tableSignatures != null)) {
                this.tableSignatures.InitVars();
            }
            this.tableRoles = ((RolesDataTable)(this.Tables["Roles"]));
            if ((this.tableRoles != null)) {
                this.tableRoles.InitVars();
            }
            this.tableProtocols = ((ProtocolsDataTable)(this.Tables["Protocols"]));
            if ((this.tableProtocols != null)) {
                this.tableProtocols.InitVars();
            }
            this.relationComponentsComponents = this.Relations["ComponentsComponents"];
            this.relationRolesConnections = this.Relations["RolesConnections"];
            this.relationRolesConnections1 = this.Relations["RolesConnections1"];
            this.relationComponentsRoles = this.Relations["ComponentsRoles"];
            this.relationInterfacesRoles = this.Relations["InterfacesRoles"];
            this.relationInterfacesSignatures = this.Relations["InterfacesSignatures"];
            this.relationInterfacesProtocols = this.Relations["InterfacesProtocols"];
        }
        
        private void InitClass() {
            this.DataSetName = "ModelDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ModelDataSet.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableComponents = new ComponentsDataTable();
            this.Tables.Add(this.tableComponents);
            this.tableInterfaces = new InterfacesDataTable();
            this.Tables.Add(this.tableInterfaces);
            this.tableConnections = new ConnectionsDataTable();
            this.Tables.Add(this.tableConnections);
            this.tableSignatures = new SignaturesDataTable();
            this.Tables.Add(this.tableSignatures);
            this.tableRoles = new RolesDataTable();
            this.Tables.Add(this.tableRoles);
            this.tableProtocols = new ProtocolsDataTable();
            this.Tables.Add(this.tableProtocols);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("ComponentsComponents", new DataColumn[] {
                        this.tableComponents.guidColumn}, new DataColumn[] {
                        this.tableComponents.parentComponentColumn});
            this.tableComponents.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("RolesConnections", new DataColumn[] {
                        this.tableRoles.idColumn}, new DataColumn[] {
                        this.tableConnections.incomingColumn});
            this.tableConnections.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("RolesConnections1", new DataColumn[] {
                        this.tableRoles.idColumn}, new DataColumn[] {
                        this.tableConnections.outgoingColumn});
            this.tableConnections.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("InterfacesSignatures", new DataColumn[] {
                        this.tableInterfaces.guidColumn}, new DataColumn[] {
                        this.tableSignatures.fk_ifaceColumn});
            this.tableSignatures.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ComponentsRoles", new DataColumn[] {
                        this.tableComponents.guidColumn}, new DataColumn[] {
                        this.tableRoles.fk_compColumn});
            this.tableRoles.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("InterfacesRoles", new DataColumn[] {
                        this.tableInterfaces.guidColumn}, new DataColumn[] {
                        this.tableRoles.fk_ifaceColumn});
            this.tableRoles.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("InterfacesProtocols", new DataColumn[] {
                        this.tableInterfaces.guidColumn}, new DataColumn[] {
                        this.tableProtocols.fk_ifaceColumn});
            this.tableProtocols.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationComponentsComponents = new DataRelation("ComponentsComponents", new DataColumn[] {
                        this.tableComponents.guidColumn}, new DataColumn[] {
                        this.tableComponents.parentComponentColumn}, false);
            this.Relations.Add(this.relationComponentsComponents);
            this.relationRolesConnections = new DataRelation("RolesConnections", new DataColumn[] {
                        this.tableRoles.idColumn}, new DataColumn[] {
                        this.tableConnections.incomingColumn}, false);
            this.Relations.Add(this.relationRolesConnections);
            this.relationRolesConnections1 = new DataRelation("RolesConnections1", new DataColumn[] {
                        this.tableRoles.idColumn}, new DataColumn[] {
                        this.tableConnections.outgoingColumn}, false);
            this.Relations.Add(this.relationRolesConnections1);
            this.relationComponentsRoles = new DataRelation("ComponentsRoles", new DataColumn[] {
                        this.tableComponents.guidColumn}, new DataColumn[] {
                        this.tableRoles.fk_compColumn}, false);
            this.Relations.Add(this.relationComponentsRoles);
            this.relationInterfacesRoles = new DataRelation("InterfacesRoles", new DataColumn[] {
                        this.tableInterfaces.guidColumn}, new DataColumn[] {
                        this.tableRoles.fk_ifaceColumn}, false);
            this.Relations.Add(this.relationInterfacesRoles);
            this.relationInterfacesSignatures = new DataRelation("InterfacesSignatures", new DataColumn[] {
                        this.tableInterfaces.guidColumn}, new DataColumn[] {
                        this.tableSignatures.fk_ifaceColumn}, false);
            this.Relations.Add(this.relationInterfacesSignatures);
            this.relationInterfacesProtocols = new DataRelation("InterfacesProtocols", new DataColumn[] {
                        this.tableInterfaces.guidColumn}, new DataColumn[] {
                        this.tableProtocols.fk_ifaceColumn}, false);
            this.Relations.Add(this.relationInterfacesProtocols);
        }
        
        private bool ShouldSerializeComponents() {
            return false;
        }
        
        private bool ShouldSerializeInterfaces() {
            return false;
        }
        
        private bool ShouldSerializeConnections() {
            return false;
        }
        
        private bool ShouldSerializeSignatures() {
            return false;
        }
        
        private bool ShouldSerializeRoles() {
            return false;
        }
        
        private bool ShouldSerializeProtocols() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ComponentsRowChangeEventHandler(object sender, ComponentsRowChangeEvent e);
        
        public delegate void InterfacesRowChangeEventHandler(object sender, InterfacesRowChangeEvent e);
        
        public delegate void ConnectionsRowChangeEventHandler(object sender, ConnectionsRowChangeEvent e);
        
        public delegate void SignaturesRowChangeEventHandler(object sender, SignaturesRowChangeEvent e);
        
        public delegate void RolesRowChangeEventHandler(object sender, RolesRowChangeEvent e);
        
        public delegate void ProtocolsRowChangeEventHandler(object sender, ProtocolsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ComponentsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnguid;
            
            private DataColumn columntype;
            
            private DataColumn columnparentComponent;
            
            internal ComponentsDataTable() : 
                    base("Components") {
                this.InitClass();
            }
            
            internal ComponentsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn guidColumn {
                get {
                    return this.columnguid;
                }
            }
            
            internal DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            internal DataColumn parentComponentColumn {
                get {
                    return this.columnparentComponent;
                }
            }
            
            public ComponentsRow this[int index] {
                get {
                    return ((ComponentsRow)(this.Rows[index]));
                }
            }
            
            public event ComponentsRowChangeEventHandler ComponentsRowChanged;
            
            public event ComponentsRowChangeEventHandler ComponentsRowChanging;
            
            public event ComponentsRowChangeEventHandler ComponentsRowDeleted;
            
            public event ComponentsRowChangeEventHandler ComponentsRowDeleting;
            
            public void AddComponentsRow(ComponentsRow row) {
                this.Rows.Add(row);
            }
            
            public ComponentsRow AddComponentsRow(string guid, System.SByte type, ComponentsRow parentComponentsRowByComponentsComponents) {
                ComponentsRow rowComponentsRow = ((ComponentsRow)(this.NewRow()));
                rowComponentsRow.ItemArray = new object[] {
                        guid,
                        type,
                        parentComponentsRowByComponentsComponents[0]};
                this.Rows.Add(rowComponentsRow);
                return rowComponentsRow;
            }
            
            public ComponentsRow FindByguid(string guid) {
                return ((ComponentsRow)(this.Rows.Find(new object[] {
                            guid})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ComponentsDataTable cln = ((ComponentsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ComponentsDataTable();
            }
            
            internal void InitVars() {
                this.columnguid = this.Columns["guid"];
                this.columntype = this.Columns["type"];
                this.columnparentComponent = this.Columns["parentComponent"];
            }
            
            private void InitClass() {
                this.columnguid = new DataColumn("guid", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnguid);
                this.columntype = new DataColumn("type", typeof(System.SByte), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columntype);
                this.columnparentComponent = new DataColumn("parentComponent", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnparentComponent);
                this.Constraints.Add(new UniqueConstraint("PK_COMP", new DataColumn[] {
                                this.columnguid}, true));
                this.columnguid.AllowDBNull = false;
                this.columnguid.Unique = true;
                this.columnguid.Namespace = "http://tempuri.org/ModelDataSet.xsd";
                this.columntype.Namespace = "http://tempuri.org/ModelDataSet.xsd";
                this.columnparentComponent.Namespace = "http://tempuri.org/ModelDataSet.xsd";
            }
            
            public ComponentsRow NewComponentsRow() {
                return ((ComponentsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ComponentsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ComponentsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ComponentsRowChanged != null)) {
                    this.ComponentsRowChanged(this, new ComponentsRowChangeEvent(((ComponentsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ComponentsRowChanging != null)) {
                    this.ComponentsRowChanging(this, new ComponentsRowChangeEvent(((ComponentsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ComponentsRowDeleted != null)) {
                    this.ComponentsRowDeleted(this, new ComponentsRowChangeEvent(((ComponentsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ComponentsRowDeleting != null)) {
                    this.ComponentsRowDeleting(this, new ComponentsRowChangeEvent(((ComponentsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveComponentsRow(ComponentsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ComponentsRow : DataRow {
            
            private ComponentsDataTable tableComponents;
            
            internal ComponentsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableComponents = ((ComponentsDataTable)(this.Table));
            }
            
            public string guid {
                get {
                    return ((string)(this[this.tableComponents.guidColumn]));
                }
                set {
                    this[this.tableComponents.guidColumn] = value;
                }
            }
            
            public System.SByte type {
                get {
                    try {
                        return ((System.SByte)(this[this.tableComponents.typeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e);
                    }
                }
                set {
                    this[this.tableComponents.typeColumn] = value;
                }
            }
            
            public string parentComponent {
                get {
                    if (this.IsparentComponentNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableComponents.parentComponentColumn]));
                    }
                }
                set {
                    this[this.tableComponents.parentComponentColumn] = value;
                }
            }
            
            public ComponentsRow ComponentsRowParent {
                get {
                    return ((ComponentsRow)(this.GetParentRow(this.Table.ParentRelations["ComponentsComponents"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ComponentsComponents"]);
                }
            }
            
            public bool IstypeNull() {
                return this.IsNull(this.tableComponents.typeColumn);
            }
            
            public void SettypeNull() {
                this[this.tableComponents.typeColumn] = System.Convert.DBNull;
            }
            
            public bool IsparentComponentNull() {
                return this.IsNull(this.tableComponents.parentComponentColumn);
            }
            
            public void SetparentComponentNull() {
                this[this.tableComponents.parentComponentColumn] = System.Convert.DBNull;
            }
            
            public ComponentsRow[] GetComponentsRows() {
                return ((ComponentsRow[])(this.GetChildRows(this.Table.ChildRelations["ComponentsComponents"])));
            }
            
            public RolesRow[] GetRolesRows() {
                return ((RolesRow[])(this.GetChildRows(this.Table.ChildRelations["ComponentsRoles"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ComponentsRowChangeEvent : EventArgs {
            
            private ComponentsRow eventRow;
            
            private DataRowAction eventAction;
            
            public ComponentsRowChangeEvent(ComponentsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ComponentsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InterfacesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnguid;
            
            internal InterfacesDataTable() : 
                    base("Interfaces") {
                this.InitClass();
            }
            
            internal InterfacesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn guidColumn {
                get {
                    return this.columnguid;
                }
            }
            
            public InterfacesRow this[int index] {
                get {
                    return ((InterfacesRow)(this.Rows[index]));
                }
            }
            
            public event InterfacesRowChangeEventHandler InterfacesRowChanged;
            
            public event InterfacesRowChangeEventHandler InterfacesRowChanging;
            
            public event InterfacesRowChangeEventHandler InterfacesRowDeleted;
            
            public event InterfacesRowChangeEventHandler InterfacesRowDeleting;
            
            public void AddInterfacesRow(InterfacesRow row) {
                this.Rows.Add(row);
            }
            
            public InterfacesRow AddInterfacesRow(string guid) {
                InterfacesRow rowInterfacesRow = ((InterfacesRow)(this.NewRow()));
                rowInterfacesRow.ItemArray = new object[] {
                        guid};
                this.Rows.Add(rowInterfacesRow);
                return rowInterfacesRow;
            }
            
            public InterfacesRow FindByguid(string guid) {
                return ((InterfacesRow)(this.Rows.Find(new object[] {
                            guid})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                InterfacesDataTable cln = ((InterfacesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new InterfacesDataTable();
            }
            
            internal void InitVars() {
                this.columnguid = this.Columns["guid"];
            }
            
            private void InitClass() {
                this.columnguid = new DataColumn("guid", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnguid);
                this.Constraints.Add(new UniqueConstraint("PK_IFACE", new DataColumn[] {
                                this.columnguid}, true));
                this.columnguid.AllowDBNull = false;
                this.columnguid.Unique = true;
                this.columnguid.Namespace = "http://tempuri.org/ModelDataSet.xsd";
            }
            
            public InterfacesRow NewInterfacesRow() {
                return ((InterfacesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new InterfacesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(InterfacesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InterfacesRowChanged != null)) {
                    this.InterfacesRowChanged(this, new InterfacesRowChangeEvent(((InterfacesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InterfacesRowChanging != null)) {
                    this.InterfacesRowChanging(this, new InterfacesRowChangeEvent(((InterfacesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InterfacesRowDeleted != null)) {
                    this.InterfacesRowDeleted(this, new InterfacesRowChangeEvent(((InterfacesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InterfacesRowDeleting != null)) {
                    this.InterfacesRowDeleting(this, new InterfacesRowChangeEvent(((InterfacesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveInterfacesRow(InterfacesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InterfacesRow : DataRow {
            
            private InterfacesDataTable tableInterfaces;
            
            internal InterfacesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableInterfaces = ((InterfacesDataTable)(this.Table));
            }
            
            public string guid {
                get {
                    return ((string)(this[this.tableInterfaces.guidColumn]));
                }
                set {
                    this[this.tableInterfaces.guidColumn] = value;
                }
            }
            
            public RolesRow[] GetRolesRows() {
                return ((RolesRow[])(this.GetChildRows(this.Table.ChildRelations["InterfacesRoles"])));
            }
            
            public SignaturesRow[] GetSignaturesRows() {
                return ((SignaturesRow[])(this.GetChildRows(this.Table.ChildRelations["InterfacesSignatures"])));
            }
            
            public ProtocolsRow[] GetProtocolsRows() {
                return ((ProtocolsRow[])(this.GetChildRows(this.Table.ChildRelations["InterfacesProtocols"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InterfacesRowChangeEvent : EventArgs {
            
            private InterfacesRow eventRow;
            
            private DataRowAction eventAction;
            
            public InterfacesRowChangeEvent(InterfacesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public InterfacesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ConnectionsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnincoming;
            
            private DataColumn columnoutgoing;
            
            private DataColumn columnguid;
            
            internal ConnectionsDataTable() : 
                    base("Connections") {
                this.InitClass();
            }
            
            internal ConnectionsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn incomingColumn {
                get {
                    return this.columnincoming;
                }
            }
            
            internal DataColumn outgoingColumn {
                get {
                    return this.columnoutgoing;
                }
            }
            
            internal DataColumn guidColumn {
                get {
                    return this.columnguid;
                }
            }
            
            public ConnectionsRow this[int index] {
                get {
                    return ((ConnectionsRow)(this.Rows[index]));
                }
            }
            
            public event ConnectionsRowChangeEventHandler ConnectionsRowChanged;
            
            public event ConnectionsRowChangeEventHandler ConnectionsRowChanging;
            
            public event ConnectionsRowChangeEventHandler ConnectionsRowDeleted;
            
            public event ConnectionsRowChangeEventHandler ConnectionsRowDeleting;
            
            public void AddConnectionsRow(ConnectionsRow row) {
                this.Rows.Add(row);
            }
            
            public ConnectionsRow AddConnectionsRow(RolesRow parentRolesRowByRolesConnections, RolesRow parentRolesRowByRolesConnections1, string guid) {
                ConnectionsRow rowConnectionsRow = ((ConnectionsRow)(this.NewRow()));
                rowConnectionsRow.ItemArray = new object[] {
                        parentRolesRowByRolesConnections[0],
                        parentRolesRowByRolesConnections1[0],
                        guid};
                this.Rows.Add(rowConnectionsRow);
                return rowConnectionsRow;
            }
            
            public ConnectionsRow FindByguid(string guid) {
                return ((ConnectionsRow)(this.Rows.Find(new object[] {
                            guid})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ConnectionsDataTable cln = ((ConnectionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ConnectionsDataTable();
            }
            
            internal void InitVars() {
                this.columnincoming = this.Columns["incoming"];
                this.columnoutgoing = this.Columns["outgoing"];
                this.columnguid = this.Columns["guid"];
            }
            
            private void InitClass() {
                this.columnincoming = new DataColumn("incoming", typeof(long), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnincoming);
                this.columnoutgoing = new DataColumn("outgoing", typeof(long), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnoutgoing);
                this.columnguid = new DataColumn("guid", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnguid);
                this.Constraints.Add(new UniqueConstraint("CON_PK", new DataColumn[] {
                                this.columnincoming,
                                this.columnoutgoing}, false));
                this.Constraints.Add(new UniqueConstraint("CON_SK", new DataColumn[] {
                                this.columnguid}, true));
                this.columnincoming.AllowDBNull = false;
                this.columnincoming.Namespace = "http://tempuri.org/ModelDataSet.xsd";
                this.columnoutgoing.AllowDBNull = false;
                this.columnoutgoing.Namespace = "http://tempuri.org/ModelDataSet.xsd";
                this.columnguid.AllowDBNull = false;
                this.columnguid.Unique = true;
                this.columnguid.Namespace = "http://tempuri.org/ModelDataSet.xsd";
            }
            
            public ConnectionsRow NewConnectionsRow() {
                return ((ConnectionsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ConnectionsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ConnectionsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ConnectionsRowChanged != null)) {
                    this.ConnectionsRowChanged(this, new ConnectionsRowChangeEvent(((ConnectionsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ConnectionsRowChanging != null)) {
                    this.ConnectionsRowChanging(this, new ConnectionsRowChangeEvent(((ConnectionsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ConnectionsRowDeleted != null)) {
                    this.ConnectionsRowDeleted(this, new ConnectionsRowChangeEvent(((ConnectionsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ConnectionsRowDeleting != null)) {
                    this.ConnectionsRowDeleting(this, new ConnectionsRowChangeEvent(((ConnectionsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveConnectionsRow(ConnectionsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ConnectionsRow : DataRow {
            
            private ConnectionsDataTable tableConnections;
            
            internal ConnectionsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableConnections = ((ConnectionsDataTable)(this.Table));
            }
            
            public long incoming {
                get {
                    return ((long)(this[this.tableConnections.incomingColumn]));
                }
                set {
                    this[this.tableConnections.incomingColumn] = value;
                }
            }
            
            public long outgoing {
                get {
                    return ((long)(this[this.tableConnections.outgoingColumn]));
                }
                set {
                    this[this.tableConnections.outgoingColumn] = value;
                }
            }
            
            public string guid {
                get {
                    return ((string)(this[this.tableConnections.guidColumn]));
                }
                set {
                    this[this.tableConnections.guidColumn] = value;
                }
            }
            
            public RolesRow RolesRowByRolesConnections {
                get {
                    return ((RolesRow)(this.GetParentRow(this.Table.ParentRelations["RolesConnections"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["RolesConnections"]);
                }
            }
            
            public RolesRow RolesRowByRolesConnections1 {
                get {
                    return ((RolesRow)(this.GetParentRow(this.Table.ParentRelations["RolesConnections1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["RolesConnections1"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ConnectionsRowChangeEvent : EventArgs {
            
            private ConnectionsRow eventRow;
            
            private DataRowAction eventAction;
            
            public ConnectionsRowChangeEvent(ConnectionsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ConnectionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SignaturesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnguid;
            
            private DataColumn columnfk_iface;
            
            internal SignaturesDataTable() : 
                    base("Signatures") {
                this.InitClass();
            }
            
            internal SignaturesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn guidColumn {
                get {
                    return this.columnguid;
                }
            }
            
            internal DataColumn fk_ifaceColumn {
                get {
                    return this.columnfk_iface;
                }
            }
            
            public SignaturesRow this[int index] {
                get {
                    return ((SignaturesRow)(this.Rows[index]));
                }
            }
            
            public event SignaturesRowChangeEventHandler SignaturesRowChanged;
            
            public event SignaturesRowChangeEventHandler SignaturesRowChanging;
            
            public event SignaturesRowChangeEventHandler SignaturesRowDeleted;
            
            public event SignaturesRowChangeEventHandler SignaturesRowDeleting;
            
            public void AddSignaturesRow(SignaturesRow row) {
                this.Rows.Add(row);
            }
            
            public SignaturesRow AddSignaturesRow(string guid, InterfacesRow parentInterfacesRowByInterfacesSignatures) {
                SignaturesRow rowSignaturesRow = ((SignaturesRow)(this.NewRow()));
                rowSignaturesRow.ItemArray = new object[] {
                        guid,
                        parentInterfacesRowByInterfacesSignatures[0]};
                this.Rows.Add(rowSignaturesRow);
                return rowSignaturesRow;
            }
            
            public SignaturesRow FindByguid(string guid) {
                return ((SignaturesRow)(this.Rows.Find(new object[] {
                            guid})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SignaturesDataTable cln = ((SignaturesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SignaturesDataTable();
            }
            
            internal void InitVars() {
                this.columnguid = this.Columns["guid"];
                this.columnfk_iface = this.Columns["fk_iface"];
            }
            
            private void InitClass() {
                this.columnguid = new DataColumn("guid", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnguid);
                this.columnfk_iface = new DataColumn("fk_iface", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnfk_iface);
                this.Constraints.Add(new UniqueConstraint("PK_SIG", new DataColumn[] {
                                this.columnguid}, true));
                this.columnguid.AllowDBNull = false;
                this.columnguid.Unique = true;
                this.columnguid.Namespace = "http://tempuri.org/ModelDataSet.xsd";
                this.columnfk_iface.Namespace = "http://tempuri.org/ModelDataSet.xsd";
            }
            
            public SignaturesRow NewSignaturesRow() {
                return ((SignaturesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SignaturesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SignaturesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SignaturesRowChanged != null)) {
                    this.SignaturesRowChanged(this, new SignaturesRowChangeEvent(((SignaturesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SignaturesRowChanging != null)) {
                    this.SignaturesRowChanging(this, new SignaturesRowChangeEvent(((SignaturesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SignaturesRowDeleted != null)) {
                    this.SignaturesRowDeleted(this, new SignaturesRowChangeEvent(((SignaturesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SignaturesRowDeleting != null)) {
                    this.SignaturesRowDeleting(this, new SignaturesRowChangeEvent(((SignaturesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSignaturesRow(SignaturesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SignaturesRow : DataRow {
            
            private SignaturesDataTable tableSignatures;
            
            internal SignaturesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSignatures = ((SignaturesDataTable)(this.Table));
            }
            
            public string guid {
                get {
                    return ((string)(this[this.tableSignatures.guidColumn]));
                }
                set {
                    this[this.tableSignatures.guidColumn] = value;
                }
            }
            
            public string fk_iface {
                get {
                    if (this.Isfk_ifaceNull()) {
                        return "-1";
                    }
                    else {
                        return ((string)(this[this.tableSignatures.fk_ifaceColumn]));
                    }
                }
                set {
                    this[this.tableSignatures.fk_ifaceColumn] = value;
                }
            }
            
            public InterfacesRow InterfacesRow {
                get {
                    return ((InterfacesRow)(this.GetParentRow(this.Table.ParentRelations["InterfacesSignatures"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["InterfacesSignatures"]);
                }
            }
            
            public bool Isfk_ifaceNull() {
                return this.IsNull(this.tableSignatures.fk_ifaceColumn);
            }
            
            public void Setfk_ifaceNull() {
                this[this.tableSignatures.fk_ifaceColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SignaturesRowChangeEvent : EventArgs {
            
            private SignaturesRow eventRow;
            
            private DataRowAction eventAction;
            
            public SignaturesRowChangeEvent(SignaturesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SignaturesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RolesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnid;
            
            private DataColumn columnfk_comp;
            
            private DataColumn columnfk_iface;
            
            private DataColumn columntype;
            
            internal RolesDataTable() : 
                    base("Roles") {
                this.InitClass();
            }
            
            internal RolesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            internal DataColumn fk_compColumn {
                get {
                    return this.columnfk_comp;
                }
            }
            
            internal DataColumn fk_ifaceColumn {
                get {
                    return this.columnfk_iface;
                }
            }
            
            internal DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            public RolesRow this[int index] {
                get {
                    return ((RolesRow)(this.Rows[index]));
                }
            }
            
            public event RolesRowChangeEventHandler RolesRowChanged;
            
            public event RolesRowChangeEventHandler RolesRowChanging;
            
            public event RolesRowChangeEventHandler RolesRowDeleted;
            
            public event RolesRowChangeEventHandler RolesRowDeleting;
            
            public void AddRolesRow(RolesRow row) {
                this.Rows.Add(row);
            }
            
            public RolesRow AddRolesRow(long id, ComponentsRow parentComponentsRowByComponentsRoles, InterfacesRow parentInterfacesRowByInterfacesRoles, System.SByte type) {
                RolesRow rowRolesRow = ((RolesRow)(this.NewRow()));
                rowRolesRow.ItemArray = new object[] {
                        id,
                        parentComponentsRowByComponentsRoles[0],
                        parentInterfacesRowByInterfacesRoles[0],
                        type};
                this.Rows.Add(rowRolesRow);
                return rowRolesRow;
            }
            
            public RolesRow FindByid(long id) {
                return ((RolesRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                RolesDataTable cln = ((RolesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new RolesDataTable();
            }
            
            internal void InitVars() {
                this.columnid = this.Columns["id"];
                this.columnfk_comp = this.Columns["fk_comp"];
                this.columnfk_iface = this.Columns["fk_iface"];
                this.columntype = this.Columns["type"];
            }
            
            private void InitClass() {
                this.columnid = new DataColumn("id", typeof(long), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnid);
                this.columnfk_comp = new DataColumn("fk_comp", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnfk_comp);
                this.columnfk_iface = new DataColumn("fk_iface", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnfk_iface);
                this.columntype = new DataColumn("type", typeof(System.SByte), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columntype);
                this.Constraints.Add(new UniqueConstraint("ROLES_PK", new DataColumn[] {
                                this.columnid}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columnid.Namespace = "http://tempuri.org/ModelDataSet.xsd";
                this.columnfk_comp.Namespace = "http://tempuri.org/ModelDataSet.xsd";
                this.columnfk_iface.Namespace = "http://tempuri.org/ModelDataSet.xsd";
                this.columntype.Namespace = "http://tempuri.org/ModelDataSet.xsd";
            }
            
            public RolesRow NewRolesRow() {
                return ((RolesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new RolesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(RolesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RolesRowChanged != null)) {
                    this.RolesRowChanged(this, new RolesRowChangeEvent(((RolesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RolesRowChanging != null)) {
                    this.RolesRowChanging(this, new RolesRowChangeEvent(((RolesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RolesRowDeleted != null)) {
                    this.RolesRowDeleted(this, new RolesRowChangeEvent(((RolesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RolesRowDeleting != null)) {
                    this.RolesRowDeleting(this, new RolesRowChangeEvent(((RolesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveRolesRow(RolesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RolesRow : DataRow {
            
            private RolesDataTable tableRoles;
            
            internal RolesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableRoles = ((RolesDataTable)(this.Table));
            }
            
            public long id {
                get {
                    return ((long)(this[this.tableRoles.idColumn]));
                }
                set {
                    this[this.tableRoles.idColumn] = value;
                }
            }
            
            public string fk_comp {
                get {
                    if (this.Isfk_compNull()) {
                        return "-1";
                    }
                    else {
                        return ((string)(this[this.tableRoles.fk_compColumn]));
                    }
                }
                set {
                    this[this.tableRoles.fk_compColumn] = value;
                }
            }
            
            public string fk_iface {
                get {
                    if (this.Isfk_ifaceNull()) {
                        return "-1";
                    }
                    else {
                        return ((string)(this[this.tableRoles.fk_ifaceColumn]));
                    }
                }
                set {
                    this[this.tableRoles.fk_ifaceColumn] = value;
                }
            }
            
            public System.SByte type {
                get {
                    try {
                        return ((System.SByte)(this[this.tableRoles.typeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e);
                    }
                }
                set {
                    this[this.tableRoles.typeColumn] = value;
                }
            }
            
            public ComponentsRow ComponentsRow {
                get {
                    return ((ComponentsRow)(this.GetParentRow(this.Table.ParentRelations["ComponentsRoles"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ComponentsRoles"]);
                }
            }
            
            public InterfacesRow InterfacesRow {
                get {
                    return ((InterfacesRow)(this.GetParentRow(this.Table.ParentRelations["InterfacesRoles"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["InterfacesRoles"]);
                }
            }
            
            public bool Isfk_compNull() {
                return this.IsNull(this.tableRoles.fk_compColumn);
            }
            
            public void Setfk_compNull() {
                this[this.tableRoles.fk_compColumn] = System.Convert.DBNull;
            }
            
            public bool Isfk_ifaceNull() {
                return this.IsNull(this.tableRoles.fk_ifaceColumn);
            }
            
            public void Setfk_ifaceNull() {
                this[this.tableRoles.fk_ifaceColumn] = System.Convert.DBNull;
            }
            
            public bool IstypeNull() {
                return this.IsNull(this.tableRoles.typeColumn);
            }
            
            public void SettypeNull() {
                this[this.tableRoles.typeColumn] = System.Convert.DBNull;
            }
            
            public ConnectionsRow[] GetConnectionsRowsByRolesConnections() {
                return ((ConnectionsRow[])(this.GetChildRows(this.Table.ChildRelations["RolesConnections"])));
            }
            
            public ConnectionsRow[] GetConnectionsRowsByRolesConnections1() {
                return ((ConnectionsRow[])(this.GetChildRows(this.Table.ChildRelations["RolesConnections1"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RolesRowChangeEvent : EventArgs {
            
            private RolesRow eventRow;
            
            private DataRowAction eventAction;
            
            public RolesRowChangeEvent(RolesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public RolesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProtocolsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnguid;
            
            private DataColumn columnfk_iface;
            
            internal ProtocolsDataTable() : 
                    base("Protocols") {
                this.InitClass();
            }
            
            internal ProtocolsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn guidColumn {
                get {
                    return this.columnguid;
                }
            }
            
            internal DataColumn fk_ifaceColumn {
                get {
                    return this.columnfk_iface;
                }
            }
            
            public ProtocolsRow this[int index] {
                get {
                    return ((ProtocolsRow)(this.Rows[index]));
                }
            }
            
            public event ProtocolsRowChangeEventHandler ProtocolsRowChanged;
            
            public event ProtocolsRowChangeEventHandler ProtocolsRowChanging;
            
            public event ProtocolsRowChangeEventHandler ProtocolsRowDeleted;
            
            public event ProtocolsRowChangeEventHandler ProtocolsRowDeleting;
            
            public void AddProtocolsRow(ProtocolsRow row) {
                this.Rows.Add(row);
            }
            
            public ProtocolsRow AddProtocolsRow(string guid, InterfacesRow parentInterfacesRowByInterfacesProtocols) {
                ProtocolsRow rowProtocolsRow = ((ProtocolsRow)(this.NewRow()));
                rowProtocolsRow.ItemArray = new object[] {
                        guid,
                        parentInterfacesRowByInterfacesProtocols[0]};
                this.Rows.Add(rowProtocolsRow);
                return rowProtocolsRow;
            }
            
            public ProtocolsRow FindByguid(string guid) {
                return ((ProtocolsRow)(this.Rows.Find(new object[] {
                            guid})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ProtocolsDataTable cln = ((ProtocolsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ProtocolsDataTable();
            }
            
            internal void InitVars() {
                this.columnguid = this.Columns["guid"];
                this.columnfk_iface = this.Columns["fk_iface"];
            }
            
            private void InitClass() {
                this.columnguid = new DataColumn("guid", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnguid);
                this.columnfk_iface = new DataColumn("fk_iface", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnfk_iface);
                this.Constraints.Add(new UniqueConstraint("PROT_PK", new DataColumn[] {
                                this.columnguid}, true));
                this.columnguid.AllowDBNull = false;
                this.columnguid.Unique = true;
                this.columnguid.Namespace = "http://tempuri.org/ModelDataSet.xsd";
                this.columnfk_iface.Namespace = "http://tempuri.org/ModelDataSet.xsd";
            }
            
            public ProtocolsRow NewProtocolsRow() {
                return ((ProtocolsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ProtocolsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ProtocolsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProtocolsRowChanged != null)) {
                    this.ProtocolsRowChanged(this, new ProtocolsRowChangeEvent(((ProtocolsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProtocolsRowChanging != null)) {
                    this.ProtocolsRowChanging(this, new ProtocolsRowChangeEvent(((ProtocolsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProtocolsRowDeleted != null)) {
                    this.ProtocolsRowDeleted(this, new ProtocolsRowChangeEvent(((ProtocolsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProtocolsRowDeleting != null)) {
                    this.ProtocolsRowDeleting(this, new ProtocolsRowChangeEvent(((ProtocolsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveProtocolsRow(ProtocolsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProtocolsRow : DataRow {
            
            private ProtocolsDataTable tableProtocols;
            
            internal ProtocolsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableProtocols = ((ProtocolsDataTable)(this.Table));
            }
            
            public string guid {
                get {
                    return ((string)(this[this.tableProtocols.guidColumn]));
                }
                set {
                    this[this.tableProtocols.guidColumn] = value;
                }
            }
            
            public string fk_iface {
                get {
                    if (this.Isfk_ifaceNull()) {
                        return "-1";
                    }
                    else {
                        return ((string)(this[this.tableProtocols.fk_ifaceColumn]));
                    }
                }
                set {
                    this[this.tableProtocols.fk_ifaceColumn] = value;
                }
            }
            
            public InterfacesRow InterfacesRow {
                get {
                    return ((InterfacesRow)(this.GetParentRow(this.Table.ParentRelations["InterfacesProtocols"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["InterfacesProtocols"]);
                }
            }
            
            public bool Isfk_ifaceNull() {
                return this.IsNull(this.tableProtocols.fk_ifaceColumn);
            }
            
            public void Setfk_ifaceNull() {
                this[this.tableProtocols.fk_ifaceColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProtocolsRowChangeEvent : EventArgs {
            
            private ProtocolsRow eventRow;
            
            private DataRowAction eventAction;
            
            public ProtocolsRowChangeEvent(ProtocolsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ProtocolsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
