
------------------------------------------------------------------------------
1. Description of the projects
2. Requirements
3. Build instructions for the measurement tool
4. Application example
5. Known errors
------------------------------------------------------------------------------

1. Description of the projects

Palladio.QoSAdaptor: 		
	Contains configuration and common classes, interfaces and exceptions 
	that are used by the other projects. 

Palladio.QoSAdaptor.Compiler:
	Implements an environment to compile CSharp source files. Used to 
	create assemblies of adaptors and prediction models.  			

Palladio.QoSAdaptor.Control: 
	Controls the process of selecting, configurating patterns and the 
	generation and compilation of adaptors and corresponding prediction
	models for the selected pattern.

Palladio.QoSAdaptor.Generation: 
	Uses CodeSmith to generate source files from templates for the adaptor
	and the prediction models.

Palladio.QoSAdaptor.Measurement:
	Contains the measurement application that is used to measure the 
	response times of the generated adaptors and the TestService.

Palladio.QoSAdaptor.PatternConfiguration:
	Only partly implemented and unused. It was thought to parse a feature 
	diagram and create a configuration GUI from that diagram. The 
	CodeSmith GUI is now used instead.

Palladio.QoSAdaptor.PatternDescription:
	Contains classes used for the description of patterns which hold the 
	same information as XML-files that follow the PatternDescription.xsd 
	and a parser for these files.

Palladio.QoSAdaptor.PatternSelection:
	Provides a GUI for the user to select one of the preselected patterns
	for the generation of an adaptor and the corresponding prediction 
	models.
 

Palladio.QoSAdaptor.QMLComparison:
	Implementation of a tool that compares two QML files in order to 
	detect QoS mismatches. Based on these mismatches a selection of 
	patterns is given which are able to correct them.

Palladio.QoSAdaptor.QMLParser:
	A parser for QML specification files. The project is taken over by 
	Lars Karg with a few minor changes.

Palladio.QoSAdaptor.RemotingService:
	Implements a .NET Remoting Server for the TestService, which is used
	over .NET Remoting in the replication adaptor.

Palladio.QoSAdaptor.Starter:	
	A console application which starts the adaptor selection and 
	generation process by calling the start method of
	Palladio.QoSAdaptor.Control.

Palladio.QoSAdaptor.TestService:
	A simple service (simulating a service execution using Thread.Sleep())
	component used to measure generated adaptors.

Palladio.QoSAdaptor.UnitTest: 	
	UnitTest of all projects. 

bin:				
	Contains batch files which start the test applications and qml files
	needed to test the QMLComparison application.

doc:				
	Contains the documentation of the projects generated by Ndoc.

lib:				
	Formerly used for external DLLs. At the moment only the nunit 
	framework DLL is left.

Palladio.QoSAdaptor.sln:
	VS.NET solution containing all Palladio.QoSAdaptor* projects.

Palladio.QoSAdaptorTests.nunit: 
	Nunit project file for the tests in Palladio.QoSAdaptor.UnitTests.

INFO.txt: 
	Information about the context of this software.

README.txt:			
	This file.

-------------------------------------------------------------------------------

2. Requirements

- To run Palladio.QoSAdaptor.Starter.exe which is called by \bin\Starter.bat 
  the path to CodeSmith.exe has to be part of the PATH user variable.

-------------------------------------------------------------------------------

3. Building instructions for the measurement tool

- The following is necessary, because the corresponding post build event does 
  not work yet.
- Build Palladio.QoSAdaptor.Measurement.exe using VS.NET
- Copy Palladio.QoSAdaptor.Measurement.exe.config to the same file as the 
  executable. This is necessary, because the .config file is needed by the 
  log4net framework for initialization and it is deleted from the target 
  directory each time the application is build.

-------------------------------------------------------------------------------

4. Application example

- After building the all projects with VisualStudio. bin\Starter.bat will 
  start the adaptor selection and generation application with a simple example
  which is not meant to be realistic. To generate an adaptor or a prediction
  model the requirement at 2. has to be fulfilled.

-------------------------------------------------------------------------------

5. Known errors

- It is known that there are 29 build errors. Most of them reference 
  uncommented methods and methods that need to be overridden. These will be 
  eliminated soon. Some also occur in the QMLParser sources by Lars Karg.

-------------------------------------------------------------------------------