//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by CodeSmith.
//     Version: 2.5.14.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using Palladio.Attributes;

namespace Palladio.ComponentModel.InterfaceModels
{
	#region DefaultInterfaceModel
	/// <summary>
	/// An IInterfaceModel is the description of an interface (of a component).
	/// In our case an interface is a set of signatures
	/// which can be somehow related to each other.
	/// </summary>
	internal class DefaultInterfaceModel : ICloneable, IAttributable, IInterfaceModel
	{
		protected ISignatureList signatureList;
		protected IAttributeHash attributes;
		
		public ISignatureList SignatureList
		{
			get
			{
				return signatureList;
			}
		}
		
		public IAttributeHash Attributes 
		{
			get 
			{
				return attributes;
			}
		}	
		
		/// <summary>
		/// Creates a copy of the current instance.
		/// </summary>
		/// <returns>A new object with the same values as the current instance.</returns>
		public object Clone()
		{
			return new DefaultInterfaceModel(this.attributes, this.signatureList);
		}
				
		public override bool Equals(object other)
		{
			if (!(other is IInterfaceModel)) return false;
			if (other == this) return true;
			IInterfaceModel model = (IInterfaceModel)other;
			return model.SignatureList.Equals(this.SignatureList);
		}
		
		public override int GetHashCode()
		{
			return (
				signatureList.GetHashCode()
			);		
		}
			
		public DefaultInterfaceModel(IAttributeHash attrHash, ISignatureList aSignatureList)
		{
			this.signatureList = (ISignatureList)aSignatureList.Clone();
			this.attributes = attrHash;
		}
		
		public DefaultInterfaceModel(IAttributeHash attrHash)
		{
			signatureList = ComponentFactory.CreateSignatureList(new ISignature[0]);
			this.attributes = attrHash;
		}
	}
	#endregion
	
	#region DefaultServiceEffectSpecification
	/// <summary>
	/// An IInterfaceModel is the description of an interface (of a component).
	/// In our case an interface is a set of signatures
	/// which can be somehow related to each other.
	/// </summary>
	internal class DefaultServiceEffectSpecification : ICloneable, IAttributable, IServiceEffectSpecification
	{
		protected ISignatureWithRoleList signatureList;
		protected IAttributeHash attributes;
		
		public ISignatureWithRoleList SignatureList
		{
			get
			{
				return signatureList;
			}
		}
		
		public IAttributeHash Attributes 
		{
			get 
			{
				return attributes;
			}
		}	
		
		/// <summary>
		/// Creates a copy of the current instance.
		/// </summary>
		/// <returns>A new object with the same values as the current instance.</returns>
		public object Clone()
		{
			return new DefaultServiceEffectSpecification(this.attributes, this.signatureList);
		}
				
		public override bool Equals(object other)
		{
			if (!(other is IServiceEffectSpecification)) return false;
			if (other == this) return true;
			IServiceEffectSpecification model = (IServiceEffectSpecification)other;
			return model.SignatureList.Equals(this.SignatureList);
		}
		
		public override int GetHashCode()
		{
			return (
				signatureList.GetHashCode()
			);		
		}
			
		public DefaultServiceEffectSpecification(IAttributeHash attrHash, ISignatureWithRoleList aSignatureList)
		{
			this.signatureList = (ISignatureWithRoleList)aSignatureList.Clone();
			this.attributes = attrHash;
		}
		
		public DefaultServiceEffectSpecification(IAttributeHash attrHash)
		{
			signatureList = ComponentFactory.CreateExternalSignatureList(new ISignatureWithRole[0]);
			this.attributes = attrHash;
		}
	}
	#endregion
}
