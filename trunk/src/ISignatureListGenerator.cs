//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by CodeSmith.
//     Version: 2.5.14.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using Palladio.Identifier;

namespace Palladio.ComponentModel
{
	#region SignatureList
	/// <summary>
	/// A SignatureList is  an InterfaceModel just
	/// containing a set of signatures.
	/// </summary>
	public interface ISignatureList : ICloneable, IEnumerable
	{
		#region Properties

		/// <summary>
		/// The number of signature in this list
		/// </summary>
		int Count
		{
			get;
		}
		
		/// <summary>
		/// Indexer to access the sigantures easily.
		/// </summary>
		ISignature this[int index]
		{
			get;
		}

		/// <summary>
		/// Adds an array of signatures to the interface.
		/// </summary>
		/// <param name="aSigArray">Signatures to add.</param>
		void AddSignatures( params ISignature[] aSigArray );

		/// <summary>
		/// Deletes a set of signatures from the interface.
		/// </summary>
		/// <param name="aSigArray">Signatures to delete.</param>
		void DeleteSignatures( params ISignature[] aSigArray );
		
		/// <summary>
		/// Query the list for a certain signature
		/// </summary>
		/// <param name="aSignature">The signature which is searched</param>
		/// <returns>True if the queried signature is in the list</returns>
		bool ContainsSignature( ISignature aSignature );
		
		/// <summary>
		/// Get the signatures in the list which the given name
		/// </summary>
		/// <param name="aName">Name of the signatures to search</param>
		/// <returns>All signatures with the given name, e.g. all overrides of a certain
		/// signature</returns>
		ISignature[] GetSignaturesByID( IIdentifier aName );

		/// <summary>
		/// Returns the complete set of signatures belonging to this signature list
		/// </summary>
		/// <returns>A complete set of signatures belonging to this signature list</returns>
		ISignature[] GetSignatures();
		
		/// <summary>
		/// This event is raised before and after a change of the signatures in this list
		/// </summary>
		event SignatureListChangeEventHandler SignatureListChangeEvent;

		#endregion
	}
	#endregion
	
	#region ExternalSignatureList
	/// <summary>
	/// A SignatureList is  an InterfaceModel just
	/// containing a set of signatures.
	/// </summary>
	public interface IExternalSignatureList : ICloneable, IEnumerable
	{
		#region Properties

		/// <summary>
		/// The number of signature in this list
		/// </summary>
		int Count
		{
			get;
		}
		
		/// <summary>
		/// Indexer to access the sigantures easily.
		/// </summary>
		IExternalSignature this[int index]
		{
			get;
		}

		/// <summary>
		/// Adds an array of signatures to the interface.
		/// </summary>
		/// <param name="aSigArray">Signatures to add.</param>
		void AddSignatures( params IExternalSignature[] aSigArray );

		/// <summary>
		/// Deletes a set of signatures from the interface.
		/// </summary>
		/// <param name="aSigArray">Signatures to delete.</param>
		void DeleteSignatures( params IExternalSignature[] aSigArray );
		
		/// <summary>
		/// Query the list for a certain signature
		/// </summary>
		/// <param name="aSignature">The signature which is searched</param>
		/// <returns>True if the queried signature is in the list</returns>
		bool ContainsSignature( IExternalSignature aSignature );
		
		/// <summary>
		/// Get the signatures in the list which the given name
		/// </summary>
		/// <param name="aName">Name of the signatures to search</param>
		/// <returns>All signatures with the given name, e.g. all overrides of a certain
		/// signature</returns>
		IExternalSignature[] GetSignaturesByID( IIdentifier aName );

		/// <summary>
		/// Returns the complete set of signatures belonging to this signature list
		/// </summary>
		/// <returns>A complete set of signatures belonging to this signature list</returns>
		IExternalSignature[] GetSignatures();
		
		/// <summary>
		/// This event is raised before and after a change of the signatures in this list
		/// </summary>
		event ExternalSignatureListChangeEventHandler SignatureListChangeEvent;

		#endregion
	}
	#endregion
}
