//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by CodeSmith.
//     Version: 2.5.14.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using Palladio.Attributes;

namespace Palladio.ComponentModel
{
	#region IInterfaceModel
	/// <summary>
	/// An IInterfaceModel is the description of an interface (of a component).
	/// In our case an interface is a set of signatures
	/// which can be somehow related to each other.
	/// </summary>
	public interface IInterfaceModel : ICloneable, IAttributable
	{
		/// <summary>
		/// A list of signatures contained in this IInterfaceModel
		/// </summary>
		ISignatureList SignatureList
		{
			get;
		}
		
		/// <summary>
		/// Additional specification data like FSMs, Petri Nets, ....
		/// </summary>
		IAuxiliaryInterfaceSpecification[] AuxiliarySpecifications
		{
			get;
		}
		
		/// <summary>
		/// Add a new specification aspect to this interface, like a protocol spec.
		/// </summary>
		/// <param name="info">Additional specification data</param>
		void AddAuxiliarySpecification(IAuxiliaryInterfaceSpecification info);

		/// <summary>
		/// Get the auxiliary information of a given type
		/// </summary>
		/// <param name="type">Type of the additional information to retrieve</param>
		/// <returns>The requested information or an exception if the information is not
		/// available</returns>
		IAuxiliaryInterfaceSpecification GetAuxiliarySpecification(System.Type type);
	}
	#endregion
	
	#region IServiceEffectSpecification
	/// <summary>
	/// An IInterfaceModel is the description of an interface (of a component).
	/// In our case an interface is a set of signatures
	/// which can be somehow related to each other.
	/// </summary>
	public interface IServiceEffectSpecification : ICloneable, IAttributable
	{
		/// <summary>
		/// A list of signatures contained in this IServiceEffectSpecification
		/// </summary>
		IExternalSignatureList SignatureList
		{
			get;
		}
		
		/// <summary>
		/// Additional specification data like FSMs, Petri Nets, ....
		/// </summary>
		IAuxiliaryServiceEffectSpecification[] AuxiliarySpecifications
		{
			get;
		}
		
		/// <summary>
		/// Add a new specification aspect to this interface, like a protocol spec.
		/// </summary>
		/// <param name="info">Additional specification data</param>
		void AddAuxiliarySpecification(IAuxiliaryServiceEffectSpecification info);

		/// <summary>
		/// Get the auxiliary information of a given type
		/// </summary>
		/// <param name="type">Type of the additional information to retrieve</param>
		/// <returns>The requested information or an exception if the information is not
		/// available</returns>
		IAuxiliaryServiceEffectSpecification GetAuxiliarySpecification(System.Type type);
	}
	#endregion
}
