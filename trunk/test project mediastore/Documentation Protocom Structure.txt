Three types of generated classes: As an example, we explain the Webserver component that offers an interface IHTTP and requires and interface IBRSSystem. 

Then, we get the generated classes: 
* impl.Webserver: The main class with the logic. It implements the impl.IWebserver interface (which defines the EJB interface)
* impl.ports.IHTTP_Webserver: The class representing the provided interface. 
* impl.contexts.WebserverContext: The class representing the bindings of the webserver's required roles to other components. This class is instantiated by the container and injected in the impl.Webserver. The injection is defined in ejb-jar.xml. The interface impl.contexts.IWebserver just specifies the provided methods and defines the EJB interface.

The ejb-jar then defines the relations. 
* It binds the Webserver class to its context (in e.g. entry with <ejb-name>WebServer_Impl__XKuBcKSKEd-ujcVHnT0lvg</ejb-name>). 
* It binds the WebserverContext to components that it requires (i.e. their ports, in e.g. <ejb-name>WebServer_Context__XKuBcKSKEd-ujcVHnT0lvg</ejb-name>). 
* It binds the port (e.g. IHTTP_Webserver) to the inner component by injecting the inner component as myComponent (e.g. in entry <ejb-name>WebServer_IHTTP__XKuBcKSKEd-ujcVHnT0lvg</ejb-name>). However, at the same time the Webserver class itself instantiates one object of the port class. I am not sure which one is used at the end, and whether one is superfluous.

ejb-jar entries: 
The entry with ejb-name Scheduler_IBRSSystem__YNP1cKSKEd-ujcVHnT0lvg seems only to create the Glassfish-specific mapping. 

The remote tag created the non-portable JNDI entries. Does not matter if they are removed. 

TODO: ejb-jar ganz von neuem aufbauen?
- What is automatically bound due to being the only one that implements an interface?
- The ports could be removed because the ejb-jar directly binds to the impl EJB -> change that?
** No, port of webserver is required to access it from usage scenario. TODO: try to delete the others??

* System also initialises the component contexts! (thus, it is done twice??)

* Quickfix: Webserver component is instantiated multiple times. Create empty stackframe in constructor (at field definition) to avoid nullpointers. If this only happens to the webserver, it does not matter because it has no component params. Only Database.
** Does not work, some EJBs are initialised without the fields (strange!!). 
*** -> Delete the default stackframes, add the variables to the method stack frane directly for now. 

* TODO: revert interface changes: set context not needed, will be hard coded in each component. This is no general solution because comp params are not available at component transformation time... 

* For distribution modify ejb-jar.xml: 
** Remove ejb-link entries for Context ejb entries that should access remote beans
** add entries to sun-ejb-jar.xml, add an ejb entry for the context ejb and specify corba link for the remote bean. 

* Need to manually add component parameters that are specified in the system. Only the ones from the repository are generated. 

Notes: 
* Make warmup and check for errors. I had some uninitialised Webserver instances in a first run, which have disappeared in a second run. Check output for nulpointer and discard those measurements. 





