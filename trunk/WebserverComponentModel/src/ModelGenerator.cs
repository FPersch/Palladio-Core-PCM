//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by CodeSmith.
//     Version: 2.6.0.117
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Net;
using System.Net.Sockets;
using System.Text;
using Palladio.ComponentModel;
using Palladio.Webserver.ConfigReader;
using Palladio.Webserver.Request;
using Palladio.Webserver.RequestParser;
using Palladio.Webserver.WebserverMonitor;
using WebserverXML;

namespace Palladio.Reliability.WebserverComponentModel
{
	/// <summary>
	/// Factory for the creation of all required Seffs of the Webserver.
	/// This factory was created due to the missing save and load operations 
	/// for the Seffs.
	/// 
	/// </summary>
	public class WebserverInterfaceFactory : WebserverModelHelper
	{
		#region IDispatcher

		public static IInterfaceModel CreateIDispatcher()
		{
			if (!interfaceHash.Contains("IDispatcher"))
			{
				IInterfaceModel iModel = ComponentFactory.CreateInterfaceModel("IDispatcher");

				Hashtable methodHash = new Hashtable();
				IParameter[] parameters;
				parameters = new IParameter[0];
				ISignature Stop = ComponentFactory.CreateSignature(typeof (void), "Stop", parameters);
				methodHash["Stop"] = Stop;
				iModel.SignatureList.AddSignatures(Stop);
				parameters = new IParameter[0];
				ISignature Start = ComponentFactory.CreateSignature(typeof (void), "Start", parameters);
				methodHash["Start"] = Start;
				iModel.SignatureList.AddSignatures(Start);

				// Create FSM
				IFSMInterface fsmInterface = ComponentFactory.CreateFSMProtocolInterface();
				WebserverProvidesFactory.CreateProvidesFsmForIDispatcher(fsmInterface.EditFSM, methodHash);

				iModel.AddAuxiliarySpecification(fsmInterface);
				interfaceHash["IDispatcher"] = iModel;
			}
			return (IInterfaceModel) interfaceHash["IDispatcher"];
		}

		#endregion

		#region IPortListener

		public static IInterfaceModel CreateIPortListener()
		{
			if (!interfaceHash.Contains("IPortListener"))
			{
				IInterfaceModel iModel = ComponentFactory.CreateInterfaceModel("IPortListener");

				Hashtable methodHash = new Hashtable();
				ISignature get_Port = CreateGetter(typeof (Int32), "Port");
				methodHash["get_Port"] = get_Port;
				iModel.SignatureList.AddSignatures(get_Port);
				ISignature get_IsRunning = CreateGetter(typeof (Boolean), "IsRunning");
				methodHash["get_IsRunning"] = get_IsRunning;
				iModel.SignatureList.AddSignatures(get_IsRunning);
				ISignature set_IsRunning = CreateSetter(typeof (Boolean), "IsRunning");
				methodHash["set_IsRunning"] = set_IsRunning;
				iModel.SignatureList.AddSignatures(set_IsRunning);
				ISignature get_Address = CreateGetter(typeof (IPAddress), "Address");
				methodHash["get_Address"] = get_Address;
				iModel.SignatureList.AddSignatures(get_Address);
				IParameter[] parameters;
				parameters = new IParameter[0];
				ISignature StartListen = ComponentFactory.CreateSignature(typeof (void), "StartListen", parameters);
				methodHash["StartListen"] = StartListen;
				iModel.SignatureList.AddSignatures(StartListen);

				// Create FSM
				IFSMInterface fsmInterface = ComponentFactory.CreateFSMProtocolInterface();
				WebserverProvidesFactory.CreateProvidesFsmForIPortListener(fsmInterface.EditFSM, methodHash);

				iModel.AddAuxiliarySpecification(fsmInterface);
				interfaceHash["IPortListener"] = iModel;
			}
			return (IInterfaceModel) interfaceHash["IPortListener"];
		}

		#endregion

		#region IConfigReader

		public static IInterfaceModel CreateIConfigReader()
		{
			if (!interfaceHash.Contains("IConfigReader"))
			{
				IInterfaceModel iModel = ComponentFactory.CreateInterfaceModel("IConfigReader");

				Hashtable methodHash = new Hashtable();
				IParameter[] parameters;
				parameters = new IParameter[1];
				parameters[0] = ComponentFactory.CreateParameter(typeof (String), "configPathFile");
				ISignature ReadConfiguration = ComponentFactory.CreateSignature(typeof (ConfigType), "ReadConfiguration", parameters);
				methodHash["ReadConfiguration"] = ReadConfiguration;
				iModel.SignatureList.AddSignatures(ReadConfiguration);

				// Create FSM
				IFSMInterface fsmInterface = ComponentFactory.CreateFSMProtocolInterface();
				WebserverProvidesFactory.CreateProvidesFsmForIConfigReader(fsmInterface.EditFSM, methodHash);

				iModel.AddAuxiliarySpecification(fsmInterface);
				interfaceHash["IConfigReader"] = iModel;
			}
			return (IInterfaceModel) interfaceHash["IConfigReader"];
		}

		#endregion

		#region IConfiguration

		public static IInterfaceModel CreateIConfiguration()
		{
			if (!interfaceHash.Contains("IConfiguration"))
			{
				IInterfaceModel iModel = ComponentFactory.CreateInterfaceModel("IConfiguration");

				Hashtable methodHash = new Hashtable();
				IParameter[] parameters;
				parameters = new IParameter[1];
				parameters[0] = ComponentFactory.CreateParameter(typeof (String), "key");
				ISignature GetValue = ComponentFactory.CreateSignature(typeof (Object), "GetValue", parameters);
				methodHash["GetValue"] = GetValue;
				iModel.SignatureList.AddSignatures(GetValue);

				// Create FSM
				IFSMInterface fsmInterface = ComponentFactory.CreateFSMProtocolInterface();
				WebserverProvidesFactory.CreateProvidesFsmForIConfiguration(fsmInterface.EditFSM, methodHash);

				iModel.AddAuxiliarySpecification(fsmInterface);
				interfaceHash["IConfiguration"] = iModel;
			}
			return (IInterfaceModel) interfaceHash["IConfiguration"];
		}

		#endregion

		#region IWebserverConfiguration

		public static IInterfaceModel CreateIWebserverConfiguration()
		{
			if (!interfaceHash.Contains("IWebserverConfiguration"))
			{
				IInterfaceModel iModel = ComponentFactory.CreateInterfaceModel("IWebserverConfiguration");

				Hashtable methodHash = new Hashtable();
				ISignature get_ConfigFilesPath = CreateGetter(typeof (String), "ConfigFilesPath");
				methodHash["get_ConfigFilesPath"] = get_ConfigFilesPath;
				iModel.SignatureList.AddSignatures(get_ConfigFilesPath);
				ISignature set_ConfigFilesPath = CreateSetter(typeof (String), "ConfigFilesPath");
				methodHash["set_ConfigFilesPath"] = set_ConfigFilesPath;
				iModel.SignatureList.AddSignatures(set_ConfigFilesPath);
				ISignature get_DebugFile = CreateGetter(typeof (String), "DebugFile");
				methodHash["get_DebugFile"] = get_DebugFile;
				iModel.SignatureList.AddSignatures(get_DebugFile);
				ISignature get_DocumentRoot = CreateGetter(typeof (String), "DocumentRoot");
				methodHash["get_DocumentRoot"] = get_DocumentRoot;
				iModel.SignatureList.AddSignatures(get_DocumentRoot);
				ISignature get_ListeningPorts = CreateGetter(typeof (Int32[]), "ListeningPorts");
				methodHash["get_ListeningPorts"] = get_ListeningPorts;
				iModel.SignatureList.AddSignatures(get_ListeningPorts);
				ISignature get_DefaultMimeType = CreateGetter(typeof (String), "DefaultMimeType");
				methodHash["get_DefaultMimeType"] = get_DefaultMimeType;
				iModel.SignatureList.AddSignatures(get_DefaultMimeType);
				ISignature get_ListenIP = CreateGetter(typeof (String), "ListenIP");
				methodHash["get_ListenIP"] = get_ListenIP;
				iModel.SignatureList.AddSignatures(get_ListenIP);
				ISignature get_LogFile = CreateGetter(typeof (String), "LogFile");
				methodHash["get_LogFile"] = get_LogFile;
				iModel.SignatureList.AddSignatures(get_LogFile);
				ISignature get_DefaultFileNames = CreateGetter(typeof (String[]), "DefaultFileNames");
				methodHash["get_DefaultFileNames"] = get_DefaultFileNames;
				iModel.SignatureList.AddSignatures(get_DefaultFileNames);
				IParameter[] parameters;
				parameters = new IParameter[1];
				parameters[0] = ComponentFactory.CreateParameter(typeof (String), "fileExtension");
				ISignature GetMimeTypeFor = ComponentFactory.CreateSignature(typeof (String), "GetMimeTypeFor", parameters);
				methodHash["GetMimeTypeFor"] = GetMimeTypeFor;
				iModel.SignatureList.AddSignatures(GetMimeTypeFor);

				// Create FSM
				IFSMInterface fsmInterface = ComponentFactory.CreateFSMProtocolInterface();
				WebserverProvidesFactory.CreateProvidesFsmForIWebserverConfiguration(fsmInterface.EditFSM, methodHash);

				iModel.AddAuxiliarySpecification(fsmInterface);
				interfaceHash["IWebserverConfiguration"] = iModel;
			}
			return (IInterfaceModel) interfaceHash["IWebserverConfiguration"];
		}

		#endregion

		#region IFTPRequestProcessor

		public static IInterfaceModel CreateIFTPRequestProcessor()
		{
			if (!interfaceHash.Contains("IFTPRequestProcessor"))
			{
				IInterfaceModel iModel = ComponentFactory.CreateInterfaceModel("IFTPRequestProcessor");

				Hashtable methodHash = new Hashtable();
				IParameter[] parameters;

				// Create FSM
				IFSMInterface fsmInterface = ComponentFactory.CreateFSMProtocolInterface();
				WebserverProvidesFactory.CreateProvidesFsmForIFTPRequestProcessor(fsmInterface.EditFSM, methodHash);

				iModel.AddAuxiliarySpecification(fsmInterface);
				interfaceHash["IFTPRequestProcessor"] = iModel;
			}
			return (IInterfaceModel) interfaceHash["IFTPRequestProcessor"];
		}

		#endregion

		#region IHTTPRequestProcessor

		public static IInterfaceModel CreateIHTTPRequestProcessor()
		{
			if (!interfaceHash.Contains("IHTTPRequestProcessor"))
			{
				IInterfaceModel iModel = ComponentFactory.CreateInterfaceModel("IHTTPRequestProcessor");

				Hashtable methodHash = new Hashtable();
				IParameter[] parameters;
				parameters = new IParameter[1];
				parameters[0] = ComponentFactory.CreateParameter(typeof (IHTTPRequest), "httpRequest");
				ISignature HandleRequest = ComponentFactory.CreateSignature(typeof (void), "HandleRequest", parameters);
				methodHash["HandleRequest"] = HandleRequest;
				iModel.SignatureList.AddSignatures(HandleRequest);

				// Create FSM
				IFSMInterface fsmInterface = ComponentFactory.CreateFSMProtocolInterface();
				WebserverProvidesFactory.CreateProvidesFsmForIHTTPRequestProcessor(fsmInterface.EditFSM, methodHash);

				iModel.AddAuxiliarySpecification(fsmInterface);
				interfaceHash["IHTTPRequestProcessor"] = iModel;
			}
			return (IInterfaceModel) interfaceHash["IHTTPRequestProcessor"];
		}

		#endregion

		#region IHTTPRequestProcessorTools

		public static IInterfaceModel CreateIHTTPRequestProcessorTools()
		{
			if (!interfaceHash.Contains("IHTTPRequestProcessorTools"))
			{
				IInterfaceModel iModel = ComponentFactory.CreateInterfaceModel("IHTTPRequestProcessorTools");

				Hashtable methodHash = new Hashtable();
				IParameter[] parameters;
				parameters = new IParameter[2];
				parameters[0] = ComponentFactory.CreateParameter(typeof (String), "completePath");
				parameters[1] = ComponentFactory.CreateParameter(typeof (String), "fileName");
				ISignature OpenFile = ComponentFactory.CreateSignature(typeof (Byte[]), "OpenFile", parameters);
				methodHash["OpenFile"] = OpenFile;
				iModel.SignatureList.AddSignatures(OpenFile);
				parameters = new IParameter[1];
				parameters[0] = ComponentFactory.CreateParameter(typeof (String), "requestedFileType");
				ISignature GetFileMimeTypeFor = ComponentFactory.CreateSignature(typeof (String), "GetFileMimeTypeFor", parameters);
				methodHash["GetFileMimeTypeFor"] = GetFileMimeTypeFor;
				iModel.SignatureList.AddSignatures(GetFileMimeTypeFor);
				parameters = new IParameter[1];
				parameters[0] = ComponentFactory.CreateParameter(typeof (String), "requestedPath");
				ISignature BuildCompletePath = ComponentFactory.CreateSignature(typeof (String), "BuildCompletePath", parameters);
				methodHash["BuildCompletePath"] = BuildCompletePath;
				iModel.SignatureList.AddSignatures(BuildCompletePath);
				parameters = new IParameter[2];
				parameters[0] = ComponentFactory.CreateParameter(typeof (Byte[]), "contentDataBytes");
				parameters[1] = ComponentFactory.CreateParameter(typeof (Socket), "socket");
				ISignature SendContentDataToClient = ComponentFactory.CreateSignature(typeof (void), "SendContentDataToClient", parameters);
				methodHash["SendContentDataToClient"] = SendContentDataToClient;
				iModel.SignatureList.AddSignatures(SendContentDataToClient);
				parameters = new IParameter[2];
				parameters[0] = ComponentFactory.CreateParameter(typeof (String), "contentData");
				parameters[1] = ComponentFactory.CreateParameter(typeof (Socket), "socket");
				ISignature SendContentToClient = ComponentFactory.CreateSignature(typeof (void), "SendContentToClient", parameters);
				methodHash["SendContentToClient"] = SendContentToClient;
				iModel.SignatureList.AddSignatures(SendContentToClient);
				parameters = new IParameter[3];
				parameters[0] = ComponentFactory.CreateParameter(typeof (IHTTPRequest), "httpRequest");
				parameters[1] = ComponentFactory.CreateParameter(typeof (String), "errorMessage");
				parameters[2] = ComponentFactory.CreateParameter(typeof (String), "errorCode");
				ISignature SendHTTPError = ComponentFactory.CreateSignature(typeof (void), "SendHTTPError", parameters);
				methodHash["SendHTTPError"] = SendHTTPError;
				iModel.SignatureList.AddSignatures(SendHTTPError);
				parameters = new IParameter[5];
				parameters[0] = ComponentFactory.CreateParameter(typeof (String), "httpVersion");
				parameters[1] = ComponentFactory.CreateParameter(typeof (String), "mimeType");
				parameters[2] = ComponentFactory.CreateParameter(typeof (Int32), "totalBytes");
				parameters[3] = ComponentFactory.CreateParameter(typeof (String), "httpStatusCode");
				parameters[4] = ComponentFactory.CreateParameter(typeof (Socket), "socket");
				ISignature SendHTTPHeader = ComponentFactory.CreateSignature(typeof (void), "SendHTTPHeader", parameters);
				methodHash["SendHTTPHeader"] = SendHTTPHeader;
				iModel.SignatureList.AddSignatures(SendHTTPHeader);

				// Create FSM
				IFSMInterface fsmInterface = ComponentFactory.CreateFSMProtocolInterface();
				WebserverProvidesFactory.CreateProvidesFsmForIHTTPRequestProcessorTools(fsmInterface.EditFSM, methodHash);

				iModel.AddAuxiliarySpecification(fsmInterface);
				interfaceHash["IHTTPRequestProcessorTools"] = iModel;
			}
			return (IInterfaceModel) interfaceHash["IHTTPRequestProcessorTools"];
		}

		#endregion

		#region IRequestParser

		public static IInterfaceModel CreateIRequestParser()
		{
			if (!interfaceHash.Contains("IRequestParser"))
			{
				IInterfaceModel iModel = ComponentFactory.CreateInterfaceModel("IRequestParser");

				Hashtable methodHash = new Hashtable();
				IParameter[] parameters;
				parameters = new IParameter[1];
				parameters[0] = ComponentFactory.CreateParameter(typeof (IRequest), "request");
				ISignature HandleRequest = ComponentFactory.CreateSignature(typeof (void), "HandleRequest", parameters);
				methodHash["HandleRequest"] = HandleRequest;
				iModel.SignatureList.AddSignatures(HandleRequest);

				// Create FSM
				IFSMInterface fsmInterface = ComponentFactory.CreateFSMProtocolInterface();
				WebserverProvidesFactory.CreateProvidesFsmForIRequestParser(fsmInterface.EditFSM, methodHash);

				iModel.AddAuxiliarySpecification(fsmInterface);
				interfaceHash["IRequestParser"] = iModel;
			}
			return (IInterfaceModel) interfaceHash["IRequestParser"];
		}

		#endregion

		#region IRequestProcessor

		public static IInterfaceModel CreateIRequestProcessor()
		{
			if (!interfaceHash.Contains("IRequestProcessor"))
			{
				IInterfaceModel iModel = ComponentFactory.CreateInterfaceModel("IRequestProcessor");

				Hashtable methodHash = new Hashtable();
				IParameter[] parameters;

				// Create FSM
				IFSMInterface fsmInterface = ComponentFactory.CreateFSMProtocolInterface();
				WebserverProvidesFactory.CreateProvidesFsmForIRequestProcessor(fsmInterface.EditFSM, methodHash);

				iModel.AddAuxiliarySpecification(fsmInterface);
				interfaceHash["IRequestProcessor"] = iModel;
			}
			return (IInterfaceModel) interfaceHash["IRequestProcessor"];
		}

		#endregion

		#region IWebserverMonitor

		public static IInterfaceModel CreateIWebserverMonitor()
		{
			if (!interfaceHash.Contains("IWebserverMonitor"))
			{
				IInterfaceModel iModel = ComponentFactory.CreateInterfaceModel("IWebserverMonitor");

				Hashtable methodHash = new Hashtable();
				IParameter[] parameters;
				parameters = new IParameter[1];
				parameters[0] = ComponentFactory.CreateParameter(typeof (String), "logMessage");
				ISignature WriteLogEntry = ComponentFactory.CreateSignature(typeof (void), "WriteLogEntry", parameters);
				methodHash["WriteLogEntry"] = WriteLogEntry;
				iModel.SignatureList.AddSignatures(WriteLogEntry);
				parameters = new IParameter[2];
				parameters[0] = ComponentFactory.CreateParameter(typeof (String), "debugMessage");
				parameters[1] = ComponentFactory.CreateParameter(typeof (Int32), "debugLevel");
				ISignature WriteDebugMessage = ComponentFactory.CreateSignature(typeof (void), "WriteDebugMessage", parameters);
				methodHash["WriteDebugMessage"] = WriteDebugMessage;
				iModel.SignatureList.AddSignatures(WriteDebugMessage);
				parameters = new IParameter[0];
				ISignature FinishWriteAccess = ComponentFactory.CreateSignature(typeof (void), "FinishWriteAccess", parameters);
				methodHash["FinishWriteAccess"] = FinishWriteAccess;
				iModel.SignatureList.AddSignatures(FinishWriteAccess);
				parameters = new IParameter[0];
				ISignature InitializeWriteAccess = ComponentFactory.CreateSignature(typeof (void), "InitializeWriteAccess", parameters);
				methodHash["InitializeWriteAccess"] = InitializeWriteAccess;
				iModel.SignatureList.AddSignatures(InitializeWriteAccess);

				// Create FSM
				IFSMInterface fsmInterface = ComponentFactory.CreateFSMProtocolInterface();
				WebserverProvidesFactory.CreateProvidesFsmForIWebserverMonitor(fsmInterface.EditFSM, methodHash);

				iModel.AddAuxiliarySpecification(fsmInterface);
				interfaceHash["IWebserverMonitor"] = iModel;
			}
			return (IInterfaceModel) interfaceHash["IWebserverMonitor"];
		}

		#endregion

		#region IBibTexDB

		public static IInterfaceModel CreateIBibTexDB()
		{
			if (!interfaceHash.Contains("IBibTexDB"))
			{
				IInterfaceModel iModel = ComponentFactory.CreateInterfaceModel("IBibTexDB");

				Hashtable methodHash = new Hashtable();
				ISignature get_ConnectionString = CreateGetter(typeof (String), "ConnectionString");
				methodHash["get_ConnectionString"] = get_ConnectionString;
				iModel.SignatureList.AddSignatures(get_ConnectionString);
				ISignature set_ConnectionString = CreateSetter(typeof (String), "ConnectionString");
				methodHash["set_ConnectionString"] = set_ConnectionString;
				iModel.SignatureList.AddSignatures(set_ConnectionString);
				IParameter[] parameters;
				parameters = new IParameter[1];
				parameters[0] = ComponentFactory.CreateParameter(typeof (String), "bibTeXTableName");
				ISignature AllEntries = ComponentFactory.CreateSignature(typeof (StringBuilder), "AllEntries", parameters);
				methodHash["AllEntries"] = AllEntries;
				iModel.SignatureList.AddSignatures(AllEntries);
				parameters = new IParameter[3];
				parameters[0] = ComponentFactory.CreateParameter(typeof (String), "bibTeXTableName");
				parameters[1] = ComponentFactory.CreateParameter(typeof (IHTTPRequest), "httpRequest");
				parameters[2] = ComponentFactory.CreateParameter(typeof (String[]), "bibTeXFieldNames");
				ISignature Search = ComponentFactory.CreateSignature(typeof (StringBuilder), "Search", parameters);
				methodHash["Search"] = Search;
				iModel.SignatureList.AddSignatures(Search);

				// Create FSM
				IFSMInterface fsmInterface = ComponentFactory.CreateFSMProtocolInterface();
				WebserverProvidesFactory.CreateProvidesFsmForIBibTexDB(fsmInterface.EditFSM, methodHash);

				iModel.AddAuxiliarySpecification(fsmInterface);
				interfaceHash["IBibTexDB"] = iModel;
			}
			return (IInterfaceModel) interfaceHash["IBibTexDB"];
		}

		#endregion

		protected WebserverInterfaceFactory()
		{
		}
	}
}