<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PerformanceCalculator</name>
    </assembly>
    <members>
        <member name="T:Palladio.Performance.Calculator.Calculator">
            <summary>
            This class provides the performance calculation for a service effect automaton. The calculation is 
            done in the frequency domain.
            </summary>
            <remarks>
            <pre>
            Version history:
            
            $Log$
            Revision 1.1  2005/08/12 07:59:20  helgeh
            Initial impot after refactoring.

            Math:
            - Added DiscretePDFunction.
            - Added Fast Fourier Transformation and FourierFunction.
            - Changed operations of DiscreteFunction. The operations are independent of the sampling rate. For a probability density  function the sum of function values is a value in [0,1].
            - Added to interface IDiscreteFunction: Sum,ExpandDomainPo2, Crop, NumberOfNullValues, AdjustSamplingRate,  FunctionWithNValues, ToFile, ValueAt, DismissValuesSmalerThanN, ValueOf, MaximumDataValue
            - Altered MEthods: ExpandDomain, Scale, GetScaled, Convolution, Add

            FSMTransformer:
            - Method SEFFValidity added.
            - The Method FSMWithIntermediateState now returns a FSM, where all time consumption is contained by the input symbols of the  transitions.

            WebserverSeffFactory:
            - All service effect automaton are now IFiniteStateMachines. No use of the PAlladio.ComponentModel.

            WebserverAnalyser:
            - Data class for configuration added.
            - ConfigReader added.

            RegExASTVisitor:
            - There are now two visitors. One for the calculation in time domain and one for the calculation in frequency domain.

            RegularExpressions:
            - No changes.

            XmlSeffParser:
            - Data class for configuration added.
            - ConfigReader added.

            PerformanceCalculator:
            - Added interface IPerformanceCalculator. Added CalculatorFactory.

            Unit Tests added.
            Updated documentation.

            
            </pre>
            </remarks>
        </member>
        <member name="T:Palladio.Performance.PerformanceCalculator.IPerformanceCalculator">
            <summary>
            Interface for performance calculation.
            </summary>
            <remarks>
            <pre>
            Version history:
            
            $Log$
            Revision 1.1  2005/08/12 07:59:20  helgeh
            Initial impot after refactoring.

            Math:
            - Added DiscretePDFunction.
            - Added Fast Fourier Transformation and FourierFunction.
            - Changed operations of DiscreteFunction. The operations are independent of the sampling rate. For a probability density  function the sum of function values is a value in [0,1].
            - Added to interface IDiscreteFunction: Sum,ExpandDomainPo2, Crop, NumberOfNullValues, AdjustSamplingRate,  FunctionWithNValues, ToFile, ValueAt, DismissValuesSmalerThanN, ValueOf, MaximumDataValue
            - Altered MEthods: ExpandDomain, Scale, GetScaled, Convolution, Add

            FSMTransformer:
            - Method SEFFValidity added.
            - The Method FSMWithIntermediateState now returns a FSM, where all time consumption is contained by the input symbols of the  transitions.

            WebserverSeffFactory:
            - All service effect automaton are now IFiniteStateMachines. No use of the PAlladio.ComponentModel.

            WebserverAnalyser:
            - Data class for configuration added.
            - ConfigReader added.

            RegExASTVisitor:
            - There are now two visitors. One for the calculation in time domain and one for the calculation in frequency domain.

            RegularExpressions:
            - No changes.

            XmlSeffParser:
            - Data class for configuration added.
            - ConfigReader added.

            PerformanceCalculator:
            - Added interface IPerformanceCalculator. Added CalculatorFactory.

            Unit Tests added.
            Updated documentation.

            
            </pre>
            </remarks>
        </member>
        <member name="M:Palladio.Performance.PerformanceCalculator.IPerformanceCalculator.CalculatePerformance(Palladio.FiniteStateMachines.IFiniteStateMachine)">
            <summary>
            Calculates the performance of a service effect automaton.
            </summary>
            <param name="fsm">Service effect automaton.</param>
            <returns>A <c>RandomVariable</c> containing the result of the calculation.</returns>
        </member>
        <member name="F:Palladio.Performance.Calculator.Calculator.epsilon">
            <summary>
            Precision for the calculation of the loop.
            </summary>
        </member>
        <member name="F:Palladio.Performance.Calculator.Calculator.frequencyDomain">
            <summary>
            True := calculation in frequency domain, False := calculation in time domain
            </summary>
        </member>
        <member name="M:Palladio.Performance.Calculator.Calculator.#ctor(System.Double,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="epsilon">Precision for the calculation of the loop.</param>
            <param name="frequencyDomain">true: Calculation in frequency domain. false: Calclation in time domain.</param>
        </member>
        <member name="M:Palladio.Performance.Calculator.Calculator.CalculatePerformance(Palladio.FiniteStateMachines.IFiniteStateMachine)">
            <summary>
            This method takes a service effect automaton as input and calculates the time consumption of the
            service.
            /// </summary>
            <param name="fsm">A Service effect automaton with QMLAttributes or RandomVariables for each transition
            and each time consuming state.</param>
            <returns>A RandomVariable that contains the time consumption of the specified service.</returns>
        </member>
        <member name="T:Palladio.Performance.Calculator.CalculatorFactory">
            <summary>
            Zusammenfassung f√ºr CalculatorFactory.
            </summary>
            <remarks>
            <pre>
            Version history:
            
            $Log$
            Revision 1.1  2005/08/12 07:59:20  helgeh
            Initial impot after refactoring.

            Math:
            - Added DiscretePDFunction.
            - Added Fast Fourier Transformation and FourierFunction.
            - Changed operations of DiscreteFunction. The operations are independent of the sampling rate. For a probability density  function the sum of function values is a value in [0,1].
            - Added to interface IDiscreteFunction: Sum,ExpandDomainPo2, Crop, NumberOfNullValues, AdjustSamplingRate,  FunctionWithNValues, ToFile, ValueAt, DismissValuesSmalerThanN, ValueOf, MaximumDataValue
            - Altered MEthods: ExpandDomain, Scale, GetScaled, Convolution, Add

            FSMTransformer:
            - Method SEFFValidity added.
            - The Method FSMWithIntermediateState now returns a FSM, where all time consumption is contained by the input symbols of the  transitions.

            WebserverSeffFactory:
            - All service effect automaton are now IFiniteStateMachines. No use of the PAlladio.ComponentModel.

            WebserverAnalyser:
            - Data class for configuration added.
            - ConfigReader added.

            RegExASTVisitor:
            - There are now two visitors. One for the calculation in time domain and one for the calculation in frequency domain.

            RegularExpressions:
            - No changes.

            XmlSeffParser:
            - Data class for configuration added.
            - ConfigReader added.

            PerformanceCalculator:
            - Added interface IPerformanceCalculator. Added CalculatorFactory.

            Unit Tests added.
            Updated documentation.

            
            </pre>
            </remarks>
        </member>
        <member name="M:Palladio.Performance.Calculator.CalculatorFactory.CalculatorTimeDomain(System.Double)">
            <summary>
            Returns a new <c>IPerformanceCalculator</c> for the time domain.
            </summary>
            <param name="epsilon">Precision of the loop calculation.</param>
            <returns><c>IPerformanceCalculator</c> for the time domain.</returns>
        </member>
        <member name="M:Palladio.Performance.Calculator.CalculatorFactory.CalculatorFrequencyDomain(System.Double)">
            <summary>
            Returns a new <c>IPerformanceCalculator</c> for the frequency domain.
            </summary>
            <param name="epsilon">Precision of the loop calculation.</param>
            <returns><c>IPerformanceCalculator</c> for the frequency domain.</returns>
        </member>
    </members>
</doc>
