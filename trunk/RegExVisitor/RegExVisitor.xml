<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RegExASTVisitor</name>
    </assembly>
    <members>
        <member name="T:Palladio.Performance.RegExVisitor.Visitor.AbstractRegExASTVisitor">
            <summary>
            Abstract class for RegExASTVisitor.
            </summary>
            <remarks>
            <pre>
            Version history:
            
            $Log$
            Revision 1.1  2005/08/12 07:59:20  helgeh
            Initial impot after refactoring.

            Math:
            - Added DiscretePDFunction.
            - Added Fast Fourier Transformation and FourierFunction.
            - Changed operations of DiscreteFunction. The operations are independent of the sampling rate. For a probability density  function the sum of function values is a value in [0,1].
            - Added to interface IDiscreteFunction: Sum,ExpandDomainPo2, Crop, NumberOfNullValues, AdjustSamplingRate,  FunctionWithNValues, ToFile, ValueAt, DismissValuesSmalerThanN, ValueOf, MaximumDataValue
            - Altered MEthods: ExpandDomain, Scale, GetScaled, Convolution, Add

            FSMTransformer:
            - Method SEFFValidity added.
            - The Method FSMWithIntermediateState now returns a FSM, where all time consumption is contained by the input symbols of the  transitions.

            WebserverSeffFactory:
            - All service effect automaton are now IFiniteStateMachines. No use of the PAlladio.ComponentModel.

            WebserverAnalyser:
            - Data class for configuration added.
            - ConfigReader added.

            RegExASTVisitor:
            - There are now two visitors. One for the calculation in time domain and one for the calculation in frequency domain.

            RegularExpressions:
            - No changes.

            XmlSeffParser:
            - Data class for configuration added.
            - ConfigReader added.

            PerformanceCalculator:
            - Added interface IPerformanceCalculator. Added CalculatorFactory.

            Unit Tests added.
            Updated documentation.

            
            </pre>
            </remarks>
        </member>
        <member name="T:Palladio.Performance.RegExVisitor.IRegExASTVisitor">
            <summary>
            Interface for regular expression abstract syntax tree visitor.
            </summary>
            <remarks>
            <pre>
            Version history:
            
            $Log$
            Revision 1.1  2005/08/12 07:59:20  helgeh
            Initial impot after refactoring.

            Math:
            - Added DiscretePDFunction.
            - Added Fast Fourier Transformation and FourierFunction.
            - Changed operations of DiscreteFunction. The operations are independent of the sampling rate. For a probability density  function the sum of function values is a value in [0,1].
            - Added to interface IDiscreteFunction: Sum,ExpandDomainPo2, Crop, NumberOfNullValues, AdjustSamplingRate,  FunctionWithNValues, ToFile, ValueAt, DismissValuesSmalerThanN, ValueOf, MaximumDataValue
            - Altered MEthods: ExpandDomain, Scale, GetScaled, Convolution, Add

            FSMTransformer:
            - Method SEFFValidity added.
            - The Method FSMWithIntermediateState now returns a FSM, where all time consumption is contained by the input symbols of the  transitions.

            WebserverSeffFactory:
            - All service effect automaton are now IFiniteStateMachines. No use of the PAlladio.ComponentModel.

            WebserverAnalyser:
            - Data class for configuration added.
            - ConfigReader added.

            RegExASTVisitor:
            - There are now two visitors. One for the calculation in time domain and one for the calculation in frequency domain.

            RegularExpressions:
            - No changes.

            XmlSeffParser:
            - Data class for configuration added.
            - ConfigReader added.

            PerformanceCalculator:
            - Added interface IPerformanceCalculator. Added CalculatorFactory.

            Unit Tests added.
            Updated documentation.

            
            </pre>
            </remarks>
        </member>
        <member name="M:Palladio.Performance.RegExVisitor.IRegExASTVisitor.VisitIAlternative(Palladio.RegularExpressions.IAlternative)">
            <summary>
            Computes the weighted sum of the two alternatives.
            </summary>
            <param name="alternative"></param>
        </member>
        <member name="M:Palladio.Performance.RegExVisitor.IRegExASTVisitor.VisitISequence(Palladio.RegularExpressions.ISequence)">
            <summary>
            Computes the convolution of the predecessor und the successor of the sequence.
            </summary>
            <param name="sequence"></param>
        </member>
        <member name="M:Palladio.Performance.RegExVisitor.IRegExASTVisitor.VisitISymbol(Palladio.RegularExpressions.ISymbol)">
            <summary>
            Nothing has to be done when a Symbol is visited. A Symbol must have a RandomVariable.
            </summary>
            <param name="symbol"></param>
        </member>
        <member name="M:Palladio.Performance.RegExVisitor.IRegExASTVisitor.VisitILoop(Palladio.RegularExpressions.ILoop)">
            <summary>
             Calculates the loop limit. 
            </summary>
            <param name="loop"></param>
        </member>
        <member name="P:Palladio.Performance.RegExVisitor.IRegExASTVisitor.Random">
            <summary>
            The <c>RandomVariable</c> contains the result of the calculation after the visitor was started.
            </summary>
        </member>
        <member name="F:Palladio.Performance.RegExVisitor.Visitor.AbstractRegExASTVisitor.rand">
            <summary>
            The result of the calculation.
            </summary>
        </member>
        <member name="F:Palladio.Performance.RegExVisitor.Visitor.AbstractRegExASTVisitor.epsilon">
            <summary>
            Precision for calculating the loop limit.
            </summary>
        </member>
        <member name="M:Palladio.Performance.RegExVisitor.Visitor.AbstractRegExASTVisitor.#ctor(System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="epsilon">Precision for calculating the loop limit.</param>
        </member>
        <member name="M:Palladio.Performance.RegExVisitor.Visitor.AbstractRegExASTVisitor.ValidateLoopProbability(System.Double)">
            <summary>
            The probability of reiterating the loop must be a value in [0,1[. IF the probability is out of range,
            an exception is thrown.
            </summary>
            <param name="probability">Probability of reiterating the loop.</param>
        </member>
        <member name="M:Palladio.Performance.RegExVisitor.Visitor.AbstractRegExASTVisitor.DetermineMaxTime(Palladio.RegularExpressions.IRegEx)">
            <summary>
            Determines the maximum execution time of the resulting function. This is needed for dimension
            of the data vector before the fourier transformation.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.RegExVisitor.Visitor.AbstractRegExASTVisitor.DetermineNumberOfIterationsForLoop(System.Double)">
            <summary>
            For a given loop probability and an epsilon the function returns the number of loop
            iterations, so the total probability of the loop is 1-epsilon.
            </summary>
            <param name="loopProbability">Probability of entering the loop.</param>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.RegExVisitor.Visitor.AbstractRegExASTVisitor.VisitObject(System.Object)">
            <summary>
            The default function which is called if no "VisitTYPE" method is found
            by the reflection API
            </summary>
            <param name="o">The object calling the unknown visitor function</param>
        </member>
        <member name="M:Palladio.Performance.RegExVisitor.Visitor.AbstractRegExASTVisitor.VisitIAlternative(Palladio.RegularExpressions.IAlternative)">
            <summary>
            Computes the weighted sum of the two alternatives.
            </summary>
            <param name="alternative"></param>
        </member>
        <member name="M:Palladio.Performance.RegExVisitor.Visitor.AbstractRegExASTVisitor.VisitISequence(Palladio.RegularExpressions.ISequence)">
            <summary>
            Computes the convolution of the predecessor und the successor of the sequence.
            </summary>
            <param name="sequence"></param>
        </member>
        <member name="M:Palladio.Performance.RegExVisitor.Visitor.AbstractRegExASTVisitor.VisitISymbol(Palladio.RegularExpressions.ISymbol)">
            <summary>
            Nothing has to be done when a Symbol is visited. A Symbol must have a RandomVariable.
            </summary>
            <param name="symbol"></param>
        </member>
        <member name="M:Palladio.Performance.RegExVisitor.Visitor.AbstractRegExASTVisitor.VisitILoop(Palladio.RegularExpressions.ILoop)">
            <summary>
             Calculates the loop limit. 
            </summary>
            <param name="loop"></param>
        </member>
        <member name="P:Palladio.Performance.RegExVisitor.Visitor.AbstractRegExASTVisitor.Random">
            <summary>
            The result of the calculation.
            </summary>
        </member>
        <member name="P:Palladio.Performance.RegExVisitor.Visitor.AbstractRegExASTVisitor.Epsilon">
            <summary>
            Precision for calculating the loop limit.
            </summary>
        </member>
        <member name="T:Palladio.Performance.RegExVisitor.Visitor.RegExASTVisitorDetermineProbabilitiesAndMaxValue">
            <summary>
            Visits each node of the abstract syntax tree of a regular expression 
            and determines the probability for each expression. Also the maximum x-value of the result
            is calculated 
            
            Therefore, serveral requirements must be fullfilled:
             - each input symbol must contain a RandomVariable attribute.
             - each input symbol must contain a ProbabilityAttribute
            </summary>
            <remarks>
            <pre>
            Version history:
            
            $Log$
            Revision 1.1  2005/08/12 07:59:20  helgeh
            Initial impot after refactoring.

            Math:
            - Added DiscretePDFunction.
            - Added Fast Fourier Transformation and FourierFunction.
            - Changed operations of DiscreteFunction. The operations are independent of the sampling rate. For a probability density  function the sum of function values is a value in [0,1].
            - Added to interface IDiscreteFunction: Sum,ExpandDomainPo2, Crop, NumberOfNullValues, AdjustSamplingRate,  FunctionWithNValues, ToFile, ValueAt, DismissValuesSmalerThanN, ValueOf, MaximumDataValue
            - Altered MEthods: ExpandDomain, Scale, GetScaled, Convolution, Add

            FSMTransformer:
            - Method SEFFValidity added.
            - The Method FSMWithIntermediateState now returns a FSM, where all time consumption is contained by the input symbols of the  transitions.

            WebserverSeffFactory:
            - All service effect automaton are now IFiniteStateMachines. No use of the PAlladio.ComponentModel.

            WebserverAnalyser:
            - Data class for configuration added.
            - ConfigReader added.

            RegExASTVisitor:
            - There are now two visitors. One for the calculation in time domain and one for the calculation in frequency domain.

            RegularExpressions:
            - No changes.

            XmlSeffParser:
            - Data class for configuration added.
            - ConfigReader added.

            PerformanceCalculator:
            - Added interface IPerformanceCalculator. Added CalculatorFactory.

            Unit Tests added.
            Updated documentation.

            
            </pre>
            </remarks>
        </member>
        <member name="M:Palladio.Performance.RegExVisitor.Visitor.RegExASTVisitorDetermineProbabilitiesAndMaxValue.#ctor(Palladio.RegularExpressions.IRegEx,System.Double)">
            <summary>
            Constructor that also starts the visitor.
            </summary>
            <param name="node">Regular expression.</param>
            <param name="epsilon">Precision of the loop calculation.</param>
        </member>
        <member name="P:Palladio.Performance.RegExVisitor.Visitor.RegExASTVisitorDetermineProbabilitiesAndMaxValue.MaxTime">
            <summary>
            Maximum execution time of the result of the calculation.
            </summary>
        </member>
        <member name="P:Palladio.Performance.RegExVisitor.Visitor.RegExASTVisitorDetermineProbabilitiesAndMaxValue.Samplingrate">
            <summary>
            Samplingrate of the result of the calculation.
            </summary>
        </member>
        <member name="T:Palladio.Performance.RegExVisitor.Visitor.RegExASTVisitorFrequencyDomain">
            <summary>
            Visits each node of the abstract syntax tree of a regular expression 
            and determines its total time consumption. The calculation of the performance
            uses the fourier transformation. 
            
            Therefore, serveral requirements must be fullfilled:
             - each input symbol must contain a RandomVariable attribute.
             - each input symbol must contain a ProbabilityAttribute
            </summary>
            <remarks>
            <pre>
            Version history:
            
            $Log$
            Revision 1.1  2005/08/12 07:59:20  helgeh
            Initial impot after refactoring.

            Math:
            - Added DiscretePDFunction.
            - Added Fast Fourier Transformation and FourierFunction.
            - Changed operations of DiscreteFunction. The operations are independent of the sampling rate. For a probability density  function the sum of function values is a value in [0,1].
            - Added to interface IDiscreteFunction: Sum,ExpandDomainPo2, Crop, NumberOfNullValues, AdjustSamplingRate,  FunctionWithNValues, ToFile, ValueAt, DismissValuesSmalerThanN, ValueOf, MaximumDataValue
            - Altered MEthods: ExpandDomain, Scale, GetScaled, Convolution, Add

            FSMTransformer:
            - Method SEFFValidity added.
            - The Method FSMWithIntermediateState now returns a FSM, where all time consumption is contained by the input symbols of the  transitions.

            WebserverSeffFactory:
            - All service effect automaton are now IFiniteStateMachines. No use of the PAlladio.ComponentModel.

            WebserverAnalyser:
            - Data class for configuration added.
            - ConfigReader added.

            RegExASTVisitor:
            - There are now two visitors. One for the calculation in time domain and one for the calculation in frequency domain.

            RegularExpressions:
            - No changes.

            XmlSeffParser:
            - Data class for configuration added.
            - ConfigReader added.

            PerformanceCalculator:
            - Added interface IPerformanceCalculator. Added CalculatorFactory.

            Unit Tests added.
            Updated documentation.

            
            </pre>
            </remarks>
        </member>
        <member name="F:Palladio.Performance.RegExVisitor.Visitor.RegExASTVisitorFrequencyDomain.samplingrate">
            <summary>
            Sampling Rate of the result.
            </summary>
        </member>
        <member name="F:Palladio.Performance.RegExVisitor.Visitor.RegExASTVisitorFrequencyDomain.maxTime">
            <summary>
            Maximum x-value of the result.
            </summary>
        </member>
        <member name="M:Palladio.Performance.RegExVisitor.Visitor.RegExASTVisitorFrequencyDomain.#ctor(Palladio.RegularExpressions.IRegEx,System.Double)">
            <summary>
            Constructor that also starts the visitor. The Visitor walks through the AST in depth-first order.
            </summary>
            <param name="node">The root node of the abstract syntax tree.</param>
            <param name="epsilon">Precision of the loop calculation.</param>
        </member>
        <member name="M:Palladio.Performance.RegExVisitor.Visitor.RegExASTVisitorFrequencyDomain.GetPDF(Palladio.RegularExpressions.IRegEx)">
            <summary>
            Returns the calculated result.
            </summary>
            <param name="node">Regular expression  of the service.</param>
            <returns>Result of the calculation.</returns>
        </member>
        <member name="M:Palladio.Performance.RegExVisitor.Visitor.RegExASTVisitorFrequencyDomain.DetermineMaxTimeAndSamplingRate(Palladio.RegularExpressions.IRegEx,System.Double)">
            <summary>
            Starts a visitor, that computes the probabilities of each expression and determines the maximum
            x-value of the resulting function.
            </summary>
            <param name="node">Regular expression.</param>
            <param name="epsilon">Precision of the loop calculation.</param>
        </member>
        <member name="M:Palladio.Performance.RegExVisitor.Visitor.RegExASTVisitorFrequencyDomain.VisitIAlternative(Palladio.RegularExpressions.IAlternative)">
            <summary>
            Computes the weighted sum of the two alternatives.
            </summary>
            <param name="alternative"></param>
        </member>
        <member name="M:Palladio.Performance.RegExVisitor.Visitor.RegExASTVisitorFrequencyDomain.VisitISequence(Palladio.RegularExpressions.ISequence)">
            <summary>
            Computes the convolution of the predecessor und the successor of the sequence.
            </summary>
            <param name="sequence"></param>
        </member>
        <member name="M:Palladio.Performance.RegExVisitor.Visitor.RegExASTVisitorFrequencyDomain.VisitILoop(Palladio.RegularExpressions.ILoop)">
            <summary>
             Calculates the loop limit. 
            </summary>
            <param name="loop"></param>
        </member>
        <member name="M:Palladio.Performance.RegExVisitor.Visitor.RegExASTVisitorFrequencyDomain.VisitISymbol(Palladio.RegularExpressions.ISymbol)">
            <summary>
            Nothing has to be done when a Symbol is visited. A Symbol must have a RandomVariable.
            </summary>
            <param name="symbol"></param>
        </member>
        <member name="M:Palladio.Performance.RegExVisitor.Visitor.RegExASTVisitorFrequencyDomain.AddFourierAttributes(Palladio.RegularExpressions.IRegEx)">
            <summary>
            Creates Fourier Attributes for each symbol.
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:Palladio.Performance.RegExVisitor.Visitor.RegExASTVisitorTimeDomain">
            <summary>
            Visits each node of the abstract syntax tree of a regular expression 
            and determins its total time consumption. The Computation of the time consumption uses
            vector-multiplication for all computations.
            
            Therefore, serveral requirements must be fullfilled:
             - each input symbol must contain a RandomVariable attribute.
             - each input symbol must contain a ProbabilityAttribute
            </summary>
            <remarks>
            <pre>
            Version history:
            
            $Log$
            Revision 1.1  2005/08/12 07:59:20  helgeh
            Initial impot after refactoring.

            Math:
            - Added DiscretePDFunction.
            - Added Fast Fourier Transformation and FourierFunction.
            - Changed operations of DiscreteFunction. The operations are independent of the sampling rate. For a probability density  function the sum of function values is a value in [0,1].
            - Added to interface IDiscreteFunction: Sum,ExpandDomainPo2, Crop, NumberOfNullValues, AdjustSamplingRate,  FunctionWithNValues, ToFile, ValueAt, DismissValuesSmalerThanN, ValueOf, MaximumDataValue
            - Altered MEthods: ExpandDomain, Scale, GetScaled, Convolution, Add

            FSMTransformer:
            - Method SEFFValidity added.
            - The Method FSMWithIntermediateState now returns a FSM, where all time consumption is contained by the input symbols of the  transitions.

            WebserverSeffFactory:
            - All service effect automaton are now IFiniteStateMachines. No use of the PAlladio.ComponentModel.

            WebserverAnalyser:
            - Data class for configuration added.
            - ConfigReader added.

            RegExASTVisitor:
            - There are now two visitors. One for the calculation in time domain and one for the calculation in frequency domain.

            RegularExpressions:
            - No changes.

            XmlSeffParser:
            - Data class for configuration added.
            - ConfigReader added.

            PerformanceCalculator:
            - Added interface IPerformanceCalculator. Added CalculatorFactory.

            Unit Tests added.
            Updated documentation.

            
            </pre>
            </remarks>
        </member>
        <member name="M:Palladio.Performance.RegExVisitor.Visitor.RegExASTVisitorTimeDomain.#ctor(Palladio.RegularExpressions.IRegEx,System.Double)">
            <summary>
            Constructor that also starts the visitor. The Visitor walks through the AST in depth-first order.
            </summary>
            <param name="node">The root node of the abstract syntax tree.</param>
            <param name="epsilon">A threashhold for the computation of the loop.</param>
        </member>
        <member name="M:Palladio.Performance.RegExVisitor.Visitor.RegExASTVisitorTimeDomain.VisitIAlternative(Palladio.RegularExpressions.IAlternative)">
            <summary>
            Computes the weighted sum of the two alternatives.
            </summary>
            <param name="alternative"></param>
        </member>
        <member name="M:Palladio.Performance.RegExVisitor.Visitor.RegExASTVisitorTimeDomain.VisitISequence(Palladio.RegularExpressions.ISequence)">
            <summary>
            Computes the convolution of the predecessor und the successor of the sequence.
            If the two functions do not have the same sampling rate, the samplingrate must be adjusted.
            </summary>
            <param name="sequence"></param>
        </member>
        <member name="M:Palladio.Performance.RegExVisitor.Visitor.RegExASTVisitorTimeDomain.VisitILoop(Palladio.RegularExpressions.ILoop)">
            <summary>
             Calculates the loop limit. The calculation will abort if the the maximum value of the i-th 
             iteration is smaller than <c>epsilon</c>.
            </summary>
            <param name="loop"></param>
        </member>
        <member name="M:Palladio.Performance.RegExVisitor.Visitor.RegExASTVisitorTimeDomain.VisitISymbol(Palladio.RegularExpressions.ISymbol)">
            <summary>
            Nothing has to be done when a Symbol is visited. A Symbol must have a RandomVariable.
            </summary>
            <param name="symbol"></param>
        </member>
        <member name="M:Palladio.Performance.RegExVisitor.Visitor.RegExASTVisitorTimeDomain.AdjustSamplingRate(Palladio.Performance.Attributes.RandomVariable@,Palladio.Performance.Attributes.RandomVariable@)">
            <summary>
            Adjusts the samplingrate of both <c>RandomVariable</c> to the same value.
            </summary>
            <param name="r1"></param>
            <param name="r2"></param>
        </member>
    </members>
</doc>
