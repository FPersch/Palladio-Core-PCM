<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="FSMHelper.cs" Inherits="FSMHelper" Debug="False" Description="Template description here." %>
<%@ Import Namespace="System.Diagnostics" %>
<%@ Import Namespace="System.Collections" %>
<%@ Property Name="cBase" Type="System.Int64" Category="Options" Description="" %>
<%@ Property Name="ComponentName" Type="System.String" Category="Options" Description="" %>
<%@ Property Name="InterfaceName" Type="System.String" Category="Options" Description="" %>
<%@ Property Name="RequiredServices" Type="CodeSmith.CustomProperties.StringCollection" Category="Options" Description="Interface.Service" %>
<%@ Property Name="Transitions" Type="CodeSmith.CustomProperties.StringCollection" Category="Options" Description="Interface.Service" %>
<%@ Property Name="SpecifiedServiceName" Type="System.String" Category="Options" Description="" %>
<%@ Property Name="NumOfStates" Type="System.Int64" Category="Options" Description="" %>
<%@ Property Name="StartState" Type="System.Int64" Category="Options" Description="" %>
<%@ Property Name="FinalStates" Type="System.String" Category="Options" Description="" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>


		public static IServiceEffectSpecification Create<%=ComponentName%>_<%=SpecifiedServiceName%>()
		{
			IInterfaceModel iModel_<%=InterfaceName%> = WebserverModelFactory.Create<%=InterfaceName%>();
			IService <%=SpecifiedServiceName%> = CreateService(iModel_<%=InterfaceName%>, "<%=SpecifiedServiceName%>");
			IServiceEffectSpecification seff = ComponentFactory.CreateServiceEffectSpecification();
			Hashtable methodHash = new Hashtable();
<%
	ArrayList reqInterfaces = new ArrayList();
	foreach (string s in RequiredServices){
		ServiceInfo sInfo = GetServiceInfo(s);
		if (!reqInterfaces.Contains(sInfo.InterfaceName))
		{
%>
			IInterfaceModel <%=sInfo.IModelName%> = WebserverModelFactory.Create<%=sInfo.InterfaceName%>();
<%
			reqInterfaces.Add(sInfo.InterfaceName);
		}
%>
			IService <%=sInfo.ServiceName%> = CreateService(<%=sInfo.IModelName%>, "<%=sInfo.MethodName%>");
			methodHash["<%=sInfo.ServiceName%>"] = <%=sInfo.ServiceName%>;
			seff.SignatureList.AddSignatures(<%=sInfo.ServiceName%>);
<%
	}
%>
				

			IFSMServiceEffect fsmSeff = ComponentFactory.CreateFSMProtocolServiceEffect();
			IEditableFiniteStateMachine fsm = fsmSeff.EditFSM;
			IState[] states = CreateStates(<%=CreateStateList(cBase, NumOfStates)%>);
			fsm.AddStates(states);
			fsm.StartState = GetState(<%=cBase + StartState%>);
			fsm.FinalStates = new IState[] {<%=CreateFinalStateList(cBase, FinalStates)%>};
<%
	long cnt = cBase + NumOfStates + 1;
	foreach (string transition in Transitions)
	{
		if (transition.Trim().Equals(""))
			continue;
		TransitionInfo tInfo = ParseTransitionDefString(transition);
		ServiceInfo sInfo = GetServiceInfo(tInfo.MethodName);
%>
			AddTransition(<%=cnt%>, ref fsm, <%=cBase + tInfo.SourceID%>, <%=cBase + tInfo.DestID%>, methodHash["<%=sInfo.ServiceName%>"]);
<%
		cnt++;
	}
%>

			seff.AddAuxiliarySpecification(fsmSeff);
			return seff;
		}
