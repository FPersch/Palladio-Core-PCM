using System;
using System.IO;
using Altova.Types;

namespace Palladio.Webserver.ConfigReader
{
	/// <summary>
	/// XMLConfigReader.
	/// </summary>
	/// 
	/// 
	/// <remarks>
	/// <pre>
	/// Version history:
	///
	/// $Log$
	/// Revision 1.6  2004/10/23 11:55:08  kelsaka
	/// added some parts of the building process
	///
	/// Revision 1.5  2004/10/22 16:19:56  kelsaka
	/// even more interface changes; configuration-alternative on loading the webserver
	///
	/// Revision 1.4  2004/10/22 09:37:19  kelsaka
	/// minor changes
	///
	/// Revision 1.3  2004/10/22 08:39:23  kelsaka
	/// added html-test-documents, xml-types generated by xmlspy, and first xml-config-files
	///
	/// Revision 1.2  2004/10/21 15:02:02  kelsaka
	/// added some more interfaces
	///
	/// Revision 1.1  2004/10/17 17:25:09  kelsaka
	/// initial cvs-version; added general project structure
	///
	///
	/// </pre>
	/// </remarks>
	public class XMLConfigReader : IConfigReader
	{




		public XMLConfigReader()
		{

		}

		public void ReadConfiguration (string path)
		{
			

			//
			// TODO:
			//   Insert your code here...
			//
			// Example code to create and save a structure:
			//   webserverXMLDoc doc = new webserverXMLDoc();
			//   portsType root = new portsType();
			//   ...
			//   doc.SetRootElementName("", "ports");
			//   doc.SetSchemaLocation("webserverXML.xsd"); // optional
			//   doc.Save("webserverXML1.xml", root);
			//
			// Example code to load and save a structure:
			//   webserverXMLDoc doc = new webserverXMLDoc();
			//   portsType root = new portsType(doc.Load("webserverXML1.xml"));
			//   ...
			//   doc.Save("webserverXML1.xml", root);


			throw new NotImplementedException ();
		}


		public object GetValue (string key)
		{
			throw new NotImplementedException ();
		}





	}
}
