<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Palladio.Performance.Math</name>
    </assembly>
    <members>
        <member name="T:Palladio.Performance.Math.Functions.Discrete.DiscreteFactory">
            <summary>
            Class for creating discrete functions. The functions created have the same properties as the
            DiscreteFactory-Class.
            </summary>
            <remarks>
            <pre>
            Version history:
            
            $Log$
            Revision 1.2  2005/10/11 22:05:14  helgeh
            - Added NUnit project and NDoc documentation.
            - fixed a bug in AdjustSamplingRate

            Revision 1.1  2005/08/12 07:59:19  helgeh
            Initial impot after refactoring.
            
            Math:
            - Added DiscretePDFunction.
            - Added Fast Fourier Transformation and FourierFunction.
            - Changed operations of DiscreteFunction. The operations are independent of the sampling rate. For a probability density  function the sum of function values is a value in [0,1].
            - Added to interface IDiscreteFunction: Sum,ExpandDomainPo2, Crop, NumberOfNullValues, AdjustSamplingRate,  FunctionWithNValues, ToFile, ValueAt, DismissValuesSmalerThanN, ValueOf, MaximumDataValue
            - Altered MEthods: ExpandDomain, Scale, GetScaled, Convolution, Add
            
            FSMTransformer:
            - Method SEFFValidity added.
            - The Method FSMWithIntermediateState now returns a FSM, where all time consumption is contained by the input symbols of the  transitions.
            
            WebserverSeffFactory:
            - All service effect automaton are now IFiniteStateMachines. No use of the PAlladio.ComponentModel.
            
            WebserverAnalyser:
            - Data class for configuration added.
            - ConfigReader added.
            
            RegExASTVisitor:
            - There are now two visitors. One for the calculation in time domain and one for the calculation in frequency domain.
            
            RegularExpressions:
            - No changes.
            
            XmlSeffParser:
            - Data class for configuration added.
            - ConfigReader added.
            
            PerformanceCalculator:
            - Added interface IPerformanceCalculator. Added CalculatorFactory.
            
            Unit Tests added.
            Updated documentation.
            
            
            </pre>
            </remarks>
        </member>
        <member name="T:Palladio.Performance.Math.IDiscreteFunctionFactory">
            <summary>
            Abstract Factory pattern.
            </summary>
            <remarks>
            <pre>
            Version history:
            
            $Log$
            Revision 1.2  2005/10/11 22:05:14  helgeh
            - Added NUnit project and NDoc documentation.
            - fixed a bug in AdjustSamplingRate

            Revision 1.1  2005/08/12 07:59:19  helgeh
            Initial impot after refactoring.
            
            Math:
            - Added DiscretePDFunction.
            - Added Fast Fourier Transformation and FourierFunction.
            - Changed operations of DiscreteFunction. The operations are independent of the sampling rate. For a probability density  function the sum of function values is a value in [0,1].
            - Added to interface IDiscreteFunction: Sum,ExpandDomainPo2, Crop, NumberOfNullValues, AdjustSamplingRate,  FunctionWithNValues, ToFile, ValueAt, DismissValuesSmalerThanN, ValueOf, MaximumDataValue
            - Altered MEthods: ExpandDomain, Scale, GetScaled, Convolution, Add
            
            FSMTransformer:
            - Method SEFFValidity added.
            - The Method FSMWithIntermediateState now returns a FSM, where all time consumption is contained by the input symbols of the  transitions.
            
            WebserverSeffFactory:
            - All service effect automaton are now IFiniteStateMachines. No use of the PAlladio.ComponentModel.
            
            WebserverAnalyser:
            - Data class for configuration added.
            - ConfigReader added.
            
            RegExASTVisitor:
            - There are now two visitors. One for the calculation in time domain and one for the calculation in frequency domain.
            
            RegularExpressions:
            - No changes.
            
            XmlSeffParser:
            - Data class for configuration added.
            - ConfigReader added.
            
            PerformanceCalculator:
            - Added interface IPerformanceCalculator. Added CalculatorFactory.
            
            Unit Tests added.
            Updated documentation.
            
            
            </pre>
            </remarks>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunctionFactory.ExponentialDistribution(System.Double)">
            <summary>
            Returns the exponential distribution with a rate.
            This is: f(x) = (1 / rate) * exp(- x (1 / rate)).
            </summary>
            <param name="rate">Rate of the exponential distribution.</param>
            <returns>Exponential distribution with the specified rate and properties of the 
            FunctionFactory.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunctionFactory.ExponentialDistribution(System.Int32,System.Int32,System.Double,System.Int32)">
            <summary>
            Returns the exponential distribution with a rate.
            This is: f(x) = (1 / rate) * exp(- x (1 / rate)).
            </summary>
            <param name="xMin">Minimum value of the function.</param>
            <param name="samplingrate">Samplingrate of the function.</param>
            <param name="rate">Rate of the exponential distribution.</param>
            <param name="length">Number of function values.</param>
            <returns>Exponential distribution with the specified rate and properties of the 
            FunctionFactory.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunctionFactory.ConstantFunction(System.Double)">
            <summary>
            Returns the constant  function.
            This is: f(x) = c.
            </summary>
            <param name="c">Constant value for the function.</param>
            <returns>Function with a constant value.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunctionFactory.DiracDeltaFunction">
            <summary>
            Returns the dirac function which is the neutral element
            of the convolution. This is:
            f(0) = infty and f(x) = 0 for x != 0.
            </summary>
            <returns>Dirac function of length one. Function value is 1.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunctionFactory.Copy(Palladio.Performance.Math.IDiscreteFunction)">
            <summary>
            Creates a copy of a IDiscreteFunction with the parameters given by the factory.
            </summary>
            <param name="df">IDiscreteFunction wich shall be copied.</param>
            <returns>Copied IDiscreteFunction.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunctionFactory.DiscreteValueFunction(System.Int64,System.Int64,System.Double[])">
            <summary>
            Creates a new function using a set of values. The sampling rate
            for those values must correspond to the sampling rate of the factory.
            Also the start value must be a multiple of the sampling rate.
            </summary>
            <param name="xStart">Position on the x axis for the first value in the value array.</param>
            <param name="values">Ordered set of values describing the function.</param>
            <param name="samplingrate">Distance of two values.</param>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunctionFactory.DiscreteValuePDFunction(System.Int64,System.Int64,System.Double[])">
            <summary>
            Creates a new probability density function using a set of values. 
            </summary>
            <param name="xStart">Position on the x axis for the first value in the value array.</param>
            <param name="samplingrate">Distance of two values.</param>
            <param name="values">Ordered set of values describing the function.</param>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunctionFactory.DiscreteValuePDFunction(Palladio.Performance.Math.IFourierFunction)">
            <summary>
            Creates a new probability density function. The fourier function is transformed back to the
            time domain.
            </summary>
            <param name="ff">Function in frequency domain.</param>
            <returns>Function in time domain.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunctionFactory.DiscreteValuePDFunction(Palladio.Performance.Math.IDiscreteFunction)">
            <summary>
            Creates a new probability density function using a set of values. 
            </summary>
            <param name="df">Function which contains the probability density function.</param>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunctionFactory.DiscreteFourierFunction(MathNet.Numerics.Complex[],System.Int64)">
            <summary>
            Creates a new fourier function. It is assumed, that the complex values are the fourier 
            transformed values.
            </summary>
            <param name="values">Already fourier transformed values</param>
            <param name="samplingrate">Sampling rate of the function.</param>
            <returns>Function in frequency domain.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunctionFactory.DiscreteFourierFunction(Palladio.Performance.Math.IDiscreteFunction)">
            <summary>
            Creates a new fourier function. 
            </summary>
            <param name="dg">Function in time domain.</param>
            <returns>Function in frequency domain.</returns>
        </member>
        <member name="P:Palladio.Performance.Math.IDiscreteFunctionFactory.SamplingRate">
            <summary>
            Precision for the created functions.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.IDiscreteFunctionFactory.XMax">
            <summary>
            Default maximum for the greatest x value that has an associated function value.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.IDiscreteFunctionFactory.XMin">
            <summary>
            Default minimum for the smallest x value that has an associated function value.
            </summary>
        </member>
        <member name="F:Palladio.Performance.Math.Functions.Discrete.DiscreteFactory.samplingRate">
            <summary>
            Distance between two values.
            </summary>
        </member>
        <member name="F:Palladio.Performance.Math.Functions.Discrete.DiscreteFactory.xmax">
            <summary>
            Maximum x-value
            </summary>
        </member>
        <member name="F:Palladio.Performance.Math.Functions.Discrete.DiscreteFactory.xmin">
            <summary>
            Minimum x-value.
            </summary>
        </member>
        <member name="F:Palladio.Performance.Math.Functions.Discrete.DiscreteFactory.width">
            <summary>
            xmax - xmin.
            </summary>
        </member>
        <member name="F:Palladio.Performance.Math.Functions.Discrete.DiscreteFactory.defaultLength">
            <summary>
            Default length of the value array: width / precision
            </summary>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFactory.#ctor">
            <summary>
            Creates discrete function factory with default values. The sampling rate is set to 1, xmin is set to 0
            and xmax is set to 10.
            </summary>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFactory.DiscreteValueFunction(System.Int64,System.Int64,System.Double[])">
            <summary>
            Creates a new function using a set of values. The sampling rate
            for those values must correspond to the sampling rate of the factory.
            Also the start value must be a multiple of the sampling rate.
            All values other than the given ones are set to zero.
            </summary>
            <param name="xStart">Position on the x axis for the first value in the value array.</param>
            <param name="samplingRate">Distance between two values.</param>
            <param name="values">Ordered set of values describing the function.</param>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFactory.DiscreteValuePDFunction(System.Int64,System.Int64,System.Double[])">
            <summary>
            Creates a new probability density function using a set of values. 
            </summary>
            <param name="xStart">Position on the x axis for the first value in the value array.</param>
            <param name="samplingRate">Distance of two values.</param>
            <param name="values">Ordered set of values describing the function.</param>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFactory.DiscreteValuePDFunction(Palladio.Performance.Math.IFourierFunction)">
            <summary>
            Creates a new probability density function. The fourier function is transformed back to the
            time domain.
            </summary>
            <param name="ff">Function in frequency domain.</param>
            <returns>Function in time domain.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFactory.DiscreteValuePDFunction(Palladio.Performance.Math.IDiscreteFunction)">
            <summary>
            Creates a new probability density function using a set of values. 
            </summary>
            <param name="df"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFactory.DiscreteFourierFunction(MathNet.Numerics.Complex[],System.Int64)">
            <summary>
            Creates a new fourier function. It is assumed, that the complex values are the fourier 
            transformed values.
            </summary>
            <param name="values">Already fourier transformed values</param>
            <param name="samplingrate">Sampling rate of the function.</param>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFactory.DiscreteFourierFunction(Palladio.Performance.Math.IDiscreteFunction)">
            <summary>
            Creates a new fourier function. The values are transformed to the frquency space.
            </summary>
            <param name="function">Values in time space.</param>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFactory.ExponentialDistribution(System.Double)">
            <summary>
            Returns the exponential distribution with a rate.
            This is: f(x) = (1 / rate) * exp(- x (1 / rate)).
            </summary>
            <param name="rate">Rate of the exponential distribution.</param>
            <returns>Exponential distribution with the specified rate and properties of the 
            FunctionFactory.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFactory.ExponentialDistribution(System.Int32,System.Int32,System.Double,System.Int32)">
            <summary>
            Returns the exponential distribution with a rate.
            This is: f(x) = (1 / rate) * exp(- x (1 / rate)).
            </summary>
            <param name="xMin">Minimum value of the function.</param>
            <param name="samplingrate">Samplingrate of the function.</param>
            <param name="rate">Rate of the exponential distribution.</param>
            <param name="length">Number of function values.</param>
            <returns>Exponential distribution with the specified rate and properties of the 
            FunctionFactory.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFactory.ConstantFunction(System.Double)">
            <summary>
            Returns the constant  function.
            This is: f(x) = c.
            </summary>
            <param name="c">Constant value for the function.</param>
            <returns>Function with a constant value.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFactory.DiracDeltaFunction">
            <summary>
            Returns the dirac function which is the neutral element
            of the convolution. This is:
            f(0) = infty and f(x) = 0 for x != 0.
            </summary>
            <returns>Dirac function of length one. Function value is 1.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFactory.Copy(Palladio.Performance.Math.IDiscreteFunction)">
            <summary>
            Creates a copy of a IDiscreteFunction with the parameters given by the factory.
            </summary>
            <param name="df">IDiscreteFunction wich shall be copied.</param>
            <returns>Copied IDiscreteFunction.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFactory.SetValues">
            <summary>
            Sets the class variables.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.Functions.Discrete.DiscreteFactory.SamplingRate">
            <summary>
            Precision for the created functions.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.Functions.Discrete.DiscreteFactory.XMax">
            <summary>
            Default maximum for the greatest x value that has an associated function value.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.Functions.Discrete.DiscreteFactory.XMin">
            <summary>
            Default minimum for the smallest x value that has an associated function value.
            </summary>
        </member>
        <member name="T:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction">
            <summary>
            A Class for discrete value function. The discrete values are hold in an arrayand are
            equidistant with the  distance between two values in the array is given
            by the sampling rate. So the x-value for index data[i] is xmin + i*samplingrate.
            </summary>
            <remarks>
            <pre>
            Version history:
            
            $Log$
            Revision 1.2  2005/10/11 22:05:14  helgeh
            - Added NUnit project and NDoc documentation.
            - fixed a bug in AdjustSamplingRate

            Revision 1.1  2005/08/12 07:59:19  helgeh
            Initial impot after refactoring.
            
            Math:
            - Added DiscretePDFunction.
            - Added Fast Fourier Transformation and FourierFunction.
            - Changed operations of DiscreteFunction. The operations are independent of the sampling rate. For a probability density  function the sum of function values is a value in [0,1].
            - Added to interface IDiscreteFunction: Sum,ExpandDomainPo2, Crop, NumberOfNullValues, AdjustSamplingRate,  FunctionWithNValues, ToFile, ValueAt, DismissValuesSmalerThanN, ValueOf, MaximumDataValue
            - Altered MEthods: ExpandDomain, Scale, GetScaled, Convolution, Add
            
            FSMTransformer:
            - Method SEFFValidity added.
            - The Method FSMWithIntermediateState now returns a FSM, where all time consumption is contained by the input symbols of the  transitions.
            
            WebserverSeffFactory:
            - All service effect automaton are now IFiniteStateMachines. No use of the PAlladio.ComponentModel.
            
            WebserverAnalyser:
            - Data class for configuration added.
            - ConfigReader added.
            
            RegExASTVisitor:
            - There are now two visitors. One for the calculation in time domain and one for the calculation in frequency domain.
            
            RegularExpressions:
            - No changes.
            
            XmlSeffParser:
            - Data class for configuration added.
            - ConfigReader added.
            
            PerformanceCalculator:
            - Added interface IPerformanceCalculator. Added CalculatorFactory.
            
            Unit Tests added.
            Updated documentation.
            
            
            </pre>
            </remarks>
        </member>
        <member name="T:Palladio.Performance.Math.IDiscreteFunction">
            <summary>
            A Class for discrete value function. The discrete values are hold in an arrayand are
            equidistant with the  distance between two values in the array is given
            by the sampling rate. So the x-value for index data[i] is xmin + i*samplingrate.
            </summary>
            <remarks>
            <pre>
            Version history:
            
            $Log$
            Revision 1.2  2005/10/11 22:05:14  helgeh
            - Added NUnit project and NDoc documentation.
            - fixed a bug in AdjustSamplingRate

            Revision 1.1  2005/08/12 07:59:19  helgeh
            Initial impot after refactoring.
            
            Math:
            - Added DiscretePDFunction.
            - Added Fast Fourier Transformation and FourierFunction.
            - Changed operations of DiscreteFunction. The operations are independent of the sampling rate. For a probability density  function the sum of function values is a value in [0,1].
            - Added to interface IDiscreteFunction: Sum,ExpandDomainPo2, Crop, NumberOfNullValues, AdjustSamplingRate,  FunctionWithNValues, ToFile, ValueAt, DismissValuesSmalerThanN, ValueOf, MaximumDataValue
            - Altered MEthods: ExpandDomain, Scale, GetScaled, Convolution, Add
            
            FSMTransformer:
            - Method SEFFValidity added.
            - The Method FSMWithIntermediateState now returns a FSM, where all time consumption is contained by the input symbols of the  transitions.
            
            WebserverSeffFactory:
            - All service effect automaton are now IFiniteStateMachines. No use of the PAlladio.ComponentModel.
            
            WebserverAnalyser:
            - Data class for configuration added.
            - ConfigReader added.
            
            RegExASTVisitor:
            - There are now two visitors. One for the calculation in time domain and one for the calculation in frequency domain.
            
            RegularExpressions:
            - No changes.
            
            XmlSeffParser:
            - Data class for configuration added.
            - ConfigReader added.
            
            PerformanceCalculator:
            - Added interface IPerformanceCalculator. Added CalculatorFactory.
            
            Unit Tests added.
            Updated documentation.
            
            
            </pre>
            </remarks>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunction.Sum">
            <summary>
            Returns the sum of all function values.
            </summary>
            <returns>Sum of all function values.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunction.ExpandDomain(System.Int64)">
            <summary>
            Expands the domain of the function to the new value of xMax. If xMax is not a multiple of the
            samplingrate, it is set to the next multiple.
            All new values are set to zero.
            </summary>
            <param name="xMax">New maximum x-value. If the value is smaller than the old xMax 
            a ApplicationException is thrown.</param>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunction.ExpandDomain(System.Int64,System.Int64)">
            <summary>
            Expands the domain of the function to the new value of xMax and xMin. If xMax or xMin are not a multiple
            of the samplingrate, they are set to the next multiple. 
            All new values are set to zero.
            </summary>
            <param name="xMax">New maximum x-value. If the value is smaller than the old xMax 
            an ApplicationException is thrown.</param>
            <param name="xMin">New minimum x-value. If the value is bigger than the old xMin
             anApplicationException is thrown.</param>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunction.ExpandDomainPo2(System.Int64,System.Int64)">
            <summary>
            Expands the domain of the function to the new value of xMax and xMin. If xMax or xMin are not a multiple
            of the samplingrate, they are set to the next multiple. 
            Furthermore additional values are added, so the size of the function becomes a power of 2.
            All new values are set to zero.
            </summary>
            <param name="xMax">New maximum x-value. If the value is smaller than the old xMax 
            an ApplicationException is thrown.</param>
            <param name="xMin">New minimum x-value. If the value is bigger than the old xMin
             anApplicationException is thrown.</param>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunction.Crop">
            <summary>
            Removes 0-Values at beginning and end.
            </summary>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunction.NumberOfNullValues">
            <summary>
            Return the number of values which probability is 0.
            </summary>
            <returns>Number of values.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunction.AdjustSamplingRate(System.Int64)">
            <summary>
            Adjust the function to a new SamplingRate. 
            The new Sampling rate must be a multiple or a divisor of the old one. The size of the data
            array is adjusted hold the values.
            </summary>
            <param name="newSR">The new sampling rate.</param>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunction.FunctionWithNValues(System.Int32)">
            <summary>
            Create a Function with n values. The sampling rate will be adjusted
            </summary>
            <param name="numberOfValues">Number of values for the new function.</param>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunction.ToFile(System.IO.StreamWriter)">
            <summary>
            Writes the function to a file.
            </summary>
            <param name="sw"></param>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunction.ValueAt(System.Int32)">
            <summary>
            Returns the time value (value on the x-axis) of the specified index.
            </summary>
            <param name="index">Index of the data array.</param>
            <returns>Time for which the data array contains the probability or -1 if index is out of range.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunction.DismissValuesSmalerThanN(System.Double)">
            <summary>
            Eleminates values at beginning and end of the data array whose probability is smaller than n.
            </summary>
            <param name="n">Threashhold probability. Smaller values shall be eleminated.</param>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunction.Scale(System.Double)">
            <summary>
            Scales this function by a.
            </summary>
            <param name="a">Scaling parameter.</param>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunction.GetScaled(System.Double)">
            <summary>
            Returns a copy of the function scaled by the given factor.
            </summary>
            <param name="factor">Factor with which the data is scaled.</param>
            <returns>Copy of the function scaled by factor.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunction.Convolution(Palladio.Performance.Math.IDiscreteFunction)">
            <summary>
            Convolution for discrete Functions. The two functions must have the same SamplingRate. 
            </summary>
            <param name="dg">IDiscreteFunction dg for the convolution with the object.</param>
            <returns>A new Function containing the result of the operation.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunction.Add(Palladio.Performance.Math.IDiscreteFunction)">
            <summary>
            Adds a function to this.
            </summary>
            <param name="dg">Function to be added.</param>
            <returns>A new Function containing the result of the operation.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunction.AddScaled(System.Double,Palladio.Performance.Math.IDiscreteFunction)">
            <summary>
            Adds a function g scaled by a to the existing function.
            </summary>
            <param name="a">Sclaing factor.</param>
            <param name="g">Function to add.</param>
            <returns>A new Function containing the result of the operation.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunction.Multiply(Palladio.Performance.Math.IDiscreteFunction)">
            <summary>
            Multiplies this function with another function.
            </summary>
            <param name="dg">Function to be multiplied with this.</param>
            <returns>A new Function containing the result of the operation.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunction.ValueOf(System.Int64)">
            <summary>
            Returns the function value of x, that is f(x). 
            </summary>
            <param name="x">Value on the x-axis.</param>
            <returns>f(x) if x is a multiple of the samplingrate. Otherwise an ApplicationException
             is thown.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunction.MaximunDataValue">
            <summary>
            Returns the maximum value of the function.
            </summary>
            <returns>The maximum value of the function.</returns>
        </member>
        <member name="P:Palladio.Performance.Math.IDiscreteFunction.Data">
            <summary>
            Values defining the function.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.IDiscreteFunction.Count">
            <summary>
            Number of discrete function values.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.IDiscreteFunction.SamplingRate">
            <summary>
            Precision of the  disctrete function x[n]. Distance between
            two discrete values on the x-axis.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.IDiscreteFunction.XMin">
            <summary>
            First x value for which this function is defined.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.IDiscreteFunction.XMax">
            <summary>
            Last x value for which this function is defined.
            </summary>
        </member>
        <member name="F:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction.data">
            <summary>
            Array of function values.
            </summary>
        </member>
        <member name="F:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction.samplingRate">
            <summary>
            Distance between two function values.
            </summary>
        </member>
        <member name="F:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction.xmin">
            <summary>
            Minimal x value for which a value is listed in the value array.
            </summary>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction.NextPowerOfTwo(System.Int64)">
            <summary>
            Returns a number that is the nearest power of two to <c>min</c>min.
            </summary>
            <param name="min">Lower bound of the returned number.</param>
            <returns>A number that is the nearest power of two to <c>min</c>.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction.#ctor(System.Double[],System.Int64,System.Int64)">
            <summary>
            Creates new function.
            </summary>
            <param name="values">Array of function values.</param>
            <param name="samplingRate">x distance of the values in the array.</param>
            <param name="xmin">x value for the first entry in the value array.</param>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction.#ctor(Palladio.Performance.Math.Functions.Discrete.DiscreteFunction)">
            <summary>
            Copy Constructor.
            </summary>
            <param name="df"></param>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction.DismissValuesSmalerThanN(System.Double)">
            <summary>
            Values that are smaller than n are set to zero.
            </summary>
            <param name="n"></param>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction.ExpandDomain(System.Int64)">
            <summary>
            Expands the domain of the function to the new value of xMax. If xMax is not a multiple of the
            samplingrate, it is set to the next multiple.
            All new values are set to zero.
            </summary>
            <param name="xMax">New maximum x-value. If the value is smaller than the old xMax 
            a ApplicationException is thrown.</param>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction.ExpandDomain(System.Int64,System.Int64)">
            <summary>
            Expands the domain of the function to the new value of xMax and xMin. If xMax or xMin are not a multiple
            of the samplingrate, they are set to the next multiple. 
            All new values are set to zero.
            </summary>
            <param name="xMax">New maximum x-value. If the value is smaller than the old xMax 
            an ApplicationException is thrown.</param>
            <param name="xMin">New minimum x-value. If the value is bigger than the old xMin
             anApplicationException is thrown.</param>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction.ExpandDomainPo2(System.Int64,System.Int64)">
            <summary>
            Expands the domain of the function to the new value of xMax and xMin. If xMax or xMin are not a multiple
            of the samplingrate, they are set to the next multiple. 
            Furthermore additional values are added, so the size of the function becomes a power of 2.
            All new values are set to zero.
            </summary>
            <param name="xMax">New maximum x-value. If the value is smaller than the old xMax 
            an ApplicationException is thrown.</param>
            <param name="xMin">New minimum x-value. If the value is bigger than the old xMin
             an ApplicationException is thrown.</param>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction.NumberOfNullValues">
            <summary>
            Returns the number of values which probability is 0.
            </summary>
            <returns>Number of values which probability is 0.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction.Sum">
            <summary>
            Returns the sum of all function values.
            </summary>
            <returns>Sum of all function values.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction.ValueAt(System.Int32)">
            <summary>
            Returns the x-value of data[index].
            </summary>
            <param name="index">Index for which the x-value is requested.</param>
            <returns>X-value or -1 if index is out of range.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction.Scale(System.Double)">
            <summary>
            Scales the data of the function with the given factor.
            </summary>
            <param name="factor">Factor with which the data is scaled.</param>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction.GetScaled(System.Double)">
            <summary>
            Returns a copy of the function scaled by the given factor.
            </summary>
            <param name="factor">Factor with which the data is scaled.</param>
            <returns>Copy of the function scaled by factor.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction.Convolution(Palladio.Performance.Math.IDiscreteFunction)">
            <summary>
            Convolution for discrete Functions. The two functions must have the same SamplingRate. 
            </summary>
            <param name="dg">IDiscreteFunction dg for the convolution with the object.</param>
            <returns>A new function with the result of the convolution.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction.AddScaled(System.Double,Palladio.Performance.Math.IDiscreteFunction)">
            <summary>
            Adds a function g scaled by a to the existing function.
            </summary>
            <param name="a">Sclaing factor.</param>
            <param name="g">Function to add.</param>
            <returns>A new Function containing the result of the operation.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction.Add(Palladio.Performance.Math.IDiscreteFunction)">
            <summary>
            Adds a function to this.
            </summary>
            <param name="dg">Function to be added.</param>
            <returns>A new Function containing the result of the operation.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction.Crop">
            <summary>
            Removes 0-Values at beginning and end.
            </summary>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction.Multiply(Palladio.Performance.Math.IDiscreteFunction)">
            <summary>
            Multiplies this function with another function.
            </summary>
            <param name="dg">Function to be multiplied with this.</param>
            <returns>A new Function containing the result of the operation.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction.ValueOf(System.Int64)">
            <summary>
            Returns the function value of x, that is f(x). 
            </summary>
            <param name="x">Value on the x-axis. x must be a multiple of the sampling rate.</param>
            <returns>f(x) if x is a multiple of the samplingrate. Otherwise an ApplicationException
             is thown.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction.MaximunDataValue">
            <summary>
            Returns the maximum value of the function.
            </summary>
            <returns>The maximum value of the function.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction.AdjustSamplingRate(System.Int64)">
            <summary>
            Adjust the function to a new SamplingRate. 
            The new Sampling rate must be a multiple or a divisor of the old one. The size of the data
            array is adjusted to hold the values.
            </summary>
            <param name="newSR">The new sampling rate.</param>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction.AdjustSamplingRateDown(System.Int64)">
            <summary>
            Adjust the function to a new SamplingRate. 
            The new SamplingRate must be a divisor of the old one.
            </summary>
            <param name="newSR">New sampling rate.</param>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction.AdjustSamplingRateUp(System.Int64)">
            <summary>
            Adjust the function to a new SamplingRate. 
            The new SamplingRate must be multiple of the old one.
            </summary>
            <param name="newSR">The new sampling rate.</param>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction.GetNextMultipleBiggerThanN(System.Int64,System.Int64)">
            <summary>
            Returns the next multiple of <c>val</c> which is bigger or equal to n.
            </summary>
            <param name="val">Value for which the multiple is requested.</param>
            <param name="n">Minimum value for the multiple.</param>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction.FunctionWithNValues(System.Int32)">
            <summary>
            Create a Function with n values. The sampling rate will be adjusted
            </summary>
            <param name="n">Number of values for the new function.</param>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction.ToFile(System.IO.StreamWriter)">
            <summary>
            Writes the function to a stream.
            </summary>
            <param name="sw"></param>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction.Clone">
            <summary>
            Returns a flat copy of the function.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction.Equals(System.Object)">
            <summary>
            Compares both objects of equality. The values of the function are compared to the 
            10th decimal place.
            </summary>
            <param name="obj">Object which is compared with this.</param>
            <returns>True if both objects are equal. False else.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction.GetHashCode">
            <summary>
            Hash function.
            </summary>
            <returns>Hashcode</returns>
        </member>
        <member name="P:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction.XMin">
            <summary>
            Smallest x value for which an entry in the value array exists.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction.XMax">
            <summary>
            Greatest x value for which an entry in the value array exists.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction.Data">
            <summary>
            Array of discrete function values.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction.Count">
            <summary>
            Number of function values.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.Functions.Discrete.DiscreteFunction.SamplingRate">
            <summary>
            Distance (x-axis) between two entries in the value array. If the samplingrate is set to a new 
            value, the function values will be adjusted.
            </summary>
        </member>
        <member name="T:Palladio.Performance.Math.Functions.Discrete.DiscretePDFunction">
            <summary>
            A Class for a probability density function of a random variable.
            </summary>
            <remarks>
            <pre>
            Version history:
            
            $Log$
            Revision 1.2  2005/10/11 22:05:14  helgeh
            - Added NUnit project and NDoc documentation.
            - fixed a bug in AdjustSamplingRate

            Revision 1.1  2005/08/12 07:59:19  helgeh
            Initial impot after refactoring.
            
            Math:
            - Added DiscretePDFunction.
            - Added Fast Fourier Transformation and FourierFunction.
            - Changed operations of DiscreteFunction. The operations are independent of the sampling rate. For a probability density  function the sum of function values is a value in [0,1].
            - Added to interface IDiscreteFunction: Sum,ExpandDomainPo2, Crop, NumberOfNullValues, AdjustSamplingRate,  FunctionWithNValues, ToFile, ValueAt, DismissValuesSmalerThanN, ValueOf, MaximumDataValue
            - Altered MEthods: ExpandDomain, Scale, GetScaled, Convolution, Add
            
            FSMTransformer:
            - Method SEFFValidity added.
            - The Method FSMWithIntermediateState now returns a FSM, where all time consumption is contained by the input symbols of the  transitions.
            
            WebserverSeffFactory:
            - All service effect automaton are now IFiniteStateMachines. No use of the PAlladio.ComponentModel.
            
            WebserverAnalyser:
            - Data class for configuration added.
            - ConfigReader added.
            
            RegExASTVisitor:
            - There are now two visitors. One for the calculation in time domain and one for the calculation in frequency domain.
            
            RegularExpressions:
            - No changes.
            
            XmlSeffParser:
            - Data class for configuration added.
            - ConfigReader added.
            
            PerformanceCalculator:
            - Added interface IPerformanceCalculator. Added CalculatorFactory.
            
            Unit Tests added.
            Updated documentation.
            
            
            </pre>
            </remarks>
        </member>
        <member name="T:Palladio.Performance.Math.IDiscretePDFunction">
            <summary>
            
            </summary>
            <remarks>
            <pre>
            Version history:
            
            $Log$
            Revision 1.2  2005/10/11 22:05:14  helgeh
            - Added NUnit project and NDoc documentation.
            - fixed a bug in AdjustSamplingRate

            Revision 1.1  2005/08/12 07:59:19  helgeh
            Initial impot after refactoring.
            
            Math:
            - Added DiscretePDFunction.
            - Added Fast Fourier Transformation and FourierFunction.
            - Changed operations of DiscreteFunction. The operations are independent of the sampling rate. For a probability density  function the sum of function values is a value in [0,1].
            - Added to interface IDiscreteFunction: Sum,ExpandDomainPo2, Crop, NumberOfNullValues, AdjustSamplingRate,  FunctionWithNValues, ToFile, ValueAt, DismissValuesSmalerThanN, ValueOf, MaximumDataValue
            - Altered MEthods: ExpandDomain, Scale, GetScaled, Convolution, Add
            
            FSMTransformer:
            - Method SEFFValidity added.
            - The Method FSMWithIntermediateState now returns a FSM, where all time consumption is contained by the input symbols of the  transitions.
            
            WebserverSeffFactory:
            - All service effect automaton are now IFiniteStateMachines. No use of the PAlladio.ComponentModel.
            
            WebserverAnalyser:
            - Data class for configuration added.
            - ConfigReader added.
            
            RegExASTVisitor:
            - There are now two visitors. One for the calculation in time domain and one for the calculation in frequency domain.
            
            RegularExpressions:
            - No changes.
            
            XmlSeffParser:
            - Data class for configuration added.
            - ConfigReader added.
            
            PerformanceCalculator:
            - Added interface IPerformanceCalculator. Added CalculatorFactory.
            
            Unit Tests added.
            Updated documentation.
            
            
            </pre>
            </remarks>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscretePDFunction.SaveAsXml(System.String)">
            <summary>
            Stores the probability density function as file.
            </summary>
            <param name="file">Name of the file.</param>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscretePDFunction.FunctionWithNValues(System.Int32)">
            <summary>
            Create a Function with n values. The sampling rate will be adjusted
            </summary>
            <param name="numberOfValues">Number of values for the new function.</param>
        </member>
        <member name="P:Palladio.Performance.Math.IDiscretePDFunction.TotalProb">
            <summary>
            Sum of all probabilities.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.IDiscretePDFunction.Median">
            <summary>
            Median og the function.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.IDiscretePDFunction.UpperQuartil">
            <summary>
            Returns the time value of the upper quartil(75%).
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.IDiscretePDFunction.Expectancy">
            <summary>
            Expectancy of the function.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.IDiscretePDFunction.Variance">
            <summary>
            Variance of the function. This is s^2=(1/n) * sum_1_n[(x_i - expectancy)^2]
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.IDiscretePDFunction.Deviation">
            <summary>
            Deviation of a function. This is SQRT(Variance)
            </summary>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscretePDFunction.FunctionWithNValues(System.Int32)">
            <summary>
            Create a Function with n values. The sampling rate will be adjusted
            </summary>
            <param name="n">Number of values for the new function.</param>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscretePDFunction.GetTimeValueOfPercentile(System.Double)">
            <summary>
            Returns the time value of a percentile.
            </summary>
            <param name="percentile">Percentile for which the time value is requested.</param>
            <returns>Time value of a percentile.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscretePDFunction.SaveAsXml(System.String)">
            <summary>
            Stores the probability density function as file.
            </summary>
            <param name="file">Name of the file.</param>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscretePDFunction.#ctor(System.Double[],System.Int64,System.Int64)">
            <summary>
            Creates new function.
            </summary>
            <param name="values">Array of function values.</param>
            <param name="samplingRate">x distance of the values in the array.</param>
            <param name="xmin">x value for the first entry in the value array.</param>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscretePDFunction.#ctor(Palladio.Performance.Math.Functions.Discrete.DiscreteFunction)">
            <summary>
            Copy Constructor.
            </summary>
            <param name="df"></param>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.Discrete.DiscretePDFunction.Clone">
            <summary>
            Returns a copy of the DiscretePDFunction.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Palladio.Performance.Math.Functions.Discrete.DiscretePDFunction.Median">
            <summary>
            Median of the function.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.Functions.Discrete.DiscretePDFunction.UpperQuartil">
            <summary>
            Returns the time value of the upper quartil(75%).
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.Functions.Discrete.DiscretePDFunction.Expectancy">
            <summary>
            Expectancy of the function.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.Functions.Discrete.DiscretePDFunction.Variance">
            <summary>
            Variance of the function. This is s^2=(1/n) * sum_1_n[(x_i - expectancy)^2]
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.Functions.Discrete.DiscretePDFunction.Deviation">
            <summary>
            Deviation of a function. This is SQRT(Variance)
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.Functions.Discrete.DiscretePDFunction.TotalProb">
            <summary>
            Total probability of all values.
            </summary>
        </member>
        <member name="T:Palladio.Performance.Math.Fourier.DiscreteFourierFunction">
            <summary>
            Class for a fourier transformed discrete function.
            </summary>
            <remarks>
            <pre>
            Version history:
            
            $Log$
            Revision 1.2  2005/10/11 22:05:14  helgeh
            - Added NUnit project and NDoc documentation.
            - fixed a bug in AdjustSamplingRate

            Revision 1.1  2005/08/12 07:59:19  helgeh
            Initial impot after refactoring.
            
            Math:
            - Added DiscretePDFunction.
            - Added Fast Fourier Transformation and FourierFunction.
            - Changed operations of DiscreteFunction. The operations are independent of the sampling rate. For a probability density  function the sum of function values is a value in [0,1].
            - Added to interface IDiscreteFunction: Sum,ExpandDomainPo2, Crop, NumberOfNullValues, AdjustSamplingRate,  FunctionWithNValues, ToFile, ValueAt, DismissValuesSmalerThanN, ValueOf, MaximumDataValue
            - Altered MEthods: ExpandDomain, Scale, GetScaled, Convolution, Add
            
            FSMTransformer:
            - Method SEFFValidity added.
            - The Method FSMWithIntermediateState now returns a FSM, where all time consumption is contained by the input symbols of the  transitions.
            
            WebserverSeffFactory:
            - All service effect automaton are now IFiniteStateMachines. No use of the PAlladio.ComponentModel.
            
            WebserverAnalyser:
            - Data class for configuration added.
            - ConfigReader added.
            
            RegExASTVisitor:
            - There are now two visitors. One for the calculation in time domain and one for the calculation in frequency domain.
            
            RegularExpressions:
            - No changes.
            
            XmlSeffParser:
            - Data class for configuration added.
            - ConfigReader added.
            
            PerformanceCalculator:
            - Added interface IPerformanceCalculator. Added CalculatorFactory.
            
            Unit Tests added.
            Updated documentation.
            
            
            </pre>
            </remarks>
        </member>
        <member name="T:Palladio.Performance.Math.IFourierFunction">
            <summary>
            Fourier transformed function. The data array must be big enough to hold all calculated values, because
            a redimensioning of the array in frequency space leads to wrong results.
            </summary>
            <remarks>
            <pre>
            Version history:
            
            $Log$
            Revision 1.2  2005/10/11 22:05:14  helgeh
            - Added NUnit project and NDoc documentation.
            - fixed a bug in AdjustSamplingRate

            Revision 1.1  2005/08/12 07:59:19  helgeh
            Initial impot after refactoring.
            
            Math:
            - Added DiscretePDFunction.
            - Added Fast Fourier Transformation and FourierFunction.
            - Changed operations of DiscreteFunction. The operations are independent of the sampling rate. For a probability density  function the sum of function values is a value in [0,1].
            - Added to interface IDiscreteFunction: Sum,ExpandDomainPo2, Crop, NumberOfNullValues, AdjustSamplingRate,  FunctionWithNValues, ToFile, ValueAt, DismissValuesSmalerThanN, ValueOf, MaximumDataValue
            - Altered MEthods: ExpandDomain, Scale, GetScaled, Convolution, Add
            
            FSMTransformer:
            - Method SEFFValidity added.
            - The Method FSMWithIntermediateState now returns a FSM, where all time consumption is contained by the input symbols of the  transitions.
            
            WebserverSeffFactory:
            - All service effect automaton are now IFiniteStateMachines. No use of the PAlladio.ComponentModel.
            
            WebserverAnalyser:
            - Data class for configuration added.
            - ConfigReader added.
            
            RegExASTVisitor:
            - There are now two visitors. One for the calculation in time domain and one for the calculation in frequency domain.
            
            RegularExpressions:
            - No changes.
            
            XmlSeffParser:
            - Data class for configuration added.
            - ConfigReader added.
            
            PerformanceCalculator:
            - Added interface IPerformanceCalculator. Added CalculatorFactory.
            
            Unit Tests added.
            Updated documentation.
            
            
            </pre>
            </remarks>
        </member>
        <member name="M:Palladio.Performance.Math.IFourierFunction.Multiply(Palladio.Performance.Math.IFourierFunction)">
            <summary>
            Multiplication of each pair of elements. Both functions must have the same length.
            </summary>
            <param name="ff">IFourierFunction to be multiplied with this.</param>
            <returns>New IFourierFunction holding the result of the multiplication.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.IFourierFunction.Add(Palladio.Performance.Math.IFourierFunction)">
            <summary>
            Addition of each pair of elements. Both functions must have the same length.
            </summary>
            <param name="ff">IFourierFunction to be added with this.</param>
            <returns>New IFourierFunction holding the result of the addition.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.IFourierFunction.GetScaled(System.Double)">
            <summary>
            Returns a copy of the function sclaed by <c>factor</c>
            </summary>
            <param name="factor">Scaling factor.</param>
            <returns>New scaled IFourierFunction.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.IFourierFunction.ComputeLoopLimit(System.Double)">
            <summary>
            Computes the execution time of a loop. This is an approximation which depends on the size 
            of the data array.
            </summary>
            <param name="p">Probability of re-iterating through the loop.</param>
            <returns>The fourier function of the loop limit.</returns>
        </member>
        <member name="P:Palladio.Performance.Math.IFourierFunction.Data">
            <summary>
            Values defining the function.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.IFourierFunction.SamplingRate">
            <summary>
            Distance between two values.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.IFourierFunction.xMin">
            <summary>
            Minimum value on the x-axis.
            </summary>
        </member>
        <member name="M:Palladio.Performance.Math.Fourier.DiscreteFourierFunction.#ctor(MathNet.Numerics.Complex[],System.Int64)">
            <summary>
            Constructor. Creates a new discrete fourier function. The minimum value is set to 0.
            </summary>
            <param name="data">Fourier values for the function. The values must be already transformed.</param>
            <param name="samplingRate">Distance between two values.</param>
        </member>
        <member name="M:Palladio.Performance.Math.Fourier.DiscreteFourierFunction.#ctor(Palladio.Performance.Math.Fourier.DiscreteFourierFunction)">
            <summary>
            Copy constructor.
            </summary>
            <param name="dff"><c>DiscreteFourierFunction</c> which shall be copied.</param>
        </member>
        <member name="M:Palladio.Performance.Math.Fourier.DiscreteFourierFunction.Multiply(Palladio.Performance.Math.IFourierFunction)">
            <summary>
            Multiplication of each pair of elements. Both functions must have the same length.
            </summary>
            <param name="ff">IFourierFunction to be multiplied with this.</param>
            <returns>New IFourierFunction holding the result of the multiplication.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.Fourier.DiscreteFourierFunction.Add(Palladio.Performance.Math.IFourierFunction)">
            <summary>
            Addition of each pair of elements. Both functions must have the same length.
            </summary>
            <param name="ff">IFourierFunction to be added with this.</param>
            <returns>New IFourierFunction holding the result of the addition.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.Fourier.DiscreteFourierFunction.GetScaled(System.Double)">
            <summary>
            Returns a copy of the function sclaed by <c>factor</c>
            </summary>
            <param name="factor">Scaling factor.</param>
            <returns>New scaled IFourierFunction.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.Fourier.DiscreteFourierFunction.ComputeLoopLimit(System.Double)">
            <summary>
            Computes the execution time of a loop. This is an approximation which depends on the size 
            of the data array.
            </summary>
            <param name="p">Probability of re-iterating through the loop.</param>
            <returns>The fourier function of the loop limit.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.Fourier.DiscreteFourierFunction.Clone">
            <summary>
            Creates a copy of the object.
            </summary>
            <returns>A copy of the object.</returns>
        </member>
        <member name="P:Palladio.Performance.Math.Fourier.DiscreteFourierFunction.Sum">
            <summary>
            Sum of all function values.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.Fourier.DiscreteFourierFunction.Data">
            <summary>
            Fourier values.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.Fourier.DiscreteFourierFunction.SamplingRate">
            <summary>
            Distance between two values.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.Fourier.DiscreteFourierFunction.xMin">
            <summary>
            Minimum value on the x-axis.
            </summary>
        </member>
        <member name="T:Palladio.Performance.Math.Fourier.FastFourierTransformation">
            <summary>
            Class for the fast fourier transformation. For further information have a look
            into "Introduction to Algorithms" by Cormen et al.
            </summary>
            <remarks>
            <pre>
            Version history:
            
            $Log$
            Revision 1.2  2005/10/11 22:05:14  helgeh
            - Added NUnit project and NDoc documentation.
            - fixed a bug in AdjustSamplingRate

            Revision 1.1  2005/08/12 07:59:19  helgeh
            Initial impot after refactoring.
            
            Math:
            - Added DiscretePDFunction.
            - Added Fast Fourier Transformation and FourierFunction.
            - Changed operations of DiscreteFunction. The operations are independent of the sampling rate. For a probability density  function the sum of function values is a value in [0,1].
            - Added to interface IDiscreteFunction: Sum,ExpandDomainPo2, Crop, NumberOfNullValues, AdjustSamplingRate,  FunctionWithNValues, ToFile, ValueAt, DismissValuesSmalerThanN, ValueOf, MaximumDataValue
            - Altered MEthods: ExpandDomain, Scale, GetScaled, Convolution, Add
            
            FSMTransformer:
            - Method SEFFValidity added.
            - The Method FSMWithIntermediateState now returns a FSM, where all time consumption is contained by the input symbols of the  transitions.
            
            WebserverSeffFactory:
            - All service effect automaton are now IFiniteStateMachines. No use of the PAlladio.ComponentModel.
            
            WebserverAnalyser:
            - Data class for configuration added.
            - ConfigReader added.
            
            RegExASTVisitor:
            - There are now two visitors. One for the calculation in time domain and one for the calculation in frequency domain.
            
            RegularExpressions:
            - No changes.
            
            XmlSeffParser:
            - Data class for configuration added.
            - ConfigReader added.
            
            PerformanceCalculator:
            - Added interface IPerformanceCalculator. Added CalculatorFactory.
            
            Unit Tests added.
            Updated documentation.
            
            
            </pre>
            </remarks>
        </member>
        <member name="T:Palladio.Performance.Math.IFourierTransform">
            <summary>
            </summary>
            <remarks>
            <pre>
            Version history:
            
            $Log$
            Revision 1.2  2005/10/11 22:05:14  helgeh
            - Added NUnit project and NDoc documentation.
            - fixed a bug in AdjustSamplingRate

            Revision 1.1  2005/08/12 07:59:19  helgeh
            Initial impot after refactoring.
            
            Math:
            - Added DiscretePDFunction.
            - Added Fast Fourier Transformation and FourierFunction.
            - Changed operations of DiscreteFunction. The operations are independent of the sampling rate. For a probability density  function the sum of function values is a value in [0,1].
            - Added to interface IDiscreteFunction: Sum,ExpandDomainPo2, Crop, NumberOfNullValues, AdjustSamplingRate,  FunctionWithNValues, ToFile, ValueAt, DismissValuesSmalerThanN, ValueOf, MaximumDataValue
            - Altered MEthods: ExpandDomain, Scale, GetScaled, Convolution, Add
            
            FSMTransformer:
            - Method SEFFValidity added.
            - The Method FSMWithIntermediateState now returns a FSM, where all time consumption is contained by the input symbols of the  transitions.
            
            WebserverSeffFactory:
            - All service effect automaton are now IFiniteStateMachines. No use of the PAlladio.ComponentModel.
            
            WebserverAnalyser:
            - Data class for configuration added.
            - ConfigReader added.
            
            RegExASTVisitor:
            - There are now two visitors. One for the calculation in time domain and one for the calculation in frequency domain.
            
            RegularExpressions:
            - No changes.
            
            XmlSeffParser:
            - Data class for configuration added.
            - ConfigReader added.
            
            PerformanceCalculator:
            - Added interface IPerformanceCalculator. Added CalculatorFactory.
            
            Unit Tests added.
            Updated documentation.
            
            
            </pre>
            </remarks>
        </member>
        <member name="M:Palladio.Performance.Math.IFourierTransform.Forward(MathNet.Numerics.Complex[])">
            <summary>
            Transforms a set of complex values from the time space into
            the frequency space.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.IFourierTransform.ForwardFromReal(System.Double[])">
            <summary>
            Transforms a set of real values from the time space into 
            the (complex) frequency space.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.IFourierTransform.Backward(MathNet.Numerics.Complex[])">
            <summary>
            Transforms a set of complex values from the frequency 
            space to the time space.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.IFourierTransform.BackwardToReal(MathNet.Numerics.Complex[])">
            <summary>
            Transforms a set of complex values from the frequency 
            space to the time space and converts the result to real
            values by neglecting the imaginary part.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.Fourier.FastFourierTransformation.Forward(MathNet.Numerics.Complex[])">
            <summary>
            Fast fourier transformation forward.
            </summary>
            <param name="data">Function values in time space.</param>
            <returns>Function values in frequency space.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.Fourier.FastFourierTransformation.ForwardFromReal(System.Double[])">
            <summary>
            Fast fourier transformation forward.
            </summary>
            <param name="data">Function values in time space.</param>
            <returns>Function values in frequency space.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.Fourier.FastFourierTransformation.Backward(MathNet.Numerics.Complex[])">
            <summary>
            Fast fourier transformation backward.
            </summary>
            <param name="data">Function values in frequency space.</param>
            <returns>Function values in time space.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.Fourier.FastFourierTransformation.BackwardToReal(MathNet.Numerics.Complex[])">
            <summary>
            Fast fourier transformation backward.
            </summary>
            <param name="data">Function values in frequency space.</param>
            <returns>Function values in time space.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.Fourier.FastFourierTransformation.TransformRecursive(MathNet.Numerics.Complex[],System.Double)">
            <summary>
            Fourier transformation. 
            if direction is true -> forward
            if direction is false -> backward
            </summary>
            <param name="X">Values to be transformed.</param>
            <param name="direction">true -> forward, false -> backward</param>
            <returns>Transformed values.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.Fourier.FastFourierTransformation.PowerOf2(System.Int32)">
            <summary>
            Checks whter a number is a power of two.
            </summary>
            <param name="n">Number to be checked.</param>
            <returns></returns>
        </member>
        <member name="T:Palladio.Performance.Math.Fourier.SimpleFourierTransform">
            <summary>
            Class for the simple fourier transformation.
            </summary>
            <remarks>
            <pre>
            Version history:
            
            $Log$
            Revision 1.2  2005/10/11 22:05:14  helgeh
            - Added NUnit project and NDoc documentation.
            - fixed a bug in AdjustSamplingRate

            Revision 1.1  2005/08/12 07:59:19  helgeh
            Initial impot after refactoring.
            
            Math:
            - Added DiscretePDFunction.
            - Added Fast Fourier Transformation and FourierFunction.
            - Changed operations of DiscreteFunction. The operations are independent of the sampling rate. For a probability density  function the sum of function values is a value in [0,1].
            - Added to interface IDiscreteFunction: Sum,ExpandDomainPo2, Crop, NumberOfNullValues, AdjustSamplingRate,  FunctionWithNValues, ToFile, ValueAt, DismissValuesSmalerThanN, ValueOf, MaximumDataValue
            - Altered MEthods: ExpandDomain, Scale, GetScaled, Convolution, Add
            
            FSMTransformer:
            - Method SEFFValidity added.
            - The Method FSMWithIntermediateState now returns a FSM, where all time consumption is contained by the input symbols of the  transitions.
            
            WebserverSeffFactory:
            - All service effect automaton are now IFiniteStateMachines. No use of the PAlladio.ComponentModel.
            
            WebserverAnalyser:
            - Data class for configuration added.
            - ConfigReader added.
            
            RegExASTVisitor:
            - There are now two visitors. One for the calculation in time domain and one for the calculation in frequency domain.
            
            RegularExpressions:
            - No changes.
            
            XmlSeffParser:
            - Data class for configuration added.
            - ConfigReader added.
            
            PerformanceCalculator:
            - Added interface IPerformanceCalculator. Added CalculatorFactory.
            
            Unit Tests added.
            Updated documentation.
            
            
            </pre>
            </remarks>
        </member>
        <member name="M:Palladio.Performance.Math.Fourier.SimpleFourierTransform.Transform(MathNet.Numerics.Complex[],System.Double)">
            <summary>
            if direction is true -> forward
            if direction is false -> backward
            </summary>
            <param name="X"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="T:Palladio.Performance.Math.Test.DiscreteFunctionTest">
            <summary>
            Zusammenfassung für DiscreteFunctionTest.
            </summary>
        </member>
        <member name="T:Palladio.Performance.Math.Test.DiscretePDFunctionTest">
            <summary>
            Zusammenfassung für DiscreteFunctionTest.
            </summary>
        </member>
        <member name="T:Palladio.Performance.Math.Test.FourierTest">
            <summary>
            Zusammenfassung für FourierTest.
            </summary>
        </member>
        <member name="M:Palladio.Performance.Math.Test.FourierTest.FourierTransform">
            <summary>
            This tests, that the data array is not changed while silmy transform in the frequency domain
            and transform back to the time domain.
            </summary>
        </member>
        <member name="M:Palladio.Performance.Math.Test.FourierTest.FourierTransformException">
            <summary>
            This Test throws an ApplicationException, because the length of the data array is not
            a power of 2.
            </summary>
        </member>
        <member name="M:Palladio.Performance.Math.Test.FourierTest.FourierMultiplication">
            <summary>
            This tests, that the multiplication in den frquency domain is the same as the 
            convolution in the time domain. For this the data array must be big enough.
            </summary>
        </member>
        <member name="M:Palladio.Performance.Math.Test.FourierTest.FourierAddition">
            <summary>
            This tests, that the multiplication in den frquency domain is the same as the 
            convolution in the time domain. For this the data array must be big enough.
            </summary>
        </member>
        <member name="T:Palladio.Performance.Math.IFunction">
            <summary>
            
            </summary>
            <remarks>
            <pre>
            Version history:
            
            $Log$
            Revision 1.2  2005/10/11 22:05:14  helgeh
            - Added NUnit project and NDoc documentation.
            - fixed a bug in AdjustSamplingRate

            Revision 1.1  2005/08/12 07:59:19  helgeh
            Initial impot after refactoring.
            
            Math:
            - Added DiscretePDFunction.
            - Added Fast Fourier Transformation and FourierFunction.
            - Changed operations of DiscreteFunction. The operations are independent of the sampling rate. For a probability density  function the sum of function values is a value in [0,1].
            - Added to interface IDiscreteFunction: Sum,ExpandDomainPo2, Crop, NumberOfNullValues, AdjustSamplingRate,  FunctionWithNValues, ToFile, ValueAt, DismissValuesSmalerThanN, ValueOf, MaximumDataValue
            - Altered MEthods: ExpandDomain, Scale, GetScaled, Convolution, Add
            
            FSMTransformer:
            - Method SEFFValidity added.
            - The Method FSMWithIntermediateState now returns a FSM, where all time consumption is contained by the input symbols of the  transitions.
            
            WebserverSeffFactory:
            - All service effect automaton are now IFiniteStateMachines. No use of the PAlladio.ComponentModel.
            
            WebserverAnalyser:
            - Data class for configuration added.
            - ConfigReader added.
            
            RegExASTVisitor:
            - There are now two visitors. One for the calculation in time domain and one for the calculation in frequency domain.
            
            RegularExpressions:
            - No changes.
            
            XmlSeffParser:
            - Data class for configuration added.
            - ConfigReader added.
            
            PerformanceCalculator:
            - Added interface IPerformanceCalculator. Added CalculatorFactory.
            
            Unit Tests added.
            Updated documentation.
            
            
            </pre>
            </remarks>
        </member>
        <member name="M:Palladio.Performance.Math.IFunction.Scale(System.Double)">
            <summary>
            Scales this function by a.
            </summary>
            <param name="a"></param>
        </member>
        <member name="M:Palladio.Performance.Math.IFunction.GetScaled(System.Double)">
            <summary>
            Returns this function scaled by a.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.IFunction.Convolution(MathNet.Numerics.IRealFunction)">
            <summary>
            Creates the convolution of this function with
            a Function.
            </summary>
        </member>
        <member name="M:Palladio.Performance.Math.IFunction.Add(MathNet.Numerics.IRealFunction)">
            <summary>
            Adds aFunction to this function.
            </summary>
        </member>
        <member name="M:Palladio.Performance.Math.IFunction.AddScaled(System.Double,MathNet.Numerics.IRealFunction)">
            <summary>
            Adds a * g(x) to this function.
            </summary>
        </member>
        <member name="M:Palladio.Performance.Math.IFunction.Multiply(MathNet.Numerics.IRealFunction)">
            <summary>
            Returns the multiplication of this function by g.
            </summary>
        </member>
        <member name="M:Palladio.Performance.Math.IFunction.ValueOf(System.Int64)">
            <summary>
            Returns the probability of the specified 
            </summary>
            <param name="time">The time for which the probability is returned.</param>
            <returns>Probability of the specified time. If no entry exists for the time, t0 is returned.</returns>
        </member>
        <member name="T:Palladio.Performance.Math.IFunctionFactory">
            <summary>
            Abstract Factory pattern.
            </summary>
            <remarks>
            <pre>
            Version history:
            
            $Log$
            Revision 1.2  2005/10/11 22:05:14  helgeh
            - Added NUnit project and NDoc documentation.
            - fixed a bug in AdjustSamplingRate

            Revision 1.1  2005/08/12 07:59:19  helgeh
            Initial impot after refactoring.
            
            Math:
            - Added DiscretePDFunction.
            - Added Fast Fourier Transformation and FourierFunction.
            - Changed operations of DiscreteFunction. The operations are independent of the sampling rate. For a probability density  function the sum of function values is a value in [0,1].
            - Added to interface IDiscreteFunction: Sum,ExpandDomainPo2, Crop, NumberOfNullValues, AdjustSamplingRate,  FunctionWithNValues, ToFile, ValueAt, DismissValuesSmalerThanN, ValueOf, MaximumDataValue
            - Altered MEthods: ExpandDomain, Scale, GetScaled, Convolution, Add
            
            FSMTransformer:
            - Method SEFFValidity added.
            - The Method FSMWithIntermediateState now returns a FSM, where all time consumption is contained by the input symbols of the  transitions.
            
            WebserverSeffFactory:
            - All service effect automaton are now IFiniteStateMachines. No use of the PAlladio.ComponentModel.
            
            WebserverAnalyser:
            - Data class for configuration added.
            - ConfigReader added.
            
            RegExASTVisitor:
            - There are now two visitors. One for the calculation in time domain and one for the calculation in frequency domain.
            
            RegularExpressions:
            - No changes.
            
            XmlSeffParser:
            - Data class for configuration added.
            - ConfigReader added.
            
            PerformanceCalculator:
            - Added interface IPerformanceCalculator. Added CalculatorFactory.
            
            Unit Tests added.
            Updated documentation.
            
            
            </pre>
            </remarks>
        </member>
        <member name="M:Palladio.Performance.Math.IFunctionFactory.ExponentialDistribution(System.Double)">
            <summary>
            Returns the exponential distribution with a rate.
            This is: f(x) = (1 / rate) * exp(- x (1 / rate)).
            </summary>
            <param name="rate"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.IFunctionFactory.ConstantFunction(System.Double)">
            <summary>
            Returns the constant zero function.
            This is: f(x) = c.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.IFunctionFactory.DiracDeltaFunction">
            <summary>
            Returns the dirac function which is the neutral element
            of the convolution. This is:
            f(0) = infty and f(x) = 0 for x != 0.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.IFunctionFactory.Copy(MathNet.Numerics.IRealFunction)">
            <summary>
            Creates a copy of f with the parameters given by the factory.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="T:Palladio.Performance.Math.MathTools">
            <summary>
            This class gives Acces to creation of functions. 
            </summary>
            <remarks>
            <pre>
            Version history:
            
            $Log$
            Revision 1.2  2005/10/11 22:05:14  helgeh
            - Added NUnit project and NDoc documentation.
            - fixed a bug in AdjustSamplingRate

            Revision 1.1  2005/08/12 07:59:19  helgeh
            Initial impot after refactoring.
            
            Math:
            - Added DiscretePDFunction.
            - Added Fast Fourier Transformation and FourierFunction.
            - Changed operations of DiscreteFunction. The operations are independent of the sampling rate. For a probability density  function the sum of function values is a value in [0,1].
            - Added to interface IDiscreteFunction: Sum,ExpandDomainPo2, Crop, NumberOfNullValues, AdjustSamplingRate,  FunctionWithNValues, ToFile, ValueAt, DismissValuesSmalerThanN, ValueOf, MaximumDataValue
            - Altered MEthods: ExpandDomain, Scale, GetScaled, Convolution, Add
            
            FSMTransformer:
            - Method SEFFValidity added.
            - The Method FSMWithIntermediateState now returns a FSM, where all time consumption is contained by the input symbols of the  transitions.
            
            WebserverSeffFactory:
            - All service effect automaton are now IFiniteStateMachines. No use of the PAlladio.ComponentModel.
            
            WebserverAnalyser:
            - Data class for configuration added.
            - ConfigReader added.
            
            RegExASTVisitor:
            - There are now two visitors. One for the calculation in time domain and one for the calculation in frequency domain.
            
            RegularExpressions:
            - No changes.
            
            XmlSeffParser:
            - Data class for configuration added.
            - ConfigReader added.
            
            PerformanceCalculator:
            - Added interface IPerformanceCalculator. Added CalculatorFactory.
            
            Unit Tests added.
            Updated documentation.
            
            
            </pre>
            </remarks>
        </member>
        <member name="M:Palladio.Performance.Math.MathTools.GCD(System.Int64,System.Int64)">
            <summary>
            Greatest Common Divisor. If one of the values is 0, then the other value is returned.
            If both values are 0, then 0 is returned.
            </summary>
            <param name="u"></param>
            <param name="v"></param>
            <returns>GCD of both values.</returns>
        </member>
        <member name="M:Palladio.Performance.Math.MathTools.GCD(System.Int64[])">
            <summary>
            Greatest Common Divisor.
            </summary>
            <param name="values">Array of values for which the GCD is returned.</param>
            <returns>GCD of the values.</returns>
        </member>
        <member name="P:Palladio.Performance.Math.MathTools.DiscreteFunctions">
            <summary>
            A Factory for creation of discrete function.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.MathTools.FourierTransform">
            <summary>
            A Class for transforming discrete value functions from time domain to frequency domain
            or reverse.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.MathTools.FastFourierTransform">
            <summary>
            A Class for transforming discrete value functions from time domain to frequency domain
            or reverse. Transformation uses recursive FFT.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.MathTools.SimpleFourierTransform">
            <summary>
            Deprecated. A Class for transforming discrete value functions from time domain to frequency domain
            or reverse. Transformation uses simple transformation. Deprecated.
            </summary>
        </member>
    </members>
</doc>
