<%@ CodeTemplate Language="C#" Inherits="CodeSmith.BaseTemplates.SqlCodeTemplate" TargetLanguage="T-SQL" Description="Generates SELECT/INSERT/UPDATE/DELETE stored procedure based on a database schema." %>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Category="Context" Description="Database that the stored procedures should be based on." %>
<%@ Property Name="IncludeDrop" Type="System.Boolean" Default="True" Category="Options" Description="If true drop statements will be generated to drop existing stored procedures." %>
<%@ Property Name="IncludeInsert" Type="System.Boolean" Default="True" Category="Options" Description="If true insert statements will be generated." %>
<%@ Property Name="IncludeUpdate" Type="System.Boolean" Default="True" Category="Options" Description="If true update statements will be generated." %>
<%@ Property Name="IncludeDelete" Type="System.Boolean" Default="True" Category="Options" Description="If true delete statements will be generated." %>
<%@ Property Name="IncludeGet" Type="System.Boolean" Default="True" Category="Options" Description="If true get statements will be generated." %>
<%@ Property Name="IncludeGetList" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist statements will be generated." %>
<%@ Property Name="InsertPrefix" Type="System.String" Default="Insert" Category="Style" Description="Prefix to use for all generated INSERT stored procedures." %>
<%@ Property Name="UpdatePrefix" Type="System.String" Default="Update" Category="Style" Description="Prefix to use for all generated UPDATE stored procedures." %>
<%@ Property Name="DeletePrefix" Type="System.String" Default="Delete" Category="Style" Description="Prefix to use for all generated DELETE stored procedures." %>
<%@ Property Name="SelectPrefix" Type="System.String" Default="Get" Category="Style" Description="Prefix to use for all generated SELECT stored procedures." %>
<%@ Property Name="SelectAllSuffix" Type="System.String" Default="List" Category="Style" Description="Prefix to use for all generated SELECT stored procedures." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="SchemaExplorer" %>
<%
for (int i = 0; i < SourceDatabase.Tables.Count; i++)
{
	if (SourceDatabase.Tables[i].PrimaryKey == null)
	{
		Response.WriteLine("-- Skipping " + SourceDatabase.Tables[i].Name + " because it does not have a primary key");
	}
}
for (int i = 0; i < SourceDatabase.Tables.Count; i++)
{
	if (SourceDatabase.Tables[i].PrimaryKey != null)
	{
		OutputStoredProcedures(SourceDatabase.Tables[i]);
	}
}
%>
<script runat="template">
// Demonstrates executing a template within a template.

private CodeTemplate _storedProceduresTemplate;

[Browsable(false)]
public CodeTemplate StoredProceduresTemplate
{
	get
	{
		if (_storedProceduresTemplate == null) 
		{
			CodeTemplateCompiler compiler = new CodeTemplateCompiler(this.CodeTemplateInfo.DirectoryName + "StoredProcedures.cst");
			compiler.Compile();
			
			if (compiler.Errors.Count == 0)
			{
				_storedProceduresTemplate = compiler.CreateInstance();
			}
			else
			{
				for (int i = 0; i < compiler.Errors.Count; i++)
				{
					Response.WriteLine(compiler.Errors[i].ToString());
				}
			}
		}
		
		return _storedProceduresTemplate;
	}
}

public void OutputStoredProcedures(TableSchema table)
{
	StoredProceduresTemplate.SetProperty("SourceTable", table);
	this.CopyPropertiesTo(StoredProceduresTemplate);
	
	StoredProceduresTemplate.Render(Response);
}
</script>