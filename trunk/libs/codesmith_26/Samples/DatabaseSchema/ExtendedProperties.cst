<%@ CodeTemplate Language="C#" TargetLanguage="Text" Description="Outputs all extended properties from a database." %>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Category="Context" Description="Database to get the extended properties from." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<% OuputAllExtendedProperties(); %>
<script runat="template">
void OuputAllExtendedProperties()
{
	this.OutputExtendedPropertyCollection(String.Format("DB={0}", SourceDatabase.Name), SourceDatabase.ExtendedProperties);
	for (int i = 0; i < SourceDatabase.Tables.Count; i++)
	{
		this.OutputExtendedPropertyCollection(String.Format("DB={0},TBL={1}", SourceDatabase.Name, SourceDatabase.Tables[i].Name), SourceDatabase.Tables[i].ExtendedProperties);
		for (int x = 0; x < SourceDatabase.Tables[i].Columns.Count; x++)
		{
			this.OutputExtendedPropertyCollection(String.Format("DB={0},TBL={1},COL={2}", SourceDatabase.Name, SourceDatabase.Tables[i].Name, SourceDatabase.Tables[i].Columns[x].Name), SourceDatabase.Tables[i].Columns[x].ExtendedProperties);
		}
	}
	
	for (int i = 0; i < SourceDatabase.Views.Count; i++)
	{
		this.OutputExtendedPropertyCollection(String.Format("DB={0},VW={1}", SourceDatabase.Name, SourceDatabase.Views[i].Name), SourceDatabase.Views[i].ExtendedProperties);
		for (int x = 0; x < SourceDatabase.Views[i].Columns.Count; x++)
		{
			this.OutputExtendedPropertyCollection(String.Format("DB={0},VW={1},COL={2}", SourceDatabase.Name, SourceDatabase.Views[i].Name, SourceDatabase.Views[i].Columns[x].Name), SourceDatabase.Views[i].Columns[x].ExtendedProperties);
		}
	}
	
	for (int i = 0; i < SourceDatabase.Commands.Count; i++)
	{
		this.OutputExtendedPropertyCollection(String.Format("DB={0},CMD={1}", SourceDatabase.Name, SourceDatabase.Commands[i].Name), SourceDatabase.Commands[i].ExtendedProperties);
		for (int x = 0; x < SourceDatabase.Commands[i].Parameters.Count; x++)
		{
			this.OutputExtendedPropertyCollection(String.Format("DB={0},CMD={1},PRM={2}", SourceDatabase.Name, SourceDatabase.Commands[i].Name, SourceDatabase.Commands[i].Parameters[x].Name), SourceDatabase.Commands[i].Parameters[x].ExtendedProperties);
		}
	}
}

void OutputExtendedPropertyCollection(string title, ExtendedPropertyCollection extendedProperties)
{
	for (int i = 0; i < extendedProperties.Count; i++)
	{
		try
		{
			Response.WriteLine(title + ": KEY=" + extendedProperties[i].Name + ", VAL=" + (extendedProperties[i].Value != null ? extendedProperties[i].Value.ToString() : ""));
		}
		catch (Exception e)
		{
			Response.WriteLine(title + ": ERROR=" + e.ToString());
		}
	}
}
</script>
