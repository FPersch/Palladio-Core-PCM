<%@ CodeTemplate Src="CSLAHelper.vb" Inherits="CSLAHelper" Debug="False" Language="VB" TargetLanguage="VB" Description="Generates a CSLA Editable Root Object." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
                                          <%-- Code Verified - MFA 12/05/2003 against Project and Resource  --%>
<%-- Generic Variables for code to use  --%><% Dim Col As ColumnSchema %><% Dim PKs As ColumnSchemaCollection = RootTable.primarykey.membercolumns %><% Dim NPKs As ColumnSchemaCollection = RootTable.NonPrimaryKeyColumns %>
<% Dim PKOrd As integer = PKs.Count - 1 %><% Dim OrdinalColCount as Integer = RootTable.columns.count - 1 %>
<%=Level(0,True)%>Option Strict On
<%=Level(0,False)%>Option Explicit On
<%=Level(0,False)%>Option Compare Text

<%=Level(0,False)%>Imports CSLA
<%=Level(0,False)%>Imports CSLA.Data
<%=Level(0,False)%>Imports System.Data.SQLClient
<% If Not ClassNamespace Is Nothing AndAlso ClassNamespace.Length > 0 Then %>Namespace <%= ClassNamespace %>
<% End If %>
   ''' <summary>
   ''' This business object represents the properties and methods of the <%= RootTable.Database.Name %>.<%= RootTable %> Table.
   ''' It corresponds to the EDITABLE ROOT OBJECT as outlined in the Book "<%=Level(1,False)%><%= ConstructorDeclaration %> Sub New(ByVal IsChild as Boolean, <% For Each col in PKs %>ByVal <%= col.name %> As <%= GetVBVariableType(col) %><% IF PKs.Item(PKOrd).name <> col.name Then %>, <% END IF%><% Next %>)<% For Each col in PKs %>
<%=Level(2,False)%><%= GetMemberVariableName(col) %> = <%= col.name %><% Next %>
<%=Level(2,False)%>If IsChild then
<%=Level(3,False)%>MarkAsChild()
<%=Level(2,False)%>End If
<%=Level(1,False)%>End SubExpert One-on-One VB.NET Business Objects"
   ''' Object was generated on <%= Now() %> - By <%=Environment.UserName %>
   ''' </summary>
   ''' <remarks>
   ''' Parameters used to generate this class.
   ''' Business Object
   '''	ClassNamespace      = <%= ClassNamespace %>
   '''	ObjectName          = <%= ObjectName %>
   '''	RootTable           = <%= RootTable.Database.Name %>.<%= RootTable %>
   '''  BaseClassExt        = <%= BaseClassExt %>
   '''
   '''Business Object's Child Collection
   '''	ChildCollectionName = <%= ChildCollectionName %>
   '''	ChildMemberName     = <%= ChildMemberName %>
   '''
   '''Options
   '''	MemberPrefix        = <%= MemberPrefix %>
   '''	FLCPrefix           = <%= FLCPrefix %>   
   '''	Accessibility       = <%= Accessibility.ToString %>
   '''	Serializable        = <%= Serializable %>
   '''	MustBeInherited     = <%= MustBeInherited %>
   '''	TransactionType     = <%= TransactionType.ToString %>
   '''
   '''Stored Procedure Style
   '''	GeneralSPPrefix     = <%= GeneralSPPrefix %>
   '''	InsertPrefix        = <%= InsertPrefix %>
   '''	UpdatePrefix        = <%= UpdatePrefix %>
   '''	DeletePrefix        = <%= DeletePrefix %>
   '''	SelectPrefix        = <%= SelectPrefix %>
   ''' </remarks>
<%=Level(0,False)%><% If Serializable = True Then %><Serializable()> _<% End If %>
<%=Level(0,False)%><%= GetAccessModifier(Accessibility) %> <%= GetMustInherit(MustBeInherited) %>Class <%= GetBaseClassName %>
<%=Level(1,False)%>Inherits BusinessBase

#Region "Class Level Private/Protected Variables ......"

<%=Level(1,False)%><%= GetPrimaryKeys(PKs, MemberPrefix, ConstructorDeclaration) %>
<%=Level(1,False)%><% For Each Col in NPKs %><%= GetMemberVariableDeclarationStatement(col) %><%=Level(1,True)%><% Next %>	
<%=Level(1,False)%>'Any child collection should be declared here As Private....
<%=Level(1,False)%><% IF Len(ChildCollectionName)>0 Then %>Protected <%= MemberPrefix %><%= ChildMemberName %> As <%= ChildCollectionName %> = <%= ChildCollectionName %>.New<%= ChildCollectionName %>()<% End IF %>

#End Region ' Class Level Private/Protected Variables

#Region " Constructors "

<%=Level(1,False)%><%= ConstructorDeclaration %> Sub New()
<%=Level(2,False)%>'prevent direct creation
<%=Level(1,False)%>End Sub

<%=Level(1,False)%><%= ConstructorDeclaration %> Sub New(<% For Each col in PKs %>ByVal <%= col.name %> As <%= GetVBVariableType(col) %><% IF PKs.Item(PKOrd).name <> col.name Then %>, <% END IF%><% Next %>)<% For Each col in PKs %>
<%=Level(2,False)%><%= GetMemberVariableName(col) %> = <%= col.name %><% Next %>
<%=Level(1,False)%>End Sub
	
#End Region ' Constructors 

#Region " Business Properties and Methods "	
<%=Level(0,False)%><% For Each Col in PKs %><%= GetPropertyDeclarations(col, True) %><% Next %>
<%=Level(0,False)%><% For Each Col in NPKs %><%= GetPropertyDeclarations(col,False) %><% Next %>
<%=Level(1,False)%>'If the Object has a child collection, this is property for read access into the child collection
<%=Level(1,False)%><% IF Len(ChildCollectionName)>0 Then %>Protected ReadOnly Property <%= ChildMemberName %>() As <%= ChildCollectionName %>
<%=Level(2,False)%>Get
<%=Level(3,False)%>Return <%= MemberPrefix %><%= ChildMemberName %>
<%=Level(2,False)%>End Get
<%=Level(1,False)%>End Property<%Else %><%=Level(1,False)%>'No child collection generated<% End If %>

<%=Level(1,False)%>Public Overrides ReadOnly Property IsValid() As Boolean
<%=Level(2,False)%>Get
<%=Level(3,False)%>'If the Business Object has Children, We Need to check it 
<%=Level(3,False)%>'with an AndAlso Child.IsValid clause with the Base As well
<%=Level(3,False)%>Return MyBase.IsValid<% IF Len(ChildCollectionName)>0 Then %> AndAlso <%= MemberPrefix %><%= ChildMemberName %>.IsValid<% End If %>
<%=Level(2,False)%>End Get
<%=Level(1,False)%>End Property

<%=Level(1,False)%>Public Overrides ReadOnly Property IsDirty() As Boolean
<%=Level(2,False)%>Get
<%=Level(3,False)%>'If the Business Object has Children, We Need to check it 
<%=Level(3,False)%>'with an OrElse Child.IsDirty clause with the Base As well
<%=Level(3,False)%>Return MyBase.IsDirty<% IF Len(ChildCollectionName)>0 Then %> OrElse <%= MemberPrefix %><%= ChildMemberName %>.IsDirty<% End If %>
<%=Level(2,False)%>End Get
<%=Level(1,False)%>End Property

#End Region ' Business Properties and Methods

<% If Len(FLCPrefix) > 0 Then %><%=Level(0,False)%>#Region "Field Level Concurency Tracking"
	
<%=Level(1,False)%><%= GetPrimaryKeys(PKs, MemberPrefix, ConstructorDeclaration, 0, FLCPrefix) %>
<%=Level(1,False)%><% For Each Col in NPKs %><%= GetMemberVariableDeclarationStatement(col, FLCPrefix) %><%=Level(1, True)%><% Next %>
<%=Level(1,False)%><%= GetPrimaryKeys(PKs, MemberPrefix, ConstructorDeclaration, 0, "Cur_") %>
<%=Level(1,False)%><% For Each Col in NPKs %><%= GetMemberVariableDeclarationStatement(col, "Cur_") %><%=Level(1, True)%><% Next %>
<%=Level(0,False)%><% For Each Col in PKs %><%= GetPropertyDeclarations(col, True, 0, FLCPrefix) %><% Next %>
<%=Level(0,False)%><% For Each Col in NPKs %><%= GetPropertyDeclarations(col, True, 0, FLCPrefix) %><% Next %>
<%=Level(0,False)%><% For Each Col in PKs %><%= GetPropertyDeclarations(col, True, 0, "Cur_") %><% Next %>
<%=Level(0,False)%><% For Each Col in NPKs %><%= GetPropertyDeclarations(col, True, 0, "Cur_") %><% Next %>
	
<%=Level(0,False)%>#End Region 'Field Level Concurency Tracking<%End If%>

#Region " System.Object Overrides "

<%=Level(1,False)%>Public Overrides Function ToString() As String
<%=Level(2,False)%>'Return the Primary Key As a String
<%=Level(2,False)%>Return <%= StringReplacement(PKs) %>
<%=Level(1,False)%>End Function

<%=Level(1,False)%>Public Overloads Overridable Function Equals(ByVal <%= GetCustomClassName() %> As <%= GetCustomClassName() %> ) As Boolean
<%=Level(2,False)%>'Implement Equals Method Needed
<%=Level(2,False)%>Return <% For Each col in PKs %><%= GetMemberVariableName(col) %>.Equals(<%= GetCustomClassName() %>.<%= GetPropertyName(Col) %>)<% IF PKs.Item(PKOrd).name <> col.name Then %> AND _<%= Level(2, False)%><% END IF%><% Next %>
<%=Level(1,False)%>End Function	

<%=Level(1,False)%>Public Overrides Function GetHashCode() As Integer
<%=Level(2,False)%>'Implement GetHashCode Method Needed
<%=Level(2,False)%>Return (<%= StringReplacement(PKs(0).Table.ToString,PKs) %>).GetHashCode
<%=Level(1,False)%>End Function
	
#End Region ' System.Object Overrides

#Region " Shared Methods "

<%=Level(1,False)%>Public Shared Function New<%= GetCustomClassName() %>(<% For Each col in PKs %>ByVal <%= col.name %> As <%= GetVBVariableType(col) %><% IF PKs.Item(PKOrd).name <> col.name Then %>, <% END IF%><% Next %>) As <%= GetCustomClassName() %>
<%=Level(2,False)%>'ToDo: In <%= GetBaseClassName %> - Uncomment and Change Roles for Security Implementation
<%=Level(2,False)%>'If Not Threading.Thread.CurrentPrincipal.IsInRole("Management") AndAlso _
<%=Level(2,False)%>'Not Threading.Thread.CurrentPrincipal.IsInRole("Administrator") Then
<%=Level(3,False)%>'Throw New System.Security.SecurityException("Sorry, but you have not been set up to add a new <%= ObjectName %>")
<%=Level(2,False)%>'End If	
<%=Level(2,False)%>Return New <%= GetCustomClassName() %>(<% For Each col in PKs %><%= col.name %><% IF PKs.Item(PKOrd).name <> col.name Then %>, <% END IF%><% Next %>)
<%=Level(1,False)%>End Function

<%=Level(1,False)%>Public Shared Sub Delete<%= GetCustomClassName() %>(<% For Each col in PKs %>ByVal <%= col.name %> As <%= GetVBVariableType(col) %><% IF PKs.Item(PKOrd).name <> col.name Then %>, <% END IF%><% Next %>)
<%=Level(2,False)%>'ToDo: In <%= GetBaseClassName %> - Uncomment and Change Roles for Security Implementation
<%=Level(2,False)%>'If Not Threading.Thread.CurrentPrincipal.IsInRole("Management") AndAlso _
<%=Level(2,False)%>'Not Threading.Thread.CurrentPrincipal.IsInRole("Administrator") AndAlso _
<%=Level(2,False)%>'Not Threading.Thread.CurrentPrincipal.IsInRole("SysAdmin") Then
<%=Level(3,False)%>'Throw New System.Security.SecurityException("Sorry, but you have not been set up to Delete a <%= ObjectName %>")
<%=Level(2,False)%>'End If
<%=Level(2,False)%>DataPortal.Delete(New Criteria(<% For Each col in PKs %><%= col.name %><% IF PKs.Item(PKOrd).name <> col.name Then %>, <% END IF%><% Next %>))
<%=Level(1,False)%>End Sub

<%=Level(1,False)%>Public Shared Function Get<%= GetCustomClassName() %>(<% For Each col in PKs %>ByVal <%= col.name %> As <%= GetVBVariableType(col) %><% IF PKs.Item(PKOrd).name <> col.name Then %>, <% END IF%><% Next %>) As <%= GetCustomClassName() %>
<%=Level(2,False)%>'Load an Existing Object from DB
<%=Level(2,False)%>Return CType(DataPortal.Fetch(New Criteria(<% For Each col in PKs %><%= col.name %><% IF PKs.Item(PKOrd).name <> col.name Then %>, <% END IF%><% Next %>)), <%= GetCustomClassName() %>)
<%=Level(1,False)%>End Function
	
<%=Level(1,False)%>Public Overrides Function Save() As BusinessBase
<%=Level(2,False)%>If IsDeleted Then
<%=Level(2,False)%>'ToDo: In <%= GetBaseClassName %> - Uncomment and Change Roles for Security Implementation
<%=Level(3,False)%>'If Not Threading.Thread.CurrentPrincipal.IsInRole("Management") AndAlso _
<%=Level(3,False)%>'Not Threading.Thread.CurrentPrincipal.IsInRole("Administrator") AndAlso _
<%=Level(3,False)%>'Not Threading.Thread.CurrentPrincipal.IsInRole("SysAdmin") Then
<%=Level(4,False)%>'Throw New System.Security.SecurityException("Sorry, but you have not been set up to Delete a <%= ObjectName %>")
<%=Level(3,False)%>'End If
<%=Level(2,False)%>Else				
<%=Level(3,False)%>'If Not Threading.Thread.CurrentPrincipal.IsInRole("Supervisor") AndAlso _
<%=Level(3,False)%>'Not Threading.Thread.CurrentPrincipal.IsInRole("Management") Then
<%=Level(4,False)%>'Throw New System.Security.SecurityException("Sorry, but you have not been set up to Update a <%= ObjectName %>")
<%=Level(3,False)%>'End If
<%=Level(2,False)%>End If
<%=Level(2,False)%>Return myBase.Save
<%=Level(1,False)%>End Function
	
#End Region ' Shared Methods 

#Region " Criteria Class (identifies the Individual Object/ Primary Key) "

<%=Level(1,False)%>' criteria for identifying existing object and is always serializable
<%=Level(1,False)%><Serializable()> _
<%=Level(1,False)%><%= ConstructorDeclaration %> Class Criteria
<%=Level(2,False)%>Inherits CSLA.Server.CriteriaBase
<%=Level(2,False)%><%= GetPrimaryKeys(PKs, MemberPrefix, "Public", 2) %>

<%=Level(2,False)%>Public Sub New(<% For Each col in PKs %>ByVal <%= col.name %> As <%= GetVBVariableType(col) %><% IF PKs.Item(PKOrd).name <> col.name Then %>, <% END IF%><% Next %>)<% For Each col in PKs %>
<%=Level(3,False)%>MyBase.New(GetType(<%= GetCustomClassName() %>))
<%=Level(3,False)%>Me.<%= GetMemberVariableName(col) %> = <%= col.name %><% Next %>
<%=Level(2,False)%>End Sub  
  
<%=Level(1,False)%>End Class

#End Region ' Criteria

#Region " Data Access "

<%=Level(1,False)%>' called by DataPortal so we can set defaults As needed
<%=Level(1,False)%>Protected Overrides Sub DataPortal_Create(ByVal Criteria As Object)
<%=Level(2,False)%>'Create new object with defaults stored in the Database
<%=Level(1,False)%>End Sub

<%=Level(1,False)%>' called by DataPortal to load data from the database<% IF TransactionType = 2 Then %>
<%=Level(1,False)%><Transactional()> _<% END IF %>
<%=Level(1,False)%>Protected Overrides Sub DataPortal_Fetch(ByVal Criteria As Object)
<%=Level(2,False)%>'Retrieve data from db
<%=Level(2,False)%>Dim crit As Criteria = CType(Criteria, Criteria)
<%=Level(2,False)%>Dim cn As New SqlConnection(db("<%= RootTable.database.name %>"))
<%=Level(2,False)%>Dim cmd As New SqlCommand
<%=Level(2,False)%><% IF TransactionType = 1 Then %>Dim tr As SqlTransaction<% END IF %>	  
<%=Level(3,False)%>cn.Open()  
<%=Level(2,False)%>Try
<%=Level(0,False)%><% IF TransactionType = 1 Then %><%=Level(3,False)%>tr = cn.BeginTransaction(IsolationLevel.ReadCommitted)
<%=Level(3,False)%>Try<% END IF %>
<%=Level(4,False)%>With cmd
<%=Level(5,False)%>.Connection = cn<% IF TransactionType = 1 Then %>
<%=Level(5,False)%>.transaction = tr<% END IF %>
<%=Level(5,False)%>.CommandType = CommandType.StoredProcedure
<%=Level(5,False)%>.CommandText = "<%= GeneralSPPrefix %><%= SelectPrefix %><%= ObjectName %>"
<%=Level(5,False)%><% For Each col in PKs %>.Parameters.Add("@<%= col.name %>", crit.<%= col.name %><%=GetSProcParmExt(col)%>)   '<%=GetVBVariableType(col)%>
<%=Level(5,False)%><% Next %>	
<%=Level(5,False)%>Dim dr As New SafeDataReader(.ExecuteReader)
<%=Level(5,False)%>Try
<%=Level(6,False)%>dr.Read()
<%=Level(6,False)%>With dr<% Dim i As short %><% For i = 0 to OrdinalColCount %>
<%=Level(7,False)%><%= GetReaderAssignmentStatement(RootTable.Columns(i), i) %><% Next i %>
<%=Level(6,True)%>' load child objects here if there are any
<%=Level(7,False)%><% IF Len(ChildCollectionName)>0 Then %>.NextResult()
<%=Level(7,False)%><%= MemberPrefix %><%= ChildMemberName %> = <%= ChildCollectionName %>.Get<%= ChildCollectionName %>(dr)<% End If %>	            	          	
<%=Level(6,False)%>End With 
<%=Level(5,False)%>Finally
<%=Level(6,False)%>dr.Close()
<%=Level(5,False)%>End Try      
<%=Level(4,False)%>End With	 
<%=Level(4,False)%><% IF TransactionType = 1 Then %>tr.commit()     
<%=Level(4,False)%>MarkOld()
<%=Level(3,False)%>Catch ex As exception
<%=Level(4,False)%>tr.rollback()
<%=Level(4,False)%>Throw ex
<%=Level(3,False)%>End Try<% END IF %>
<%=Level(2,False)%>Finally
<%=Level(3,False)%>cn.Close()
<%=Level(2,False)%>End Try
<%=Level(1,False)%>End Sub
  
<%=Level(1,False)%>'called by DataPortal to delete/add/update data into the database
<%=Level(1,False)%><% IF TransactionType = 2 Then %><Transactional()> _<% END IF %>
<%=Level(1,False)%>Protected Overrides Sub DataPortal_Update()
<%=Level(2,False)%>' save data into db
<%=Level(2,False)%>Dim cn As New SqlConnection(db("<%= RootTable.database.name %>"))
<%=Level(2,False)%>Dim cmd As New SqlCommand
<%=Level(2,False)%><% IF TransactionType = 1 Then %>Dim tr As SqlTransaction<% END IF %>	  
<%=Level(3,False)%>cn.Open()			  
<%=Level(2,False)%>Try
<%=Level(3,False)%><% IF TransactionType = 1 Then %>Me.BeginEdit()
<%=Level(3,False)%>tr = cn.BeginTransaction(IsolationLevel.Serializable)
<%=Level(3,False)%>Try<% END IF %>
<%=Level(4,False)%>With cmd
<%=Level(5,False)%>.Connection = cn<% IF TransactionType = 1 Then %>
<%=Level(5,False)%>.transaction = tr<% END IF %>
<%=Level(5,False)%>.CommandType = CommandType.StoredProcedure
<%=Level(5,False)%>If Me.IsDeleted Then
<%=Level(6,False)%>'We're being deleted
<%=Level(6,False)%>If Not Me.IsNew Then	                
<%=Level(7,False)%>.CommandText = "<%= GeneralSPPrefix %><%= DeletePrefix %><%= ObjectName %>"
<%=Level(7,False)%><% For Each col in PKs %>.Parameters.Add("@<%= col.name %>", <%= GetMemberVariableName(col) %><%=GetSProcParmExt(col)%>) '<%=GetVBVariableType(col)%>
<%=Level(7,False)%><% Next %>
<%=Level(7,False)%>.ExecuteNonQuery()
<%=Level(6,False)%>End If
<%=Level(6,False)%>'Reset the object status to be a new object	
<%=Level(6,False)%>MarkNew()
<%=Level(5,False)%>Else
<%=Level(6,False)%>'We're not going to be deleted, so determine if this is an update or insert
<%=Level(6,False)%>If Me.IsNew Then
<%=Level(7,False)%>'Perform an insert, object has not yet been persisted
<%=Level(7,False)%>.CommandText = "<%= GeneralSPPrefix %><%= InsertPrefix %><%= ObjectName %>"
<%=Level(6,False)%>Else
<%=Level(7,False)%>'We're not new so the object must already be persited. Perform update on object.
<%=Level(7,False)%>.commandText ="<%= GeneralSPPrefix %><%= UpdatePrefix %><%= ObjectName %>"   
<%=Level(6,False)%>End If                    
<%=Level(6,False)%><% For Each col in PKs %>.Parameters.Add("@<%= col.name %>", <%= GetMemberVariableName(col) %><%=GetSProcParmExt(col)%>)'<%=GetVBVariableType(col)%>
<%=Level(6,False)%><% Next %>
<%=Level(6,False)%><% For Each Col in NPKs %>.Parameters.Add("@<%= col.name %>", <%= GetMemberVariableName(col) %><%=GetSProcParmExt(col)%>)'<%=GetVBVariableType(col)%>
<%=Level(6,False)%><% Next %>
<%=Level(6,False)%>.ExecuteNonQuery()	                
<%=Level(6,False)%>'Update any necessary Child Objects, passing in the transaction if needed 
<%=Level(6,False)%><% IF Len(ChildCollectionName)>0 Then %><%= MemberPrefix %><%= ChildMemberName %>.Update(<% IF TransactionType = 1 Then %>tr, <% End IF %>Me) <% End If %>
<%=Level(5,False)%>'Mark the object as Old (Persisted)
<%=Level(5,False)%>MarkOld()	                
<%=Level(5,False)%>End If          	        
<%=Level(4,False)%>End With	    
<%=Level(3,False)%><% IF TransactionType = 1 Then %>'Commit the transaction 
<%=Level(3,False)%>tr.commit()
<%=Level(3,False)%>Me.ApplyEdit()
<%=Level(2,False)%>Catch ex As exception
<%=Level(3,False)%>tr.rollback()
<%=Level(3,False)%>Me.CancelEdit()
<%=Level(3,False)%>Throw ex
<%=Level(2,False)%>End Try<% END IF %>
<%=Level(2,False)%>Finally
<%=Level(3,False)%>cn.Close()
<%=Level(2,False)%>End Try
<%=Level(1,False)%>End Sub
  
<%=Level(1,False)%>'called by DataPortal to delete data from the database<% IF TransactionType = 2 Then %>
<%=Level(1,False)%><Transactional()> _<% END IF %>
<%=Level(1,False)%>Protected Overrides Sub DataPortal_Delete(ByVal Criteria As Object)
<%=Level(2,False)%>'Delete data from db
<%=Level(2,False)%>Dim crit As Criteria = CType(Criteria, Criteria)
<%=Level(2,False)%>Dim cn As New SqlConnection(db("<%= RootTable.database.name %>"))
<%=Level(2,False)%>Dim cmd As New SqlCommand
<%=Level(2,False)%><% IF TransactionType = 1 Then %>Dim tr As SqlTransaction<% END IF %>	  
<%=Level(3,False)%>cn.Open()			  
<%=Level(2,False)%>Try
<%=Level(3,False)%>tr = cn.BeginTransaction(IsolationLevel.Serializable)
<%=Level(4,False)%>Try
<%=Level(5,False)%>With cmd
<%=Level(6,False)%>.Connection = cn<% IF TransactionType = 1 Then %>
<%=Level(6,False)%>.transaction = tr<% END IF %>
<%=Level(6,False)%>.CommandType = CommandType.StoredProcedure
<%=Level(6,False)%>.CommandText = "<%= GeneralSPPrefix %><%= DeletePrefix %><%= ObjectName %>"
<%=Level(6,False)%><% For Each col in PKs %>.Parameters.Add("@<%= col.name %>", crit.<%= col.name %><%=GetSProcParmExt(col)%>)   '<%=GetVBVariableType(col)%>
<%=Level(6,False)%><% Next %>	
<%=Level(6,False)%>.ExecuteNonQuery()
<%=Level(5,False)%>End With
<%=Level(5,False)%><% IF TransactionType = 1 Then %>tr.commit()
<%=Level(4,False)%>Catch ex As exception
<%=Level(5,False)%>tr.rollback()
<%=Level(5,False)%>Throw ex
<%=Level(4,False)%>End Try<% END IF %>		
<%=Level(2,False)%>Finally
<%=Level(3,False)%>cn.Close()
<%=Level(2,False)%>End Try
<%=Level(1,False)%>End Sub

#End Region ' Data Access 

<%=Level(0,False)%>End Class

<%=Level(0,False)%><% If Not ClassNamespace Is Nothing AndAlso ClassNamespace.Length > 0 Then %>End Namespace
<% End If %>
