<%@ CodeTemplate Src="CSLAHelper.cs" Inherits="CSLAHelper" Language="C#" TargetLanguage="C#" Description="Generates a CSLA Editable Child Collection Object." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Property Name="CollectionName" Type="System.String" Optional="false" Default="" Category="1. Common Required Template Options" Description="Required - The Name of the Business Object Collection to Generate." %>
<%@ Property Name="ParentName" Type="System.String" Optional="true" Default="" Category="2. Child Collection Business Object" Description="The Parent Name to which the generated Business Object belongs." %>
<%@ Property Name="ParentType" Type="System.String" Optional="false" Default="" Category="2. Child Collection Business Object" Description="The Parent's Object Type (Class). This is the Object Type that has the contained Child Class." %>
<%@ Property Name="AllowSort" Type="System.Boolean" Optional="true" Default="true" Category="3. Collection Business Object" Description="Insert the code for the AllowSorting = True in constructor. In the Custom Code collecion class." %>
<%@ Property Name="AllowFind" Type="System.Boolean" Optional="true" Default="true" Category="3. Collection Business Object" Description="Insert the code for the AllowFind = True in constructor. In the Custom Code collecion class." %>
<% HiddenCollectionName = CollectionName; %>
<%-- Generic Variables for code to use  --%>
<% int i = 0; %>
<% ColumnSchemaCollection PKs = RootTable.PrimaryKey.MemberColumns; %>
<% ColumnSchemaCollection NPKs = RootTable.NonPrimaryKeyColumns; %> 
<% int PKOrd = PKs.Count - 1; %>
<% int OrdinalColCount = RootTable.Columns.Count - 1; %> 
<%=Level(i,false)%>using System;
<%=Level(i,false)%>using System.Data;
<%=Level(i,false)%>using System.Data.SqlClient;
<%=Level(i,false)%>using CSLA;
<%=Level(i,false)%>using CSLA.Data;

<% if (ClassNamespace != null && ClassNamespace.Length > 0) { %>namespace <%= ClassNamespace %>
<%=Level(i++,false)%>{ 
<% } %> 
<%=Level(i,false)%>/// <summary> 
<%=Level(i,false)%>/// This business object represents the properties and methods of the <%= RootTable %> Table. 
<%=Level(i,false)%>/// It corresponds to the EDITABLE CHILD COLLECTION OBJECT as outlined in the Book "Expert One-on-One VB.NET Business Objects" 
<%=Level(i,false)%>/// Object was generated on <%= DateTime.Now.ToString() %> - By <%=Environment.UserName %> 
<%=Level(i,false)%>/// </summary> 
<%=Level(i,false)%>/// <remarks> 
<%=Level(i,false)%>/// Parameters used to generate this class.
<%=Level(i,false)%>/// Collection Business Object
<%=Level(i,false)%>///		ClassNamespace      = <%= ClassNamespace %>
<%=Level(i,false)%>///		CollectionName      = <%= GetBaseCollectionName %>
<%=Level(i,false)%>///		RootTable           = <%= RootTable.Database.Name %>.<%= RootTable %>
<%=Level(i,false)%>///
<%=Level(i,false)%>/// Child Collection Options
<%=Level(i,false)%>///		ChildObjectName     = <%= ObjectName %>
<%=Level(i,false)%>///		ParentName          = <%= ParentName %>
<%=Level(i,false)%>///		ParentType          = <%= ParentType %>
<%=Level(i,false)%>///
<%=Level(i,false)%>/// Options
<%=Level(i,false)%>///		MemberPrefix        = <%= MemberPrefix %>
<%=Level(i,false)%>///		Accessibility       = <%= Accessibility.ToString() %>
<%=Level(i,false)%>///		Serializable        = <%= Serializable %>
<%=Level(i,false)%>///		MustBeInherited     = <%= MustBeInherited %>
<%=Level(i,false)%>///		TransactionType     = <%= TransactionType.ToString() %>
<%=Level(i,false)%>/// 
<%=Level(i,false)%>/// Stored Procedure Style
<%=Level(i,false)%>///		GeneralSPPrefix     = <%= GeneralSPPrefix %>
<%=Level(i,false)%>///		InsertPrefix        = <%= InsertPrefix %>
<%=Level(i,false)%>///		UpdatePrefix        = <%= UpdatePrefix %>
<%=Level(i,false)%>///		DeletePrefix        = <%= DeletePrefix %>
<%=Level(i,false)%>///		SelectPrefix        = <%= SelectPrefix %>
<%=Level(i,false)%>/// </remarks>
<% if(Serializable) { %>
<%=Level(i,false)%>[Serializable] 
<% } %> 
<%=Level(i,false)%><%= GetAccessModifier(Accessibility) %> <%= GetMustInherit(MustBeInherited) %>class <%= GetBaseCollectionName %> : CSLA.BusinessCollectionBase
<%=Level(i++,false)%>{

<%=Level(i,false)%>#region Business Properties and Methods

<%=Level(i,false)%>public <%= GetCustomClassName %> this[int index]
<%=Level(i++,false)%>{
<%=Level(i,false)%>get { return (<%= GetCustomClassName %>) List[index]; }
<%=Level(--i,false)%>}

<%=Level(i,false)%>public void Add(<%= GetCustomClassName %> item)
<%=Level(i++,false)%>{
<%=Level(i,false)%>if(!Contains(item))
<%=Level(i+1,false)%>List.Add(item);
<%=Level(i,false)%>else
<%=Level(i+1,false)%>throw new Exception("<%= GetCustomClassName %> '" + item.ToString() + "' already exist.");
<%=Level(--i,false)%>}

<%=Level(i,false)%>public void Remove(<%= GetCustomClassName %> item)
<%=Level(i++,false)%>{
<%=Level(i,false)%>List.Remove(item);
<%=Level(--i,false)%>}

<%=Level(i,false)%>public void Remove(<% foreach(ColumnSchema col in PKs) { %><%= GetCSVariableType(col) + " " + GetCamelCaseName(GetPropertyName(col)) %><% if(col.Name != PKs[PKOrd].Name) { %>, <% } %><% } %>)
<%=Level(i++,false)%>{
<%=Level(i,false)%>foreach (<%= GetCustomClassName %> child in List)
<%=Level(i++,false)%>{
<%=Level(i,false)%>if(<% foreach(ColumnSchema col in PKs) { %><%= "child." + GetPropertyName(col) + ".Equals(" + GetCamelCaseName(GetPropertyName(col)) + ")" %><% if(col.Name != PKs[PKOrd].Name) { %><%= " && " + Level(i+3,true)%><% } %><% } %>)
<%=Level(i++,false)%>{
<%=Level(i,false)%>Remove(child);
<%=Level(i,false)%>break;
<%=Level(--i,false)%>}
<%=Level(--i,false)%>}
<%=Level(--i,false)%>}

<%=Level(i,false)%>public bool IsSaveable
<%=Level(i++,false)%>{
<%=Level(i,false)%>//Since you cannot bind a control to multiple properties you need to create a property that combines the ones you need
<%=Level(i,false)%>//In this case, bind the UI Save button Enabled property to IsSaveable. (Why save an object that has not changed?)
<%=Level(i,false)%>get { return IsValid && IsDirty; }
<%=Level(--i,false)%>}

<%=Level(i,false)%>#endregion //Business Properties and Methods

<%=Level(i,false)%>#region Contains

<%=Level(i,false)%>public bool Contains(<%= GetCustomClassName %> item)
<%=Level(i++,false)%>{
<%=Level(i,false)%>return List.Contains(item);
<%=Level(--i,false)%>}

<%=Level(i,false)%>public bool Contains(<% foreach(ColumnSchema col in PKs) { %><%= GetCSVariableType(col) + " " + GetCamelCaseName(GetPropertyName(col)) %><% if(col.Name != PKs[PKOrd].Name) { %>, <% } %><% } %>)
<%=Level(i++,false)%>{
<%=Level(i,false)%>foreach (<%= GetCustomClassName %> child in List)
<%=Level(i++,false)%>{
<%=Level(i,false)%>if(<% foreach(ColumnSchema col in PKs) { %><%= "child." + GetPropertyName(col) + ".Equals(" + GetCamelCaseName(GetPropertyName(col)) + ")" %><% if(col.Name != PKs[PKOrd].Name) { %><%= " && " + Level(i+3,true)%><% } %><% } %>)
<%=Level(i+1,false)%>return true;
<%=Level(--i,false)%>}
<%=Level(i,false)%>return false;
<%=Level(--i,false)%>}

<%=Level(i,false)%>public bool ContainsDeleted(<%= GetCustomClassName %> item)
<%=Level(i++,false)%>{
<%=Level(i,false)%>foreach (<%= GetCustomClassName %> child in deletedList)
<%=Level(i++,false)%>{
<%=Level(i,false)%>if(child.Equals(item))
<%=Level(i+1,false)%>return true;
<%=Level(--i,false)%>}
<%=Level(i,false)%>return false;
<%=Level(--i,false)%>}

<%=Level(i,false)%>public bool ContainsDeleted(<% foreach(ColumnSchema col in PKs) { %><%= GetCSVariableType(col) + " " + GetCamelCaseName(GetPropertyName(col)) %><% if(col.Name != PKs[PKOrd].Name) { %>, <% } %><% } %>)
<%=Level(i++,false)%>{
<%=Level(i,false)%>foreach (<%= GetCustomClassName %> child in deletedList)
<%=Level(i++,false)%>{
<%=Level(i,false)%>if(<% foreach(ColumnSchema col in PKs) { %><%= "child." + GetPropertyName(col) + ".Equals(" + GetCamelCaseName(GetPropertyName(col)) + ")" %><% if(col.Name != PKs[PKOrd].Name) { %><%= " && " + Level(i+3,true)%><% } %><% } %>)
<%=Level(i+1,false)%>return true;
<%=Level(--i,false)%>}
<%=Level(i,false)%>return false;
<%=Level(--i,false)%>}

<%=Level(i,false)%>#endregion //Contains

<%=Level(i,false)%>#region Constructor
<%=Level(i,false)%><%= ConstructorDeclaration() + " " + GetBaseCollectionName + "() " %>
<%=Level(i++,false)%>{
<%=Level(i,false)%>//prevent direct creation<% if(AllowSort) {%>
<%=Level(i,false)%>AllowSort = true; <%}%><% if(AllowFind) {%>
<%=Level(i,false)%>AllowFind = true; <%}%>
<%=Level(i,false)%>MarkAsChild();
<%=Level(--i,false)%>}
<%=Level(i,false)%>#endregion //Constructor

<%=Level(i,false)%>#region Criteria (identifies the Individual Object/ Primary Key)
<%=Level(i,false)%>[Serializable]
<%=Level(i,false)%>private class Criteria <%if(SetAsBaseClass) {%>: CSLA.Server.CriteriaBase<%}%>
<%=Level(i++,false)%>{
<%=Level(i,false)%>public Criteria() <%if(SetAsBaseClass) {%>: base(typeof(<%= GetCustomCollectionName %>))<%}%>
<%=Level(i++,false)%>{
<%=Level(--i,false)%>}
<%=Level(--i,false)%>}
<%=Level(i,false)%>#endregion //Criteria

<%=Level(i,false)%>#region Static Methods
<%=Level(i,false)%>internal static <%= GetCustomCollectionName %> New<%= GetCustomCollectionName %>()
<%=Level(i++,false)%>{
<%=Level(i,false)%>return (<%= GetCustomCollectionName %>) DataPortal.Create(new Criteria());
<%=Level(--i,false)%>}

<%=Level(i,false)%>internal static <%= GetCustomCollectionName %> Get<%= GetCustomCollectionName %>(SafeDataReader dr)
<%=Level(i++,false)%>{
<%=Level(i,false)%>// Load an Existing Object from Data Reader
<%=Level(i,false)%><%= GetCustomCollectionName %> child = New<%= GetCustomCollectionName %>();
<%=Level(i,false)%>child.Fetch(dr);
<%=Level(i,false)%>return child;
<%=Level(--i,false)%>}
<%=Level(i,false)%>#endregion //Static Methods

<%=Level(i,false)%>#region Data Access
<%=Level(i,false)%>//Called by DataPortal so that we can set defaults as needed
<%=Level(i,false)%>protected override void DataPortal_Create(object criteria)
<%=Level(i++,false)%>{
<%=Level(i,false)%>//Create new object with default stored in the database
<%=Level(i,false)%>Criteria crit = (Criteria) criteria;
<%=Level(--i,false)%>}

<%=Level(i,false)%>// Called by DataPortal to load data from the database
<%=Level(i,false)%>private void Fetch(SafeDataReader dr)
<%=Level(i++,false)%>{
<%=Level(i,false)%>// Retrieve the data from the passed in data reader, 
<%=Level(i,false)%>// which may or may not have a transaction associated with it
<%=Level(i,false)%>while(dr.Read())
<%=Level(i+1,false)%>List.Add(<%= GetCustomClassName + ".Get" + GetCustomClassName + "(dr)" %>);
<%=Level(--i,false)%>}

<%=Level(i,false)%>internal void Update(<% if(IsAdoTransaction) { %>SqlTransaction tr, <%}%><%= ParentType + " parent"%>)
<%=Level(i++,false)%>{
<%=Level(i,false)%>// Loop through each deleted child object and call its Update() method
<%=Level(i,false)%>foreach (<%= GetCustomClassName %> deletedChild in deletedList)
<%=Level(i++,false)%>{
<%=Level(i,false)%>deletedChild.Update(<% if(IsAdoTransaction) { %>tr, <%}%>parent);
<%=Level(--i,false)%>}
<%=Level(i,false)%>// Then clear the list of deleted objects because they are truly gone now
<%=Level(i,false)%>deletedList.Clear();

<%=Level(i,false)%>// loop through each non-deleted child object and call its Update() method
<%=Level(i,false)%>foreach (<%= GetCustomClassName %> child in List)
<%=Level(i++,false)%>{
<%=Level(i,false)%>child.Update(<% if(IsAdoTransaction) { %>tr, <%}%>parent);
<%=Level(--i,false)%>}
<%=Level(--i,false)%>}
<%=Level(i,false)%>#endregion //Data Access

<%=Level(--i,false)%>}
<% if(ClassNamespace != null && ClassNamespace.Length > 0) {%>}<%}%>

