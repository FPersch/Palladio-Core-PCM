<%@ CodeTemplate Src="CSLAHelper.cs" Inherits="CSLAHelper" Language="C#" TargetLanguage="C#" Description="Calls templates for a table in the database." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Property Name="ObjectTemplate" Type="TemplateEnum" Optional="false" Category="0. Render Options" Description="Required - Generate the object code from this template." %>
<%@ Property Name="CollectionTemplate" Type="CollectionTemplateEnum" Optional="false" Category="0. Render Options" Description="Generate the Associated Collection Class using this template. If it is left set to 'None', no collection object will be generated." %>
<%@ Property Name="OutputToFile" Type="System.Boolean" Optional="false" Category="0. Render Options" Description="Required - True to generate file, or False to preview on the screen" %>
<script runat="template">
	private string _outputDirectory = "C:\\";	//set your default directory here
	[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor)),
	CodeTemplateProperty(CodeTemplatePropertyOption.Optional),
	Category("0. Render Options"), Description("Optional - The directory to which every output file is generated.")]
	public string OutputDirectory
	{
	 get {return _outputDirectory;}
	 set {_outputDirectory= value;}
	}
</script>
<%@ Property Name="CollectionName" Type="System.String" Optional="true" Default="" Category="1. Common Required Template Options" Description="Required - The Name of the Business Object Collection to Generate." %>
<%@ Property Name="ChildCollectionName" Type="System.String" Default="" Optional="true" Category="2. Child Collection Business Object" Description="The Child Collection's Name. Used for the memeber variable and collection name." %>
<%@ Property Name="ChildMemberName" Type="System.String" Default="" Optional="true" Category="2. Child Collection Business Object" Description="The Child Collection's member variable name." %>
<%@ Property Name="ParentName" Type="System.String" Default="" Optional="true" Category="2. Child Collection Business Object" Description="The Parent Name to which the generated Business Object belongs." %>
<%@ Property Name="ParentType" Type="System.String" Default="" Optional="true" Category="2. Child Collection Business Object" Description="The Parent's Object Type (Class). This is the Object Type that has the contained Child Class." %>
<%@ Property Name="AllowSort" Type="System.Boolean" Optional="true" Default="true" Category="3. Collection Business Object" Description="Insert the code for the AllowSorting = True in constructor. In the Custom Code collecion class." %>
<%@ Property Name="AllowFind" Type="System.Boolean" Optional="true" Default="true" Category="3. Collection Business Object" Description="Insert the code for the AllowFind = True in constructor. In the Custom Code collecion class." %>
<%@ Property Name="KeyColumn" Type="System.String" Default="" Optional="true" Category="4. Name Value List" Description="The Column name that is the Key column for this list." %>
<%@ Property Name="ValueColumn" Type="System.String" Default="" Optional="true" Category="4. Name Value List" Description="The column name that is used for the value of the list." %>
<%-- Signature: --%>
<%-- public void OutputSubTemplate(string templateName, bool overwriteFile, bool isCollectionTemplate) --%>

<%	
	OutputSubTemplate(ObjectTemplate.ToString(), true, false); 
	if(SetAsBaseClass) {
		OutputSubTemplate("CustomCodeClass", true, (ObjectTemplate.ToString().IndexOf("Collection")>=0));
	}

 	if(CollectionTemplate.ToString() != "None") {
		OutputSubTemplate(CollectionTemplate.ToString(), true, true); 
		if(SetAsBaseClass) {
			OutputSubTemplate("CustomCodeClass", true, true);
		}
	}
%>

<script runat="template">

public void OutputSubTemplate(string templateName, bool overwriteFile, bool isCollectionTemplate)
{
	//validate first, make sure all required properties are filled
	if(!Validate(templateName)) return;
	
	CodeTemplate subTemplate = GetCompiledTemplate(templateName);
	if(subTemplate == null) return;
		
	SetProperties(subTemplate, isCollectionTemplate);
	subTemplate.Render(Response);
	
	if(OutputToFile) 
	{
		try 
		{
			subTemplate.RenderToFile(GetSourcePath(templateName) + GetSourceFileName(templateName, isCollectionTemplate), overwriteFile);
		}
		catch(Exception ex) 
		{
			Response.WriteLine("Error Rendering To File: " + ex.Message);
			Response.WriteLine("- " + OutputDirectory + GetSourceFileName(templateName, isCollectionTemplate));
		}
	}
	
}

private CodeTemplate GetCompiledTemplate(string templatePath)
{
	string errString = "";
	CodeTemplateCompiler compiler;
	
	// add current directory if path not rooted
	if(!System.IO.Path.IsPathRooted(templatePath))
		templatePath = CodeTemplateInfo.DirectoryName + templatePath + ".cst";
		
	try
	{
		compiler = new CodeTemplateCompiler(templatePath);
		compiler.Compile();
		
		if (compiler.Errors.Count == 0)
		{
			CodeTemplate template = compiler.CreateInstance();
			return template;
		}
		else
		{
			//compile failed
			Response.WriteLine("Error Compiling Template:");
			Response.WriteLine("- " + templatePath);
			foreach(System.CodeDom.Compiler.CompilerError err in compiler.Errors)
			{
				Response.WriteLine(err.ErrorText);
				errString += err.ErrorText + "\r\n";
			}
			return null;
		}
	}
	catch(Exception ex)
	{
		Response.WriteLine("Error Compiling: " + ex.Message);
		Response.WriteLine("- " + templatePath);
		return null;
	}

}

private string GetSourceFileName(string templateName, bool isCollection)
{
	string fileName = "";
	if(templateName.ToLower()=="customcodeclass")
	{
		fileName = isCollection? GetCustomCollectionName: GetCustomClassName;
	}
	else
		fileName = isCollection? GetBaseCollectionName: GetBaseClassName;
		
	return fileName + ".cs";
}

private string GetSourcePath(string templateName)
{
	string path = "C:\\";
	
	if(OutputDirectory.Trim().Length>0)
		path = OutputDirectory.Trim();
	path += path.EndsWith("\\")? "":"\\";
	if(SetAsBaseClass && templateName.ToLower()!="customcodeclass")
	{
		//add path for base class here
		path = path;
	}
	return path;
}

//TODO: ParentType!="", ParentName is required (ES,EC)
//TODO: ChildCollectionName!="", ChildMemberName is required (ER, EC, ES, RO, ROC) 
private bool Validate(string templateName)
{
	if(templateName=="None") return true;
	
	string message = "";
	//validate all required properties for a given template
	if(templateName.IndexOf("Collection")>=0) 
	{
		//check for all collection templates
		if(CollectionName==null || CollectionName.Trim().Length==0)
			message += "CollectionName is Required.\n\r";
	}
	if(templateName=="NameValueList")
	{
		if(KeyColumn==null || KeyColumn.Trim().Length==0)
			message += "KeyColumn is Required.\n\r";
		if(ValueColumn==null || ValueColumn.Trim().Length==0)
			message += "ValueColumn is Required.\n\r";
	}
	if(templateName=="EditableChildCollection")
	{
		if(ParentType==null || ParentType.Trim().Length==0)
			message += "ParentType is Required.\n\r";
	}
	if(OutputToFile)
	{
		if(OutputDirectory==null || OutputDirectory.Trim().Length==0)
			message += "OutputDirectory is Required.\n\r";
	}
	if(message.Length>0)
	{
		System.Windows.Forms.MessageBox.Show(message,"Validation Errors",
				System.Windows.Forms.MessageBoxButtons.OK, 
				System.Windows.Forms.MessageBoxIcon.Error);
		return false;
	}
	return true;
}

private void SetProperties(CodeTemplate template, bool isCollectionTemplate)
{
	string fileName = template.CodeTemplateInfo.FileName.ToLower();
	
	//properties apply to all templates
	template.SetProperty("Accessibility",Accessibility);
	template.SetProperty("MemberPrefix",MemberPrefix);
	template.SetProperty("MustBeInherited",MustBeInherited);
	template.SetProperty("Serializable",Serializable);
	template.SetProperty("TransactionType",TransactionType);
	template.SetProperty("UseTabIndent",UseTabIndent);
	template.SetProperty("BaseClassExt",BaseClassExt);
	template.SetProperty("SetAsBaseClass",SetAsBaseClass);
	template.SetProperty("ClassNamespace",ClassNamespace);
	template.SetProperty("ObjectName",ObjectName);
	template.SetProperty("RootTable",RootTable);

	if(fileName=="customcodeclass.cst") 
	{
		template.SetProperty("IsCollectionCode",isCollectionTemplate);
		template.SetProperty("CollectionName",CollectionName);
	}
	
	if(fileName=="namevaluelist.cst") 
	{
		template.SetProperty("KeyColumn",KeyColumn);
		template.SetProperty("ValueColumn",ValueColumn);
	}
	else 
	{
		//properties apply to all non NVL template
		template.SetProperty("GeneralSPPrefix",GeneralSPPrefix);
		template.SetProperty("InsertPrefix",InsertPrefix);
		template.SetProperty("SelectPrefix",SelectPrefix);
		template.SetProperty("UpdatePrefix",UpdatePrefix);
		template.SetProperty("DeletePrefix",DeletePrefix);

		if(fileName=="editableroot.cst" || fileName=="editablechild.cst"
				|| fileName=="editableswitchable.cst" || fileName=="readonly.cst"
				|| fileName=="readonlycollection.cst") 
		{			
			template.SetProperty("ChildCollectionName",ChildCollectionName);
			template.SetProperty("ChildMemberName",ChildMemberName);
		}
		if(fileName=="editablechild.cst" || fileName=="editablechildcollection.cst"
				|| fileName=="editableswitchable.cst") 
		{
			template.SetProperty("ParentName",ParentName);
			template.SetProperty("ParentType",ParentType);
		}
		if(fileName=="editablerootcollection.cst" || fileName=="editablechildcollection.cst"
				|| fileName=="readonlycollection.cst") 
		{
			template.SetProperty("CollectionName",CollectionName);
			template.SetProperty("AllowSort",AllowSort);
			template.SetProperty("AllowFind",AllowFind);
		}
	}	
}

</script>