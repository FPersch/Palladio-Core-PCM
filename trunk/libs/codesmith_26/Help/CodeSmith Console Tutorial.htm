<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 11 (filtered)">
<title>CodeSmith Console Tutorial</title>
<style>
<!--
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	margin-left:10pt;
	font-family:"Times New Roman";
	width: 900;
	}
h1
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:10pt;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:Arial;}
h2
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:10pt;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:Arial;
	font-style:italic;}
h3
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:10pt;
	page-break-after:avoid;
	font-size:13.0pt;
	font-family:Arial;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;}
div.Section1
	{page:Section1;}
-->
</style>

</head>

<body lang=EN-US>

<div class=Section1>

<h1>CodeSmith Console Tutorial</h1>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Many people only know CodeSmith as the graphical
application, or perhaps the visual studio add-in, but there is also another way
to use CodeSmith which is through the console application. The console
application is very valuable because it gives you the ability to add CodeSmith
generation to a build script, or some other automation tool. The purpose of
this document is to walk you through how to use the console application and to specify
its various parameters.</p>

<p class=MsoNormal>&nbsp;</p>

<h3>Basic Usage</h3>

<p class=MsoNormal>The most basic way to use the console application is to take
a template, a property file, and then save the output to a file. This is a
perfect example of how you might incorporate template processing into a build
process using a tool like NAnt.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The first thing we need to do is decide what template we
want to execute and create a property xml file for that template. The property xml
file is used to pass the properties you want to use when executing the
template. The easiest way to generate a property file is to open the template
in the CodeSmith Explorer, fill out the properties, click generate, and then
click the Save Property Set XML button. This button can be found after you have
generated the output, next to the save output and copy output buttons. You will
then be prompted to name and save the generated XML file, here is a look at an
XML file created for the ArrayList.cst template.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&lt;?xml version=&quot;1.0&quot;
encoding=&quot;us-ascii&quot;?&gt;</p>

<p class=MsoNormal>&lt;codeSmith&gt;</p>

<p class=MsoNormal>            &lt;propertySet&gt;</p>

<p class=MsoNormal>                        &lt;property
name=&quot;Accessibility&quot;&gt;Public&lt;/property&gt;</p>

<p class=MsoNormal>                        &lt;property
name=&quot;ClassName&quot;&gt;PersonArray&lt;/property&gt;</p>

<p class=MsoNormal>                        &lt;property
name=&quot;ItemType&quot;&gt;Person&lt;/property&gt;</p>

<p class=MsoNormal>                        &lt;property
name=&quot;ItemValueType&quot;&gt;False&lt;/property&gt;</p>

<p class=MsoNormal>                        &lt;property
name=&quot;ItemCustomSearch&quot;&gt;False&lt;/property&gt;</p>

<p class=MsoNormal>                        &lt;property
name=&quot;KeyName&quot;&gt;PersonID&lt;/property&gt;</p>

<p class=MsoNormal>                        &lt;property name=&quot;KeyType&quot;&gt;int&lt;/property&gt;</p>

<p class=MsoNormal>                        &lt;property
name=&quot;IncludeInterfaces&quot;&gt;True&lt;/property&gt;</p>

<p class=MsoNormal>                        &lt;property
name=&quot;IncludeNamespaces&quot;&gt;False&lt;/property&gt;</p>

<p class=MsoNormal>            &lt;/propertySet&gt;</p>

<p class=MsoNormal>&lt;/codeSmith&gt;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>As you can see you could also create this file by hand, but
using the CodeSmith Explorer is much easier. </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Now that we have this XML file we can go ahead and take a
look at how to execute this template and save the results using the console
tool. First we need to use the /template parameter to specify the template that
we want to use, which will look like this:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>C:\Program
Files\CodeSmith\v2.5&gt;CodeSmithConsole
/template:Samples\Collections\ArrayList.cst</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>In this example we are using the ArrayList.cst template
which is located in the Samples\Collections directory. The next thing we need
to specify is our XML property file that we created in the last step, to do
this we use the /property parameter.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>C:\Program
Files\CodeSmith\v2.5&gt;CodeSmithConsole
/template:Samples\Collections\ArrayList.cst  /properties:PersonArray.xml</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The /property parameter is used to point to our property XML
file. The last parameter that we need to use is the /output parameter which is
used to specify how the output should be saved.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>C:\Program
Files\CodeSmith\v2.5&gt;CodeSmithConsole
/template:Samples\Collections\ArrayList.cst /properties:PersonArray.xml
/out:test.cs</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Using the /out parameter we specify that the output should
be saved in a file called test.cs. When this command is executed the template
will be run using the property file and the output will be saved to the test.cs
file. </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This is the most basic way that the console utility can be
used.</p>

<p class=MsoNormal>&nbsp;</p>

<h3>Merging Output</h3>

<p class=MsoNormal>One of the largest challenges in any type of code generation
is separating the actively generated code, from the code that is written or
modified by a developer. The console utility provides a unique solution to this
problem, using a special parameter you can specify a region inside a currently
existing code file where the output of the template will be inserted. </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Here is a sample code file which includes a region that we
will insert our generated code into.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New";color:blue'>using</span><span style='font-size:10.0pt;
font-family:"Courier New"'> System;</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New";color:blue'>namespace</span><span style='font-size:
10.0pt;font-family:"Courier New"'> Entities</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New"'>{</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New"'>      <span style='color:gray'>#region
GeneratedOrderEntity</span></span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New";color:gray'>&nbsp;</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New";color:gray'>&nbsp;</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New";color:gray'>      #endregion  </span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>}</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Our goal is to insert the results of the
DatabaseSchema\BusinessObject.cst template into the GeneratedOrderEntity region
of this class file. To do so we will execute the template using the
CodeSmithConsole application just like we did in the last example, except this
time we will include another parameter called merge.</p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>C:\Program
Files\CodeSmith\v2.5&gt;CodeSmithConsole /template:Samples\DatabaseSchema\BusinessObjec</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>t.cst
/properties:OrderEntity.xml /out:OrderEntity.cs /merge:GeneratedOrderEntity</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal>Using the merge parameter we specify the name of the region,
in this case GeneratedOrderEntity, and the console application will execute the
template and then insert the results inside of this region. Here is a look at
the first section of our class file after this line is executed.</p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New";color:blue'>using</span><span style='font-size:10.0pt;
font-family:"Courier New"'> System;</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New";color:blue'>namespace</span><span style='font-size:
10.0pt;font-family:"Courier New"'> Infozerk.AuthServices.UnitTestSuite</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New"'>{</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New";color:blue'>      #region</span><span
style='font-size:10.0pt;font-family:"Courier New"'> GeneratedOrderEntity</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New"'>      </span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New";color:blue'>      #region</span><span
style='font-size:10.0pt;font-family:"Courier New"'> Order</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New"'>      <span style='color:gray'>///</span><span
style='color:green'> </span><span style='color:gray'>&lt;summary&gt;</span></span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New"'>      <span style='color:gray'>///</span><span
style='color:green'> This object represents the properties and methods of a
Order.</span></span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New"'>      <span style='color:gray'>///</span><span
style='color:green'> </span><span style='color:gray'>&lt;/summary&gt;</span></span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New"'>      <span style='color:blue'>public</span> <span
style='color:blue'>class</span> Order</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New"'>      {</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New"'>            <span style='color:blue'>protected</span>
<span style='color:blue'>int</span> _id;</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New"'>            <span style='color:blue'>protected</span>
<span style='color:blue'>string</span> _customerID = String.Empty;</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New"'>            <span style='color:blue'>protected</span>
<span style='color:blue'>int</span> _employeeID;</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New"'>            <span style='color:blue'>protected</span>
DateTime _orderDate;</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New"'>            <span style='color:blue'>protected</span>
DateTime _requiredDate;</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New"'>            <span style='color:blue'>protected</span>
DateTime _shippedDate;</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New"'>            <span style='color:blue'>protected</span>
<span style='color:blue'>int</span> _shipVia;</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='text-autospace:none'>--Rest of this class omitted for
the sake of brevity</p>

<p class=MsoNormal style='text-autospace:none'>&nbsp;</p>

<p class=MsoNormal style='text-autospace:none'>As you can see the Order class
was inserted into the region we specified.  The ability to merge generated
content into a code file makes it easy to regenerate content even if other
sections of the file are modified or hand-written.</p>

<p class=MsoNormal>&nbsp;</p>

<h2>Parameter Reference</h2>

<p class=MsoNormal>&nbsp;</p>

<h3>Specifying Output</h3>

<p class=MsoNormal><b>/out:&lt;file&gt;</b> - Specifies the name of the file
that should be created from the template output. i.e. /out:MyClass.cs</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b>/out:default</b>  Specifies that the file should be
saved using the default template file name. The default file name is set by
overriding the GetFileName method in your template. </p>

<p class=MsoNormal><b>&nbsp;</b></p>

<p class=MsoNormal><b>/merge:&lt;region&gt;</b> - Specifies the name of the
region that the template                         output should be merged into.
(Short form: /m)</p>

<p class=MsoNormal>&nbsp;</p>

<h3>Specifying Input</h3>

<p class=MsoNormal>                        </p>

<p class=MsoNormal><b>/template:&lt;file&gt;</b> - The template that you want
to execute. i.e. /template:MyTemplate.cst (Short form: /t)</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b>/properties:&lt;file&gt;</b> - The XML property file to
be used for generation i.e. /properties: MyProperties.xml (Short form: /p)</p>

<p class=MsoNormal>&nbsp;</p>

<h3> Compiler Options</h3>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b>/debug[+|-]</b>  Specifies that the template should
include debugging information (allows attaching a debugger to a running
template)</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b>/tempfiles[+|-]</b>  Specifies that temporary files
should be kept. (if debug is on then tempfiles will also be on)</p>

<p class=MsoNormal>&nbsp;</p>

<h3>Miscellaneous</h3>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b>/help</b> - Display  a help message (Short form: /?)</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b>/nologo </b> Suppresses the generator copyright message.</p>

</div>

</body>

</html>
