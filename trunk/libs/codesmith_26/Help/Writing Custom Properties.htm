<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 11 (filtered)">
<title>Writing Custom Property Editors</title>
<style>
<!--
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
margin-left:10pt;
	font-family:"Times New Roman";
	width:900;
}
h1
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:10pt;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:Arial;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;}
div.Section1
	{page:Section1;}
-->
</style>

</head>

<body lang=EN-US link=blue vlink=purple>

<div class=Section1>

<h1>Writing Custom Property Editors</h1>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>When you first start writing custom CodeSmith templates you
will most likely be content with using properties that are strings or integers,
but at some point you will discover that you want to create a property of a
different type; perhaps a custom type that you created or maybe one of the
types in the .NET framework that is not supported by the property grid. This is
pretty easy to do in a template, but how can someone specify a type like this
in the property grid when they are running the template?  If you created a
Person class, with a number of different properties, you would have no way to
have the user populate this class… unless you create a custom property editor. </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The property grid provides a method to write your own
property editor, when someone selects a property the grid will call a method
where you can write code to prompt the user for the necessary values. As an
example we are going to build a template which accepts an assembly as a
property and then using reflection loops through all of the classes, and the
methods of those classes, to build NUnit test stubs. </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>First, let’s take a look at our template with the assembly
property, but without any code for the custom editor. The first part of the
template is just our directives and our property, instead of using a property
declaration I have put the property in a script tag, you will see the need for
this in the next section.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>&lt;%@ CodeTemplate Language=&quot;C#&quot;
TargetLanguage=&quot;C#&quot; Description=&quot;Builds a class for each class
in the assembly, and a test stub for every method.&quot; %&gt;</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>&lt;%@ Import
NameSpace=&quot;System.Reflection&quot; %&gt;</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>&lt;script runat=&quot;template&quot;&gt;</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>private Assembly assembly;</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>public Assembly AssemblyToLoad</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>{</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>      get{return assembly;}</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>      set{assembly = value;}</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>}</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>&lt;/script&gt;</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal>Next we are going to create a class for each class in the
assembly, and a method for each method in each class. The output of this
template could be pasted directly into Visual Studio.NET and then used as a
guide when writing unit tests for this assembly.</p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>using System;</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>using NUnit.Framework;</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>&lt;%</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>      foreach(Type T in AssemblyToLoad.GetTypes())</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>      {</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>            if(T.IsClass)</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>            {</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>                  %&gt;</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>                  </span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>                  [TestFixture]</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>                  public class
&lt;%=T.Name%&gt;Tests</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>                  {</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>                  &lt;%</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>                              MethodInfo[] methods =
T.GetMethods ( BindingFlags.Public | BindingFlags.Instance |
BindingFlags.Static  );</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>                              foreach(MethodInfo M
in methods)</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>                              {</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>                                    %&gt;</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>                                    </span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>                                    [Test]</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>                                    public void
&lt;%=M.Name%&gt;Test</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>                                    {</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>                                          //TODO
Write this test</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>                                    </span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>                                    }                                   </span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>                                    &lt;%</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>                              }</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>            </span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>                  %&gt;}&lt;%</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>            }</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>      }</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>%&gt;</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This template will compile just fine, but because we have
exposed a type that the property grid does not know how to handle, there is no
way to specify the assembly that we want the template to load. </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To do this we need to create what is called a UITypeEditor,
this is a class that is built for a specific type and can be used by the
property grid. The UITypeEditor needs to be created in an assembly separate
from the template, so we will be using Visual Studio to build this class. (The
project can be downloaded <a
href="Example%20Templates/WritingCustomProperties/AssemblyHelper.zip">here</a>)</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The first thing we need to do is create a class that
inherits from the UITypeEditor class, this can be seen here:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New";color:blue'>public</span><span style='font-size:10.0pt;
font-family:"Courier New"'> <span style='color:blue'>class</span>
AssemblyFilePicker : UITypeEditor</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>{</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>      <span style='color:blue'>public</span> AssemblyFilePicker():
<span style='color:blue'>base</span>()</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>      {</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>      }</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>}</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Then we need to override two different methods of the
UITypeEditor class. The first method we need to override is the GetEditStyle
method which tells the property grid what type of editor should be used for
this type, in our example we are going to set the edit type to Modal.  This
means the propertygrid will add a small button to the right of the grid which
will trigger a modal dialog. Here is our GetEditStyle method:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New";color:blue'>public</span><span style='font-size:10.0pt;
font-family:"Courier New"'> <span style='color:blue'>override</span>
UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context) </span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>{</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>      <span style='color:blue'>return</span>
UITypeEditorEditStyle.Modal;</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>}</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The other method that we need to override is the EditValue
method, this is the method that is called when a user clicks on our property.
For the assembly type we need to first create an open file dialog then capture
and then return the results of the dialog to the grid. </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New";color:blue'>public</span><span style='font-size:10.0pt;
font-family:"Courier New"'> <span style='color:blue'>override</span> <span
style='color:blue'>object</span> EditValue(ITypeDescriptorContext context,
IServiceProvider provider, <span style='color:blue'>object</span> <span
style='color:blue'>value</span>) </span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>{</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>      </span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New";color:blue'>if</span><span style='font-size:10.0pt;
font-family:"Courier New"'> (provider != <span style='color:blue'>null</span>) </span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>{</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New"'>      </span></p>

<p class=MsoNormal>First we need to get a reference to the current service and
control, we need the reference to the control so we can pass it to the
ShowDialog method. </p>

<p class=MsoNormal style='text-indent:.5in;text-autospace:none'><span
style='font-size:10.0pt;font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:.5in;text-autospace:none'><span
style='font-size:10.0pt;font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>IWindowsFormsEditorService editorService =
(IWindowsFormsEditorService)provider.GetService(<span style='color:blue'>typeof</span>(IWindowsFormsEditorService));</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>Control editorControl = editorService <span
style='color:blue'>as</span> Control;</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>                        </span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New";color:blue'>if</span><span style='font-size:10.0pt;
font-family:"Courier New"'> (editorControl != <span style='color:blue'>null</span>)
</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>{</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New"'>            </span></p>

<p class=MsoNormal>Next we create an openFileDialog class and fill the
appropriate properties.</p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>OpenFileDialog openFileDialog = <span
style='color:blue'>new</span> OpenFileDialog();                         </span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>                              </span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>openFileDialog.CheckFileExists = <span
style='color:blue'>true</span>;</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>openFileDialog.DefaultExt = &quot;.dll&quot;;</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>openFileDialog.Multiselect = <span style='color:
blue'>false</span>;</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>openFileDialog.Title = &quot;Select an
Assembly:&quot;;</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>openFileDialog.Filter = &quot;Assembly Files |
*.dll&quot;;</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New"'>            </span></p>

<p class=MsoNormal>Then we pass the reference to the control and display our
dialog box to the user.</p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New"'>                  </span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>DialogResult result =
openFileDialog.ShowDialog(editorControl);</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal>Then we check if the user clicked OK, and if so we load the
assembly using the LoadForm method and pass in the file selected in the open
file dialog, then finally we return the value.</p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New"'>            </span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New";color:blue'>if</span><span style='font-size:10.0pt;
font-family:"Courier New"'> (result == DialogResult.OK)</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>            {</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>Assembly assembly = Assembly.LoadFrom(
openFileDialog.FileName ) ;</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>                  <span style='color:blue'>value</span>
= assembly; </span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>            }</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>            <span style='color:blue'>else</span></span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>            {</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>                  <span style='color:blue'>value</span>
= <span style='color:blue'>null</span>;</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>            }</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>      }</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>}</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>                  </span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New";color:blue'>return</span><span style='font-size:10.0pt;
font-family:"Courier New"'> <span style='color:blue'>value</span>;</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>}</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This value is then set in the property grid and can be read
by our template, but before we are done we need to import this assembly into
the template and markup our property with a couple attributes.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>To load this assembly we simply need to place the assembly
in the same directory as the template, and then add the following two
directives to our template.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>&lt;%@ Assembly Name=&quot;AssemblyHelper&quot;
%&gt;</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>&lt;%@ Import NameSpace=&quot;AssemblyHelper&quot;
%&gt;</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Then we need to add the Editor attribute to our assembly
property and specify the UITypeEditor that we created.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>[Editor(typeof(AssemblyHelper.AssemblyFilePicker),
typeof(System.Drawing.Design.UITypeEditor))]</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>public Assembly AssemblyToLoad</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>{</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>      get{return assembly;}</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>      set{assembly = value;}</span></p>

<p class=MsoNormal style='background:#D9D9D9'><span style='font-size:10.0pt;
font-family:"Courier New"'>}</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>When the property grid reads these attributes it will use
our custom UITypeEditor to allow the user to select an assembly from the open
file dialog. </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><u>Additional Information</u></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><a
href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dndotnet/html/usingpropgrid.asp?frame=true">Getting
the most out of the PropertyGrid Control</a> (MSDN)</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><u>Downloads</u></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><a
href="Example%20Templates/WritingCustomProperties/TestGenerator.cst">Template</a></p>

<p class=MsoNormal><a
href="Example%20Templates/WritingCustomProperties/AssemblyHelper.dll">AssemblyHelper
Assembly</a></p>

<p class=MsoNormal><a
href="Example%20Templates/WritingCustomProperties/AssemblyHelper.zip">Assembly
Source</a></p>

</div>

</body>

</html>
