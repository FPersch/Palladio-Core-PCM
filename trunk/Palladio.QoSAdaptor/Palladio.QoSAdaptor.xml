<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Palladio.QoSAdaptor</name>
    </assembly>
    <members>
        <member name="T:Palladio.QoSAdaptor.Configuration.Config">
            <summary>
            This class is a container for some configuration constants needed by 
            the components in the AdapterGeneration projects.
            IMPORTANT: All links are specified relative to the bin directory in 
            the top Palladio.QoSAdaptor folder. All executables created by the 
            Palladio.QoSAdaptor subprojects are therefore assumed to be saved in  
            that folder.
            </summary>
        </member>
        <member name="F:Palladio.QoSAdaptor.Configuration.Config.PATTERN_DIRECTORY">
            <summary>
            Path to the directory in which all pattern information is saved.
            The path is relative to the bin directory.
            </summary>
        </member>
        <member name="F:Palladio.QoSAdaptor.Configuration.Config.considerSubAspectsInPatternSearch">
            <summary>
            Indicates whether subaspects of mismatched QoS aspects should be 
            considered when searching for patterns that are able to correct 
            the mismatch.
            </summary>
        </member>
        <member name="T:Palladio.QoSAdaptor.Enumerations.InterfaceModel">
            <summary>
            Enumeration representing the considered interface model
            </summary>
        </member>
        <member name="T:Palladio.QoSAdaptor.Exceptions.IncompleteInterfaceCopingException">
            <summary>
            Zusammenfassung für IncompleteInterfaceCopingException.
            </summary>
        </member>
        <member name="T:Palladio.QoSAdaptor.Interfaces.IComparator">
            <summary>
            Describes an interface for the comparison of the interface required by
            on component and the interface provided by another component. Thereby
            it abstracts from the considered interface model. This could be 
            syntax-based, behavioral, interaction-based, conceptual or 
            quality-based, which is used in this prototypical implementation.
            </summary>
        </member>
        <member name="M:Palladio.QoSAdaptor.Interfaces.IComparator.FindMismatches(Palladio.QoSAdaptor.Interfaces.IInterfaceModelSpecification,Palladio.QoSAdaptor.Interfaces.IInterfaceModelSpecification)">
            <summary>
            This method is used to find mismatches between the two given 
            interface model descriptions. TextReader are used to abstract from
            the considered interface model. It is thereby assumed, that every
            interface model can be described in a text representation. 
            
            TODO: Is this OK or should object be taken as parameter type?
            
            It is furthermore assumed that the returned IList contains objects
            of type IMismatch.
            
            TODO: Introduce IMismatch -> Are there similarities of the 
            mismatches of the different interface models?
            </summary>
            <param name="requiredSpecification">QML specification of the 
            required interface.</param>
            <param name="providedSpecification">QML specification of the 
            provided interface.</param>
            <returns>A list of interface mismatches.</returns>
        </member>
        <member name="T:Palladio.QoSAdaptor.Interfaces.IInterfaceModelSpecification">
            <summary>
            Interface that has to be implemented by all specifications of an 
            interface model.
            </summary>
        </member>
        <member name="T:Palladio.QoSAdaptor.Interfaces.IMismatch">
            <summary>
            Represents a mismatch between two interface model descriptions. 
            
            TODO: Find similarities between the interface model mismatches. 
            TODO: How can details about the mismatches as percentiles in an 
            		QML specification be modelled commonly???
            </summary>
        </member>
        <member name="M:Palladio.QoSAdaptor.Interfaces.IMismatch.ToString">
            <summary>
            String representation of the mismatch needed in the GUI.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Palladio.QoSAdaptor.Interfaces.IMismatch.InterfaceName">
            <summary>
            Returns the name of the interface the mismatch occurs in.
            </summary>
        </member>
        <member name="P:Palladio.QoSAdaptor.Interfaces.IMismatch.Entity">
            <summary>
            Returns the name of the entity that corresponds to this mismatch.
            Returns null, if the mismatch regards the whole interface.
            </summary>
        </member>
        <member name="P:Palladio.QoSAdaptor.Interfaces.IMismatch.MismatchAttribute">
            <summary>
            Returns the name of the mismatched attribute belonging to this 
            Mismatch
            </summary>
        </member>
        <member name="P:Palladio.QoSAdaptor.Interfaces.IMismatch.MismatchSubAttribute">
            <summary>
            Returns the name of the mismatched subattribute belonging to this 
            Mismatch
            </summary>
        </member>
        <member name="P:Palladio.QoSAdaptor.Interfaces.IMismatch.MismatchDetails">
            <summary>
            Provides further information about the mismatch.
            </summary>
        </member>
        <member name="T:Palladio.QoSAdaptor.Utils.HiResTimer">
            <summary>
            This high resolution timer class by Shawn Van Ness has been modified such that a
            call to the <see cref="M:Palladio.QoSAdaptor.Utils.HiResTimer.Stop"/> method returns <see cref="P:Palladio.QoSAdaptor.Utils.HiResTimer.ElapsedMicroseconds"/>
            instead of <see cref="P:Palladio.QoSAdaptor.Utils.HiResTimer.ElapsedTicks"/>, for convenience.
            
            This class has been copied unchanged from the software developed by 
            Rico Starke in the context of his diploma thesis "Untersuchung des 
            Trade-Offs zwischen Performanz und Wartbarkeit von Persistenz-
            Frameworks für .NET".
            </summary>
        </member>
        <member name="M:Palladio.QoSAdaptor.Utils.HiResTimer.#ctor">
            <summary>
            Creates a new instance of the timer class.
            </summary>
        </member>
        <member name="M:Palladio.QoSAdaptor.Utils.HiResTimer.Start">
            <summary>
            Starts a new timer measurement period.
            </summary>
        </member>
        <member name="M:Palladio.QoSAdaptor.Utils.HiResTimer.Stop">
            <summary>
            Stops the timer and returns the number of
            elapsed microseconds.
            </summary>		
        </member>
        <member name="F:Palladio.QoSAdaptor.Utils.HiResTimer.a">
            <summary>
            Represents the starting time of the current timing operation.
            </summary>
        </member>
        <member name="F:Palladio.QoSAdaptor.Utils.HiResTimer.b">
            <summary>
            Represents the ending time of the current timing operation.
            </summary>
        </member>
        <member name="F:Palladio.QoSAdaptor.Utils.HiResTimer.f">
            <summary>
            Represents the ending time of the current timing operation.
            </summary>
        </member>
        <member name="P:Palladio.QoSAdaptor.Utils.HiResTimer.ElapsedTicks">
            <summary>
            Gets the number of elapsed ticks for the 
            timespan between the most recent calls of
            <see cref="M:Palladio.QoSAdaptor.Utils.HiResTimer.Start"/> and <see cref="M:Palladio.QoSAdaptor.Utils.HiResTimer.Stop"/>.
            </summary>
        </member>
        <member name="P:Palladio.QoSAdaptor.Utils.HiResTimer.ElapsedMicroseconds">
            <summary>
            Gets the number of elapsed microseconds for the 
            timespan between the most recent calls of
            <see cref="M:Palladio.QoSAdaptor.Utils.HiResTimer.Start"/> and <see cref="M:Palladio.QoSAdaptor.Utils.HiResTimer.Stop"/>.
            </summary>
        </member>
        <member name="P:Palladio.QoSAdaptor.Utils.HiResTimer.ElapsedTimeSpan">
            <summary>
            Gets the <see cref="T:System.TimeSpan"/> between the most
            recent calls of <see cref="M:Palladio.QoSAdaptor.Utils.HiResTimer.Start"/> and <see cref="M:Palladio.QoSAdaptor.Utils.HiResTimer.Stop"/>.
            </summary>
        </member>
        <member name="P:Palladio.QoSAdaptor.Utils.HiResTimer.Frequency">
            <summary>
            Gets the frequency of the timer.
            </summary>
        </member>
        <member name="T:Palladio.QoSAdaptor.Utils.LoggingHelper">
            <summary>
            Contains some static methods to make logging with log4net on the
            server or client side easier.
            
            This class has been copied from the software developed by Rico Starke
            in the context of his diploma thesis "Untersuchung des Trade-Offs 
            zwischen Performanz und Wartbarkeit von Persistenz-Frameworks für .NET".
            
            Small changes have been made due to the changes in the log4net 
            framework from version 1.2.0 to 1.2.9.
            </summary>
        </member>
        <member name="M:Palladio.QoSAdaptor.Utils.LoggingHelper.SaveLogAppenderDataToDisk(log4net.Appender.MemoryAppender,System.String)">
            <summary>
            Stores all events that have been written to the given <see cref="T:log4net.Appender.MemoryAppender"/>
            to a file. If the file already exists, it is overwritten.
            </summary>
            <param name="ma"><see cref="T:log4net.Appender.MemoryAppender"/> containing the desired log events</param>
            <param name="fileName">name of the file</param>
        </member>
        <member name="M:Palladio.QoSAdaptor.Utils.LoggingHelper.SaveLogAppenderDataToDisk(log4net.Appender.MemoryAppender,System.String,System.Boolean)">
            <summary>
            Stores all events that have been written to the given <see cref="T:log4net.Appender.MemoryAppender"/>
            to a file.
            </summary>
            <param name="ma"><see cref="T:log4net.Appender.MemoryAppender"/> containing the desired log events</param>
            <param name="fileName">name of the file</param>
            <param name="append">defines whether the log events should be appended to
            the file (<c>true</c>) or if a new file should be created (<c>false</c>)</param>
        </member>
    </members>
</doc>
