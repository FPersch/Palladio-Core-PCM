//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Palldio.Interceptor.Data {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ResultDataSet : DataSet {
        
        private TimeTableDataTable tableTimeTable;
        
        private ClassTableDataTable tableClassTable;
        
        private ExecutionTimeTableDataTable tableExecutionTimeTable;
        
        private MethodTableDataTable tableMethodTable;
        
        private RunTableDataTable tableRunTable;
        
        private CallTableDataTable tableCallTable;
        
        public ResultDataSet() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ResultDataSet(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["TimeTable"] != null)) {
                    this.Tables.Add(new TimeTableDataTable(ds.Tables["TimeTable"]));
                }
                if ((ds.Tables["ClassTable"] != null)) {
                    this.Tables.Add(new ClassTableDataTable(ds.Tables["ClassTable"]));
                }
                if ((ds.Tables["ExecutionTimeTable"] != null)) {
                    this.Tables.Add(new ExecutionTimeTableDataTable(ds.Tables["ExecutionTimeTable"]));
                }
                if ((ds.Tables["MethodTable"] != null)) {
                    this.Tables.Add(new MethodTableDataTable(ds.Tables["MethodTable"]));
                }
                if ((ds.Tables["RunTable"] != null)) {
                    this.Tables.Add(new RunTableDataTable(ds.Tables["RunTable"]));
                }
                if ((ds.Tables["CallTable"] != null)) {
                    this.Tables.Add(new CallTableDataTable(ds.Tables["CallTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TimeTableDataTable TimeTable {
            get {
                return this.tableTimeTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClassTableDataTable ClassTable {
            get {
                return this.tableClassTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExecutionTimeTableDataTable ExecutionTimeTable {
            get {
                return this.tableExecutionTimeTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MethodTableDataTable MethodTable {
            get {
                return this.tableMethodTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RunTableDataTable RunTable {
            get {
                return this.tableRunTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CallTableDataTable CallTable {
            get {
                return this.tableCallTable;
            }
        }
        
        public override DataSet Clone() {
            ResultDataSet cln = ((ResultDataSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["TimeTable"] != null)) {
                this.Tables.Add(new TimeTableDataTable(ds.Tables["TimeTable"]));
            }
            if ((ds.Tables["ClassTable"] != null)) {
                this.Tables.Add(new ClassTableDataTable(ds.Tables["ClassTable"]));
            }
            if ((ds.Tables["ExecutionTimeTable"] != null)) {
                this.Tables.Add(new ExecutionTimeTableDataTable(ds.Tables["ExecutionTimeTable"]));
            }
            if ((ds.Tables["MethodTable"] != null)) {
                this.Tables.Add(new MethodTableDataTable(ds.Tables["MethodTable"]));
            }
            if ((ds.Tables["RunTable"] != null)) {
                this.Tables.Add(new RunTableDataTable(ds.Tables["RunTable"]));
            }
            if ((ds.Tables["CallTable"] != null)) {
                this.Tables.Add(new CallTableDataTable(ds.Tables["CallTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableTimeTable = ((TimeTableDataTable)(this.Tables["TimeTable"]));
            if ((this.tableTimeTable != null)) {
                this.tableTimeTable.InitVars();
            }
            this.tableClassTable = ((ClassTableDataTable)(this.Tables["ClassTable"]));
            if ((this.tableClassTable != null)) {
                this.tableClassTable.InitVars();
            }
            this.tableExecutionTimeTable = ((ExecutionTimeTableDataTable)(this.Tables["ExecutionTimeTable"]));
            if ((this.tableExecutionTimeTable != null)) {
                this.tableExecutionTimeTable.InitVars();
            }
            this.tableMethodTable = ((MethodTableDataTable)(this.Tables["MethodTable"]));
            if ((this.tableMethodTable != null)) {
                this.tableMethodTable.InitVars();
            }
            this.tableRunTable = ((RunTableDataTable)(this.Tables["RunTable"]));
            if ((this.tableRunTable != null)) {
                this.tableRunTable.InitVars();
            }
            this.tableCallTable = ((CallTableDataTable)(this.Tables["CallTable"]));
            if ((this.tableCallTable != null)) {
                this.tableCallTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "ResultDataSet";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/ResultDataSet.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableTimeTable = new TimeTableDataTable();
            this.Tables.Add(this.tableTimeTable);
            this.tableClassTable = new ClassTableDataTable();
            this.Tables.Add(this.tableClassTable);
            this.tableExecutionTimeTable = new ExecutionTimeTableDataTable();
            this.Tables.Add(this.tableExecutionTimeTable);
            this.tableMethodTable = new MethodTableDataTable();
            this.Tables.Add(this.tableMethodTable);
            this.tableRunTable = new RunTableDataTable();
            this.Tables.Add(this.tableRunTable);
            this.tableCallTable = new CallTableDataTable();
            this.Tables.Add(this.tableCallTable);
        }
        
        private bool ShouldSerializeTimeTable() {
            return false;
        }
        
        private bool ShouldSerializeClassTable() {
            return false;
        }
        
        private bool ShouldSerializeExecutionTimeTable() {
            return false;
        }
        
        private bool ShouldSerializeMethodTable() {
            return false;
        }
        
        private bool ShouldSerializeRunTable() {
            return false;
        }
        
        private bool ShouldSerializeCallTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void TimeTableRowChangeEventHandler(object sender, TimeTableRowChangeEvent e);
        
        public delegate void ClassTableRowChangeEventHandler(object sender, ClassTableRowChangeEvent e);
        
        public delegate void ExecutionTimeTableRowChangeEventHandler(object sender, ExecutionTimeTableRowChangeEvent e);
        
        public delegate void MethodTableRowChangeEventHandler(object sender, MethodTableRowChangeEvent e);
        
        public delegate void RunTableRowChangeEventHandler(object sender, RunTableRowChangeEvent e);
        
        public delegate void CallTableRowChangeEventHandler(object sender, CallTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TimeTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            internal TimeTableDataTable() : 
                    base("TimeTable") {
                this.InitClass();
            }
            
            internal TimeTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            public TimeTableRow this[int index] {
                get {
                    return ((TimeTableRow)(this.Rows[index]));
                }
            }
            
            public event TimeTableRowChangeEventHandler TimeTableRowChanged;
            
            public event TimeTableRowChangeEventHandler TimeTableRowChanging;
            
            public event TimeTableRowChangeEventHandler TimeTableRowDeleted;
            
            public event TimeTableRowChangeEventHandler TimeTableRowDeleting;
            
            public void AddTimeTableRow(TimeTableRow row) {
                this.Rows.Add(row);
            }
            
            public TimeTableRow AddTimeTableRow(long ID) {
                TimeTableRow rowTimeTableRow = ((TimeTableRow)(this.NewRow()));
                rowTimeTableRow.ItemArray = new object[] {
                        ID};
                this.Rows.Add(rowTimeTableRow);
                return rowTimeTableRow;
            }
            
            public TimeTableRow FindByID(long ID) {
                return ((TimeTableRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TimeTableDataTable cln = ((TimeTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TimeTableDataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
            }
            
            public TimeTableRow NewTimeTableRow() {
                return ((TimeTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TimeTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TimeTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TimeTableRowChanged != null)) {
                    this.TimeTableRowChanged(this, new TimeTableRowChangeEvent(((TimeTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TimeTableRowChanging != null)) {
                    this.TimeTableRowChanging(this, new TimeTableRowChangeEvent(((TimeTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TimeTableRowDeleted != null)) {
                    this.TimeTableRowDeleted(this, new TimeTableRowChangeEvent(((TimeTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TimeTableRowDeleting != null)) {
                    this.TimeTableRowDeleting(this, new TimeTableRowChangeEvent(((TimeTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTimeTableRow(TimeTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TimeTableRow : DataRow {
            
            private TimeTableDataTable tableTimeTable;
            
            internal TimeTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTimeTable = ((TimeTableDataTable)(this.Table));
            }
            
            public long ID {
                get {
                    return ((long)(this[this.tableTimeTable.IDColumn]));
                }
                set {
                    this[this.tableTimeTable.IDColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TimeTableRowChangeEvent : EventArgs {
            
            private TimeTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public TimeTableRowChangeEvent(TimeTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TimeTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClassTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn columnClassName;
            
            internal ClassTableDataTable() : 
                    base("ClassTable") {
                this.InitClass();
            }
            
            internal ClassTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn ClassNameColumn {
                get {
                    return this.columnClassName;
                }
            }
            
            public ClassTableRow this[int index] {
                get {
                    return ((ClassTableRow)(this.Rows[index]));
                }
            }
            
            public event ClassTableRowChangeEventHandler ClassTableRowChanged;
            
            public event ClassTableRowChangeEventHandler ClassTableRowChanging;
            
            public event ClassTableRowChangeEventHandler ClassTableRowDeleted;
            
            public event ClassTableRowChangeEventHandler ClassTableRowDeleting;
            
            public void AddClassTableRow(ClassTableRow row) {
                this.Rows.Add(row);
            }
            
            public ClassTableRow AddClassTableRow(string ClassName) {
                ClassTableRow rowClassTableRow = ((ClassTableRow)(this.NewRow()));
                rowClassTableRow.ItemArray = new object[] {
                        null,
                        ClassName};
                this.Rows.Add(rowClassTableRow);
                return rowClassTableRow;
            }
            
            public ClassTableRow FindByID(long ID) {
                return ((ClassTableRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ClassTableDataTable cln = ((ClassTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ClassTableDataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.columnClassName = this.Columns["ClassName"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnClassName = new DataColumn("ClassName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClassName);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnClassName.AllowDBNull = false;
            }
            
            public ClassTableRow NewClassTableRow() {
                return ((ClassTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ClassTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ClassTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClassTableRowChanged != null)) {
                    this.ClassTableRowChanged(this, new ClassTableRowChangeEvent(((ClassTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClassTableRowChanging != null)) {
                    this.ClassTableRowChanging(this, new ClassTableRowChangeEvent(((ClassTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClassTableRowDeleted != null)) {
                    this.ClassTableRowDeleted(this, new ClassTableRowChangeEvent(((ClassTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClassTableRowDeleting != null)) {
                    this.ClassTableRowDeleting(this, new ClassTableRowChangeEvent(((ClassTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveClassTableRow(ClassTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClassTableRow : DataRow {
            
            private ClassTableDataTable tableClassTable;
            
            internal ClassTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableClassTable = ((ClassTableDataTable)(this.Table));
            }
            
            public long ID {
                get {
                    return ((long)(this[this.tableClassTable.IDColumn]));
                }
                set {
                    this[this.tableClassTable.IDColumn] = value;
                }
            }
            
            public string ClassName {
                get {
                    return ((string)(this[this.tableClassTable.ClassNameColumn]));
                }
                set {
                    this[this.tableClassTable.ClassNameColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClassTableRowChangeEvent : EventArgs {
            
            private ClassTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public ClassTableRowChangeEvent(ClassTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ClassTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ExecutionTimeTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnMethodID;
            
            private DataColumn columnTotalTime;
            
            private DataColumn columnAverageTime;
            
            private DataColumn columnNumOfCalls;
            
            internal ExecutionTimeTableDataTable() : 
                    base("ExecutionTimeTable") {
                this.InitClass();
            }
            
            internal ExecutionTimeTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn MethodIDColumn {
                get {
                    return this.columnMethodID;
                }
            }
            
            internal DataColumn TotalTimeColumn {
                get {
                    return this.columnTotalTime;
                }
            }
            
            internal DataColumn AverageTimeColumn {
                get {
                    return this.columnAverageTime;
                }
            }
            
            internal DataColumn NumOfCallsColumn {
                get {
                    return this.columnNumOfCalls;
                }
            }
            
            public ExecutionTimeTableRow this[int index] {
                get {
                    return ((ExecutionTimeTableRow)(this.Rows[index]));
                }
            }
            
            public event ExecutionTimeTableRowChangeEventHandler ExecutionTimeTableRowChanged;
            
            public event ExecutionTimeTableRowChangeEventHandler ExecutionTimeTableRowChanging;
            
            public event ExecutionTimeTableRowChangeEventHandler ExecutionTimeTableRowDeleted;
            
            public event ExecutionTimeTableRowChangeEventHandler ExecutionTimeTableRowDeleting;
            
            public void AddExecutionTimeTableRow(ExecutionTimeTableRow row) {
                this.Rows.Add(row);
            }
            
            public ExecutionTimeTableRow AddExecutionTimeTableRow(long MethodID, long TotalTime, long AverageTime, long NumOfCalls) {
                ExecutionTimeTableRow rowExecutionTimeTableRow = ((ExecutionTimeTableRow)(this.NewRow()));
                rowExecutionTimeTableRow.ItemArray = new object[] {
                        MethodID,
                        TotalTime,
                        AverageTime,
                        NumOfCalls};
                this.Rows.Add(rowExecutionTimeTableRow);
                return rowExecutionTimeTableRow;
            }
            
            public ExecutionTimeTableRow FindByMethodID(long MethodID) {
                return ((ExecutionTimeTableRow)(this.Rows.Find(new object[] {
                            MethodID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ExecutionTimeTableDataTable cln = ((ExecutionTimeTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ExecutionTimeTableDataTable();
            }
            
            internal void InitVars() {
                this.columnMethodID = this.Columns["MethodID"];
                this.columnTotalTime = this.Columns["TotalTime"];
                this.columnAverageTime = this.Columns["AverageTime"];
                this.columnNumOfCalls = this.Columns["NumOfCalls"];
            }
            
            private void InitClass() {
                this.columnMethodID = new DataColumn("MethodID", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMethodID);
                this.columnTotalTime = new DataColumn("TotalTime", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTotalTime);
                this.columnAverageTime = new DataColumn("AverageTime", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAverageTime);
                this.columnNumOfCalls = new DataColumn("NumOfCalls", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumOfCalls);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnMethodID}, true));
                this.columnMethodID.AllowDBNull = false;
                this.columnMethodID.Unique = true;
                this.columnTotalTime.AllowDBNull = false;
                this.columnAverageTime.AllowDBNull = false;
                this.columnNumOfCalls.AllowDBNull = false;
            }
            
            public ExecutionTimeTableRow NewExecutionTimeTableRow() {
                return ((ExecutionTimeTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ExecutionTimeTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ExecutionTimeTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExecutionTimeTableRowChanged != null)) {
                    this.ExecutionTimeTableRowChanged(this, new ExecutionTimeTableRowChangeEvent(((ExecutionTimeTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExecutionTimeTableRowChanging != null)) {
                    this.ExecutionTimeTableRowChanging(this, new ExecutionTimeTableRowChangeEvent(((ExecutionTimeTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExecutionTimeTableRowDeleted != null)) {
                    this.ExecutionTimeTableRowDeleted(this, new ExecutionTimeTableRowChangeEvent(((ExecutionTimeTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExecutionTimeTableRowDeleting != null)) {
                    this.ExecutionTimeTableRowDeleting(this, new ExecutionTimeTableRowChangeEvent(((ExecutionTimeTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveExecutionTimeTableRow(ExecutionTimeTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ExecutionTimeTableRow : DataRow {
            
            private ExecutionTimeTableDataTable tableExecutionTimeTable;
            
            internal ExecutionTimeTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableExecutionTimeTable = ((ExecutionTimeTableDataTable)(this.Table));
            }
            
            public long MethodID {
                get {
                    return ((long)(this[this.tableExecutionTimeTable.MethodIDColumn]));
                }
                set {
                    this[this.tableExecutionTimeTable.MethodIDColumn] = value;
                }
            }
            
            public long TotalTime {
                get {
                    return ((long)(this[this.tableExecutionTimeTable.TotalTimeColumn]));
                }
                set {
                    this[this.tableExecutionTimeTable.TotalTimeColumn] = value;
                }
            }
            
            public long AverageTime {
                get {
                    return ((long)(this[this.tableExecutionTimeTable.AverageTimeColumn]));
                }
                set {
                    this[this.tableExecutionTimeTable.AverageTimeColumn] = value;
                }
            }
            
            public long NumOfCalls {
                get {
                    return ((long)(this[this.tableExecutionTimeTable.NumOfCallsColumn]));
                }
                set {
                    this[this.tableExecutionTimeTable.NumOfCallsColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ExecutionTimeTableRowChangeEvent : EventArgs {
            
            private ExecutionTimeTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public ExecutionTimeTableRowChangeEvent(ExecutionTimeTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ExecutionTimeTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MethodTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn columnClassID;
            
            private DataColumn columnMethodName;
            
            internal MethodTableDataTable() : 
                    base("MethodTable") {
                this.InitClass();
            }
            
            internal MethodTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn ClassIDColumn {
                get {
                    return this.columnClassID;
                }
            }
            
            internal DataColumn MethodNameColumn {
                get {
                    return this.columnMethodName;
                }
            }
            
            public MethodTableRow this[int index] {
                get {
                    return ((MethodTableRow)(this.Rows[index]));
                }
            }
            
            public event MethodTableRowChangeEventHandler MethodTableRowChanged;
            
            public event MethodTableRowChangeEventHandler MethodTableRowChanging;
            
            public event MethodTableRowChangeEventHandler MethodTableRowDeleted;
            
            public event MethodTableRowChangeEventHandler MethodTableRowDeleting;
            
            public void AddMethodTableRow(MethodTableRow row) {
                this.Rows.Add(row);
            }
            
            public MethodTableRow AddMethodTableRow(long ClassID, string MethodName) {
                MethodTableRow rowMethodTableRow = ((MethodTableRow)(this.NewRow()));
                rowMethodTableRow.ItemArray = new object[] {
                        null,
                        ClassID,
                        MethodName};
                this.Rows.Add(rowMethodTableRow);
                return rowMethodTableRow;
            }
            
            public MethodTableRow FindByID(long ID) {
                return ((MethodTableRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                MethodTableDataTable cln = ((MethodTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new MethodTableDataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.columnClassID = this.Columns["ClassID"];
                this.columnMethodName = this.Columns["MethodName"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnClassID = new DataColumn("ClassID", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClassID);
                this.columnMethodName = new DataColumn("MethodName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMethodName);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnClassID.AllowDBNull = false;
                this.columnMethodName.AllowDBNull = false;
            }
            
            public MethodTableRow NewMethodTableRow() {
                return ((MethodTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new MethodTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(MethodTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MethodTableRowChanged != null)) {
                    this.MethodTableRowChanged(this, new MethodTableRowChangeEvent(((MethodTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MethodTableRowChanging != null)) {
                    this.MethodTableRowChanging(this, new MethodTableRowChangeEvent(((MethodTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MethodTableRowDeleted != null)) {
                    this.MethodTableRowDeleted(this, new MethodTableRowChangeEvent(((MethodTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MethodTableRowDeleting != null)) {
                    this.MethodTableRowDeleting(this, new MethodTableRowChangeEvent(((MethodTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveMethodTableRow(MethodTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MethodTableRow : DataRow {
            
            private MethodTableDataTable tableMethodTable;
            
            internal MethodTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableMethodTable = ((MethodTableDataTable)(this.Table));
            }
            
            public long ID {
                get {
                    return ((long)(this[this.tableMethodTable.IDColumn]));
                }
                set {
                    this[this.tableMethodTable.IDColumn] = value;
                }
            }
            
            public long ClassID {
                get {
                    return ((long)(this[this.tableMethodTable.ClassIDColumn]));
                }
                set {
                    this[this.tableMethodTable.ClassIDColumn] = value;
                }
            }
            
            public string MethodName {
                get {
                    return ((string)(this[this.tableMethodTable.MethodNameColumn]));
                }
                set {
                    this[this.tableMethodTable.MethodNameColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MethodTableRowChangeEvent : EventArgs {
            
            private MethodTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public MethodTableRowChangeEvent(MethodTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public MethodTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RunTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn columnStartTime;
            
            private DataColumn columnStopTime;
            
            internal RunTableDataTable() : 
                    base("RunTable") {
                this.InitClass();
            }
            
            internal RunTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn StartTimeColumn {
                get {
                    return this.columnStartTime;
                }
            }
            
            internal DataColumn StopTimeColumn {
                get {
                    return this.columnStopTime;
                }
            }
            
            public RunTableRow this[int index] {
                get {
                    return ((RunTableRow)(this.Rows[index]));
                }
            }
            
            public event RunTableRowChangeEventHandler RunTableRowChanged;
            
            public event RunTableRowChangeEventHandler RunTableRowChanging;
            
            public event RunTableRowChangeEventHandler RunTableRowDeleted;
            
            public event RunTableRowChangeEventHandler RunTableRowDeleting;
            
            public void AddRunTableRow(RunTableRow row) {
                this.Rows.Add(row);
            }
            
            public RunTableRow AddRunTableRow(long StartTime, long StopTime) {
                RunTableRow rowRunTableRow = ((RunTableRow)(this.NewRow()));
                rowRunTableRow.ItemArray = new object[] {
                        null,
                        StartTime,
                        StopTime};
                this.Rows.Add(rowRunTableRow);
                return rowRunTableRow;
            }
            
            public RunTableRow FindByID(long ID) {
                return ((RunTableRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                RunTableDataTable cln = ((RunTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new RunTableDataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.columnStartTime = this.Columns["StartTime"];
                this.columnStopTime = this.Columns["StopTime"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnStartTime = new DataColumn("StartTime", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStartTime);
                this.columnStopTime = new DataColumn("StopTime", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStopTime);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnStartTime.AllowDBNull = false;
                this.columnStopTime.AllowDBNull = false;
            }
            
            public RunTableRow NewRunTableRow() {
                return ((RunTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new RunTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(RunTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RunTableRowChanged != null)) {
                    this.RunTableRowChanged(this, new RunTableRowChangeEvent(((RunTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RunTableRowChanging != null)) {
                    this.RunTableRowChanging(this, new RunTableRowChangeEvent(((RunTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RunTableRowDeleted != null)) {
                    this.RunTableRowDeleted(this, new RunTableRowChangeEvent(((RunTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RunTableRowDeleting != null)) {
                    this.RunTableRowDeleting(this, new RunTableRowChangeEvent(((RunTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveRunTableRow(RunTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RunTableRow : DataRow {
            
            private RunTableDataTable tableRunTable;
            
            internal RunTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableRunTable = ((RunTableDataTable)(this.Table));
            }
            
            public long ID {
                get {
                    return ((long)(this[this.tableRunTable.IDColumn]));
                }
                set {
                    this[this.tableRunTable.IDColumn] = value;
                }
            }
            
            public long StartTime {
                get {
                    return ((long)(this[this.tableRunTable.StartTimeColumn]));
                }
                set {
                    this[this.tableRunTable.StartTimeColumn] = value;
                }
            }
            
            public long StopTime {
                get {
                    return ((long)(this[this.tableRunTable.StopTimeColumn]));
                }
                set {
                    this[this.tableRunTable.StopTimeColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RunTableRowChangeEvent : EventArgs {
            
            private RunTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public RunTableRowChangeEvent(RunTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public RunTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CallTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn columnCallNumber;
            
            private DataColumn columnCallLevel;
            
            private DataColumn columnCallerID;
            
            private DataColumn columnClassName;
            
            private DataColumn columnMethodName;
            
            private DataColumn columnCallTime;
            
            private DataColumn columnReturnTime;
            
            private DataColumn columnRunID;
            
            private DataColumn columnThreadID;
            
            internal CallTableDataTable() : 
                    base("CallTable") {
                this.InitClass();
            }
            
            internal CallTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn CallNumberColumn {
                get {
                    return this.columnCallNumber;
                }
            }
            
            internal DataColumn CallLevelColumn {
                get {
                    return this.columnCallLevel;
                }
            }
            
            internal DataColumn CallerIDColumn {
                get {
                    return this.columnCallerID;
                }
            }
            
            internal DataColumn ClassNameColumn {
                get {
                    return this.columnClassName;
                }
            }
            
            internal DataColumn MethodNameColumn {
                get {
                    return this.columnMethodName;
                }
            }
            
            internal DataColumn CallTimeColumn {
                get {
                    return this.columnCallTime;
                }
            }
            
            internal DataColumn ReturnTimeColumn {
                get {
                    return this.columnReturnTime;
                }
            }
            
            internal DataColumn RunIDColumn {
                get {
                    return this.columnRunID;
                }
            }
            
            internal DataColumn ThreadIDColumn {
                get {
                    return this.columnThreadID;
                }
            }
            
            public CallTableRow this[int index] {
                get {
                    return ((CallTableRow)(this.Rows[index]));
                }
            }
            
            public event CallTableRowChangeEventHandler CallTableRowChanged;
            
            public event CallTableRowChangeEventHandler CallTableRowChanging;
            
            public event CallTableRowChangeEventHandler CallTableRowDeleted;
            
            public event CallTableRowChangeEventHandler CallTableRowDeleting;
            
            public void AddCallTableRow(CallTableRow row) {
                this.Rows.Add(row);
            }
            
            public CallTableRow AddCallTableRow(long CallNumber, long CallLevel, long CallerID, string ClassName, string MethodName, long CallTime, long ReturnTime, long RunID, long ThreadID) {
                CallTableRow rowCallTableRow = ((CallTableRow)(this.NewRow()));
                rowCallTableRow.ItemArray = new object[] {
                        null,
                        CallNumber,
                        CallLevel,
                        CallerID,
                        ClassName,
                        MethodName,
                        CallTime,
                        ReturnTime,
                        RunID,
                        ThreadID};
                this.Rows.Add(rowCallTableRow);
                return rowCallTableRow;
            }
            
            public CallTableRow FindByID(long ID) {
                return ((CallTableRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CallTableDataTable cln = ((CallTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CallTableDataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.columnCallNumber = this.Columns["CallNumber"];
                this.columnCallLevel = this.Columns["CallLevel"];
                this.columnCallerID = this.Columns["CallerID"];
                this.columnClassName = this.Columns["ClassName"];
                this.columnMethodName = this.Columns["MethodName"];
                this.columnCallTime = this.Columns["CallTime"];
                this.columnReturnTime = this.Columns["ReturnTime"];
                this.columnRunID = this.Columns["RunID"];
                this.columnThreadID = this.Columns["ThreadID"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnCallNumber = new DataColumn("CallNumber", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCallNumber);
                this.columnCallLevel = new DataColumn("CallLevel", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCallLevel);
                this.columnCallerID = new DataColumn("CallerID", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCallerID);
                this.columnClassName = new DataColumn("ClassName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClassName);
                this.columnMethodName = new DataColumn("MethodName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMethodName);
                this.columnCallTime = new DataColumn("CallTime", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCallTime);
                this.columnReturnTime = new DataColumn("ReturnTime", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnReturnTime);
                this.columnRunID = new DataColumn("RunID", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRunID);
                this.columnThreadID = new DataColumn("ThreadID", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnThreadID);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnCallNumber.AllowDBNull = false;
                this.columnCallLevel.AllowDBNull = false;
                this.columnCallerID.AllowDBNull = false;
                this.columnClassName.AllowDBNull = false;
                this.columnMethodName.AllowDBNull = false;
                this.columnCallTime.AllowDBNull = false;
                this.columnReturnTime.AllowDBNull = false;
                this.columnRunID.AllowDBNull = false;
                this.columnThreadID.AllowDBNull = false;
            }
            
            public CallTableRow NewCallTableRow() {
                return ((CallTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CallTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CallTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CallTableRowChanged != null)) {
                    this.CallTableRowChanged(this, new CallTableRowChangeEvent(((CallTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CallTableRowChanging != null)) {
                    this.CallTableRowChanging(this, new CallTableRowChangeEvent(((CallTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CallTableRowDeleted != null)) {
                    this.CallTableRowDeleted(this, new CallTableRowChangeEvent(((CallTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CallTableRowDeleting != null)) {
                    this.CallTableRowDeleting(this, new CallTableRowChangeEvent(((CallTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCallTableRow(CallTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CallTableRow : DataRow {
            
            private CallTableDataTable tableCallTable;
            
            internal CallTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCallTable = ((CallTableDataTable)(this.Table));
            }
            
            public long ID {
                get {
                    return ((long)(this[this.tableCallTable.IDColumn]));
                }
                set {
                    this[this.tableCallTable.IDColumn] = value;
                }
            }
            
            public long CallNumber {
                get {
                    return ((long)(this[this.tableCallTable.CallNumberColumn]));
                }
                set {
                    this[this.tableCallTable.CallNumberColumn] = value;
                }
            }
            
            public long CallLevel {
                get {
                    return ((long)(this[this.tableCallTable.CallLevelColumn]));
                }
                set {
                    this[this.tableCallTable.CallLevelColumn] = value;
                }
            }
            
            public long CallerID {
                get {
                    return ((long)(this[this.tableCallTable.CallerIDColumn]));
                }
                set {
                    this[this.tableCallTable.CallerIDColumn] = value;
                }
            }
            
            public string ClassName {
                get {
                    return ((string)(this[this.tableCallTable.ClassNameColumn]));
                }
                set {
                    this[this.tableCallTable.ClassNameColumn] = value;
                }
            }
            
            public string MethodName {
                get {
                    return ((string)(this[this.tableCallTable.MethodNameColumn]));
                }
                set {
                    this[this.tableCallTable.MethodNameColumn] = value;
                }
            }
            
            public long CallTime {
                get {
                    return ((long)(this[this.tableCallTable.CallTimeColumn]));
                }
                set {
                    this[this.tableCallTable.CallTimeColumn] = value;
                }
            }
            
            public long ReturnTime {
                get {
                    return ((long)(this[this.tableCallTable.ReturnTimeColumn]));
                }
                set {
                    this[this.tableCallTable.ReturnTimeColumn] = value;
                }
            }
            
            public long RunID {
                get {
                    return ((long)(this[this.tableCallTable.RunIDColumn]));
                }
                set {
                    this[this.tableCallTable.RunIDColumn] = value;
                }
            }
            
            public long ThreadID {
                get {
                    return ((long)(this[this.tableCallTable.ThreadIDColumn]));
                }
                set {
                    this[this.tableCallTable.ThreadIDColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CallTableRowChangeEvent : EventArgs {
            
            private CallTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public CallTableRowChangeEvent(CallTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CallTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
