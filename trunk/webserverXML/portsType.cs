//
// PortsType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace WebserverXML
{
	public class PortsType : Altova.Xml.Node
	{
		#region Forward constructors
		public PortsType() : base() { SetCollectionParents(); }
		public PortsType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public PortsType(XmlNode node) : base(node) { SetCollectionParents(); }
		public PortsType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

			for (int i = 0; i < DomChildCount(NodeType.Element, "", "Port"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "Port", i);
				InternalAdjustPrefix(DOMNode, false);
				new PortType(DOMNode).AdjustPrefix();
			}
		}


		#region Port accessor methods
		public int GetPortMinCount()
		{
			return 1;
		}

		public int PortMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetPortMaxCount()
		{
			return Int32.MaxValue;
		}

		public int PortMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetPortCount()
		{
			return DomChildCount(NodeType.Element, "", "Port");
		}

		public int PortCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Port");
			}
		}

		public bool HasPort()
		{
			return HasDomChild(NodeType.Element, "", "Port");
		}

		public PortType GetPortAt(int index)
		{
			return new PortType(GetDomChildAt(NodeType.Element, "", "Port", index));
		}

		public PortType GetPort()
		{
			return GetPortAt(0);
		}

		public PortType Port
		{
			get
			{
				return GetPortAt(0);
			}
		}

		public void RemovePortAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Port", index);
		}

		public void RemovePort()
		{
			while (HasPort())
				RemovePortAt(0);
		}

		public void AddPort(PortType newValue)
		{
			AppendDomElement("", "Port", newValue);
		}

		public void InsertPortAt(PortType newValue, int index)
		{
			InsertDomElementAt("", "Port", index, newValue);
		}

		public void ReplacePortAt(PortType newValue, int index)
		{
			ReplaceDomElementAt("", "Port", index, newValue);
		}
		#endregion // Port accessor methods

		#region Port collection
        public PortCollection	MyPorts = new PortCollection( );

        public class PortCollection: IEnumerable
        {
            PortsType parent;
            public PortsType Parent
			{
				set
				{
					parent = value;
				}
			}
			public PortEnumerator GetEnumerator() 
			{
				return new PortEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class PortEnumerator: IEnumerator 
        {
			int nIndex;
			PortsType parent;
			public PortEnumerator(PortsType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.PortCount );
			}
			public PortType  Current 
			{
				get 
				{
					return(parent.GetPortAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Port collection

        private void SetCollectionParents()
        {
            MyPorts.Parent = this; 
	}
}
}
