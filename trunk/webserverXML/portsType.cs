//
// portsType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace webserverXML
{
	public class portsType : Altova.Xml.Node
	{
		#region Forward constructors
		public portsType() : base() { SetCollectionParents(); }
		public portsType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public portsType(XmlNode node) : base(node) { SetCollectionParents(); }
		public portsType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

			for (int i = 0; i < DomChildCount(NodeType.Element, "", "port"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "port", i);
				InternalAdjustPrefix(DOMNode, false);
				new portType(DOMNode).AdjustPrefix();
			}
		}


		#region port accessor methods
		public int GetportMinCount()
		{
			return 0;
		}

		public int portMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetportMaxCount()
		{
			return Int32.MaxValue;
		}

		public int portMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetportCount()
		{
			return DomChildCount(NodeType.Element, "", "port");
		}

		public int portCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "port");
			}
		}

		public bool Hasport()
		{
			return HasDomChild(NodeType.Element, "", "port");
		}

		public portType GetportAt(int index)
		{
			return new portType(GetDomChildAt(NodeType.Element, "", "port", index));
		}

		public portType Getport()
		{
			return GetportAt(0);
		}

		public portType port
		{
			get
			{
				return GetportAt(0);
			}
		}

		public void RemoveportAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "port", index);
		}

		public void Removeport()
		{
			while (Hasport())
				RemoveportAt(0);
		}

		public void Addport(portType newValue)
		{
			AppendDomElement("", "port", newValue);
		}

		public void InsertportAt(portType newValue, int index)
		{
			InsertDomElementAt("", "port", index, newValue);
		}

		public void ReplaceportAt(portType newValue, int index)
		{
			ReplaceDomElementAt("", "port", index, newValue);
		}
		#endregion // port accessor methods

		#region port collection
        public portCollection	Myports = new portCollection( );

        public class portCollection: IEnumerable
        {
            portsType parent;
            public portsType Parent
			{
				set
				{
					parent = value;
				}
			}
			public portEnumerator GetEnumerator() 
			{
				return new portEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class portEnumerator: IEnumerator 
        {
			int nIndex;
			portsType parent;
			public portEnumerator(portsType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.portCount );
			}
			public portType  Current 
			{
				get 
				{
					return(parent.GetportAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // port collection

        private void SetCollectionParents()
        {
            Myports.Parent = this; 
	}
}
}
