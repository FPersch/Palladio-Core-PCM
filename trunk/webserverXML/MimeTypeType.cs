//
// MimeTypeType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace webserverXML
{
	public class MimeTypeType : Altova.Xml.Node
	{
		#region Forward constructors
		public MimeTypeType() : base() { SetCollectionParents(); }
		public MimeTypeType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public MimeTypeType(XmlNode node) : base(node) { SetCollectionParents(); }
		public MimeTypeType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

			for (int i = 0; i < DomChildCount(NodeType.Attribute, "", "extension"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "extension", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			for (int i = 0; i < DomChildCount(NodeType.Attribute, "", "content-type"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "content-type", i);
				InternalAdjustPrefix(DOMNode, false);
			}
		}


		#region extension accessor methods
		public int GetextensionMinCount()
		{
			return 1;
		}

		public int extensionMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetextensionMaxCount()
		{
			return 1;
		}

		public int extensionMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetextensionCount()
		{
			return DomChildCount(NodeType.Attribute, "", "extension");
		}

		public int extensionCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "extension");
			}
		}

		public bool Hasextension()
		{
			return HasDomChild(NodeType.Attribute, "", "extension");
		}

		public SchemaString GetextensionAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "extension", index)));
		}

		public SchemaString Getextension()
		{
			return GetextensionAt(0);
		}

		public SchemaString extension
		{
			get
			{
				return GetextensionAt(0);
			}
		}

		public void RemoveextensionAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "extension", index);
		}

		public void Removeextension()
		{
			while (Hasextension())
				RemoveextensionAt(0);
		}

		public void Addextension(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "extension", newValue.ToString());
		}

		public void InsertextensionAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "extension", index, newValue.ToString());
		}

		public void ReplaceextensionAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "extension", index, newValue.ToString());
		}
		#endregion // extension accessor methods

		#region extension collection
        public extensionCollection	Myextensions = new extensionCollection( );

        public class extensionCollection: IEnumerable
        {
            MimeTypeType parent;
            public MimeTypeType Parent
			{
				set
				{
					parent = value;
				}
			}
			public extensionEnumerator GetEnumerator() 
			{
				return new extensionEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class extensionEnumerator: IEnumerator 
        {
			int nIndex;
			MimeTypeType parent;
			public extensionEnumerator(MimeTypeType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.extensionCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetextensionAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // extension collection

		#region content_type accessor methods
		public int Getcontent_typeMinCount()
		{
			return 1;
		}

		public int content_typeMinCount
		{
			get
			{
				return 1;
			}
		}

		public int Getcontent_typeMaxCount()
		{
			return 1;
		}

		public int content_typeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int Getcontent_typeCount()
		{
			return DomChildCount(NodeType.Attribute, "", "content-type");
		}

		public int content_typeCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "content-type");
			}
		}

		public bool Hascontent_type()
		{
			return HasDomChild(NodeType.Attribute, "", "content-type");
		}

		public SchemaString Getcontent_typeAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "content-type", index)));
		}

		public SchemaString Getcontent_type()
		{
			return Getcontent_typeAt(0);
		}

		public SchemaString content_type
		{
			get
			{
				return Getcontent_typeAt(0);
			}
		}

		public void Removecontent_typeAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "content-type", index);
		}

		public void Removecontent_type()
		{
			while (Hascontent_type())
				Removecontent_typeAt(0);
		}

		public void Addcontent_type(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "content-type", newValue.ToString());
		}

		public void Insertcontent_typeAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "content-type", index, newValue.ToString());
		}

		public void Replacecontent_typeAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "content-type", index, newValue.ToString());
		}
		#endregion // content_type accessor methods

		#region content_type collection
        public content_typeCollection	Mycontent_types = new content_typeCollection( );

        public class content_typeCollection: IEnumerable
        {
            MimeTypeType parent;
            public MimeTypeType Parent
			{
				set
				{
					parent = value;
				}
			}
			public content_typeEnumerator GetEnumerator() 
			{
				return new content_typeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class content_typeEnumerator: IEnumerator 
        {
			int nIndex;
			MimeTypeType parent;
			public content_typeEnumerator(MimeTypeType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.content_typeCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.Getcontent_typeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // content_type collection

        private void SetCollectionParents()
        {
            Myextensions.Parent = this; 
            Mycontent_types.Parent = this; 
	}
}
}
