#region info
///////////////////////////////////////////////////////////////////////////////
/// This software has been developed as a part of the diploma thesis 
/// "Einfluss von Generatorkonfiguration auf die QoS-Vorhersage für 
/// Komponentenadapter" ("Influence of the configuration of a generator on the 
/// prediction of the QoS of component adaptors")
/// at the 
/// University of Oldenburg
/// Department of Computing Science
/// Software Engineering Group
/// Palladio Research Group
/// (http://se.informatik.uni-oldenburg.de/research/projects/Palladio)
/// 
/// Development period: July 2005 - January 2006
/// 
/// Author: Niels Streekmann
/// E-mail: niels.streekmann@informatik.uni-oldenburg.de
///////////////////////////////////////////////////////////////////////////////
#endregion
using Palladio.QoSAdaptor.Pattern;
using System.Drawing;
using System.Collections;
using System.Windows.Forms;

namespace Palladio.QoSAdaptor.GUI
{
	/// <summary>
	/// This class implements a detailed view for a 
	/// PatternDescription. The view is realized as a ListView
	/// </summary>
	public class DetailView : System.Windows.Forms.Form
	{
		#region data
		private System.ComponentModel.Container components = null;
		/// <summary>
		/// The pattern that shall be shown in detail. 
		/// </summary>
		private PatternDescription pattern;
		#endregion

		#region constructor	
		/// <summary>
		/// Constructor. 
		/// </summary>
		/// <param name="pattern">The PatternDescription of the 
		/// chosen pattern</param>
		public DetailView(PatternDescription pattern)
		{
			this.pattern = pattern; 
			InitializeComponent();
			InitializeListView();
		}
		#endregion

		#region Code generated by the form designer. Comments are in german, because I used the german version of VS.
		/// <summary>
		/// Die verwendeten Ressourcen bereinigen.
		/// </summary>
		protected override void Dispose( bool disposing )
		{
			if( disposing )
			{
				if(components != null)
				{
					components.Dispose();
				}
			}
			base.Dispose( disposing );
		}

		
		/// <summary>
		/// Erforderliche Methode für die Designerunterstützung. 
		/// Der Inhalt der Methode darf nicht mit dem Code-Editor geändert werden.
		/// </summary>
		private void InitializeComponent()
		{
			System.Resources.ResourceManager resources = new System.Resources.ResourceManager(typeof(DetailView));
			// 
			// DetailView
			// 
			this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
			this.ClientSize = new System.Drawing.Size(650, 250);
			this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
			this.Name = "DetailView";
			this.Text = "Details of the "+this.pattern.Name+" pattern";

		}
		#endregion

		#region Manually written form code
		/// <summary>
		/// This method creates the listView of the pattern given
		/// in the constructor. 
		/// </summary>
		private void InitializeListView()
		{
			// Create a new ListView control.
			ListView listView1 = new ListView();
			listView1.Bounds = new Rectangle(new Point(10,10), new Size(630,230));

			// Set the view to show details.
			listView1.View = View.Details;
			// Display grid lines.
			listView1.GridLines = true;
   
			// Create columns for the items and subitems.
			listView1.Columns.Add("", -2, HorizontalAlignment.Left);
			listView1.Columns.Add("", -2, HorizontalAlignment.Left);
		
			this.CreateItems(listView1);

			// Add the ListView to the control collection.
			this.Controls.Add(listView1);
			listView1.Size = new System.Drawing.Size(675, 300);
			// TODO: Change size dynamically
			this.Size = new System.Drawing.Size(700, 350);
		}

		/// <summary>
		/// Method used by InitializeListView to encapsulate the 
		/// creation of the ListItems.
		/// </summary>
		private void CreateItems(ListView listView1)
		{
			// Create the items and their subitems.
			ListViewItem item1 = new ListViewItem("General Info");
			item1.SubItems.Add("");
			item1.BackColor = System.Drawing.Color.LightGray;

			ListViewItem item2 = new ListViewItem("Name");
			item2.SubItems.Add(this.pattern.Name);
			ListViewItem item3 = new ListViewItem("Description");
			item3.SubItems.Add(this.pattern.Description);
			ListViewItem item4 = new ListViewItem("Source");
			item4.SubItems.Add(this.pattern.Source);
			
			ListViewItem item5 = new ListViewItem("QoS attributes");
			item5.SubItems.Add("");
			item5.BackColor = System.Drawing.Color.LightGray;

			//Add the items to the ListView.
			listView1.Items.AddRange(new ListViewItem[]{item1,item2,item3, item4, item5});

			IEnumerator enu = this.pattern.QoSAttributes.GetEnumerator();
			while (enu.MoveNext())
			{
				ListViewItem item = new ListViewItem(((QoSAttribute)enu.Current).Name);
				item.SubItems.Add(((QoSAttribute)enu.Current).Suitability);
				listView1.Items.Add(item);
			}			

			ListViewItem item6 = new ListViewItem("Adapter templates");
			item6.SubItems.Add("");
			item6.BackColor = System.Drawing.Color.LightGray;
			listView1.Items.Add(item6);

			enu = this.pattern.AdapterTemplates.GetEnumerator();
			int counter = 1;
			while (enu.MoveNext())
			{
				ListViewItem item = new ListViewItem("Template "+counter);
				item.SubItems.Add((string)enu.Current);
				listView1.Items.Add(item);
				counter++;
			}

			ListViewItem item7 = new ListViewItem("Prediction templates");
			item7.SubItems.Add("");
			item7.BackColor = System.Drawing.Color.LightGray;
			listView1.Items.Add(item7);

			enu = this.pattern.PredictionTemplates.GetEnumerator();
			counter = 1;
			while (enu.MoveNext())
			{
				ListViewItem item = new ListViewItem("Template "+counter);
				item.SubItems.Add((string)enu.Current);
				listView1.Items.Add(item);
				counter++;
			}
		}
		#endregion
	}
}
