//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Palladio.DeploymentModel.src.Container {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ElementDataset : DataSet {
        
        private ElementTableDataTable tableElementTable;
        
        private ConnectionTableDataTable tableConnectionTable;
        
        public ElementDataset() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ElementDataset(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["ElementTable"] != null)) {
                    this.Tables.Add(new ElementTableDataTable(ds.Tables["ElementTable"]));
                }
                if ((ds.Tables["ConnectionTable"] != null)) {
                    this.Tables.Add(new ConnectionTableDataTable(ds.Tables["ConnectionTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ElementTableDataTable ElementTable {
            get {
                return this.tableElementTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ConnectionTableDataTable ConnectionTable {
            get {
                return this.tableConnectionTable;
            }
        }
        
        public override DataSet Clone() {
            ElementDataset cln = ((ElementDataset)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["ElementTable"] != null)) {
                this.Tables.Add(new ElementTableDataTable(ds.Tables["ElementTable"]));
            }
            if ((ds.Tables["ConnectionTable"] != null)) {
                this.Tables.Add(new ConnectionTableDataTable(ds.Tables["ConnectionTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableElementTable = ((ElementTableDataTable)(this.Tables["ElementTable"]));
            if ((this.tableElementTable != null)) {
                this.tableElementTable.InitVars();
            }
            this.tableConnectionTable = ((ConnectionTableDataTable)(this.Tables["ConnectionTable"]));
            if ((this.tableConnectionTable != null)) {
                this.tableConnectionTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "ElementDataset";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ElementDataset.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableElementTable = new ElementTableDataTable();
            this.Tables.Add(this.tableElementTable);
            this.tableConnectionTable = new ConnectionTableDataTable();
            this.Tables.Add(this.tableConnectionTable);
        }
        
        private bool ShouldSerializeElementTable() {
            return false;
        }
        
        private bool ShouldSerializeConnectionTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ElementTableRowChangeEventHandler(object sender, ElementTableRowChangeEvent e);
        
        public delegate void ConnectionTableRowChangeEventHandler(object sender, ConnectionTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ElementTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn columnName;
            
            private DataColumn columnIdentifier;
            
            internal ElementTableDataTable() : 
                    base("ElementTable") {
                this.InitClass();
            }
            
            internal ElementTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn IdentifierColumn {
                get {
                    return this.columnIdentifier;
                }
            }
            
            public ElementTableRow this[int index] {
                get {
                    return ((ElementTableRow)(this.Rows[index]));
                }
            }
            
            public event ElementTableRowChangeEventHandler ElementTableRowChanged;
            
            public event ElementTableRowChangeEventHandler ElementTableRowChanging;
            
            public event ElementTableRowChangeEventHandler ElementTableRowDeleted;
            
            public event ElementTableRowChangeEventHandler ElementTableRowDeleting;
            
            public void AddElementTableRow(ElementTableRow row) {
                this.Rows.Add(row);
            }
            
            public ElementTableRow AddElementTableRow(long ID, string Name, string Identifier) {
                ElementTableRow rowElementTableRow = ((ElementTableRow)(this.NewRow()));
                rowElementTableRow.ItemArray = new object[] {
                        ID,
                        Name,
                        Identifier};
                this.Rows.Add(rowElementTableRow);
                return rowElementTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ElementTableDataTable cln = ((ElementTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ElementTableDataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.columnName = this.Columns["Name"];
                this.columnIdentifier = this.Columns["Identifier"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnIdentifier = new DataColumn("Identifier", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIdentifier);
            }
            
            public ElementTableRow NewElementTableRow() {
                return ((ElementTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ElementTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ElementTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ElementTableRowChanged != null)) {
                    this.ElementTableRowChanged(this, new ElementTableRowChangeEvent(((ElementTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ElementTableRowChanging != null)) {
                    this.ElementTableRowChanging(this, new ElementTableRowChangeEvent(((ElementTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ElementTableRowDeleted != null)) {
                    this.ElementTableRowDeleted(this, new ElementTableRowChangeEvent(((ElementTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ElementTableRowDeleting != null)) {
                    this.ElementTableRowDeleting(this, new ElementTableRowChangeEvent(((ElementTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveElementTableRow(ElementTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ElementTableRow : DataRow {
            
            private ElementTableDataTable tableElementTable;
            
            internal ElementTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableElementTable = ((ElementTableDataTable)(this.Table));
            }
            
            public long ID {
                get {
                    try {
                        return ((long)(this[this.tableElementTable.IDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e);
                    }
                }
                set {
                    this[this.tableElementTable.IDColumn] = value;
                }
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableElementTable.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e);
                    }
                }
                set {
                    this[this.tableElementTable.NameColumn] = value;
                }
            }
            
            public string Identifier {
                get {
                    try {
                        return ((string)(this[this.tableElementTable.IdentifierColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e);
                    }
                }
                set {
                    this[this.tableElementTable.IdentifierColumn] = value;
                }
            }
            
            public bool IsIDNull() {
                return this.IsNull(this.tableElementTable.IDColumn);
            }
            
            public void SetIDNull() {
                this[this.tableElementTable.IDColumn] = System.Convert.DBNull;
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableElementTable.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableElementTable.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsIdentifierNull() {
                return this.IsNull(this.tableElementTable.IdentifierColumn);
            }
            
            public void SetIdentifierNull() {
                this[this.tableElementTable.IdentifierColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ElementTableRowChangeEvent : EventArgs {
            
            private ElementTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public ElementTableRowChangeEvent(ElementTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ElementTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ConnectionTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn columnSource;
            
            private DataColumn columnDestination;
            
            internal ConnectionTableDataTable() : 
                    base("ConnectionTable") {
                this.InitClass();
            }
            
            internal ConnectionTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn SourceColumn {
                get {
                    return this.columnSource;
                }
            }
            
            internal DataColumn DestinationColumn {
                get {
                    return this.columnDestination;
                }
            }
            
            public ConnectionTableRow this[int index] {
                get {
                    return ((ConnectionTableRow)(this.Rows[index]));
                }
            }
            
            public event ConnectionTableRowChangeEventHandler ConnectionTableRowChanged;
            
            public event ConnectionTableRowChangeEventHandler ConnectionTableRowChanging;
            
            public event ConnectionTableRowChangeEventHandler ConnectionTableRowDeleted;
            
            public event ConnectionTableRowChangeEventHandler ConnectionTableRowDeleting;
            
            public void AddConnectionTableRow(ConnectionTableRow row) {
                this.Rows.Add(row);
            }
            
            public ConnectionTableRow AddConnectionTableRow(long ID, long Source, long Destination) {
                ConnectionTableRow rowConnectionTableRow = ((ConnectionTableRow)(this.NewRow()));
                rowConnectionTableRow.ItemArray = new object[] {
                        ID,
                        Source,
                        Destination};
                this.Rows.Add(rowConnectionTableRow);
                return rowConnectionTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ConnectionTableDataTable cln = ((ConnectionTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ConnectionTableDataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.columnSource = this.Columns["Source"];
                this.columnDestination = this.Columns["Destination"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnSource = new DataColumn("Source", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSource);
                this.columnDestination = new DataColumn("Destination", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDestination);
            }
            
            public ConnectionTableRow NewConnectionTableRow() {
                return ((ConnectionTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ConnectionTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ConnectionTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ConnectionTableRowChanged != null)) {
                    this.ConnectionTableRowChanged(this, new ConnectionTableRowChangeEvent(((ConnectionTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ConnectionTableRowChanging != null)) {
                    this.ConnectionTableRowChanging(this, new ConnectionTableRowChangeEvent(((ConnectionTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ConnectionTableRowDeleted != null)) {
                    this.ConnectionTableRowDeleted(this, new ConnectionTableRowChangeEvent(((ConnectionTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ConnectionTableRowDeleting != null)) {
                    this.ConnectionTableRowDeleting(this, new ConnectionTableRowChangeEvent(((ConnectionTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveConnectionTableRow(ConnectionTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ConnectionTableRow : DataRow {
            
            private ConnectionTableDataTable tableConnectionTable;
            
            internal ConnectionTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableConnectionTable = ((ConnectionTableDataTable)(this.Table));
            }
            
            public long ID {
                get {
                    try {
                        return ((long)(this[this.tableConnectionTable.IDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e);
                    }
                }
                set {
                    this[this.tableConnectionTable.IDColumn] = value;
                }
            }
            
            public long Source {
                get {
                    try {
                        return ((long)(this[this.tableConnectionTable.SourceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e);
                    }
                }
                set {
                    this[this.tableConnectionTable.SourceColumn] = value;
                }
            }
            
            public long Destination {
                get {
                    try {
                        return ((long)(this[this.tableConnectionTable.DestinationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e);
                    }
                }
                set {
                    this[this.tableConnectionTable.DestinationColumn] = value;
                }
            }
            
            public bool IsIDNull() {
                return this.IsNull(this.tableConnectionTable.IDColumn);
            }
            
            public void SetIDNull() {
                this[this.tableConnectionTable.IDColumn] = System.Convert.DBNull;
            }
            
            public bool IsSourceNull() {
                return this.IsNull(this.tableConnectionTable.SourceColumn);
            }
            
            public void SetSourceNull() {
                this[this.tableConnectionTable.SourceColumn] = System.Convert.DBNull;
            }
            
            public bool IsDestinationNull() {
                return this.IsNull(this.tableConnectionTable.DestinationColumn);
            }
            
            public void SetDestinationNull() {
                this[this.tableConnectionTable.DestinationColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ConnectionTableRowChangeEvent : EventArgs {
            
            private ConnectionTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public ConnectionTableRowChangeEvent(ConnectionTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ConnectionTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
