<%@ CodeTemplate Language="C#" TargetLanguage="C#" Description="Signature list template" %>
<%@ Property Name="ContainedSignatureType" Type="System.String" Category="Context" Description="The type of the signatures in the SignatureList" %>
<%@ Property Name="ClassName" Type="System.String" Category="Context" Description="Name of the interface to generate" %>


	#region Default<%= ClassName %>
	/// <summary>
	/// A SignatureList is the simplest form of an IInterfaceModel, just
	/// containing a set of signatures.
	/// </summary>
	internal class Default<%= ClassName %> : I<%= ClassName %> , ICloneable
	{
		#region Properties
		/// <summary>
		/// The number of signature in this list
		/// </summary>
		public int Count
		{
			get
			{
				return signatures.Count;
			}
		}
		
		/// <summary>
		/// Indexer to access the sigantures easily.
		/// </summary>
		public <%= ContainedSignatureType %> this[int index]
		{
			get { return (<%= ContainedSignatureType %>) signatures[index]; }
		}

		/// <summary>
		/// A list of attributes attached an object. 
		/// </summary>
		public AttributeHash Attributes 
		{ 
			get { return attributes; }
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// Adds an array of signatures to the interface.
		/// </summary>
		/// <param name="aSigArray">Signatures to add.</param>
		public void AddSignatures( params <%= ContainedSignatureType %>[] aSigArray )
		{
			foreach (<%= ContainedSignatureType %> s in aSigArray)
			{
				if (SignatureListChangeEvent != null)
					SignatureListChangeEvent(this,new <%= ClassName %>ChangeEventArgs(s, ChangeTimeEnum.BEFORE,ChangeTypeEnum.ADD));
			}
			signatures.AddRange(aSigArray);
			foreach (<%= ContainedSignatureType %> s in aSigArray)
			{
				if (SignatureListChangeEvent != null)
					SignatureListChangeEvent(this,new <%= ClassName %>ChangeEventArgs(s, ChangeTimeEnum.AFTER,ChangeTypeEnum.ADD));
			}
		}

		/// <summary>
		/// Deletes a set of signatures from the interface.
		/// </summary>
		/// <param name="aSigArray">Signatures to delete.</param>
		public void DeleteSignatures( params <%= ContainedSignatureType %>[] aSigArray )
		{
			foreach (<%= ContainedSignatureType %> s in aSigArray)
			{
				if (SignatureListChangeEvent != null)
					SignatureListChangeEvent(this,new <%= ClassName %>ChangeEventArgs(s, ChangeTimeEnum.BEFORE,ChangeTypeEnum.DELETE));
			}
			foreach (<%= ContainedSignatureType %> sig in aSigArray)
			{
				signatures.Remove(sig);
			}
			foreach (<%= ContainedSignatureType %> s in aSigArray)
			{
				if (SignatureListChangeEvent != null)
					SignatureListChangeEvent(this,new <%= ClassName %>ChangeEventArgs(s, ChangeTimeEnum.AFTER,ChangeTypeEnum.DELETE));
			}
		}

		public bool ContainsSignature( <%= ContainedSignatureType %> aSignature )
		{
			return signatures.Contains(aSignature);
		}

		public <%= ContainedSignatureType %>[] GetSignaturesByID( IIdentifier aName )
		{
			ArrayList result = new ArrayList();
			foreach (<%= ContainedSignatureType %> s in signatures)
			{
				if (s.<%if (ContainedSignatureType.Equals("IExternalSignature")) Response.Write("Signature."); %>Name.Equals(aName.ToString()))
					result.Add(s);
			}
			return (<%= ContainedSignatureType %>[])result.ToArray(typeof(<%= ContainedSignatureType %>));
		}

		public <%= ContainedSignatureType %>[] GetSignatures()
		{
			return (<%= ContainedSignatureType %>[]) signatures.ToArray(typeof(<%= ContainedSignatureType %>));
		}

		public IEnumerator GetEnumerator()
		{
			return signatures.GetEnumerator();
		}
		
		/// <summary>
		/// This method is called by the <see cref="ReflectionBasedVisitor"/> to allow data
		/// structure driven visiting of the structure.<br></br>
		/// Leave this method's body empty if you don't need data structure driven visiting.
		/// </summary>
		/// <param name="visitor">The visitor to accept</param>
		public void AcceptVisitor (IVisitor visitor)
		{
		}

		/// <summary>
		/// Creates a copy of the current instance.
		/// </summary>
		/// <returns>A new object with the same values as the current instance.</returns>
		public object Clone()
		{
			return new Default<%= ClassName %>(this);
		}
		
		/// <summary>
		/// The Equals method determines whether the specified 
		/// System.Object is equal to the current System.Object.
		/// </summary>
		/// <param name="obj">Contains the Object to compare with 
		/// the current object.</param>
		/// <returns>Returns true if the specified object is equal 
		/// to the current objector or false if the obejcts 
		/// are not equal.</returns>
		public override bool Equals(object obj)
		{
			if (obj is Default<%= ClassName %>)
			{
				Default<%= ClassName %> sigList = (Default<%= ClassName %>)obj;
				return (
					sigList.signatures.Equals(this.signatures)
				);
			}
			return false;
		}

		/// <summary>
		/// The GetHashCode method serves as a hash function 
		/// for a particular type, suitable for use in hashing 
		/// algorithms and data structures like a hash table.
		/// </summary>
		/// <returns>A hash value for the current object.</returns>
		public override int GetHashCode()
		{
			int result = 0;
			
			foreach (<%= ContainedSignatureType %> s in signatures)
			{
				result ^= s.GetHashCode();
			}
			return result;
		}

		/// <summary>
		/// Retrieves a string representation of the object.
		/// </summary>
		/// <returns>String representation of the object.</returns>
		public override string ToString()
		{
			string result = ">>";
			
			foreach (<%= ContainedSignatureType %> s in signatures)
			{
				result += s.ToString()+" ";
			}
			return result + "<<";
		}

		/// <summary>
		/// This event is raised before and after a change of the signatures in this list
		/// </summary>
		public event <%= ClassName %>ChangeEventHandler SignatureListChangeEvent;
		#endregion

		#region Constructors

		/// <summary>
		/// Creates a SignaturesList.
		/// </summary>
		/// <param name="anAttHash">Attributes.</param>
		/// <param name="aSigArray">Signatures contained by the interface.</param>
		public Default<%= ClassName %>(AttributeHash anAttHash, params <%= ContainedSignatureType %>[] aSigArray)
		{
			attributes = anAttHash;
			signatures = new Set();
			AddSignatures(aSigArray);
		}

		/// <summary>
		/// Copy constructor.
		/// </summary>
		/// <param name="aSigList">SignatureList to copy.</param>
		public Default<%= ClassName %>(Default<%= ClassName %> aSigList) :
			this( aSigList.Attributes, aSigList.GetSignatures() ) {}

		#endregion
		
		#region Data
		
		private AttributeHash attributes;
		private Set signatures;
		#endregion
	}
	#endregion
