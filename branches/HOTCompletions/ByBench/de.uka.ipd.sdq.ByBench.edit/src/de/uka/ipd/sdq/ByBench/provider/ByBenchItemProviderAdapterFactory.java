/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package de.uka.ipd.sdq.ByBench.provider;

import de.uka.ipd.sdq.ByBench.util.ByBenchAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ByBenchItemProviderAdapterFactory extends ByBenchAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ByBenchItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uka.ipd.sdq.ByBench.Scenario} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScenarioItemProvider scenarioItemProvider;

	/**
	 * This creates an adapter for a {@link de.uka.ipd.sdq.ByBench.Scenario}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScenarioAdapter() {
		if (scenarioItemProvider == null) {
			scenarioItemProvider = new ScenarioItemProvider(this);
		}

		return scenarioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uka.ipd.sdq.ByBench.ScenarioPrecondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScenarioPreconditionItemProvider scenarioPreconditionItemProvider;

	/**
	 * This creates an adapter for a {@link de.uka.ipd.sdq.ByBench.ScenarioPrecondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScenarioPreconditionAdapter() {
		if (scenarioPreconditionItemProvider == null) {
			scenarioPreconditionItemProvider = new ScenarioPreconditionItemProvider(this);
		}

		return scenarioPreconditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uka.ipd.sdq.ByBench.InstructionSequence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstructionSequenceItemProvider instructionSequenceItemProvider;

	/**
	 * This creates an adapter for a {@link de.uka.ipd.sdq.ByBench.InstructionSequence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstructionSequenceAdapter() {
		if (instructionSequenceItemProvider == null) {
			instructionSequenceItemProvider = new InstructionSequenceItemProvider(this);
		}

		return instructionSequenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uka.ipd.sdq.ByBench.SequenceElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SequenceElementItemProvider sequenceElementItemProvider;

	/**
	 * This creates an adapter for a {@link de.uka.ipd.sdq.ByBench.SequenceElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSequenceElementAdapter() {
		if (sequenceElementItemProvider == null) {
			sequenceElementItemProvider = new SequenceElementItemProvider(this);
		}

		return sequenceElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uka.ipd.sdq.ByBench.MeasurementStart} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeasurementStartItemProvider measurementStartItemProvider;

	/**
	 * This creates an adapter for a {@link de.uka.ipd.sdq.ByBench.MeasurementStart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeasurementStartAdapter() {
		if (measurementStartItemProvider == null) {
			measurementStartItemProvider = new MeasurementStartItemProvider(this);
		}

		return measurementStartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uka.ipd.sdq.ByBench.ScenarioCore} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScenarioCoreItemProvider scenarioCoreItemProvider;

	/**
	 * This creates an adapter for a {@link de.uka.ipd.sdq.ByBench.ScenarioCore}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScenarioCoreAdapter() {
		if (scenarioCoreItemProvider == null) {
			scenarioCoreItemProvider = new ScenarioCoreItemProvider(this);
		}

		return scenarioCoreItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uka.ipd.sdq.ByBench.MeasurementEnd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeasurementEndItemProvider measurementEndItemProvider;

	/**
	 * This creates an adapter for a {@link de.uka.ipd.sdq.ByBench.MeasurementEnd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeasurementEndAdapter() {
		if (measurementEndItemProvider == null) {
			measurementEndItemProvider = new MeasurementEndItemProvider(this);
		}

		return measurementEndItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uka.ipd.sdq.ByBench.ScenarioPostcondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScenarioPostconditionItemProvider scenarioPostconditionItemProvider;

	/**
	 * This creates an adapter for a {@link de.uka.ipd.sdq.ByBench.ScenarioPostcondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScenarioPostconditionAdapter() {
		if (scenarioPostconditionItemProvider == null) {
			scenarioPostconditionItemProvider = new ScenarioPostconditionItemProvider(this);
		}

		return scenarioPostconditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uka.ipd.sdq.ByBench.NamedCardinality} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NamedCardinalityItemProvider namedCardinalityItemProvider;

	/**
	 * This creates an adapter for a {@link de.uka.ipd.sdq.ByBench.NamedCardinality}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNamedCardinalityAdapter() {
		if (namedCardinalityItemProvider == null) {
			namedCardinalityItemProvider = new NamedCardinalityItemProvider(this);
		}

		return namedCardinalityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uka.ipd.sdq.ByBench.InstructionChaining} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstructionChainingItemProvider instructionChainingItemProvider;

	/**
	 * This creates an adapter for a {@link de.uka.ipd.sdq.ByBench.InstructionChaining}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstructionChainingAdapter() {
		if (instructionChainingItemProvider == null) {
			instructionChainingItemProvider = new InstructionChainingItemProvider(this);
		}

		return instructionChainingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uka.ipd.sdq.ByBench.InstructionLooping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstructionLoopingItemProvider instructionLoopingItemProvider;

	/**
	 * This creates an adapter for a {@link de.uka.ipd.sdq.ByBench.InstructionLooping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstructionLoopingAdapter() {
		if (instructionLoopingItemProvider == null) {
			instructionLoopingItemProvider = new InstructionLoopingItemProvider(this);
		}

		return instructionLoopingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uka.ipd.sdq.ByBench.AtomicInstruction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AtomicInstructionItemProvider atomicInstructionItemProvider;

	/**
	 * This creates an adapter for a {@link de.uka.ipd.sdq.ByBench.AtomicInstruction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAtomicInstructionAdapter() {
		if (atomicInstructionItemProvider == null) {
			atomicInstructionItemProvider = new AtomicInstructionItemProvider(this);
		}

		return atomicInstructionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (scenarioItemProvider != null) scenarioItemProvider.dispose();
		if (scenarioPreconditionItemProvider != null) scenarioPreconditionItemProvider.dispose();
		if (instructionSequenceItemProvider != null) instructionSequenceItemProvider.dispose();
		if (sequenceElementItemProvider != null) sequenceElementItemProvider.dispose();
		if (measurementStartItemProvider != null) measurementStartItemProvider.dispose();
		if (scenarioCoreItemProvider != null) scenarioCoreItemProvider.dispose();
		if (measurementEndItemProvider != null) measurementEndItemProvider.dispose();
		if (scenarioPostconditionItemProvider != null) scenarioPostconditionItemProvider.dispose();
		if (namedCardinalityItemProvider != null) namedCardinalityItemProvider.dispose();
		if (instructionChainingItemProvider != null) instructionChainingItemProvider.dispose();
		if (instructionLoopingItemProvider != null) instructionLoopingItemProvider.dispose();
		if (atomicInstructionItemProvider != null) atomicInstructionItemProvider.dispose();
	}

}
