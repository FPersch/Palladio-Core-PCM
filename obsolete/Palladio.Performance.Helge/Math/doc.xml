<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Palladio.Performance.Math</name>
    </assembly>
    <members>
        <member name="T:Palladio.Performance.Math.Functions.DiscreteFactory">
            <summary>
            Creates discrete functions.
            </summary>
        </member>
        <member name="T:Palladio.Performance.Math.IDiscreteFunctionFactory">
            <summary>
            Abstract Factory pattern.
            </summary>
        </member>
        <member name="T:Palladio.Performance.Math.IFunctionFactory">
            <summary>
            Abstract Factory pattern.
            </summary>
        </member>
        <member name="M:Palladio.Performance.Math.IFunctionFactory.ExponentialDistribution(System.Double)">
            <summary>
            Returns the exponential distribution with a rate.
            This is: f(x) = (1 / rate) * exp(- x (1 / rate)).
            </summary>
            <param name="rate"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.IFunctionFactory.ConstantFunction(System.Double)">
            <summary>
            Returns the constant zero function.
            This is: f(x) = c.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.IFunctionFactory.DiracDeltaFunction">
            <summary>
            Returns the dirac function which is the neutral element
            of the convolution. This is:
            f(0) = infty and f(x) = 0 for x != 0.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.IFunctionFactory.Copy(MathNet.Numerics.IRealFunction)">
            <summary>
            Creates a copy of f with the parameters given by the factory.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunctionFactory.DiscreteValueFunction(System.Int64,System.Int64,System.Double[])">
            <summary>
            Creates a new function using a set of values. The sampling rate
            for those values must correspond to the sampling rate of the factory.
            Also the start value must be a multiple of the sampling rate.
            </summary>
            <param name="xStart">Position on the x axis for the first value in the value array.</param>
            <param name="values">Ordered set of values describing the function.</param>
            <param name="samplingrate">Distance of two values.</param>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunctionFactory.DiscreteFourierFunction(MathNet.Numerics.Complex[])">
            <summary>
            Creates a new fourier function. It is assumed, that the complex values are the fourier 
            transformed values.
            </summary>
            <param name="values">Already fourier transformed values</param>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunctionFactory.DiscreteFourierFunction(Palladio.Performance.Math.IDiscreteFunction)">
            <summary>
            Creates a new fourier function. 
            </summary>
            <param name="dg">Function in time space.</param>
            <returns>Function in frequency space.</returns>
        </member>
        <member name="P:Palladio.Performance.Math.IDiscreteFunctionFactory.SamplingRate">
            <summary>
            Precision for the created functions.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.IDiscreteFunctionFactory.XMax">
            <summary>
            Default maximum for the greatest x value that has an associated function value.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.IDiscreteFunctionFactory.XMin">
            <summary>
            Default minimum for the smallest x value that has an associated function value.
            </summary>
        </member>
        <member name="F:Palladio.Performance.Math.Functions.DiscreteFactory.width">
            <summary>
            xmax - xmin.
            </summary>
        </member>
        <member name="F:Palladio.Performance.Math.Functions.DiscreteFactory.length">
            <summary>
            Default length of the value array: width / precision
            </summary>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.DiscreteFactory.DiscreteValueFunction(System.Int64,System.Int64,System.Double[])">
            <summary>
            Creates a new function using a set of values. The sampling rate
            for those values must correspond to the sampling rate of the factory.
            Also the start value must be a multiple of the sampling rate.
            All values other than the given ones are set to zero.
            </summary>
            <param name="xStart">Position on the x axis for the first value in the value array.</param>
            <param name="values">Ordered set of values describing the function.</param>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.DiscreteFactory.DiscreteFourierFunction(MathNet.Numerics.Complex[])">
            <summary>
            Creates a new fourier function. It is assumed, that the complex values are the fourier 
            transformed values.
            </summary>
            <param name="values">Already fourier transformed values</param>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.DiscreteFactory.DiscreteFourierFunction(Palladio.Performance.Math.IDiscreteFunction)">
            <summary>
            Creates a new fourier function. The values are transformed to the frquency space.
            </summary>
            <param name="function">Values in time space.</param>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.DiscreteFactory.#ctor">
            <summary>
            Creates discrete function factory. 
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.Functions.DiscreteFactory.SamplingRate">
            <summary>
            Precision for the created functions.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.Functions.DiscreteFactory.XMax">
            <summary>
            Default maximum for the greatest x value that has an associated function value.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.Functions.DiscreteFactory.XMin">
            <summary>
            Default minimum for the smallest x value that has an associated function value.
            </summary>
        </member>
        <member name="T:Palladio.Performance.Math.Functions.DiscreteFunction">
            <summary>
            
            </summary>
        </member>
        <member name="T:Palladio.Performance.Math.IDiscreteFunction">
            <summary>
            
            </summary>
        </member>
        <member name="T:Palladio.Performance.Math.IFunction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Palladio.Performance.Math.IFunction.Scale(System.Double)">
            <summary>
            Scales this function by a.
            </summary>
            <param name="a"></param>
        </member>
        <member name="M:Palladio.Performance.Math.IFunction.GetScaled(System.Double)">
            <summary>
            Returns this function scaled by a.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.IFunction.Convolution(MathNet.Numerics.IRealFunction)">
            <summary>
            Creates the convolution of this function with
            a Function.
            </summary>
        </member>
        <member name="M:Palladio.Performance.Math.IFunction.Add(MathNet.Numerics.IRealFunction)">
            <summary>
            Adds aFunction to this function.
            </summary>
        </member>
        <member name="M:Palladio.Performance.Math.IFunction.AddScaled(System.Double,MathNet.Numerics.IRealFunction)">
            <summary>
            Adds a * g(x) to this function.
            </summary>
        </member>
        <member name="M:Palladio.Performance.Math.IFunction.Multiply(MathNet.Numerics.IRealFunction)">
            <summary>
            Returns the multiplication of this function by g.
            </summary>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunction.Crop">
            <summary>
            Removes 0-Values at beginning and end.
            </summary>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunction.ExpandDomain(System.Int64)">
            <summary>
            Expands the domain of the function to the new value of xMax.
            All new values are set to zero.
            </summary>
            <param name="xMax"></param>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunction.ExpandDomain(System.Int64,System.Int64)">
            <summary>
            Expands the domain of the function to the new values of xMax and xMin. 
            All new values are set to zero.
            </summary>
            <param name="xMin"></param>
            <param name="xMax"></param>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunction.AdjustSamplingRate(System.Int64)">
            <summary>
            Adjusts the samplinrate to the new value.
            </summary>
            <param name="newSR"></param>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunction.AdjustSamplingRateDown(System.Int64)">
            <summary>
            
            </summary>
            <param name="samplingrate"></param>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunction.AdjustSamplingRateUp(System.Int64)">
            <summary>
            
            </summary>
            <param name="samplingrate"></param>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunction.FunctionWithNValues(System.Int32)">
            <summary>
            Adjusts the sampling rate, so the function contains n values.
            </summary>
            <param name="numberOfValues"></param>
        </member>
        <member name="M:Palladio.Performance.Math.IDiscreteFunction.ToFile(System.IO.StreamWriter)">
            <summary>
            Writes the function to a file.
            </summary>
            <param name="sw"></param>
        </member>
        <member name="P:Palladio.Performance.Math.IDiscreteFunction.Data">
            <summary>
            Values defining the function.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.IDiscreteFunction.Count">
            <summary>
            Number of discrete function values.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.IDiscreteFunction.SamplingRate">
            <summary>
            Precision of the  disctrete function x[n]. Distance between
            two discrete values on the x-axis.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.IDiscreteFunction.XMin">
            <summary>
            First x value for which this function is defined.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.IDiscreteFunction.XMax">
            <summary>
            Last x value for which this function is defined.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.IDiscreteFunction.TotalProb">
            <summary>
            Sum of all probabilities.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.IDiscreteFunction.Median">
            <summary>
            Median og the function.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.IDiscreteFunction.Expectancy">
            <summary>
            Expectancy of the function.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.IDiscreteFunction.Variance">
            <summary>
            variance of the function.
            </summary>
        </member>
        <member name="F:Palladio.Performance.Math.Functions.DiscreteFunction.data">
            <summary>
            Array of function values.
            </summary>
        </member>
        <member name="F:Palladio.Performance.Math.Functions.DiscreteFunction.samplingRate">
            <summary>
            Distance between two function values.
            </summary>
        </member>
        <member name="F:Palladio.Performance.Math.Functions.DiscreteFunction.xmin">
            <summary>
            Minimal x value for which a value is listed in the value array.
            </summary>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.DiscreteFunction.NumberOfNullValues">
            <summary>
            returns the number of values which probability is 0.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.DiscreteFunction.ExpandDomain(System.Int64)">
            <summary>
            Expands the domain of the function to the new value of xMax.
            All new values are set to zero.
            </summary>
            <param name="xMax"></param>
        </member>
        <!-- Schlecht gebildeter XML-Kommentar wurde für den Member "M:Palladio.Performance.Math.Functions.DiscreteFunction.ExpandDomain(System.Int64,System.Int64)" ignoriert -->
        <!-- Schlecht gebildeter XML-Kommentar wurde für den Member "M:Palladio.Performance.Math.Functions.DiscreteFunction.ExpandDomainPo2(System.Int64,System.Int64)" ignoriert -->
        <member name="M:Palladio.Performance.Math.Functions.DiscreteFunction.#ctor(System.Double[],System.Int64,System.Int64)">
            <summary>
            Creates new function.
            </summary>
            <param name="values">Array of function values.</param>
            <param name="samplingRate">x distance of the values in the array.</param>
            <param name="xmin">x value for the first entry in the value array.</param>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.DiscreteFunction.#ctor(Palladio.Performance.Math.Functions.DiscreteFunction)">
            <summary>
            Copy Constructor.
            </summary>
            <param name="df"></param>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.DiscreteFunction.Scale(System.Double)">
            <summary>
            Scales the data of the function with the given factor.
            </summary>
            <param name="factor">Factor with which the data is scaled.</param>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.DiscreteFunction.GetScaled(System.Double)">
            <summary>
            Returns a copy of the function scaled by the given factor.
            </summary>
            <param name="a">Factor with which the data is scaled.</param>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.DiscreteFunction.Convolution(MathNet.Numerics.IRealFunction)">
            <summary>
            Convolution for discrete Functions. The two functions must have the same SamplingRate. 
            </summary>
            <param name="g">Function g for the convolution with the object.</param>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.DiscreteFunction.AddScaled(System.Double,MathNet.Numerics.IRealFunction)">
            <summary>
            Adds a function g scaled by a to the existing function.
            </summary>
            <param name="a">Sclaing factor.</param>
            <param name="g">Function to add.</param>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.DiscreteFunction.Add(MathNet.Numerics.IRealFunction)">
            <summary>
            Adds a function to this.
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.DiscreteFunction.Crop">
            <summary>
            Removes 0-Values at beginning and end.
            </summary>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.DiscreteFunction.ValueOf(System.Int64)">
            <summary>
            Returns the function value of x, that is f(x). 
            </summary>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.DiscreteFunction.AdjustSamplingRateDown(System.Int64)">
            <summary>
            Adjust the function to a new SamplingRate. 
            The new SamplingRate must be a divisor of the old one.
            </summary>
            <param name="newSR">New sampling rate.</param>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.DiscreteFunction.AdjustSamplingRateUp(System.Int64)">
            <summary>
            Adjust the function to a new SamplingRate. 
            The new SamplingRate must be multiple of the old one.
            </summary>
            <param name="newSR"></param>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.DiscreteFunction.FunctionWithNValues(System.Int32)">
            <summary>
            Create a Function with n values. The sampling rate will be adjusted
            </summary>
            <param name="n"></param>
        </member>
        <member name="M:Palladio.Performance.Math.Functions.DiscreteFunction.ToFile(System.IO.StreamWriter)">
            <summary>
            Writes the function to a stream.
            </summary>
            <param name="sw"></param>
        </member>
        <member name="P:Palladio.Performance.Math.Functions.DiscreteFunction.XMin">
            <summary>
            Smallest x value for which an entry in the value array exists.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.Functions.DiscreteFunction.XMax">
            <summary>
            Greatest x value for which an entry in the value array exists.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.Functions.DiscreteFunction.Data">
            <summary>
            Array of discrete function values.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.Functions.DiscreteFunction.SamplingRate">
            <summary>
            Distance (x-axis) between two entries in the value array.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.Functions.DiscreteFunction.TotalProb">
            <summary>
            Total probability of all values.
            </summary>
        </member>
        <member name="T:Palladio.Performance.Math.Fourier.DiscreteFourierFunction">
            <summary>
            Zusammenfassung für DiscreteFourierFunction.
            </summary>
        </member>
        <member name="T:Palladio.Performance.Math.IFourierFunction">
            <summary>
            Zusammenfassung für IFourierFunction.
            </summary>
        </member>
        <member name="M:Palladio.Performance.Math.IFourierFunction.Multiply(Palladio.Performance.Math.Fourier.DiscreteFourierFunction)">
            <summary>
            Multiplication of each pair of elements.
            </summary>
            <param name="ff"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.IFourierFunction.Add(Palladio.Performance.Math.Fourier.DiscreteFourierFunction)">
            <summary>
            Addition of each pair of elements.
            </summary>
            <param name="ff"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.IFourierFunction.Scale(System.Double)">
            <summary>
            Scales each element of the function by <c>factor</c>
            </summary>
            <param name="factor"></param>
        </member>
        <member name="M:Palladio.Performance.Math.IFourierFunction.ComputeLoopLimit(System.Double)">
            <summary>
            Computes the execution time of a loop.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="P:Palladio.Performance.Math.IFourierFunction.Data">
            <summary>
            Values defining the function.
            </summary>
        </member>
        <member name="T:Palladio.Performance.Math.Fourier.FastFourierTransformation">
            <summary>
            Zusammenfassung für FastFourierTransformation.
            </summary>
        </member>
        <member name="T:Palladio.Performance.Math.IFourierTransform">
            <summary>
            </summary>
        </member>
        <member name="M:Palladio.Performance.Math.IFourierTransform.Forward(MathNet.Numerics.Complex[])">
            <summary>
            Transforms a set of complex values from the time space into
            the frequency space.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.IFourierTransform.ForwardFromReal(System.Double[])">
            <summary>
            Transforms a set of real values from the time space into 
            the (complex) frequency space.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.IFourierTransform.Backward(MathNet.Numerics.Complex[])">
            <summary>
            Transforms a set of complex values from the frequency 
            space to the time space.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.IFourierTransform.BackwardToReal(MathNet.Numerics.Complex[])">
            <summary>
            Transforms a set of complex values from the frequency 
            space to the time space and converts the result to real
            values by neglecting the imaginary part.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.Fourier.FastFourierTransformation.TransformRecursive(MathNet.Numerics.Complex[],System.Double)">
            <summary>
            if direction is true -> forward
            if direction is false -> backward
            </summary>
            <param name="X"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="T:Palladio.Performance.Math.Fourier.SimpleFourierTransform">
            <summary>
            Zusammenfassung für FourierTransform.
            </summary>
        </member>
        <member name="M:Palladio.Performance.Math.Fourier.SimpleFourierTransform.Transform(MathNet.Numerics.Complex[],System.Double)">
            <summary>
            if direction is true -> forward
            if direction is false -> backward
            </summary>
            <param name="X"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="T:Palladio.Performance.Math.HelpFunctions">
            <summary>
            Zusammenfassung für HelpFunctions.
            </summary>
        </member>
        <member name="T:Palladio.Performance.Math.MathTools">
            <summary>
            
            </summary>
        </member>
        <member name="M:Palladio.Performance.Math.MathTools.GCD(System.Int64,System.Int64)">
            <summary>
            Greatest Common Divisor. If one of the values is 0, then the other value is returned.
            If both values are 0, then 0 is returned.
            </summary>
            <param name="u"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.MathTools.GCD(System.Int64[])">
            <summary>
            Greatest Common Divisor.
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Palladio.Performance.Math.MathTools.Quicksort(System.Int64[]@,System.Int64,System.Int64)">
            <summary>
            Quicksort without recursion.
            </summary>
            <param name="a"></param>
            <param name="l"></param>
            <param name="r"></param>
        </member>
        <member name="M:Palladio.Performance.Math.MathTools.QuicksortRec(System.Int64[]@,System.Int64,System.Int64)">
            <summary>
            Quicksort using recursion.
            </summary>
            <param name="a"></param>
            <param name="l"></param>
            <param name="r"></param>
        </member>
        <member name="P:Palladio.Performance.Math.MathTools.DiscreteFunctions">
            <summary>
            A Factory for creation of discrete function.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.MathTools.FourierTransform">
            <summary>
            A Class for transforming discrete value functions from time domain to frequency domain
            or reverse.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.MathTools.FastFourierTransform">
            <summary>
            A Class for transforming discrete value functions from time domain to frequency domain
            or reverse. Transformation uses recursive FFT.
            </summary>
        </member>
        <member name="P:Palladio.Performance.Math.MathTools.SimpleFourierTransform">
            <summary>
            Deprecated. A Class for transforming discrete value functions from time domain to frequency domain
            or reverse. Transformation uses simple transformation. Deprecated.
            </summary>
        </member>
    </members>
</doc>
