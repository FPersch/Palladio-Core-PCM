«EXTENSION templates::Names»
«EXTENSION templates::DeploymentNames»

«IMPORT de::uka::ipd::sdq::pcm::repository»
«IMPORT de::uka::ipd::sdq::pcm::allocation»
«IMPORT de::uka::ipd::sdq::pcm::resourceenvironment»

«REM» ant-file for the generated project«ENDREM»
«DEFINE build(String modelName, String basePackage) FOR repository::Repository»
«FILE "build-" + modelName + ".xml"-»
<project name="«modelName» - build repository" default="all" basedir="../">
	<description> «stamp(this)»
	«this.repositoryDescription»
	</description>
	«REM» read properties from the operating system «ENDREM»
	<property environment="env"/>

	<property name="baseName" value="«basePackage»" />
	<property name="src" value="${basedir}/src" />
	<property name="src-gen" value="${basedir}/src-gen" />
	<property name="src-man" value="${basedir}/src-man" />
	<property name="build" value="${basedir}/build" />
	<property name="classes" value="${build}/classes" />
	<property name="jboss.home" value="${env.JBOSS_HOME}" />
	<property name="jboss.server.config" value="default" />

	<property name="reports" value="${basedir}/reports"/>
	<property name="reports.tests" value="${basedir}/reports/tests"/>

	<!-- Build classpath -->
	<path id="classpath-compile">
	 <pathelement location="${classes}"/>
	 <pathelement location="${basedir}"/>
 	 <fileset dir="${basedir}/lib">
	  <include name="**/*.jar"/>
	 </fileset>
 	 <pathelement location="${env.JUNIT_HOME}/junit-4.1.jar"/>
	 <fileset dir="${jboss.home}/client">
	  <include name="**/*.jar"/>
	 </fileset>
	</path>

	<!-- Runtime classpath -->
	<path id="classpath-runtime">
	 <pathelement location="${env.JUNIT_HOME}/junit-4.1.jar"/>
 	 <pathelement location="${env.ANT_HOME}/lib/ant-junit.jar"/>
	 <fileset dir="${env.ANT_HOME}/lib">
	  <include name="*.jar"/>
	 </fileset>
	 <fileset dir="${basedir}/lib">
		<include name="**/*.jar"/>
	 </fileset>
	 <fileset dir="${jboss.home}/client">
		<include name="**/*.jar"/>
	 </fileset>
	 <fileset dir="${jboss.home}/server/${jboss.server.config}/lib">
	  <include name="**/*.jar"/>
	 </fileset>
	 <fileset dir="${jboss.home}/server/${jboss.server.config}/deploy/ejb3.deployer">
	   <include name="*.jar"/>
	 </fileset>
	 <fileset dir="${jboss.home}/server/${jboss.server.config}/deploy/jboss-aop-jdk50.deployer">
         	<include name="*.jar"/>
	 </fileset>
	</path>

	<target name="clean">
		<delete dir="${classes}/${baseName}" />
	</target>

	<!-- =================================================================== -->
	<!-- Prepares the build directory                                        -->
	<!-- =================================================================== -->
	<target name="init">
		<mkdir dir="${build}"/>
		<mkdir dir="${build}/lib"/>
		<mkdir dir="${build}/docs"/>
		<mkdir dir="${classes}"/>

		<mkdir dir="${reports}"/>
		<mkdir dir="${reports.tests}"/>
	</target>

	<!-- =================================================================== -->
	<!-- Compiles the source code                                            -->
	<!-- generated part                                                      -->
	<!-- =================================================================== -->
	<target name="compile.generated" depends="init">
		<javac destdir="${classes}" srcdir="${src-gen}/${baseName}"
			debug="off"
			deprecation="on"
			optimize="on"
			includes="**">
			<classpath refid="classpath-compile"/>
		</javac>
	</target>

	<target name="compile.manual" depends="init">
		<javac destdir="${classes}" srcdir="${src-man}/${baseName}">
		 <classpath refid="classpath-compile"/>
		</javac>
	</target>

	<target name="compile" depends="compile.generated, compile.manual">
	</target>

	<target name="javadoc" depends="init">
		<javadoc packagenames="*.*" 
			sourcepath="${src-gen}/${baseName}"
			destdir="${build}/docs"
			author="true"
			windowtitle="${baseName} - generated documentation">
			<fileset dir="${src-gen}/${baseName}"> 
				<include name="**/*.java"/>
			</fileset>
			<fileset dir="${src-man}/${baseName}"> 
				<include name="**/*.java"/>
			</fileset>
			<classpath refid="classpath-compile"/>
		</javadoc>
	</target>

	<target name="test" depends="init">
		<echo message="ANT_HOME = ${env.ANT_HOME}"/>
		<echo message="JUNIT_HOME = ${env.JUNIT_HOME}"/>
		<junit printsummary="yes" haltonfailure="no">
		 <classpath refid="classpath-runtime"/>
		 <formatter type="plain" />
		 <batchtest fork="yes" todir="${reports.tests}">
		  <fileset dir="${src-gen}">
		   <include name="**/*Test*.java" />
		  </fileset>
  		  <fileset dir="${src-man}">
		   <include name="**/*Test*.java" />
		  </fileset>
		 </batchtest>
		</junit>
	</target>

	<target name="pack" depends="compile">
		<ant antfile="pack-«modelName».xml" dir="src-gen" />
		<echo message="project ${baseName} - packed in jar-files"/>
	</target>

	<target name="deploy" depends="pack">
		<ant antfile="deploy-«modelName».xml" dir="src-gen" />
		<echo message="project ${baseName} - deployed"/>
	</target>

	<target name="all" depends="init, compile">
		<echo message="project ${baseName} - build all"/>
	</target>

</project>
«ENDFILE»
«ENDDEFINE»

«DEFINE pack(String modelName, String basePackage) FOR repository::Repository»
«FILE "pack-" + modelName + ".xml"-»
<project name="«modelName» - pack components" default="all" basedir="../">
	<description> puts each component in a JAR-file
	«stamp(this)»
	</description>
	<property name="baseName" value="«basePackage»" />
	<property name="build" value="${basedir}/build" />
	<property name="classes" value="${build}/classes" />

	«REM» puts all interfaces in one JAR-file «ENDREM»
	<target name="jar-interfaces">
		<jar jarfile="${build}/lib/${baseName}.interfaces.jar">
		<fileset dir="${classes}" 
			includes="${baseName}/*.class" />
		</jar>
	</target>

	<target name="jar-systemRequiredRoles">
		<jar jarfile="${build}/lib/${baseName}.systemreqroles.jar">
		<fileset dir="${classes}" 
			includes="${baseName}/systemreqroles/*.class" />
		</jar>
	</target>

	«REM» put all classes that build up a component in a JAR-files: 
	binary files from generated and not-generated sourcecode
	«ENDREM»
	«FOREACH components__Repository AS component»
		«LET jarFile(basePackage, component) AS filename»
			<target name="«targetName(component)»">
				<jar jarfile="${build}/lib/«filename».jar">
				<fileset dir="${classes}" 
					includes="${baseName}/«component.entityName.toLowerCase()»/**" />
				</jar>
			</target>
		«ENDLET»
	«ENDFOREACH»

	<target name="all" 
		depends="jar-interfaces, jar-systemRequiredRoles, 
		«FOREACH components__Repository AS component SEPARATOR ", "»jar-«component.entityName»«ENDFOREACH-» 
		"> «REM» end of attribut depends «ENDREM»
		<echo message="project in «basePackage» - build all JAR-files"/>
	</target>

</project>
«ENDFILE»
«ENDDEFINE»

«DEFINE deploy(String modelName, String basePackage) FOR allocation::Allocation»
	«FILE "deploy-" + modelName + ".xml"-»
	<project name="«modelName» - deploy components" default="all" basedir="../">
		<description> deploy components 
		«stamp(this)»
		</description>
		«REM» read properties from the operating system «ENDREM»
		<property environment="env"/>

		<property name="baseName" value="«basePackage»" />
		<property name="build" value="${basedir}/build" />
		<property name="jboss.home" value="${env.JBOSS_HOME}" />
		<property name="jboss.server.config" value="default" />

		<target name="deploy-interfaces">
			<copy file="${build}/lib/«basePackage».interfaces.jar" 
			  tofile="${jboss.home}/server/${jboss.server.config}/deploy/${baseName}.interfaces.jar" />
		</target>

		<target name="deploy-systemreqroles">
			<copy file="${build}/lib/${baseName}.systemreqroles.jar" 
			  tofile="${jboss.home}/server/${jboss.server.config}/deploy/${baseName}.systemreqroles.ejb3" />
		</target>

		«EXPAND Deployment::JBoss(basePackage) FOREACH allocationContexts»

		<target name="all" depends="deploy-interfaces, deploy-systemreqroles, 
			«FOREACH allocationContexts AS context SEPARATOR ", "»
				«targetName(context)»
			«ENDFOREACH-»
			">
 			<echo message="deploy RuntimeSystem for generated System" />
			<copy file="${basedir}/lib/PCM-RuntimeSystem.jar" 
			 todir="${jboss.home}/server/${jboss.server.config}/deploy" />
			<echo message="project in ${baseName} - deployed all JAR-files"/>
		</target>

		<!-- just for tests - not useful later

		<target name="ejbjar">
			<jar jarfile="${build}/lib/${baseName}.ejb3">
			 <fileset dir="${build}/classes" includes="${baseName}/**" />
			</jar>
			<copy file="${build}/lib/${baseName}.jar" 
			  tofile="${jboss.home}/server/${jboss.server.config}/deploy/${baseName}.ejb3" />
		</target>

		«REM» remove the file that was deployed by the target ejbjar«ENDREM»
		<target name="undeploy">
			<delete file="${jboss.home}/server/${jboss.server.config}/deploy/${baseName}.ejb3"/>
		</target>
		-->
		
	</project>
	«ENDFILE»
«ENDDEFINE»