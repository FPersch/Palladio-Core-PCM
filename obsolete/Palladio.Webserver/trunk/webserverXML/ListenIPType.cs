//
// ListenIPType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace WebserverXML
{
	public class ListenIPType : Altova.Xml.Node
	{
		#region Forward constructors
		public ListenIPType() : base() { SetCollectionParents(); }
		public ListenIPType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public ListenIPType(XmlNode node) : base(node) { SetCollectionParents(); }
		public ListenIPType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

			for (int i = 0; i < DomChildCount(NodeType.Attribute, "", "ip"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "ip", i);
				InternalAdjustPrefix(DOMNode, false);
			}
		}


		#region ip accessor methods
		public int GetipMinCount()
		{
			return 1;
		}

		public int ipMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetipMaxCount()
		{
			return 1;
		}

		public int ipMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetipCount()
		{
			return DomChildCount(NodeType.Attribute, "", "ip");
		}

		public int ipCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "ip");
			}
		}

		public bool Hasip()
		{
			return HasDomChild(NodeType.Attribute, "", "ip");
		}

		public SchemaString GetipAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "ip", index)));
		}

		public SchemaString Getip()
		{
			return GetipAt(0);
		}

		public SchemaString ip
		{
			get
			{
				return GetipAt(0);
			}
		}

		public void RemoveipAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "ip", index);
		}

		public void Removeip()
		{
			while (Hasip())
				RemoveipAt(0);
		}

		public void Addip(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "ip", newValue.ToString());
		}

		public void InsertipAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "ip", index, newValue.ToString());
		}

		public void ReplaceipAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "ip", index, newValue.ToString());
		}
		#endregion // ip accessor methods

		#region ip collection
        public ipCollection	Myips = new ipCollection( );

        public class ipCollection: IEnumerable
        {
            ListenIPType parent;
            public ListenIPType Parent
			{
				set
				{
					parent = value;
				}
			}
			public ipEnumerator GetEnumerator() 
			{
				return new ipEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ipEnumerator: IEnumerator 
        {
			int nIndex;
			ListenIPType parent;
			public ipEnumerator(ListenIPType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ipCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetipAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ip collection

        private void SetCollectionParents()
        {
            Myips.Parent = this; 
	}
}
}
