//
// DefaultFilesType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace WebserverXML
{
	public class DefaultFilesType : Altova.Xml.Node
	{
		#region Forward constructors
		public DefaultFilesType() : base() { SetCollectionParents(); }
		public DefaultFilesType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public DefaultFilesType(XmlNode node) : base(node) { SetCollectionParents(); }
		public DefaultFilesType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

			for (int i = 0; i < DomChildCount(NodeType.Element, "", "FileName"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "FileName", i);
				InternalAdjustPrefix(DOMNode, false);
				new FileNameType(DOMNode).AdjustPrefix();
			}
		}


		#region FileName accessor methods
		public int GetFileNameMinCount()
		{
			return 0;
		}

		public int FileNameMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetFileNameMaxCount()
		{
			return Int32.MaxValue;
		}

		public int FileNameMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetFileNameCount()
		{
			return DomChildCount(NodeType.Element, "", "FileName");
		}

		public int FileNameCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "FileName");
			}
		}

		public bool HasFileName()
		{
			return HasDomChild(NodeType.Element, "", "FileName");
		}

		public FileNameType GetFileNameAt(int index)
		{
			return new FileNameType(GetDomChildAt(NodeType.Element, "", "FileName", index));
		}

		public FileNameType GetFileName()
		{
			return GetFileNameAt(0);
		}

		public FileNameType FileName
		{
			get
			{
				return GetFileNameAt(0);
			}
		}

		public void RemoveFileNameAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "FileName", index);
		}

		public void RemoveFileName()
		{
			while (HasFileName())
				RemoveFileNameAt(0);
		}

		public void AddFileName(FileNameType newValue)
		{
			AppendDomElement("", "FileName", newValue);
		}

		public void InsertFileNameAt(FileNameType newValue, int index)
		{
			InsertDomElementAt("", "FileName", index, newValue);
		}

		public void ReplaceFileNameAt(FileNameType newValue, int index)
		{
			ReplaceDomElementAt("", "FileName", index, newValue);
		}
		#endregion // FileName accessor methods

		#region FileName collection
        public FileNameCollection	MyFileNames = new FileNameCollection( );

        public class FileNameCollection: IEnumerable
        {
            DefaultFilesType parent;
            public DefaultFilesType Parent
			{
				set
				{
					parent = value;
				}
			}
			public FileNameEnumerator GetEnumerator() 
			{
				return new FileNameEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class FileNameEnumerator: IEnumerator 
        {
			int nIndex;
			DefaultFilesType parent;
			public FileNameEnumerator(DefaultFilesType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.FileNameCount );
			}
			public FileNameType  Current 
			{
				get 
				{
					return(parent.GetFileNameAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // FileName collection

        private void SetCollectionParents()
        {
            MyFileNames.Parent = this; 
	}
}
}
