transformation Ecore2copyQVT (feat: featureconfig, qvt: QVTRelation)  {

	top relation Config2Transformation {
		n : String;
		checkonly domain feat config: featureconfig::Configuration {
			name = n
		};
		
		enforce domain qvt t: QVTRelation::RelationalTransformation {
			name = n,
			modelParameter = sourceMM: QVTBase::TypedModel {
				name = 'source',
			  	usedPackage = uPackage: ecore::EPackage{}
			  	--TODO: Where to get package from?
			},
			modelParameter = targetMM: QVTBase::TypedModel {
				name = 'target',
				usedPackage = uPackage: ecore::EPackage{}
				--TODO: Where to get package from?
			}
		};
		
		where {
		 	MarkTypedModel(sourceMM, targetMM);
			MarkTransformation(t);
		}
	}
	
	relation MarkTypedModel {
		checkonly domain qvt sourceMM: QVTBase::TypedModel {};
		checkonly domain qvt targetMM: QVTBase::TypedModel {};
	}
	
	relation MarkTransformation {	
		checkonly domain qvt t: QVTRelation::RelationalTransformation {};
	}
	
	/*
	* P1:
	* Copy the relations from each selected feature
	*/
	top relation SelectedFeatureRelation2Relation {
		n : String;
		checkonly domain feat selectedFeature: featureconfig::ConfigNode {
		  	configState = featureconfig::ConfigState::SELECTED, --only selectedFeatures are selected,
		  	origin = originFeature : featuremodel::Feature {
		  		name = n,
		  		relations = featureRel : QVTRelation::Relation {}
		  	}
		};
		
		enforce domain qvt targetRel: Relation {
		 	_transformation = transfo: QVTRelation::RelationalTransformation {}
		};

		when {
			MarkTransformation(transfo);
		}
		where {
			MarkFeatureRelation(originFeature, targetRel);
			CopyRelation(featureRel, targetRel);
		}
	}
	
	/*
	* P2:
	* Copy the assignments from each selected feature
	*/
	top relation SelectedFeatureVariableAssignment2VariableAssignment {
		n : String;
		checkonly domain feat selectedFeature: featureconfig::ConfigNode {
		  	configState = featureconfig::ConfigState::SELECTED, --only selectedFeatures are selected,
		  	origin = originFeature : featuremodel::Feature {
		  		name = n,
		  		variableAssignments = assignment : ocl::ecore::OperationCallExp {},
		  		parentRelation = parentRel : featuremodel::ChildRelation {
		  			parent = parentFeature : featuremodel::Feature {}
		  		}
		  	}
		};
		
		enforce domain qvt targetRel: Relation {
		 	_transformation = transfo: QVTRelation::RelationalTransformation {},
		 	_where = whereClause : QVTBase::Pattern {
		 		predicate = pred : QVTBase::Predicate {
		 			conditionExpression = copiedAssignment : ocl::ecore::OperationCallExp {}
		 		}
		 	}
		};

		when {
			MarkTransformation(transfo);
			MarkFeatureRelation(parentFeature, targetRel);
		}
		where {
			CopyAssignment(assignment, copiedAssignment);
		}
	}
	
	relation CopyRelation {
		checkonly domain qvt sourceRel: Relation {};
		enforce domain qvt targetRel: Relation {};
	}
	
	relation CopyAssignment {
		checkonly domain qvt source: ocl::ecore::OperationCallExp {};
		enforce domain qvt target: ocl::ecore::OperationCallExp {};
	}
	
	relation MarkFeatureRelation {
		checkonly domain feat feature: featuremodel::Feature {};
		enforce domain qvt targetRel: Relation {};
	}

}