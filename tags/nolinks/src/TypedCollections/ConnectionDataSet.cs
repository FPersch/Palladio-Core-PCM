//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Palladio.ComponentModel.src.TypedCollections {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    internal class ConnectionDataSet : DataSet {
        
        private ConnectionTableDataTable tableConnectionTable;
        
        public ConnectionDataSet() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ConnectionDataSet(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["ConnectionTable"] != null)) {
                    this.Tables.Add(new ConnectionTableDataTable(ds.Tables["ConnectionTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ConnectionTableDataTable ConnectionTable {
            get {
                return this.tableConnectionTable;
            }
        }
        
        public override DataSet Clone() {
            ConnectionDataSet cln = ((ConnectionDataSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["ConnectionTable"] != null)) {
                this.Tables.Add(new ConnectionTableDataTable(ds.Tables["ConnectionTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableConnectionTable = ((ConnectionTableDataTable)(this.Tables["ConnectionTable"]));
            if ((this.tableConnectionTable != null)) {
                this.tableConnectionTable.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "ConnectionDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ConnectionDataSet.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableConnectionTable = new ConnectionTableDataTable();
            this.Tables.Add(this.tableConnectionTable);
        }
        
        private bool ShouldSerializeConnectionTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ConnectionTableRowChangeEventHandler(object sender, ConnectionTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ConnectionTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn columnProvComponentID;
            
            private DataColumn columnProvRoleID;
            
            private DataColumn columnReqComponentID;
            
            private DataColumn columnReqRoleID;
            
            internal ConnectionTableDataTable() : 
                    base("ConnectionTable") {
                this.InitClass();
            }
            
            internal ConnectionTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn ProvComponentIDColumn {
                get {
                    return this.columnProvComponentID;
                }
            }
            
            internal DataColumn ProvRoleIDColumn {
                get {
                    return this.columnProvRoleID;
                }
            }
            
            internal DataColumn ReqComponentIDColumn {
                get {
                    return this.columnReqComponentID;
                }
            }
            
            internal DataColumn ReqRoleIDColumn {
                get {
                    return this.columnReqRoleID;
                }
            }
            
            public ConnectionTableRow this[int index] {
                get {
                    return ((ConnectionTableRow)(this.Rows[index]));
                }
            }
            
            public event ConnectionTableRowChangeEventHandler ConnectionTableRowChanged;
            
            public event ConnectionTableRowChangeEventHandler ConnectionTableRowChanging;
            
            public event ConnectionTableRowChangeEventHandler ConnectionTableRowDeleted;
            
            public event ConnectionTableRowChangeEventHandler ConnectionTableRowDeleting;
            
            public void AddConnectionTableRow(ConnectionTableRow row) {
                this.Rows.Add(row);
            }
            
            public ConnectionTableRow AddConnectionTableRow(long ID, string ProvComponentID, string ProvRoleID, string ReqComponentID, string ReqRoleID) {
                ConnectionTableRow rowConnectionTableRow = ((ConnectionTableRow)(this.NewRow()));
                rowConnectionTableRow.ItemArray = new object[] {
                        ID,
                        ProvComponentID,
                        ProvRoleID,
                        ReqComponentID,
                        ReqRoleID};
                this.Rows.Add(rowConnectionTableRow);
                return rowConnectionTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ConnectionTableDataTable cln = ((ConnectionTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ConnectionTableDataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.columnProvComponentID = this.Columns["ProvComponentID"];
                this.columnProvRoleID = this.Columns["ProvRoleID"];
                this.columnReqComponentID = this.Columns["ReqComponentID"];
                this.columnReqRoleID = this.Columns["ReqRoleID"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnProvComponentID = new DataColumn("ProvComponentID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProvComponentID);
                this.columnProvRoleID = new DataColumn("ProvRoleID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProvRoleID);
                this.columnReqComponentID = new DataColumn("ReqComponentID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnReqComponentID);
                this.columnReqRoleID = new DataColumn("ReqRoleID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnReqRoleID);
            }
            
            public ConnectionTableRow NewConnectionTableRow() {
                return ((ConnectionTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ConnectionTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ConnectionTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ConnectionTableRowChanged != null)) {
                    this.ConnectionTableRowChanged(this, new ConnectionTableRowChangeEvent(((ConnectionTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ConnectionTableRowChanging != null)) {
                    this.ConnectionTableRowChanging(this, new ConnectionTableRowChangeEvent(((ConnectionTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ConnectionTableRowDeleted != null)) {
                    this.ConnectionTableRowDeleted(this, new ConnectionTableRowChangeEvent(((ConnectionTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ConnectionTableRowDeleting != null)) {
                    this.ConnectionTableRowDeleting(this, new ConnectionTableRowChangeEvent(((ConnectionTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveConnectionTableRow(ConnectionTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ConnectionTableRow : DataRow {
            
            private ConnectionTableDataTable tableConnectionTable;
            
            internal ConnectionTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableConnectionTable = ((ConnectionTableDataTable)(this.Table));
            }
            
            public long ID {
                get {
                    try {
                        return ((long)(this[this.tableConnectionTable.IDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e);
                    }
                }
                set {
                    this[this.tableConnectionTable.IDColumn] = value;
                }
            }
            
            public string ProvComponentID {
                get {
                    try {
                        return ((string)(this[this.tableConnectionTable.ProvComponentIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e);
                    }
                }
                set {
                    this[this.tableConnectionTable.ProvComponentIDColumn] = value;
                }
            }
            
            public string ProvRoleID {
                get {
                    try {
                        return ((string)(this[this.tableConnectionTable.ProvRoleIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e);
                    }
                }
                set {
                    this[this.tableConnectionTable.ProvRoleIDColumn] = value;
                }
            }
            
            public string ReqComponentID {
                get {
                    try {
                        return ((string)(this[this.tableConnectionTable.ReqComponentIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e);
                    }
                }
                set {
                    this[this.tableConnectionTable.ReqComponentIDColumn] = value;
                }
            }
            
            public string ReqRoleID {
                get {
                    try {
                        return ((string)(this[this.tableConnectionTable.ReqRoleIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e);
                    }
                }
                set {
                    this[this.tableConnectionTable.ReqRoleIDColumn] = value;
                }
            }
            
            public bool IsIDNull() {
                return this.IsNull(this.tableConnectionTable.IDColumn);
            }
            
            public void SetIDNull() {
                this[this.tableConnectionTable.IDColumn] = System.Convert.DBNull;
            }
            
            public bool IsProvComponentIDNull() {
                return this.IsNull(this.tableConnectionTable.ProvComponentIDColumn);
            }
            
            public void SetProvComponentIDNull() {
                this[this.tableConnectionTable.ProvComponentIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsProvRoleIDNull() {
                return this.IsNull(this.tableConnectionTable.ProvRoleIDColumn);
            }
            
            public void SetProvRoleIDNull() {
                this[this.tableConnectionTable.ProvRoleIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsReqComponentIDNull() {
                return this.IsNull(this.tableConnectionTable.ReqComponentIDColumn);
            }
            
            public void SetReqComponentIDNull() {
                this[this.tableConnectionTable.ReqComponentIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsReqRoleIDNull() {
                return this.IsNull(this.tableConnectionTable.ReqRoleIDColumn);
            }
            
            public void SetReqRoleIDNull() {
                this[this.tableConnectionTable.ReqRoleIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ConnectionTableRowChangeEvent : EventArgs {
            
            private ConnectionTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public ConnectionTableRowChangeEvent(ConnectionTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ConnectionTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
