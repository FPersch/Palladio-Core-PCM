//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by CodeSmith.
//     Version: 2.5.14.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using Palladio.Attributes;
using Palladio.Identifier;
using Palladio.Utils.Collections;

namespace Palladio.ComponentModel.TypedCollections
{

    #region Interface IIRoleCollection

    /// <summary>
    /// Defines size, enumerators, and synchronization methods for strongly
    /// typed collections of <see cref="IRole"/> elements.
    /// </summary>
    /// <remarks>
    /// <b>IIRoleCollection</b> provides an <see cref="ICollection"/>
    /// that is strongly typed for <see cref="IRole"/> elements.
    /// </remarks>

    internal interface IIRoleCollection {
        #region Properties
        #region Count

        /// <summary>
        /// Gets the number of elements contained in the
        /// <see cref="IIRoleCollection"/>.
        /// </summary>
        /// <value>The number of elements contained in the
        /// <see cref="IIRoleCollection"/>.</value>
        /// <remarks>Please refer to <see cref="ICollection.Count"/> for details.</remarks>

        int Count { get; }

        #endregion
        #region IsSynchronized

        /// <summary>
        /// Gets a value indicating whether access to the
        /// <see cref="IIRoleCollection"/> is synchronized (thread-safe).
        /// </summary>
        /// <value><c>true</c> if access to the <see cref="IIRoleCollection"/> is
        /// synchronized (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.</value>
        /// <remarks>Please refer to <see cref="ICollection.IsSynchronized"/> for details.</remarks>

        bool IsSynchronized { get; }

        #endregion
        #region SyncRoot

        /// <summary>
        /// Gets an object that can be used to synchronize access
        /// to the <see cref="IIRoleCollection"/>.
        /// </summary>
        /// <value>An object that can be used to synchronize access
        /// to the <see cref="IIRoleCollection"/>.</value>
        /// <remarks>Please refer to <see cref="ICollection.SyncRoot"/> for details.</remarks>

        object SyncRoot { get; }

        #endregion
        #endregion
        #region Methods
        #region CopyTo

        /// <summary>
        /// Copies the entire <see cref="IIRoleCollection"/> to a one-dimensional <see cref="Array"/>
        /// of <see cref="IRole"/> elements, starting at the specified index of the target array.
        /// </summary>
        /// <param name="array">The one-dimensional <see cref="Array"/> that is the destination of the
        /// <see cref="IRole"/> elements copied from the <see cref="IIRoleCollection"/>.
        /// The <b>Array</b> must have zero-based indexing.</param>
        /// <param name="arrayIndex">The zero-based index in <paramref name="array"/>
        /// at which copying begins.</param>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="array"/> is a null reference.</exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <paramref name="arrayIndex"/> is less than zero.</exception>
        /// <exception cref="ArgumentException"><para>
        /// <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
        /// </para><para>-or-</para><para>
        /// The number of elements in the source <see cref="IIRoleCollection"/> is greater
        /// than the available space from <paramref name="arrayIndex"/> to the end of the destination
        /// <paramref name="array"/>.</para></exception>
        /// <remarks>Please refer to <see cref="ICollection.CopyTo"/> for details.</remarks>

        void CopyTo(IRole[] array, int arrayIndex);

        #endregion
        #region GetEnumerator

        /// <summary>
        /// Returns an <see cref="IIRoleEnumerator"/> that can
        /// iterate through the <see cref="IIRoleCollection"/>.
        /// </summary>
        /// <returns>An <see cref="IIRoleEnumerator"/>
        /// for the entire <see cref="IIRoleCollection"/>.</returns>
        /// <remarks>Please refer to <see cref="IEnumerable.GetEnumerator"/> for details.</remarks>

        IIRoleEnumerator GetEnumerator();

        #endregion
        #endregion
    }

    #endregion
    #region Interface IIRoleList

    /// <summary>
    /// Represents a strongly typed collection of <see cref="IRole"/>
    /// objects that can be individually accessed by index.
    /// </summary>
    /// <remarks>
    /// <b>IIRoleList</b> provides an <see cref="IList"/>
    /// that is strongly typed for <see cref="IRole"/> elements.
    /// </remarks>

    internal interface
        IIRoleList: IIRoleCollection {
        #region Properties
        #region IsFixedSize

        /// <summary>
        /// Gets a value indicating whether the <see cref="IIRoleList"/> has a fixed size.
        /// </summary>
        /// <value><c>true</c> if the <see cref="IIRoleList"/> has a fixed size;
        /// otherwise, <c>false</c>. The default is <c>false</c>.</value>
        /// <remarks>Please refer to <see cref="IList.IsFixedSize"/> for details.</remarks>

        bool IsFixedSize { get; }

        #endregion
        #region IsReadOnly

        /// <summary>
        /// Gets a value indicating whether the <see cref="IIRoleList"/> is read-only.
        /// </summary>
        /// <value><c>true</c> if the <see cref="IIRoleList"/> is read-only;
        /// otherwise, <c>false</c>. The default is <c>false</c>.</value>
        /// <remarks>Please refer to <see cref="IList.IsReadOnly"/> for details.</remarks>

        bool IsReadOnly { get; }

        #endregion
        #region Item

        /// <summary>
        /// Gets or sets the <see cref="IRole"/> element at the specified index.
        /// </summary>
        /// <param name="index">The zero-based index of the
        /// <see cref="IRole"/> element to get or set.</param>
        /// <value>
        /// The <see cref="IRole"/> element at the specified <paramref name="index"/>.
        /// </value>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para><paramref name="index"/> is less than zero.</para>
        /// <para>-or-</para>
        /// <para><paramref name="index"/> is equal to or greater than
        /// <see cref="IIRoleCollection.Count"/>.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// The property is set and the <see cref="IIRoleList"/> is read-only.</exception>
        /// <remarks>Please refer to <see cref="IList.this"/> for details.</remarks>

        IRole this[int index] { get; set; }

        #endregion
        #endregion
        #region Methods
        #region Add

        /// <summary>
        /// Adds a <see cref="IRole"/> to the end
        /// of the <see cref="IIRoleList"/>.
        /// </summary>
        /// <param name="value">The <see cref="IRole"/> object
        /// to be added to the end of the <see cref="IIRoleList"/>.
        /// This argument can be a null reference.
        /// </param>
        /// <returns>The <see cref="IIRoleList"/> index at which
        /// the <paramref name="value"/> has been added.</returns>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="IIRoleList"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>IIRoleList</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="IList.Add"/> for details.</remarks>

        int Add(IRole value);

        #endregion
        #region Clear

        /// <summary>
        /// Removes all elements from the <see cref="IIRoleList"/>.
        /// </summary>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="IIRoleList"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>IIRoleList</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="IList.Clear"/> for details.</remarks>

        void Clear();

        #endregion
        #region Contains

        /// <summary>
        /// Determines whether the <see cref="IIRoleList"/>
        /// contains the specified <see cref="IRole"/> element.
        /// </summary>
        /// <param name="value">The <see cref="IRole"/> object
        /// to locate in the <see cref="IIRoleList"/>.
        /// This argument can be a null reference.
        /// </param>
        /// <returns><c>true</c> if <paramref name="value"/> is found in the
        /// <see cref="IIRoleList"/>; otherwise, <c>false</c>.</returns>
        /// <remarks>Please refer to <see cref="IList.Contains"/> for details.</remarks>

        bool Contains(IRole value);

        #endregion
        #region IndexOf

        /// <summary>
        /// Returns the zero-based index of the first occurrence of the specified
        /// <see cref="IRole"/> in the <see cref="IIRoleList"/>.
        /// </summary>
        /// <param name="value">The <see cref="IRole"/> object
        /// to locate in the <see cref="IIRoleList"/>.
        /// This argument can be a null reference.
        /// </param>
        /// <returns>
        /// The zero-based index of the first occurrence of <paramref name="value"/>
        /// in the <see cref="IIRoleList"/>, if found; otherwise, -1.
        /// </returns>
        /// <remarks>Please refer to <see cref="IList.IndexOf"/> for details.</remarks>

        int IndexOf(IRole value);

        #endregion
        #region Insert

        /// <summary>
        /// Inserts a <see cref="IRole"/> element into the
        /// <see cref="IIRoleList"/> at the specified index.
        /// </summary>
        /// <param name="index">The zero-based index at which
        /// <paramref name="value"/> should be inserted.</param>
        /// <param name="value">The <see cref="IRole"/> object
        /// to insert into the <see cref="IIRoleList"/>.
        /// This argument can be a null reference.
        /// </param>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para><paramref name="index"/> is less than zero.</para>
        /// <para>-or-</para>
        /// <para><paramref name="index"/> is greater than
        /// <see cref="IIRoleCollection.Count"/>.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="IIRoleList"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>IIRoleList</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="IList.Insert"/> for details.</remarks>

        void Insert(int index, IRole value);

        #endregion
        #region Remove

        /// <summary>
        /// Removes the first occurrence of the specified <see cref="IRole"/>
        /// from the <see cref="IIRoleList"/>.
        /// </summary>
        /// <param name="value">The <see cref="IRole"/> object
        /// to remove from the <see cref="IIRoleList"/>.
        /// This argument can be a null reference.
        /// </param>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="IIRoleList"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>IIRoleList</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="IList.Remove"/> for details.</remarks>

        void Remove(IRole value);

        #endregion
        #region RemoveAt

        /// <summary>
        /// Removes the element at the specified index of the
        /// <see cref="IIRoleList"/>.
        /// </summary>
        /// <param name="index">The zero-based index of the element to remove.</param>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para><paramref name="index"/> is less than zero.</para>
        /// <para>-or-</para>
        /// <para><paramref name="index"/> is equal to or greater than
        /// <see cref="IIRoleCollection.Count"/>.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="IIRoleList"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>IIRoleList</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="IList.RemoveAt"/> for details.</remarks>

        void RemoveAt(int index);

        #endregion
        #endregion
    }

    #endregion
    #region Interface IIRoleEnumerator

    /// <summary>
    /// Supports type-safe iteration over a collection that
    /// contains <see cref="IRole"/> elements.
    /// </summary>
    /// <remarks>
    /// <b>IIRoleEnumerator</b> provides an <see cref="IEnumerator"/>
    /// that is strongly typed for <see cref="IRole"/> elements.
    /// </remarks>

    internal interface IIRoleEnumerator {
        #region Properties
        #region Current

        /// <summary>
        /// Gets the current <see cref="IRole"/> element in the collection.
        /// </summary>
        /// <value>The current <see cref="IRole"/> element in the collection.</value>
        /// <exception cref="InvalidOperationException"><para>The enumerator is positioned
        /// before the first element of the collection or after the last element.</para>
        /// <para>-or-</para>
        /// <para>The collection was modified after the enumerator was created.</para></exception>
        /// <remarks>Please refer to <see cref="IEnumerator.Current"/> for details, but note
        /// that <b>Current</b> fails if the collection was modified since the last successful
        /// call to <see cref="MoveNext"/> or <see cref="Reset"/>.</remarks>

        IRole Current { get; }

        #endregion
        #endregion
        #region Methods
        #region MoveNext

        /// <summary>
        /// Advances the enumerator to the next element of the collection.
        /// </summary>
        /// <returns><c>true</c> if the enumerator was successfully advanced to the next element;
        /// <c>false</c> if the enumerator has passed the end of the collection.</returns>
        /// <exception cref="InvalidOperationException">
        /// The collection was modified after the enumerator was created.</exception>
        /// <remarks>Please refer to <see cref="IEnumerator.MoveNext"/> for details.</remarks>

        bool MoveNext();

        #endregion
        #region Reset

        /// <summary>
        /// Sets the enumerator to its initial position,
        /// which is before the first element in the collection.
        /// </summary>
        /// <exception cref="InvalidOperationException">
        /// The collection was modified after the enumerator was created.</exception>
        /// <remarks>Please refer to <see cref="IEnumerator.Reset"/> for details.</remarks>

        void Reset();

        #endregion
        #endregion
    }

    #endregion
    #region Interface IIIdentifierCollection

    /// <summary>
    /// Defines size, enumerators, and synchronization methods for strongly
    /// typed collections of <see cref="IIdentifier"/> elements.
    /// </summary>
    /// <remarks>
    /// <b>IIIdentifierCollection</b> provides an <see cref="ICollection"/>
    /// that is strongly typed for <see cref="IIdentifier"/> elements.
    /// </remarks>

    internal interface IIIdentifierCollection {
        #region Properties
        #region Count

        /// <summary>
        /// Gets the number of elements contained in the
        /// <see cref="IIIdentifierCollection"/>.
        /// </summary>
        /// <value>The number of elements contained in the
        /// <see cref="IIIdentifierCollection"/>.</value>
        /// <remarks>Please refer to <see cref="ICollection.Count"/> for details.</remarks>

        int Count { get; }

        #endregion
        #region IsSynchronized

        /// <summary>
        /// Gets a value indicating whether access to the
        /// <see cref="IIIdentifierCollection"/> is synchronized (thread-safe).
        /// </summary>
        /// <value><c>true</c> if access to the <see cref="IIIdentifierCollection"/> is
        /// synchronized (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.</value>
        /// <remarks>Please refer to <see cref="ICollection.IsSynchronized"/> for details.</remarks>

        bool IsSynchronized { get; }

        #endregion
        #region SyncRoot

        /// <summary>
        /// Gets an object that can be used to synchronize access
        /// to the <see cref="IIIdentifierCollection"/>.
        /// </summary>
        /// <value>An object that can be used to synchronize access
        /// to the <see cref="IIIdentifierCollection"/>.</value>
        /// <remarks>Please refer to <see cref="ICollection.SyncRoot"/> for details.</remarks>

        object SyncRoot { get; }

        #endregion
        #endregion
        #region Methods
        #region CopyTo

        /// <summary>
        /// Copies the entire <see cref="IIIdentifierCollection"/> to a one-dimensional <see cref="Array"/>
        /// of <see cref="IIdentifier"/> elements, starting at the specified index of the target array.
        /// </summary>
        /// <param name="array">The one-dimensional <see cref="Array"/> that is the destination of the
        /// <see cref="IIdentifier"/> elements copied from the <see cref="IIIdentifierCollection"/>.
        /// The <b>Array</b> must have zero-based indexing.</param>
        /// <param name="arrayIndex">The zero-based index in <paramref name="array"/>
        /// at which copying begins.</param>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="array"/> is a null reference.</exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <paramref name="arrayIndex"/> is less than zero.</exception>
        /// <exception cref="ArgumentException"><para>
        /// <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
        /// </para><para>-or-</para><para>
        /// The number of elements in the source <see cref="IIIdentifierCollection"/> is greater
        /// than the available space from <paramref name="arrayIndex"/> to the end of the destination
        /// <paramref name="array"/>.</para></exception>
        /// <remarks>Please refer to <see cref="ICollection.CopyTo"/> for details.</remarks>

        void CopyTo(IIdentifier[] array, int arrayIndex);

        #endregion
        #region GetEnumerator

        /// <summary>
        /// Returns an <see cref="IIIdentifierEnumerator"/> that can
        /// iterate through the <see cref="IIIdentifierCollection"/>.
        /// </summary>
        /// <returns>An <see cref="IIIdentifierEnumerator"/>
        /// for the entire <see cref="IIIdentifierCollection"/>.</returns>
        /// <remarks>Please refer to <see cref="IEnumerable.GetEnumerator"/> for details.</remarks>

        IIIdentifierEnumerator GetEnumerator();

        #endregion
        #endregion
    }

    #endregion
    #region Interface IIIdentifierList

    /// <summary>
    /// Represents a strongly typed collection of <see cref="IIdentifier"/>
    /// objects that can be individually accessed by index.
    /// </summary>
    /// <remarks>
    /// <b>IIIdentifierList</b> provides an <see cref="IList"/>
    /// that is strongly typed for <see cref="IIdentifier"/> elements.
    /// </remarks>

    internal interface
        IIIdentifierList: IIIdentifierCollection {
        #region Properties
        #region IsFixedSize

        /// <summary>
        /// Gets a value indicating whether the <see cref="IIIdentifierList"/> has a fixed size.
        /// </summary>
        /// <value><c>true</c> if the <see cref="IIIdentifierList"/> has a fixed size;
        /// otherwise, <c>false</c>. The default is <c>false</c>.</value>
        /// <remarks>Please refer to <see cref="IList.IsFixedSize"/> for details.</remarks>

        bool IsFixedSize { get; }

        #endregion
        #region IsReadOnly

        /// <summary>
        /// Gets a value indicating whether the <see cref="IIIdentifierList"/> is read-only.
        /// </summary>
        /// <value><c>true</c> if the <see cref="IIIdentifierList"/> is read-only;
        /// otherwise, <c>false</c>. The default is <c>false</c>.</value>
        /// <remarks>Please refer to <see cref="IList.IsReadOnly"/> for details.</remarks>

        bool IsReadOnly { get; }

        #endregion
        #region Item

        /// <summary>
        /// Gets or sets the <see cref="IIdentifier"/> element at the specified index.
        /// </summary>
        /// <param name="index">The zero-based index of the
        /// <see cref="IIdentifier"/> element to get or set.</param>
        /// <value>
        /// The <see cref="IIdentifier"/> element at the specified <paramref name="index"/>.
        /// </value>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para><paramref name="index"/> is less than zero.</para>
        /// <para>-or-</para>
        /// <para><paramref name="index"/> is equal to or greater than
        /// <see cref="IIIdentifierCollection.Count"/>.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// The property is set and the <see cref="IIIdentifierList"/> is read-only.</exception>
        /// <remarks>Please refer to <see cref="IList.this"/> for details.</remarks>

        IIdentifier this[int index] { get; set; }

        #endregion
        #endregion
        #region Methods
        #region Add

        /// <summary>
        /// Adds a <see cref="IIdentifier"/> to the end
        /// of the <see cref="IIIdentifierList"/>.
        /// </summary>
        /// <param name="value">The <see cref="IIdentifier"/> object
        /// to be added to the end of the <see cref="IIIdentifierList"/>.
        /// This argument can be a null reference.
        /// </param>
        /// <returns>The <see cref="IIIdentifierList"/> index at which
        /// the <paramref name="value"/> has been added.</returns>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="IIIdentifierList"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>IIIdentifierList</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="IList.Add"/> for details.</remarks>

        int Add(IIdentifier value);

        #endregion
        #region Clear

        /// <summary>
        /// Removes all elements from the <see cref="IIIdentifierList"/>.
        /// </summary>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="IIIdentifierList"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>IIIdentifierList</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="IList.Clear"/> for details.</remarks>

        void Clear();

        #endregion
        #region Contains

        /// <summary>
        /// Determines whether the <see cref="IIIdentifierList"/>
        /// contains the specified <see cref="IIdentifier"/> element.
        /// </summary>
        /// <param name="value">The <see cref="IIdentifier"/> object
        /// to locate in the <see cref="IIIdentifierList"/>.
        /// This argument can be a null reference.
        /// </param>
        /// <returns><c>true</c> if <paramref name="value"/> is found in the
        /// <see cref="IIIdentifierList"/>; otherwise, <c>false</c>.</returns>
        /// <remarks>Please refer to <see cref="IList.Contains"/> for details.</remarks>

        bool Contains(IIdentifier value);

        #endregion
        #region IndexOf

        /// <summary>
        /// Returns the zero-based index of the first occurrence of the specified
        /// <see cref="IIdentifier"/> in the <see cref="IIIdentifierList"/>.
        /// </summary>
        /// <param name="value">The <see cref="IIdentifier"/> object
        /// to locate in the <see cref="IIIdentifierList"/>.
        /// This argument can be a null reference.
        /// </param>
        /// <returns>
        /// The zero-based index of the first occurrence of <paramref name="value"/>
        /// in the <see cref="IIIdentifierList"/>, if found; otherwise, -1.
        /// </returns>
        /// <remarks>Please refer to <see cref="IList.IndexOf"/> for details.</remarks>

        int IndexOf(IIdentifier value);

        #endregion
        #region Insert

        /// <summary>
        /// Inserts a <see cref="IIdentifier"/> element into the
        /// <see cref="IIIdentifierList"/> at the specified index.
        /// </summary>
        /// <param name="index">The zero-based index at which
        /// <paramref name="value"/> should be inserted.</param>
        /// <param name="value">The <see cref="IIdentifier"/> object
        /// to insert into the <see cref="IIIdentifierList"/>.
        /// This argument can be a null reference.
        /// </param>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para><paramref name="index"/> is less than zero.</para>
        /// <para>-or-</para>
        /// <para><paramref name="index"/> is greater than
        /// <see cref="IIIdentifierCollection.Count"/>.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="IIIdentifierList"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>IIIdentifierList</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="IList.Insert"/> for details.</remarks>

        void Insert(int index, IIdentifier value);

        #endregion
        #region Remove

        /// <summary>
        /// Removes the first occurrence of the specified <see cref="IIdentifier"/>
        /// from the <see cref="IIIdentifierList"/>.
        /// </summary>
        /// <param name="value">The <see cref="IIdentifier"/> object
        /// to remove from the <see cref="IIIdentifierList"/>.
        /// This argument can be a null reference.
        /// </param>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="IIIdentifierList"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>IIIdentifierList</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="IList.Remove"/> for details.</remarks>

        void Remove(IIdentifier value);

        #endregion
        #region RemoveAt

        /// <summary>
        /// Removes the element at the specified index of the
        /// <see cref="IIIdentifierList"/>.
        /// </summary>
        /// <param name="index">The zero-based index of the element to remove.</param>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para><paramref name="index"/> is less than zero.</para>
        /// <para>-or-</para>
        /// <para><paramref name="index"/> is equal to or greater than
        /// <see cref="IIIdentifierCollection.Count"/>.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="IIIdentifierList"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>IIIdentifierList</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="IList.RemoveAt"/> for details.</remarks>

        void RemoveAt(int index);

        #endregion
        #endregion
    }

    #endregion
    #region Interface IIIdentifierEnumerator

    /// <summary>
    /// Supports type-safe iteration over a collection that
    /// contains <see cref="IIdentifier"/> elements.
    /// </summary>
    /// <remarks>
    /// <b>IIIdentifierEnumerator</b> provides an <see cref="IEnumerator"/>
    /// that is strongly typed for <see cref="IIdentifier"/> elements.
    /// </remarks>

    internal interface IIIdentifierEnumerator {
        #region Properties
        #region Current

        /// <summary>
        /// Gets the current <see cref="IIdentifier"/> element in the collection.
        /// </summary>
        /// <value>The current <see cref="IIdentifier"/> element in the collection.</value>
        /// <exception cref="InvalidOperationException"><para>The enumerator is positioned
        /// before the first element of the collection or after the last element.</para>
        /// <para>-or-</para>
        /// <para>The collection was modified after the enumerator was created.</para></exception>
        /// <remarks>Please refer to <see cref="IEnumerator.Current"/> for details, but note
        /// that <b>Current</b> fails if the collection was modified since the last successful
        /// call to <see cref="MoveNext"/> or <see cref="Reset"/>.</remarks>

        IIdentifier Current { get; }

        #endregion
        #endregion
        #region Methods
        #region MoveNext

        /// <summary>
        /// Advances the enumerator to the next element of the collection.
        /// </summary>
        /// <returns><c>true</c> if the enumerator was successfully advanced to the next element;
        /// <c>false</c> if the enumerator has passed the end of the collection.</returns>
        /// <exception cref="InvalidOperationException">
        /// The collection was modified after the enumerator was created.</exception>
        /// <remarks>Please refer to <see cref="IEnumerator.MoveNext"/> for details.</remarks>

        bool MoveNext();

        #endregion
        #region Reset

        /// <summary>
        /// Sets the enumerator to its initial position,
        /// which is before the first element in the collection.
        /// </summary>
        /// <exception cref="InvalidOperationException">
        /// The collection was modified after the enumerator was created.</exception>
        /// <remarks>Please refer to <see cref="IEnumerator.Reset"/> for details.</remarks>

        void Reset();

        #endregion
        #endregion
    }

    #endregion
    #region Interface IIIdentifierIRoleCollection

    /// <summary>
    /// Defines size, enumerators, and synchronization methods for strongly
    /// typed collections of <see cref="IIDRoleEntry"/> elements.
    /// </summary>
    /// <remarks>
    /// <b>IIIdentifierIRoleCollection</b> provides an <see cref="ICollection"/>
    /// that is strongly typed for <see cref="IIDRoleEntry"/> elements.
    /// </remarks>

    internal interface IIIdentifierIRoleCollection {
        #region Properties
        #region Count

        /// <summary>
        /// Gets the number of elements contained in the
        /// <see cref="IIIdentifierIRoleCollection"/>.
        /// </summary>
        /// <value>The number of elements contained in the
        /// <see cref="IIIdentifierIRoleCollection"/>.</value>
        /// <remarks>Please refer to <see cref="ICollection.Count"/> for details.</remarks>

        int Count { get; }

        #endregion
        #region IsSynchronized

        /// <summary>
        /// Gets a value indicating whether access to the
        /// <see cref="IIIdentifierIRoleCollection"/> is synchronized (thread-safe).
        /// </summary>
        /// <value><c>true</c> if access to the <see cref="IIIdentifierIRoleCollection"/>
        /// is synchronized (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.</value>
        /// <remarks>Please refer to <see cref="ICollection.IsSynchronized"/> for details.</remarks>

        bool IsSynchronized { get; }

        #endregion
        #region SyncRoot

        /// <summary>
        /// Gets an object that can be used to synchronize access
        /// to the <see cref="IIIdentifierIRoleCollection"/>.
        /// </summary>
        /// <value>An object that can be used to synchronize access to the
        /// <see cref="IIIdentifierIRoleCollection"/>.</value>
        /// <remarks>Please refer to <see cref="ICollection.SyncRoot"/> for details.</remarks>

        object SyncRoot { get; }

        #endregion
        #endregion
        #region Methods
        #region CopyTo

        /// <summary>
        /// Copies the entire <see cref="IIIdentifierIRoleCollection"/>
        /// to a one-dimensional <see cref="Array"/> of <see cref="IIDRoleEntry"/> elements,
        /// starting at the specified index of the target array.
        /// </summary>
        /// <param name="array">The one-dimensional <see cref="Array"/> that is the
        /// destination of the <see cref="IIDRoleEntry"/> elements copied from the
        /// <see cref="IIIdentifierIRoleCollection"/>.
        /// The <b>Array</b> must have zero-based indexing.</param>
        /// <param name="arrayIndex">The zero-based index in <paramref name="array"/>
        /// at which copying begins.</param>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="array"/> is a null reference.</exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <paramref name="arrayIndex"/> is less than zero.</exception>
        /// <exception cref="ArgumentException"><para>
        /// <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
        /// </para><para>-or-</para><para>
        /// The number of elements in the source <see cref="IIIdentifierIRoleCollection"/>
        /// is greater than the available space from <paramref name="arrayIndex"/> to the end of the
        /// destination <paramref name="array"/>.</para></exception>
        /// <remarks>Please refer to <see cref="ICollection.CopyTo"/> for details.</remarks>

        void CopyTo(IIDRoleEntry[] array, int arrayIndex);

        #endregion
        #region GetEnumerator

        /// <summary>
        /// Returns an <see cref="IIIdentifierIRoleEnumerator"/> that can
        /// iterate through the <see cref="IIIdentifierIRoleCollection"/>.
        /// </summary>
        /// <returns>An <see cref="IIIdentifierIRoleEnumerator"/>
        /// for the entire <see cref="IIIdentifierIRoleCollection"/>.</returns>
        /// <remarks>Please refer to <see cref="IEnumerable.GetEnumerator"/> for details.</remarks>

        IIIdentifierIRoleEnumerator GetEnumerator();

        #endregion
        #endregion
    }

    #endregion
    #region Interface IIIdentifierIRoleDictionary

    /// <summary>
    /// Represents a strongly typed collection of
    /// <see cref="IIDRoleEntry"/> key-and-value pairs.
    /// </summary>
    /// <remarks>
    /// <b>IIIdentifierIRoleDictionary</b> provides an
    /// <see cref="IDictionary"/> that is strongly typed for
    /// <see cref="IIdentifier"/> keys and <see cref="IRole"/> values.
    /// </remarks>

    internal interface
        IIIdentifierIRoleDictionary: IIIdentifierIRoleCollection {
        #region Properties
        #region IsFixedSize

        /// <summary>
        /// Gets a value indicating whether the
        /// <see cref="IIIdentifierIRoleDictionary"/> has a fixed size.
        /// </summary>
        /// <value><c>true</c> if the <see cref="IIIdentifierIRoleDictionary"/>
        /// has a fixed size; otherwise, <c>false</c>. The default is <c>false</c>.</value>
        /// <remarks>Please refer to <see cref="IDictionary.IsFixedSize"/> for details.</remarks>

        bool IsFixedSize { get; }

        #endregion
        #region IsReadOnly

        /// <summary>
        /// Gets a value indicating whether the
        /// <see cref="IIIdentifierIRoleDictionary"/> is read-only.
        /// </summary>
        /// <value><c>true</c> if the <see cref="IIIdentifierIRoleDictionary"/>
        /// is read-only; otherwise, <c>false</c>. The default is <c>false</c>.</value>
        /// <remarks>Please refer to <see cref="IDictionary.IsReadOnly"/> for details.</remarks>

        bool IsReadOnly { get; }

        #endregion
        #region Item

        /// <summary>
        /// Gets or sets the <see cref="IRole"/> value
        /// associated with the specified <see cref="IIdentifier"/> key.
        /// </summary>
        /// <param name="key">The <see cref="IIdentifier"/> key
        /// whose value to get or set.</param>
        /// <value>The <see cref="IRole"/> value associated with the specified
        /// <paramref name="key"/>. If the specified <paramref name="key"/> is not found,
        /// attempting to get it returns
        /// a null reference,
        /// and attempting to set it creates a new element using the specified
        /// <paramref name="key"/>.</value>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="key"/> is a null reference.</exception>
        /// <exception cref="NotSupportedException">
        /// <para>The property is set and the
        /// <see cref="IIIdentifierIRoleDictionary"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The property is set, <paramref name="key"/> does not exist in the collection,
        /// and the <b>IIIdentifierIRoleDictionary</b> has a fixed size.</para>
        /// </exception>
        /// <remarks>Please refer to <see cref="IDictionary.this"/> for details.</remarks>

        IRole this[IIdentifier key] { get; set; }

        #endregion
        #region Keys

        /// <summary>
        /// Gets an <see cref="IIIdentifierCollection"/> containing the keys
        /// in the <see cref="IIIdentifierIRoleDictionary"/>.
        /// </summary>
        /// <value>An <see cref="IIIdentifierCollection"/> containing the keys
        /// in the <see cref="IIIdentifierIRoleDictionary"/>.</value>
        /// <remarks>Please refer to <see cref="IDictionary.Keys"/> for details.</remarks>

        IIIdentifierCollection Keys { get; }

        #endregion
        #region Values

        /// <summary>
        /// Gets an <see cref="IIRoleCollection"/> containing the values
        /// in the <see cref="IIIdentifierIRoleDictionary"/>.
        /// </summary>
        /// <value>An <see cref="IIRoleCollection"/> containing the values
        /// in the <see cref="IIIdentifierIRoleDictionary"/>.</value>
        /// <remarks>Please refer to <see cref="IDictionary.Values"/> for details.</remarks>

        IIRoleCollection Values { get; }

        #endregion
        #endregion
        #region Methods
        #region Add

        /// <summary>
        /// Adds an element with the specified <see cref="IIdentifier"/>
        /// key and <see cref="IRole"/> value to the
        /// <see cref="IIIdentifierIRoleDictionary"/>.
        /// </summary>
        /// <param name="key">The <see cref="IIdentifier"/> key of the element
        /// to add to the <see cref="IIIdentifierIRoleDictionary"/>.</param>
        /// <param name="value">The <see cref="IRole"/> value of the element
        /// to add to the <see cref="IIIdentifierIRoleDictionary"/>.
        /// This argument can be a null reference.
        /// </param>
        /// <exception cref="ArgumentException">
        /// <para>An element with the specified <paramref name="key"/> already exists
        /// in the <see cref="IIIdentifierIRoleDictionary"/>.</para>
        /// <para>-or-</para>
        /// <para>The <b>IIIdentifierIRoleDictionary</b> is set to use the
        /// <see cref="IComparable"/> interface, and <paramref name="key"/> does not
        /// implement the <b>IComparable</b> interface.</para></exception>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="key"/> is a null reference.</exception>
        /// <exception cref="InvalidOperationException">
        /// The comparer throws an exception.</exception>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="IIIdentifierIRoleDictionary"/> is read-only.
        /// </para><para>-or-</para>
        /// <para>The <b>IIIdentifierIRoleDictionary</b> has a fixed size.
        /// </para></exception>
        /// <remarks>Please refer to <see cref="IDictionary.Add"/> for details.</remarks>

        void Add(IIdentifier key, IRole value);

        #endregion
        #region Clear

        /// <summary>
        /// Removes all elements from the <see cref="IIIdentifierIRoleDictionary"/>.
        /// </summary>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="IIIdentifierIRoleDictionary"/> is read-only.
        /// </para><para>-or-</para>
        /// <para>The <b>IIIdentifierIRoleDictionary</b> has a fixed size.
        /// </para></exception>
        /// <remarks>Please refer to <see cref="IDictionary.Clear"/> for details.</remarks>

        void Clear();

        #endregion
        #region Contains

        /// <summary>
        /// Determines whether the <see cref="IIIdentifierIRoleDictionary"/>
        /// contains the specified <see cref="IIdentifier"/> key.
        /// </summary>
        /// <param name="key">The <see cref="IIdentifier"/> key to locate
        /// in the <see cref="IIIdentifierIRoleDictionary"/>.</param>
        /// <returns><c>true</c> if the <see cref="IIIdentifierIRoleDictionary"/>
        /// contains an element with the specified <paramref name="key"/>; otherwise, <c>false</c>.
        /// </returns>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="key"/> is a null reference.</exception>
        /// <exception cref="InvalidOperationException">
        /// The comparer throws an exception.</exception>
        /// <remarks>Please refer to <see cref="IDictionary.Contains"/> for details.</remarks>

        bool Contains(IIdentifier key);

        #endregion
        #region Remove

        /// <summary>
        /// Removes the element with the specified <see cref="IIdentifier"/> key
        /// from the <see cref="IIIdentifierIRoleDictionary"/>.
        /// </summary>
        /// <param name="key">The <see cref="IIdentifier"/> key of the element to remove
        /// from the <see cref="IIIdentifierIRoleDictionary"/>.</param>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="key"/> is a null reference.</exception>
        /// <exception cref="InvalidOperationException">
        /// The comparer throws an exception.</exception>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="IIIdentifierIRoleDictionary"/> is read-only.
        /// </para><para>-or-</para>
        /// <para>The <b>IIIdentifierIRoleDictionary</b> has a fixed size.
        /// </para></exception>
        /// <remarks>Please refer to <see cref="IDictionary.Remove"/> for details.</remarks>

        void Remove(IIdentifier key);

        #endregion
        #endregion
    }

    #endregion
    #region Interface IIIdentifierIRoleList

    /// <summary>
    /// Represents a strongly typed collection of <see cref="IIDRoleEntry"/>
    /// objects that can be individually accessed by index.
    /// </summary>
    /// <remarks>
    /// <b>IIIdentifierIRoleList</b> provides an <see cref="IList"/>
    /// that is strongly typed for <see cref="IIDRoleEntry"/> elements.
    /// </remarks>

    internal interface
        IIIdentifierIRoleList: IIIdentifierIRoleCollection {
        #region Properties
        #region IsFixedSize

        /// <summary>
        /// Gets a value indicating whether the
        /// <see cref="IIIdentifierIRoleList"/> has a fixed size.
        /// </summary>
        /// <value><c>true</c> if the <see cref="IIIdentifierIRoleList"/>
        /// has a fixed size; otherwise, <c>false</c>. The default is <c>false</c>.</value>
        /// <remarks>Please refer to <see cref="IList.IsFixedSize"/> for details.</remarks>

        bool IsFixedSize { get; }

        #endregion
        #region IsReadOnly

        /// <summary>
        /// Gets a value indicating whether the
        /// <see cref="IIIdentifierIRoleList"/> is read-only.
        /// </summary>
        /// <value><c>true</c> if the <see cref="IIIdentifierIRoleList"/>
        /// is read-only; otherwise, <c>false</c>. The default is <c>false</c>.</value>
        /// <remarks>Please refer to <see cref="IList.IsReadOnly"/> for details.</remarks>

        bool IsReadOnly { get; }

        #endregion
        #region Item

        /// <summary>
        /// Gets or sets the <see cref="IIDRoleEntry"/> element at the specified index.
        /// </summary>
        /// <param name="index">The zero-based index of the
        /// <see cref="IIDRoleEntry"/> element to get or set.</param>
        /// <value>
        /// The <see cref="IIDRoleEntry"/> element at the specified <paramref name="index"/>.
        /// </value>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para><paramref name="index"/> is less than zero.</para>
        /// <para>-or-</para>
        /// <para><paramref name="index"/> is equal to or greater than
        /// <see cref="IIIdentifierIRoleCollection.Count"/>.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">The property is set and the
        /// <see cref="IIIdentifierIRoleList"/> is read-only.</exception>
        /// <remarks>Please refer to <see cref="IList.this"/> for details.</remarks>

        IIDRoleEntry this[int index] { get; set; }

        #endregion
        #endregion
        #region Methods
        #region Add

        /// <summary>
        /// Adds a <see cref="IIDRoleEntry"/> to the end
        /// of the <see cref="IIIdentifierIRoleList"/>.
        /// </summary>
        /// <param name="entry">The <see cref="IIDRoleEntry"/> object
        /// to be added to the end of the <see cref="IIIdentifierIRoleList"/>.
        /// </param>
        /// <returns>The <see cref="IIIdentifierIRoleList"/> index at which
        /// the <paramref name="entry"/> has been added.</returns>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="IIIdentifierIRoleList"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>IIIdentifierIRoleList</b> has a fixed size.</para>
        /// </exception>
        /// <remarks>Please refer to <see cref="IList.Add"/> for details.</remarks>

        int Add(IIDRoleEntry entry);

        #endregion
        #region Clear

        /// <summary>
        /// Removes all elements from the <see cref="IIIdentifierIRoleList"/>.
        /// </summary>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="IIIdentifierIRoleList"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>IIIdentifierIRoleList</b> has a fixed size.</para>
        /// </exception>
        /// <remarks>Please refer to <see cref="IList.Clear"/> for details.</remarks>

        void Clear();

        #endregion
        #region Contains

        /// <summary>
        /// Determines whether the <see cref="IIIdentifierIRoleList"/>
        /// contains the specified <see cref="IIDRoleEntry"/> element.
        /// </summary>
        /// <param name="entry">The <see cref="IIDRoleEntry"/> object
        /// to locate in the <see cref="IIIdentifierIRoleList"/>.</param>
        /// <returns><c>true</c> if <paramref name="entry"/> is found in the
        /// <see cref="IIIdentifierIRoleList"/>; otherwise, <c>false</c>.</returns>
        /// <remarks>Please refer to <see cref="IList.Contains"/> for details.</remarks>

        bool Contains(IIDRoleEntry entry);

        #endregion
        #region IndexOf

        /// <summary>
        /// Returns the zero-based index of the first occurrence of the specified
        /// <see cref="IIDRoleEntry"/> in the <see cref="IIIdentifierIRoleList"/>.
        /// </summary>
        /// <param name="entry">The <see cref="IIDRoleEntry"/> object
        /// to locate in the <see cref="IIIdentifierIRoleList"/>.</param>
        /// <returns>
        /// The zero-based index of the first occurrence of <paramref name="entry"/>
        /// in the <see cref="IIIdentifierIRoleList"/>, if found; otherwise, -1.
        /// </returns>
        /// <remarks>Please refer to <see cref="IList.IndexOf"/> for details.</remarks>

        int IndexOf(IIDRoleEntry entry);

        #endregion
        #region Insert

        /// <summary>
        /// Inserts a <see cref="IIDRoleEntry"/> element into the
        /// <see cref="IIIdentifierIRoleList"/> at the specified index.
        /// </summary>
        /// <param name="index">The zero-based index at which
        /// <paramref name="entry"/> should be inserted.</param>
        /// <param name="entry">The <see cref="IIDRoleEntry"/> object to insert
        /// into the <see cref="IIIdentifierIRoleList"/>.</param>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para><paramref name="index"/> is less than zero.</para>
        /// <para>-or-</para>
        /// <para><paramref name="index"/> is greater than
        /// <see cref="IIIdentifierIRoleCollection.Count"/>.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="IIIdentifierIRoleList"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>IIIdentifierIRoleList</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="IList.Insert"/> for details.</remarks>

        void Insert(int index, IIDRoleEntry entry);

        #endregion
        #region Remove

        /// <summary>
        /// Removes the first occurrence of the specified <see cref="IIDRoleEntry"/>
        /// from the <see cref="IIIdentifierIRoleList"/>.
        /// </summary>
        /// <param name="entry">The <see cref="IIDRoleEntry"/> object to remove
        /// from the <see cref="IIIdentifierIRoleList"/>.</param>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="IIIdentifierIRoleList"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>IIIdentifierIRoleList</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="IList.Remove"/> for details.</remarks>

        void Remove(IIDRoleEntry entry);

        #endregion
        #region RemoveAt

        /// <summary>
        /// Removes the element at the specified index of the
        /// <see cref="IIIdentifierIRoleList"/>.
        /// </summary>
        /// <param name="index">The zero-based index of the element to remove.</param>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para><paramref name="index"/> is less than zero.</para>
        /// <para>-or-</para>
        /// <para><paramref name="index"/> is equal to or greater than
        /// <see cref="IIIdentifierIRoleCollection.Count"/>.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="IIIdentifierIRoleList"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>IIIdentifierIRoleList</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="IList.RemoveAt"/> for details.</remarks>

        void RemoveAt(int index);

        #endregion
        #endregion
    }

    #endregion
    #region Interface IIIdentifierIRoleEnumerator

    /// <summary>
    /// Supports type-safe iteration over a dictionary that
    /// contains <see cref="IIDRoleEntry"/> elements.
    /// </summary>
    /// <remarks>
    /// <b>IIIdentifierIRoleEnumerator</b> provides an
    /// <see cref="IDictionaryEnumerator"/> that is strongly typed for
    /// <see cref="IIdentifier"/> keys and <see cref="IRole"/> values.
    /// </remarks>

    internal interface IIIdentifierIRoleEnumerator {
        #region Properties
        #region Current

        /// <summary>
        /// Gets the current <see cref="IIDRoleEntry"/> element in the collection.
        /// </summary>
        /// <value>The current <see cref="IIDRoleEntry"/> element in the collection.</value>
        /// <exception cref="InvalidOperationException"><para>The enumerator is positioned
        /// before the first element of the collection or after the last element.</para>
        /// <para>-or-</para>
        /// <para>The collection was modified after the enumerator was created.</para></exception>
        /// <remarks>Please refer to <see cref="IEnumerator.Current"/> for details, but note
        /// that <b>Current</b> fails if the collection was modified since the last successful
        /// call to <see cref="MoveNext"/> or <see cref="Reset"/>.</remarks>

        IIDRoleEntry Current { get; }

        #endregion
        #region Entry

        /// <summary>
        /// Gets a <see cref="IIDRoleEntry"/> containing both
        /// the key and the value of the current dictionary entry.
        /// </summary>
        /// <value>A <see cref="IIDRoleEntry"/> containing both
        /// the key and the value of the current dictionary entry.</value>
        /// <exception cref="InvalidOperationException"><para>The enumerator is positioned
        /// before the first element of the dictionary or after the last element.</para>
        /// <para>-or-</para>
        /// <para>The dictionary was modified after the enumerator was created.</para></exception>
        /// <remarks>Please refer to <see cref="IDictionaryEnumerator.Entry"/> for details, but
        /// note that <b>Entry</b> fails if the collection was modified since the last successful
        /// call to <see cref="MoveNext"/> or <see cref="Reset"/>.</remarks>

        IIDRoleEntry Entry { get; }

        #endregion
        #region Key

        /// <summary>
        /// Gets the <see cref="IIdentifier"/> key of the current dictionary entry.
        /// </summary>
        /// <value>The <see cref="IIdentifier"/> key
        /// of the current element of the enumeration.</value>
        /// <exception cref="InvalidOperationException"><para>The enumerator is positioned
        /// before the first element of the dictionary or after the last element.</para>
        /// <para>-or-</para>
        /// <para>The dictionary was modified after the enumerator was created.</para></exception>
        /// <remarks>Please refer to <see cref="IDictionaryEnumerator.Key"/> for details, but
        /// note that <b>Key</b> fails if the collection was modified since the last successful
        /// call to <see cref="MoveNext"/> or <see cref="Reset"/>.</remarks>

        IIdentifier Key { get; }

        #endregion
        #region Value

        /// <summary>
        /// Gets the <see cref="IRole"/> value of the current dictionary entry.
        /// </summary>
        /// <value>The <see cref="IRole"/> value
        /// of the current element of the enumeration.</value>
        /// <exception cref="InvalidOperationException"><para>The enumerator is positioned
        /// before the first element of the dictionary or after the last element.</para>
        /// <para>-or-</para>
        /// <para>The dictionary was modified after the enumerator was created.</para></exception>
        /// <remarks>Please refer to <see cref="IDictionaryEnumerator.Value"/> for details, but
        /// note that <b>Value</b> fails if the collection was modified since the last successful
        /// call to <see cref="MoveNext"/> or <see cref="Reset"/>.</remarks>

        IRole Value { get; }

        #endregion
        #endregion
        #region Methods
        #region MoveNext

        /// <summary>
        /// Advances the enumerator to the next element of the collection.
        /// </summary>
        /// <returns><c>true</c> if the enumerator was successfully advanced to the next element;
        /// <c>false</c> if the enumerator has passed the end of the collection.</returns>
        /// <exception cref="InvalidOperationException">
        /// The collection was modified after the enumerator was created.</exception>
        /// <remarks>Please refer to <see cref="IEnumerator.MoveNext"/> for details.</remarks>

        bool MoveNext();

        #endregion
        #region Reset

        /// <summary>
        /// Sets the enumerator to its initial position,
        /// which is before the first element in the collection.
        /// </summary>
        /// <exception cref="InvalidOperationException">
        /// The collection was modified after the enumerator was created.</exception>
        /// <remarks>Please refer to <see cref="IEnumerator.Reset"/> for details.</remarks>

        void Reset();

        #endregion
        #endregion
    }

    #endregion
    #region Struct IIDRoleEntry

    /// <summary>
    /// Implements a strongly typed pair of one <see cref="IIdentifier"/>
    /// key and one <see cref="IRole"/> value.
    /// </summary>
    /// <remarks>
    /// <b>IIDRoleEntry</b> provides a <see cref="DictionaryEntry"/> that is strongly
    /// typed for <see cref="IIdentifier"/> keys and <see cref="IRole"/> values.
    /// </remarks>

    [Serializable]
    internal struct IIDRoleEntry {
        #region Private Fields

        private IIdentifier _key;
        private IRole _value;

        #endregion
        #region Public Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="IIDRoleEntry"/>
        /// class with the specified key and value.
        /// </summary>
        /// <param name="key">
        /// The <see cref="IIdentifier"/> key in the key-and-value pair.</param>
        /// <param name="value">
        /// The <see cref="IRole"/> value in the key-and-value pair.
        /// This argument can be a null reference.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="key"/> is a null reference.</exception>

        public IIDRoleEntry(IIdentifier key, IRole value) {
            if ((object) key == null)
                throw new ArgumentNullException("key");

            this._key = key;
            this._value = value;
        }

        #endregion
        #region Public Properties
        #region Key

        /// <summary>
        /// Gets or sets the <see cref="IIdentifier"/> key in the key-and-value pair.
        /// </summary>
        /// <value>
        /// The <see cref="IIdentifier"/> key in the key-and-value pair.
        /// The default is a null reference.
        /// </value>
        /// <exception cref="ArgumentNullException">
        /// <b>Key</b> is set to a null reference.</exception>
        /// <remarks>
        /// <see cref="IIDRoleEntry"/> is a value type and therefore has an implicit default
        /// constructor that zeroes all data members. This means that the <b>Key</b> property of
        /// a default-constructed <b>IIDRoleEntry</b> contains a null reference by default,
        /// even though it is not possible to explicitly set <b>Key</b> to a null reference.
        /// </remarks>

        public IIdentifier Key {
            get { return this._key; }
            set {
                if ((object) value == null)
                    throw new ArgumentNullException("value");
                this._key = value;
            }
        }

        #endregion
        #region Value

        /// <summary>
        /// Gets or sets the <see cref="IRole"/> value in the key-and-value pair.
        /// </summary>
        /// <value>
        /// The <see cref="IRole"/> value in the key-and-value pair.
        /// This value can be a null reference, which is also the default.
        /// </value>

        public IRole Value {
            get { return this._value; }
            set { this._value = value; }
        }

        #endregion
        #endregion
        #region Public Operators
        #region IIDRoleEntry(DictionaryEntry)

        /// <summary>
        /// Converts a <see cref="DictionaryEntry"/> to a <see cref="IIDRoleEntry"/>.
        /// </summary>
        /// <param name="entry">A <see cref="DictionaryEntry"/> object to convert.</param>
        /// <returns>A <see cref="IIDRoleEntry"/> object that represents
        /// the converted <paramref name="entry"/>.</returns>
        /// <exception cref="InvalidCastException">
        /// <para><paramref name="entry"/> contains a key that is not compatible
        /// with <see cref="IIdentifier"/>.</para>
        /// <para>-or-</para>
        /// <para><paramref name="entry"/> contains a value that is not compatible
        /// with <see cref="IRole"/>.</para>
        /// </exception>

        public static implicit operator IIDRoleEntry(DictionaryEntry entry) {
            IIDRoleEntry pair = new IIDRoleEntry();
            if (entry.Key != null) pair.Key = (IIdentifier) entry.Key;
            if (entry.Value != null) pair.Value = (IRole) entry.Value;
            return pair;
        }

        #endregion
        #region DictionaryEntry(IIDRoleEntry)

        /// <summary>
        /// Converts a <see cref="IIDRoleEntry"/> to a <see cref="DictionaryEntry"/>.
        /// </summary>
        /// <param name="pair">A <see cref="IIDRoleEntry"/> object to convert.</param>
        /// <returns>A <see cref="DictionaryEntry"/> object that
        /// represents the converted <paramref name="pair"/>.</returns>

        public static implicit operator DictionaryEntry(IIDRoleEntry pair) {
            DictionaryEntry entry = new DictionaryEntry();
            if (pair.Key != null) entry.Key = pair.Key;
            entry.Value = pair.Value;
            return entry;
        }

        #endregion
        #endregion
    }

    #endregion
    #region Class ComponentRolesHashmap

    /// <summary>
    /// Implements a strongly typed collection of <see cref="IIDRoleEntry"/>
    /// key-and-value pairs that are organized based on the hash code of the key.
    /// </summary>
    /// <remarks>
    /// <b>ComponentRolesHashmap</b> provides a <see cref="Hashtable"/> that is strongly typed
    /// for <see cref="IIdentifier"/> keys and <see cref="IRole"/> values.
    /// </remarks>

    [Serializable]
    internal class ComponentRolesHashmap:
        IIIdentifierIRoleDictionary, IDictionary, ICloneable {
        #region Private Fields

        protected Hashmap _innerHash;
        private KeyList _keyList;
        private ValueList _valueList;

        #endregion
        #region Private Constructors

        // helper type to identify private ctor
        private enum Tag { Default }

        private ComponentRolesHashmap(Tag tag) { }

        #endregion
        #region Public Constructors
        #region ComponentRolesHashmap()

        /// <overloads>
        /// Initializes a new instance of the <see cref="ComponentRolesHashmap"/> class.
        /// </overloads>
        /// <summary>
        /// Initializes a new instance of the <see cref="ComponentRolesHashmap"/> class
        /// that is empty and has the default initial capacity, the default load factor,
        /// the default hash code provider and the default comparer.
        /// </summary>
        /// <remarks>Please refer to <see cref="Hashtable()"/> for details.</remarks>

        public ComponentRolesHashmap() {
            this._innerHash = new Hashmap();
        }

        #endregion
        #region ComponentRolesHashmap(IHashCodeProvider, IComparer)

        /// <summary>
        /// Initializes a new instance of the <see cref="ComponentRolesHashmap"/> class
        /// that is empty and has the default initial capacity, the default load factor,
        /// the specified hash code provider and the specified comparer.
        /// </summary>
        /// <param name="provider">
        /// <para>The <see cref="IHashCodeProvider"/> that supplies the hash codes
        /// for all keys in the <see cref="ComponentRolesHashmap"/>.</para>
        /// <para>-or-</para>
        /// <para>A null reference to use the default hash code provider, which is each key's
        /// implementation of <see cref="Object.GetHashCode"/>.</para></param>
        /// <param name="comparer">
        /// <para>The <see cref="IComparer"/> to use to determine whether two keys are equal.</para>
        /// <para>-or-</para>
        /// <para>A null reference to use the default comparer, which is each key's
        /// implementation of <see cref="Object.Equals"/>.</para></param>
        /// <remarks>
        /// Please refer to <see cref="Hashtable(IHashCodeProvider, IComparer)"/> for details.
        /// </remarks>

        public ComponentRolesHashmap(IHashCodeProvider provider, IComparer comparer) {
            this._innerHash = new Hashmap(provider, comparer);
        }

        #endregion
        #region ComponentRolesHashmap(Int32)

        /// <summary>
        /// Initializes a new instance of the <see cref="ComponentRolesHashmap"/> class
        /// that is empty and has the specified initial capacity, the default load factor,
        /// the default hash code provider and the default comparer.
        /// </summary>
        /// <param name="capacity">The approximate number of elements that the new
        /// <see cref="ComponentRolesHashmap"/> is initially capable of storing.</param>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <paramref name="capacity"/> is less than zero.</exception>
        /// <remarks>Please refer to <see cref="Hashtable(Int32)"/> for details.</remarks>

        public ComponentRolesHashmap(int capacity) {
            this._innerHash = new Hashmap(capacity);
        }

        #endregion
        #region ComponentRolesHashmap(Int32, IHashCodeProvider, IComparer)

        /// <summary>
        /// Initializes a new instance of the <see cref="ComponentRolesHashmap"/> class
        /// that is empty and has the specified initial capacity, the default load factor,
        /// the specified hash code provider and the specified comparer.
        /// </summary>
        /// <param name="capacity">The approximate number of elements that the new
        /// <see cref="ComponentRolesHashmap"/> is initially capable of storing.</param>
        /// <param name="provider">
        /// <para>The <see cref="IHashCodeProvider"/> that supplies the hash codes
        /// for all keys in the <see cref="ComponentRolesHashmap"/>.</para>
        /// <para>-or-</para>
        /// <para>A null reference to use the default hash code provider, which is each key's
        /// implementation of <see cref="Object.GetHashCode"/>.</para></param>
        /// <param name="comparer">
        /// <para>The <see cref="IComparer"/> to use to determine whether two keys are equal.</para>
        /// <para>-or-</para>
        /// <para>A null reference to use the default comparer, which is each key's
        /// implementation of <see cref="Object.Equals"/>.</para></param>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <paramref name="capacity"/> is less than zero.</exception>
        /// <remarks>
        /// Please refer to <see cref="Hashtable(Int32, IHashCodeProvider, IComparer)"/> for details.
        /// </remarks>

        public ComponentRolesHashmap(int capacity,
            IHashCodeProvider provider, IComparer comparer) {

            this._innerHash = new Hashmap(capacity, provider, comparer);
        }

        #endregion
        #region ComponentRolesHashmap(Int32, Single)

        /// <summary>
        /// Initializes a new instance of the <see cref="ComponentRolesHashmap"/> class
        /// that is empty and has the specified initial capacity, the specified load factor,
        /// the default hash code provider and the default comparer.
        /// </summary>
        /// <param name="capacity">The approximate number of elements that the new
        /// <see cref="ComponentRolesHashmap"/> is initially capable of storing.</param>
        /// <param name="loadFactor">A number in the range from 0.1 through 1.0
        /// indicating the maximum ratio of elements to buckets.</param>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para><paramref name="capacity"/> is less than zero.</para>
        /// <para>-or-</para>
        /// <para><paramref name="loadFactor"/> is less than 0.1.</para>
        /// <para>-or-</para>
        /// <para><paramref name="loadFactor"/> is greater than 1.0.</para></exception>
        /// <remarks>Please refer to <see cref="Hashtable(Int32, Single)"/> for details.</remarks>

        public ComponentRolesHashmap(int capacity, float loadFactor) {
            this._innerHash = new Hashmap(capacity, loadFactor);
        }

        #endregion
        #region ComponentRolesHashmap(Int32, Single, IHashCodeProvider, IComparer)

        /// <summary>
        /// Initializes a new instance of the <see cref="ComponentRolesHashmap"/> class
        /// that is empty and has the specified initial capacity, the specified load factor,
        /// the specified hash code provider and the specified comparer.
        /// </summary>
        /// <param name="capacity">The approximate number of elements that the new
        /// <see cref="ComponentRolesHashmap"/> is initially capable of storing.</param>
        /// <param name="loadFactor">A number in the range from 0.1 through 1.0
        /// indicating the maximum ratio of elements to buckets.</param>
        /// <param name="provider">
        /// <para>The <see cref="IHashCodeProvider"/> that supplies the hash codes
        /// for all keys in the <see cref="ComponentRolesHashmap"/>.</para>
        /// <para>-or-</para>
        /// <para>A null reference to use the default hash code provider, which is each key's
        /// implementation of <see cref="Object.GetHashCode"/>.</para></param>
        /// <param name="comparer">
        /// <para>The <see cref="IComparer"/> to use to determine whether two keys are equal.</para>
        /// <para>-or-</para>
        /// <para>A null reference to use the default comparer, which is each key's
        /// implementation of <see cref="Object.Equals"/>.</para></param>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para><paramref name="capacity"/> is less than zero.</para>
        /// <para>-or-</para>
        /// <para><paramref name="loadFactor"/> is less than 0.1.</para>
        /// <para>-or-</para>
        /// <para><paramref name="loadFactor"/> is greater than 1.0.</para></exception>
        /// <remarks>
        /// Please refer to <see cref="Hashtable(Int32, Single, IHashCodeProvider, IComparer)"/>
        /// for details.</remarks>

        public ComponentRolesHashmap(int capacity, float loadFactor,
            IHashCodeProvider provider, IComparer comparer) {

            this._innerHash = new Hashmap(capacity, loadFactor, provider, comparer);
        }

        #endregion
        #region ComponentRolesHashmap(ComponentRolesHashmap)

        /// <summary>
        /// Initializes a new instance of the <see cref="ComponentRolesHashmap"/> class
        /// that contains elements copied from the specified dictionary and
        /// that has the same initial capacity as the number of elements copied, the
        /// default load factor, the default hash code provider and the default comparer.
        /// </summary>
        /// <param name="dictionary">The <see cref="ComponentRolesHashmap"/>
        /// whose elements are copied to the new collection.</param>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="dictionary"/> is a null reference.</exception>
        /// <remarks>Please refer to <see cref="Hashtable(IDictionary)"/> for details.</remarks>

        public ComponentRolesHashmap(ComponentRolesHashmap dictionary) {
            if (dictionary == null)
                throw new ArgumentNullException("dictionary");

            this._innerHash = new Hashmap(dictionary._innerHash);
        }

        #endregion
        #region ComponentRolesHashmap(IDictionary)

        /// <summary>
        /// Initializes a new instance of the <see cref="ComponentRolesHashmap"/> class
        /// that contains elements copied from the specified <see cref="IDictionary"/>
        /// and that has the same initial capacity as the number of elements copied, the
        /// default load factor, the default hash code provider and the default comparer.
        /// </summary>
        /// <param name="dictionary">The <see cref="IDictionary"/>
        /// whose elements are copied to the new collection.</param>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="dictionary"/> is a null reference.</exception>
        /// <remarks>Please refer to <see cref="Hashtable(IDictionary)"/> for details.</remarks>

        public ComponentRolesHashmap(IDictionary dictionary) {
            this._innerHash = new Hashmap(dictionary);
        }

        #endregion
        #region ComponentRolesHashmap(IDictionary, IHashCodeProvider, IComparer)

        /// <summary>
        /// Initializes a new instance of the <see cref="ComponentRolesHashmap"/> class
        /// that contains elements copied from the specified <see cref="IDictionary"/>
        /// and that has the same initial capacity as the number of elements copied, the
        /// default load factor, the specified hash code provider and the specified comparer.
        /// </summary>
        /// <param name="dictionary">The <see cref="IDictionary"/>
        /// whose elements are copied to the new collection.</param>
        /// <param name="provider">
        /// <para>The <see cref="IHashCodeProvider"/> that supplies the hash codes
        /// for all keys in the <see cref="ComponentRolesHashmap"/>.</para>
        /// <para>-or-</para>
        /// <para>A null reference to use the default hash code provider, which is each key's
        /// implementation of <see cref="Object.GetHashCode"/>.</para></param>
        /// <param name="comparer">
        /// <para>The <see cref="IComparer"/> to use to determine whether two keys are equal.</para>
        /// <para>-or-</para>
        /// <para>A null reference to use the default comparer, which is each key's
        /// implementation of <see cref="Object.Equals"/>.</para></param>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="dictionary"/> is a null reference.</exception>
        /// <remarks>
        /// Please refer to <see cref="Hashtable(IDictionary, IHashCodeProvider, IComparer)"/>
        /// for details.</remarks>

        public ComponentRolesHashmap(IDictionary dictionary,
            IHashCodeProvider provider, IComparer comparer) {

            this._innerHash = new Hashmap(dictionary, provider, comparer);
        }

        #endregion
        #region ComponentRolesHashmap(IDictionary, Single)

        /// <summary>
        /// Initializes a new instance of the <see cref="ComponentRolesHashmap"/> class
        /// that contains elements copied from the specified <see cref="IDictionary"/>
        /// and that has the same initial capacity as the number of elements copied, the
        /// specified load factor, the default hash code provider and the default comparer.
        /// </summary>
        /// <param name="dictionary">The <see cref="IDictionary"/>
        /// whose elements are copied to the new collection.</param>
        /// <param name="loadFactor">A number in the range from 0.1 through 1.0
        /// indicating the maximum ratio of elements to buckets.</param>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="dictionary"/> is a null reference.</exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para><paramref name="loadFactor"/> is less than 0.1.</para>
        /// <para>-or-</para>
        /// <para><paramref name="loadFactor"/> is greater than 1.0.</para></exception>
        /// <remarks>
        /// Please refer to <see cref="Hashtable(IDictionary, Single)"/> for details.
        /// </remarks>

        public ComponentRolesHashmap(IDictionary dictionary, float loadFactor) {
            this._innerHash = new Hashmap(dictionary, loadFactor);
        }

        #endregion
        #region ComponentRolesHashmap(IDictionary, Single, IHashCodeProvider, IComparer)

        /// <summary>
        /// Initializes a new instance of the <see cref="ComponentRolesHashmap"/> class
        /// that contains elements copied from the specified <see cref="IDictionary"/>
        /// and that has the same initial capacity as the number of elements copied, the
        /// specified load factor, the specified hash code provider and the specified comparer.
        /// </summary>
        /// <param name="dictionary">The <see cref="IDictionary"/>
        /// whose elements are copied to the new collection.</param>
        /// <param name="loadFactor">A number in the range from 0.1 through 1.0
        /// indicating the maximum ratio of elements to buckets.</param>
        /// <param name="provider">
        /// <para>The <see cref="IHashCodeProvider"/> that supplies the hash codes
        /// for all keys in the <see cref="ComponentRolesHashmap"/>.</para>
        /// <para>-or-</para>
        /// <para>A null reference to use the default hash code provider, which is each key's
        /// implementation of <see cref="Object.GetHashCode"/>.</para></param>
        /// <param name="comparer">
        /// <para>The <see cref="IComparer"/> to use to determine whether two keys are equal.</para>
        /// <para>-or-</para>
        /// <para>A null reference to use the default comparer, which is each key's
        /// implementation of <see cref="Object.Equals"/>.</para></param>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="dictionary"/> is a null reference.</exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para><paramref name="loadFactor"/> is less than 0.1.</para>
        /// <para>-or-</para>
        /// <para><paramref name="loadFactor"/> is greater than 1.0.</para></exception>
        /// <remarks>
        /// Please refer to <see cref="Hashtable(IDictionary, Single, IHashCodeProvider, IComparer)"/>
        /// for details.</remarks>

        public ComponentRolesHashmap(IDictionary dictionary,
            float loadFactor, IHashCodeProvider provider, IComparer comparer) {

            this._innerHash = new Hashmap(dictionary, loadFactor, provider, comparer);
        }

        #endregion
        #endregion
        #region Public Properties
        #region Count

        /// <summary>
        /// Gets the number of key-and-value pairs contained in the <see cref="ComponentRolesHashmap"/>.
        /// </summary>
        /// <value>
        /// The number of key-and-value pairs contained in the <see cref="ComponentRolesHashmap"/>.
        /// </value>
        /// <remarks>Please refer to <see cref="Hashtable.Count"/> for details.</remarks>

        public int Count {
            get { return this._innerHash.Count; }
        }

        #endregion
        #region IsFixedSize

        /// <summary>
        /// Gets a value indicating whether the <see cref="ComponentRolesHashmap"/> has a fixed size.
        /// </summary>
        /// <value><c>true</c> if the <see cref="ComponentRolesHashmap"/> has a fixed size;
        /// otherwise, <c>false</c>. The default is <c>false</c>.</value>
        /// <remarks>Please refer to <see cref="Hashtable.IsFixedSize"/> for details.</remarks>

        public bool IsFixedSize {
            get { return this._innerHash.IsFixedSize; }
        }

        #endregion
        #region IsReadOnly

        /// <summary>
        /// Gets a value indicating whether the <see cref="ComponentRolesHashmap"/> is read-only.
        /// </summary>
        /// <value><c>true</c> if the <see cref="ComponentRolesHashmap"/> is read-only;
        /// otherwise, <c>false</c>. The default is <c>false</c>.</value>
        /// <remarks>Please refer to <see cref="Hashtable.IsReadOnly"/> for details.</remarks>

        public bool IsReadOnly {
            get { return this._innerHash.IsReadOnly; }
        }

        #endregion
        #region IsSynchronized

        /// <summary>
        /// Gets a value indicating whether access to the <see cref="ComponentRolesHashmap"/>
        /// is synchronized (thread-safe).
        /// </summary>
        /// <value><c>true</c> if access to the <see cref="ComponentRolesHashmap"/> is
        /// synchronized (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.</value>
        /// <remarks>Please refer to <see cref="Hashtable.IsSynchronized"/> for details.</remarks>

        public bool IsSynchronized {
            get { return this._innerHash.IsSynchronized; }
        }

        #endregion
        #region Item[IIdentifier]: IRole

        /// <summary>
        /// Gets or sets the <see cref="IRole"/> value
        /// associated with the specified <see cref="IIdentifier"/> key.
        /// </summary>
        /// <param name="key">The <see cref="IIdentifier"/> key
        /// whose value to get or set.</param>
        /// <value>The <see cref="IRole"/> value associated with the specified
        /// <paramref name="key"/>. If the specified <paramref name="key"/> is not found,
        /// attempting to get it returns
        /// a null reference,
        /// and attempting to set it creates a new element using the specified
        /// <paramref name="key"/>.</value>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="key"/> is a null reference.</exception>
        /// <exception cref="NotSupportedException">
        /// <para>The property is set and the <see cref="ComponentRolesHashmap"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The property is set, <paramref name="key"/> does not exist in the collection,
        /// and the <b>ComponentRolesHashmap</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="Hashtable.this"/> for details.</remarks>

        public IRole this[IIdentifier key] {
            get {
                return (IRole) this._innerHash[key];
            }
            set { this._innerHash[key] = value; }
        }

        #endregion
        #region IDictionary.Item[Object]: Object

        /// <summary>
        /// Gets or sets the value associated with the specified key.
        /// </summary>
        /// <param name="key">The key whose value to get or set.
        /// This argument must be compatible with <see cref="IIdentifier"/>.</param>
        /// <value>
        /// The value associated with the specified <paramref name="key"/>. If the specified
        /// <paramref name="key"/> is not found, attempting to get it returns
        /// a null reference,
        /// and attempting to set it creates a new element using the specified <paramref name="key"/>.
        /// When set, this value must be compatible with <see cref="IRole"/>.
        /// </value>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="key"/> is a null reference.</exception>
        /// <exception cref="InvalidCastException">
        /// <para><paramref name="key"/> is not compatible with <see cref="IIdentifier"/>.</para>
        /// <para>-or-</para>
        /// <para>The property is set to a value that is not compatible with
        /// <see cref="IRole"/>.</para></exception>
        /// <exception cref="NotSupportedException">
        /// <para>The property is set and the <see cref="ComponentRolesHashmap"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The property is set, <paramref name="key"/> does not exist in the collection,
        /// and the <b>ComponentRolesHashmap</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="Hashtable.this"/> for details.</remarks>

        object IDictionary.this[object key] {
            get { return this[(IIdentifier) key]; }
            set { this[(IIdentifier) key] = (IRole) value; }
        }

        #endregion
        #region Keys: IIIdentifierCollection

        /// <summary>
        /// Gets an <see cref="IIIdentifierCollection"/> containing
        /// the keys in the <see cref="ComponentRolesHashmap"/>.
        /// </summary>
        /// <value>An <see cref="IIIdentifierCollection"/> containing
        /// the keys in the <see cref="ComponentRolesHashmap"/>.</value>
        /// <remarks>Please refer to <see cref="Hashtable.Keys"/> for details.</remarks>

        public IIIdentifierCollection Keys {
            get {
                if (this._keyList == null)
                    this._keyList = new KeyList(this);
                return this._keyList;
            }
        }

        #endregion
        #region IDictionary.Keys: ICollection

        /// <summary>
        /// Gets an <see cref="ICollection"/> containing
        /// the keys in the <see cref="ComponentRolesHashmap"/>.
        /// </summary>
        /// <value>An <see cref="ICollection"/> containing
        /// the keys in the <see cref="ComponentRolesHashmap"/>.</value>
        /// <remarks>Please refer to <see cref="Hashtable.Keys"/> for details.</remarks>

        ICollection IDictionary.Keys {
            get { return (ICollection) Keys; }
        }

        #endregion
        #region SyncRoot

        /// <summary>
        /// Gets an object that can be used to synchronize
        /// access to the <see cref="ComponentRolesHashmap"/>.
        /// </summary>
        /// <value>An object that can be used to synchronize
        /// access to the <see cref="ComponentRolesHashmap"/>.</value>
        /// <remarks>Please refer to <see cref="Hashtable.SyncRoot"/> for details.</remarks>

        public object SyncRoot {
            get { return this._innerHash.SyncRoot; }
        }

        #endregion
        #region Values: IIRoleCollection

        /// <summary>
        /// Gets an <see cref="IIRoleCollection"/> containing
        /// the values in the <see cref="ComponentRolesHashmap"/>.
        /// </summary>
        /// <value>An <see cref="IIRoleCollection"/> containing
        /// the values in the <see cref="ComponentRolesHashmap"/>.</value>
        /// <remarks>Please refer to <see cref="Hashtable.Values"/> for details.</remarks>

        public virtual IIRoleCollection Values {
            get {
                if (this._valueList == null)
                    this._valueList = new ValueList(this);
                return this._valueList;
            }
        }

        #endregion
        #region IDictionary.Values: ICollection

        /// <summary>
        /// Gets an <see cref="ICollection"/> containing
        /// the values in the <see cref="ComponentRolesHashmap"/>.
        /// </summary>
        /// <value>An <see cref="ICollection"/> containing
        /// the values in the <see cref="ComponentRolesHashmap"/>.</value>
        /// <remarks>Please refer to <see cref="Hashtable.Values"/> for details.</remarks>

        ICollection IDictionary.Values {
            get { return (ICollection) Values; }
        }

        #endregion
        #endregion
        #region Public Methods
        
        public override bool Equals(object other)
        {
	    if (!(other is ComponentRolesHashmap)) return false;
	    if (other == this) return true;
	    ComponentRolesHashmap otherHashmap = (ComponentRolesHashmap)other;
	    return otherHashmap._innerHash.Equals(this._innerHash);
        }
        
        public override int GetHashCode()
        {
           return _innerHash.GetHashCode();
        }
        
        #region Add(IIdentifier, IRole)

        /// <summary>
        /// Adds an element with the specified <see cref="IIdentifier"/> key and
        /// <see cref="IRole"/> value to the <see cref="ComponentRolesHashmap"/>.
        /// </summary>
        /// <param name="key">The <see cref="IIdentifier"/> key of the element
        /// to add to the <see cref="ComponentRolesHashmap"/>.</param>
        /// <param name="value">The <see cref="IRole"/> value of the element
        /// to add to the <see cref="ComponentRolesHashmap"/>.
        /// This argument can be a null reference.
        /// </param>
        /// <exception cref="ArgumentException">
        /// An element with the specified <paramref name="key"/>
        /// already exists in the <see cref="ComponentRolesHashmap"/>.</exception>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="key"/> is a null reference.</exception>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="ComponentRolesHashmap"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>ComponentRolesHashmap</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="Hashtable.Add"/> for details.</remarks>

        public void Add(IIdentifier key, IRole value) {
            this._innerHash.Add(key, value);
        }

        #endregion
        #region IDictionary.Add(Object, Object)

        /// <summary>
        /// Adds an element with the specified key and value
        /// to the <see cref="ComponentRolesHashmap"/>.
        /// </summary>
        /// <param name="key">The key of the element to add to the <see cref="ComponentRolesHashmap"/>.
        /// This argument must be compatible with <see cref="IIdentifier"/>.</param>
        /// <param name="value">The value of the element to add to the <see cref="ComponentRolesHashmap"/>.
        /// This argument must be compatible with <see cref="IRole"/>.
        /// This argument can be a null reference.
        /// </param>
        /// <exception cref="ArgumentException">
        /// An element with the specified <paramref name="key"/>
        /// already exists in the <see cref="ComponentRolesHashmap"/>.</exception>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="key"/> is a null reference.</exception>
        /// <exception cref="InvalidCastException">
        /// <para><paramref name="key"/> is not compatible with <see cref="IIdentifier"/>.</para>
        /// <para>-or-</para>
        /// <para><paramref name="value"/> is not compatible with <see cref="IRole"/>.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="ComponentRolesHashmap"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>ComponentRolesHashmap</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="Hashtable.Add"/> for details.</remarks>

        void IDictionary.Add(object key, object value) {
            Add((IIdentifier) key, (IRole) value);
        }

        #endregion
        #region Clear

        /// <summary>
        /// Removes all elements from the <see cref="ComponentRolesHashmap"/>.
        /// </summary>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="ComponentRolesHashmap"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>ComponentRolesHashmap</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="Hashtable.Clear"/> for details.</remarks>

        public void Clear() {
            this._innerHash.Clear();
        }

        #endregion
        #region Clone

        /// <summary>
        /// Creates a shallow copy of the <see cref="ComponentRolesHashmap"/>.
        /// </summary>
        /// <returns>A shallow copy of the <see cref="ComponentRolesHashmap"/>.</returns>
        /// <remarks>Please refer to <see cref="Hashtable.Clone"/> for details.</remarks>

        public object Clone() {
            ComponentRolesHashmap dictionary = new ComponentRolesHashmap(Tag.Default);
            dictionary._innerHash = (Hashmap) this._innerHash.Clone();
            return dictionary;
        }

        #endregion
        #region Contains(IIdentifier)

        /// <summary>
        /// Determines whether the <see cref="ComponentRolesHashmap"/>
        /// contains the specified <see cref="IIdentifier"/> key.
        /// </summary>
        /// <param name="key">The <see cref="IIdentifier"/> key
        /// to locate in the <see cref="ComponentRolesHashmap"/>.</param>
        /// <returns><c>true</c> if the <see cref="ComponentRolesHashmap"/> contains an element
        /// with the specified <paramref name="key"/>; otherwise, <c>false</c>.</returns>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="key"/> is a null reference.</exception>
        /// <remarks>Please refer to <see cref="Hashtable.Contains"/> for details.</remarks>

        public bool Contains(IIdentifier key) {
            return this._innerHash.Contains(key);
        }

        #endregion
        #region IDictionary.Contains(Object)

        /// <summary>
        /// Determines whether the <see cref="ComponentRolesHashmap"/> contains the specified key.
        /// </summary>
        /// <param name="key">The key to locate in the <see cref="ComponentRolesHashmap"/>.
        /// This argument must be compatible with <see cref="IIdentifier"/>.</param>
        /// <returns><c>true</c> if the <see cref="ComponentRolesHashmap"/> contains an element
        /// with the specified <paramref name="key"/>; otherwise, <c>false</c>.</returns>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="key"/> is a null reference.</exception>
        /// <exception cref="InvalidCastException"><paramref name="key"/>
        /// is not compatible with <see cref="IIdentifier"/>.</exception>
        /// <remarks>Please refer to <see cref="Hashtable.Contains"/> for details.</remarks>

        bool IDictionary.Contains(object key) {
            return Contains((IIdentifier) key);
        }

        #endregion
        #region ContainsKey

        /// <summary>
        /// Determines whether the <see cref="ComponentRolesHashmap"/>
        /// contains the specified <see cref="IIdentifier"/> key.
        /// </summary>
        /// <param name="key">The <see cref="IIdentifier"/> key
        /// to locate in the <see cref="ComponentRolesHashmap"/>.</param>
        /// <returns><c>true</c> if the <see cref="ComponentRolesHashmap"/> contains an element
        /// with the specified <paramref name="key"/>; otherwise, <c>false</c>.</returns>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="key"/> is a null reference.</exception>
        /// <remarks>Please refer to <see cref="Hashtable.ContainsKey"/> for details.</remarks>

        public bool ContainsKey(IIdentifier key) {
            return this._innerHash.ContainsKey(key);
        }

        #endregion
        #region ContainsValue

        /// <summary>
        /// Determines whether the <see cref="ComponentRolesHashmap"/>
        /// contains the specified <see cref="IRole"/> value.
        /// </summary>
        /// <param name="value">The <see cref="IRole"/> value
        /// to locate in the <see cref="ComponentRolesHashmap"/>.
        /// This argument can be a null reference.
        /// </param>
        /// <returns><c>true</c> if the <see cref="ComponentRolesHashmap"/> contains an element
        /// with the specified <paramref name="value"/>; otherwise, <c>false</c>.</returns>
        /// <remarks>Please refer to <see cref="Hashtable.ContainsValue"/> for details.</remarks>

        public bool ContainsValue(IRole value) {
            return this._innerHash.ContainsValue(value);
        }

        #endregion
        #region CopyTo(IIDRoleEntry[], Int32)

        /// <summary>
        /// Copies the entire <see cref="ComponentRolesHashmap"/> to a one-dimensional <see cref="Array"/> of
        /// <see cref="IIDRoleEntry"/> elements, starting at the specified index of the target array.
        /// </summary>
        /// <param name="array">The one-dimensional <see cref="Array"/> that is the destination of the
        /// <see cref="IIDRoleEntry"/> elements copied from the <see cref="ComponentRolesHashmap"/>.
        /// The <b>Array</b> must have zero-based indexing.</param>
        /// <param name="arrayIndex">The zero-based index in <paramref name="array"/>
        /// at which copying begins.</param>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="array"/> is a null reference.</exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <paramref name="arrayIndex"/> is less than zero.</exception>
        /// <exception cref="ArgumentException"><para>
        /// <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
        /// </para><para>-or-</para><para>
        /// The number of elements in the source <see cref="ComponentRolesHashmap"/> is greater than
        /// the available space from <paramref name="arrayIndex"/> to the end of the destination
        /// <paramref name="array"/>.</para></exception>
        /// <remarks>Please refer to <see cref="Hashtable.CopyTo"/> for details.</remarks>

        public void CopyTo(IIDRoleEntry[] array, int arrayIndex) {
            this._innerHash.CopyTo(array, arrayIndex);
        }

        #endregion
        #region ICollection.CopyTo(Array, Int32)

        /// <summary>
        /// Copies the entire <see cref="ComponentRolesHashmap"/> to a one-dimensional <see cref="Array"/>,
        /// starting at the specified index of the target array.
        /// </summary>
        /// <param name="array">The one-dimensional <see cref="Array"/> that is the destination of the
        /// <see cref="IIDRoleEntry"/> elements copied from the <see cref="ComponentRolesHashmap"/>.
        /// The <b>Array</b> must have zero-based indexing.</param>
        /// <param name="arrayIndex">The zero-based index in <paramref name="array"/>
        /// at which copying begins.</param>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="array"/> is a null reference.</exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <paramref name="arrayIndex"/> is less than zero.</exception>
        /// <exception cref="ArgumentException"><para>
        /// <paramref name="array"/> is multidimensional.
        /// </para><para>-or-</para><para>
        /// <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
        /// </para><para>-or-</para><para>
        /// The number of elements in the source <see cref="ComponentRolesHashmap"/> is greater than
        /// the available space from <paramref name="arrayIndex"/> to the end of the destination
        /// <paramref name="array"/>.</para></exception>
        /// <exception cref="InvalidCastException">
        /// The <see cref="IIDRoleEntry"/> type cannot be cast automatically
        /// to the type of the destination <paramref name="array"/>.</exception>
        /// <remarks>Please refer to <see cref="Hashtable.CopyTo"/> for details.</remarks>

        void ICollection.CopyTo(Array array, int arrayIndex) {
            CheckTargetArray(array, arrayIndex);
            CopyTo((IIDRoleEntry[]) array, arrayIndex);
        }

        #endregion
        #region GetEnumerator: IIIdentifierIRoleEnumerator

        /// <summary>
        /// Returns an <see cref="IIIdentifierIRoleEnumerator"/>
        /// that can iterate through the <see cref="ComponentRolesHashmap"/>.
        /// </summary>
        /// <returns>An <see cref="IIIdentifierIRoleEnumerator"/>
        /// for the entire <see cref="ComponentRolesHashmap"/>.</returns>
        /// <remarks>Please refer to <see cref="Hashtable.GetEnumerator"/> for details.</remarks>

        public IIIdentifierIRoleEnumerator GetEnumerator() {
            return new Enumerator(this);
        }

        #endregion
        #region IDictionary.GetEnumerator: IDictionaryEnumerator

        /// <summary>
        /// Returns an <see cref="IDictionaryEnumerator"/> that can
        /// iterate through the <see cref="ComponentRolesHashmap"/>.
        /// </summary>
        /// <returns>An <see cref="IDictionaryEnumerator"/>
        /// for the entire <see cref="ComponentRolesHashmap"/>.</returns>
        /// <remarks>Please refer to <see cref="Hashtable.GetEnumerator"/> for details.</remarks>

        IDictionaryEnumerator IDictionary.GetEnumerator() {
            return (IDictionaryEnumerator) GetEnumerator();
        }

        #endregion
        #region IEnumerable.GetEnumerator: IEnumerator

        /// <summary>
        /// Returns an <see cref="IEnumerator"/> that can
        /// iterate through the <see cref="ComponentRolesHashmap"/>.
        /// </summary>
        /// <returns>An <see cref="IEnumerator"/>
        /// for the entire <see cref="ComponentRolesHashmap"/>.</returns>
        /// <remarks>Please refer to <see cref="Hashtable.GetEnumerator"/> for details.</remarks>

        IEnumerator IEnumerable.GetEnumerator() {
            return (IEnumerator) GetEnumerator();
        }

        #endregion
        #region Remove(IIdentifier)

        /// <summary>
        /// Removes the element with the specified <see cref="IIdentifier"/> key
        /// from the <see cref="ComponentRolesHashmap"/>.
        /// </summary>
        /// <param name="key">The <see cref="IIdentifier"/> key of the element
        /// to remove from the <see cref="ComponentRolesHashmap"/>.</param>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="key"/> is a null reference.</exception>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="ComponentRolesHashmap"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>ComponentRolesHashmap</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="Hashtable.Remove"/> for details.</remarks>

        public void Remove(IIdentifier key) {
            this._innerHash.Remove(key);
        }

        #endregion
        #region IDictionary.Remove(Object)

        /// <summary>
        /// Removes the element with the specified key
        /// from the <see cref="ComponentRolesHashmap"/>.
        /// </summary>
        /// <param name="key">The key of the element to remove from the <see cref="ComponentRolesHashmap"/>.
        /// This argument must be compatible with <see cref="IIdentifier"/>.</param>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="key"/> is a null reference.</exception>
        /// <exception cref="InvalidCastException"><paramref name="key"/>
        /// is not compatible with <see cref="IIdentifier"/>.</exception>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="ComponentRolesHashmap"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>ComponentRolesHashmap</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="Hashtable.Remove"/> for details.</remarks>

        void IDictionary.Remove(object key) {
            Remove((IIdentifier) key);
        }

        #endregion
        #region Synchronized

        /// <summary>
        /// Returns a synchronized (thread-safe) wrapper
        /// for the specified <see cref="ComponentRolesHashmap"/>.
        /// </summary>
        /// <param name="dictionary">The <see cref="ComponentRolesHashmap"/> to synchronize.</param>
        /// <returns>A synchronized (thread-safe) wrapper around <paramref name="dictionary"/>.</returns>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="dictionary"/> is a null reference.</exception>
        /// <remarks>Please refer to <see cref="Hashtable.Synchronized"/> for details.</remarks>

        public static ComponentRolesHashmap Synchronized(ComponentRolesHashmap dictionary) {
            if (dictionary == null)
                throw new ArgumentNullException("dictionary");

            ComponentRolesHashmap sync = new ComponentRolesHashmap(Tag.Default);
            sync._innerHash = (Hashmap)Hashmap.Synchronized(dictionary._innerHash);
            return sync;
        }

        #endregion
        #endregion
        #region Private Methods
        #region CheckTargetArray

        private void CheckTargetArray(Array array, int arrayIndex) {
            if (array == null)
                throw new ArgumentNullException("array");
            if (array.Rank > 1)
                throw new ArgumentException(
                    "Argument cannot be multidimensional.", "array");

            if (arrayIndex < 0)
                throw new ArgumentOutOfRangeException("arrayIndex",
                    arrayIndex, "Argument cannot be negative.");
            if (arrayIndex >= array.Length)
                throw new ArgumentException(
                    "Argument must be less than array length.", "arrayIndex");

            if (this._innerHash.Count > array.Length - arrayIndex)
                throw new ArgumentException(
                    "Argument section must be large enough for collection.", "array");
        }

        #endregion
        #endregion
        #region Class Enumerator

        private sealed class Enumerator:
            IIIdentifierIRoleEnumerator, IDictionaryEnumerator {
            #region Private Fields

            private readonly IDictionaryEnumerator _innerEnumerator;

            #endregion
            #region Internal Constructors

            internal Enumerator(ComponentRolesHashmap dictionary) {
                this._innerEnumerator = dictionary._innerHash.GetEnumerator();
            }

            #endregion
            #region Public Properties

            public IIDRoleEntry Current {
                get { return new IIDRoleEntry(Key, Value); }
            }

            object IEnumerator.Current {
                get { return this._innerEnumerator.Current; }
            }

            public IIDRoleEntry Entry {
                get { return new IIDRoleEntry(Key, Value); }
            }

            DictionaryEntry IDictionaryEnumerator.Entry {
                get { return this._innerEnumerator.Entry; }
            }

            public IIdentifier Key {
                get { return (IIdentifier) this._innerEnumerator.Key; }
            }

            object IDictionaryEnumerator.Key {
                get { return this._innerEnumerator.Key; }
            }

            public IRole Value {
                get { return (IRole) this._innerEnumerator.Value; }
            }

            object IDictionaryEnumerator.Value {
                get { return this._innerEnumerator.Value; }
            }

            #endregion
            #region Public Methods

            public bool MoveNext() {
                return this._innerEnumerator.MoveNext();
            }

            public void Reset() {
                this._innerEnumerator.Reset();
            }

            #endregion
        }

        #endregion
        #region Class KeyList

        [Serializable]
        private sealed class KeyList:
            IIIdentifierCollection, ICollection {
            #region Private Fields

            private ComponentRolesHashmap _dictionary;

            #endregion
            #region Internal Constructors

            internal KeyList(ComponentRolesHashmap dictionary) {
                this._dictionary = dictionary;
            }

            #endregion
            #region Public Properties

            public int Count {
                get { return this._dictionary.Count; }
            }

            public bool IsSynchronized {
                get { return this._dictionary.IsSynchronized; }
            }

            public object SyncRoot {
                get { return this._dictionary.SyncRoot; }
            }

            #endregion
            #region Public Methods

            public void CopyTo(IIdentifier[] array, int arrayIndex) {
                this._dictionary.CheckTargetArray(array, arrayIndex);
                foreach (IIDRoleEntry pair in this._dictionary)
                    array[arrayIndex++] = pair.Key;
            }

            void ICollection.CopyTo(Array array, int arrayIndex) {
                this._dictionary.CheckTargetArray(array, arrayIndex);
                CopyTo((IIdentifier[]) array, arrayIndex);
            }

            public IIIdentifierEnumerator GetEnumerator() {
                return new KeyEnumerator(this._dictionary);
            }

            IEnumerator IEnumerable.GetEnumerator() {
                return (IEnumerator) GetEnumerator();
            }

            #endregion
        }

        #endregion
        #region Class KeyEnumerator

        [Serializable]
        private sealed class KeyEnumerator:
            IIIdentifierEnumerator, IEnumerator {
            #region Private Fields

            private readonly IEnumerator _innerEnumerator;

            #endregion
            #region Internal Constructors

            internal KeyEnumerator(ComponentRolesHashmap dictionary) {
                this._innerEnumerator = dictionary._innerHash.Keys.GetEnumerator();
            }

            #endregion
            #region Public Properties

            public IIdentifier Current {
                get { return (IIdentifier) this._innerEnumerator.Current; }
            }

            object IEnumerator.Current {
                get { return this._innerEnumerator.Current; }
            }

            #endregion
            #region Public Methods

            public bool MoveNext() {
                return this._innerEnumerator.MoveNext();
            }

            public void Reset() {
                this._innerEnumerator.Reset();
            }

            #endregion
        }

        #endregion
        #region Class ValueList

        [Serializable]
        private sealed class ValueList:
            IIRoleCollection, ICollection {
            #region Private Fields

            private ComponentRolesHashmap _dictionary;

            #endregion
            #region Internal Constructors

            internal ValueList(ComponentRolesHashmap dictionary) {
                this._dictionary = dictionary;
            }

            #endregion
            #region Public Properties

            public int Count {
                get { return this._dictionary.Count; }
            }

            public bool IsSynchronized {
                get { return this._dictionary.IsSynchronized; }
            }

            public object SyncRoot {
                get { return this._dictionary.SyncRoot; }
            }

            #endregion
            #region Public Methods

            public void CopyTo(IRole[] array, int arrayIndex) {
                this._dictionary.CheckTargetArray(array, arrayIndex);
                foreach (IIDRoleEntry pair in this._dictionary)
                    array[arrayIndex++] = pair.Value;
            }

            void ICollection.CopyTo(Array array, int arrayIndex) {
                this._dictionary.CheckTargetArray(array, arrayIndex);
                CopyTo((IRole[]) array, arrayIndex);
            }

            public IIRoleEnumerator GetEnumerator() {
                return new ValueEnumerator(this._dictionary);
            }

            IEnumerator IEnumerable.GetEnumerator() {
                return (IEnumerator) GetEnumerator();
            }

            #endregion
        }

        #endregion
        #region Class ValueEnumerator

        [Serializable]
        private sealed class ValueEnumerator:
            IIRoleEnumerator, IEnumerator {
            #region Private Fields

            private readonly IEnumerator _innerEnumerator;

            #endregion
            #region Internal Constructors

            internal ValueEnumerator(ComponentRolesHashmap dictionary) {
                this._innerEnumerator = dictionary._innerHash.Values.GetEnumerator();
            }

            #endregion
            #region Public Properties

            public IRole Current {
                get { return (IRole) this._innerEnumerator.Current; }
            }

            object IEnumerator.Current {
                get { return this._innerEnumerator.Current; }
            }

            #endregion
            #region Public Methods

            public bool MoveNext() {
                return this._innerEnumerator.MoveNext();
            }

            public void Reset() {
                this._innerEnumerator.Reset();
            }

            #endregion
        }

        #endregion
    }

    #endregion

	

    #region Interface IIServiceEffectSpecificationCollection

    /// <summary>
    /// Defines size, enumerators, and synchronization methods for strongly
    /// typed collections of <see cref="IServiceEffectSpecification"/> elements.
    /// </summary>
    /// <remarks>
    /// <b>IIServiceEffectSpecificationCollection</b> provides an <see cref="ICollection"/>
    /// that is strongly typed for <see cref="IServiceEffectSpecification"/> elements.
    /// </remarks>

    internal interface IIServiceEffectSpecificationCollection {
        #region Properties
        #region Count

        /// <summary>
        /// Gets the number of elements contained in the
        /// <see cref="IIServiceEffectSpecificationCollection"/>.
        /// </summary>
        /// <value>The number of elements contained in the
        /// <see cref="IIServiceEffectSpecificationCollection"/>.</value>
        /// <remarks>Please refer to <see cref="ICollection.Count"/> for details.</remarks>

        int Count { get; }

        #endregion
        #region IsSynchronized

        /// <summary>
        /// Gets a value indicating whether access to the
        /// <see cref="IIServiceEffectSpecificationCollection"/> is synchronized (thread-safe).
        /// </summary>
        /// <value><c>true</c> if access to the <see cref="IIServiceEffectSpecificationCollection"/> is
        /// synchronized (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.</value>
        /// <remarks>Please refer to <see cref="ICollection.IsSynchronized"/> for details.</remarks>

        bool IsSynchronized { get; }

        #endregion
        #region SyncRoot

        /// <summary>
        /// Gets an object that can be used to synchronize access
        /// to the <see cref="IIServiceEffectSpecificationCollection"/>.
        /// </summary>
        /// <value>An object that can be used to synchronize access
        /// to the <see cref="IIServiceEffectSpecificationCollection"/>.</value>
        /// <remarks>Please refer to <see cref="ICollection.SyncRoot"/> for details.</remarks>

        object SyncRoot { get; }

        #endregion
        #endregion
        #region Methods
        #region CopyTo

        /// <summary>
        /// Copies the entire <see cref="IIServiceEffectSpecificationCollection"/> to a one-dimensional <see cref="Array"/>
        /// of <see cref="IServiceEffectSpecification"/> elements, starting at the specified index of the target array.
        /// </summary>
        /// <param name="array">The one-dimensional <see cref="Array"/> that is the destination of the
        /// <see cref="IServiceEffectSpecification"/> elements copied from the <see cref="IIServiceEffectSpecificationCollection"/>.
        /// The <b>Array</b> must have zero-based indexing.</param>
        /// <param name="arrayIndex">The zero-based index in <paramref name="array"/>
        /// at which copying begins.</param>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="array"/> is a null reference.</exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <paramref name="arrayIndex"/> is less than zero.</exception>
        /// <exception cref="ArgumentException"><para>
        /// <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
        /// </para><para>-or-</para><para>
        /// The number of elements in the source <see cref="IIServiceEffectSpecificationCollection"/> is greater
        /// than the available space from <paramref name="arrayIndex"/> to the end of the destination
        /// <paramref name="array"/>.</para></exception>
        /// <remarks>Please refer to <see cref="ICollection.CopyTo"/> for details.</remarks>

        void CopyTo(IServiceEffectSpecification[] array, int arrayIndex);

        #endregion
        #region GetEnumerator

        /// <summary>
        /// Returns an <see cref="IIServiceEffectSpecificationEnumerator"/> that can
        /// iterate through the <see cref="IIServiceEffectSpecificationCollection"/>.
        /// </summary>
        /// <returns>An <see cref="IIServiceEffectSpecificationEnumerator"/>
        /// for the entire <see cref="IIServiceEffectSpecificationCollection"/>.</returns>
        /// <remarks>Please refer to <see cref="IEnumerable.GetEnumerator"/> for details.</remarks>

        IIServiceEffectSpecificationEnumerator GetEnumerator();

        #endregion
        #endregion
    }

    #endregion
    #region Interface IIServiceEffectSpecificationList

    /// <summary>
    /// Represents a strongly typed collection of <see cref="IServiceEffectSpecification"/>
    /// objects that can be individually accessed by index.
    /// </summary>
    /// <remarks>
    /// <b>IIServiceEffectSpecificationList</b> provides an <see cref="IList"/>
    /// that is strongly typed for <see cref="IServiceEffectSpecification"/> elements.
    /// </remarks>

    internal interface
        IIServiceEffectSpecificationList: IIServiceEffectSpecificationCollection {
        #region Properties
        #region IsFixedSize

        /// <summary>
        /// Gets a value indicating whether the <see cref="IIServiceEffectSpecificationList"/> has a fixed size.
        /// </summary>
        /// <value><c>true</c> if the <see cref="IIServiceEffectSpecificationList"/> has a fixed size;
        /// otherwise, <c>false</c>. The default is <c>false</c>.</value>
        /// <remarks>Please refer to <see cref="IList.IsFixedSize"/> for details.</remarks>

        bool IsFixedSize { get; }

        #endregion
        #region IsReadOnly

        /// <summary>
        /// Gets a value indicating whether the <see cref="IIServiceEffectSpecificationList"/> is read-only.
        /// </summary>
        /// <value><c>true</c> if the <see cref="IIServiceEffectSpecificationList"/> is read-only;
        /// otherwise, <c>false</c>. The default is <c>false</c>.</value>
        /// <remarks>Please refer to <see cref="IList.IsReadOnly"/> for details.</remarks>

        bool IsReadOnly { get; }

        #endregion
        #region Item

        /// <summary>
        /// Gets or sets the <see cref="IServiceEffectSpecification"/> element at the specified index.
        /// </summary>
        /// <param name="index">The zero-based index of the
        /// <see cref="IServiceEffectSpecification"/> element to get or set.</param>
        /// <value>
        /// The <see cref="IServiceEffectSpecification"/> element at the specified <paramref name="index"/>.
        /// </value>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para><paramref name="index"/> is less than zero.</para>
        /// <para>-or-</para>
        /// <para><paramref name="index"/> is equal to or greater than
        /// <see cref="IIServiceEffectSpecificationCollection.Count"/>.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// The property is set and the <see cref="IIServiceEffectSpecificationList"/> is read-only.</exception>
        /// <remarks>Please refer to <see cref="IList.this"/> for details.</remarks>

        IServiceEffectSpecification this[int index] { get; set; }

        #endregion
        #endregion
        #region Methods
        #region Add

        /// <summary>
        /// Adds a <see cref="IServiceEffectSpecification"/> to the end
        /// of the <see cref="IIServiceEffectSpecificationList"/>.
        /// </summary>
        /// <param name="value">The <see cref="IServiceEffectSpecification"/> object
        /// to be added to the end of the <see cref="IIServiceEffectSpecificationList"/>.
        /// This argument can be a null reference.
        /// </param>
        /// <returns>The <see cref="IIServiceEffectSpecificationList"/> index at which
        /// the <paramref name="value"/> has been added.</returns>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="IIServiceEffectSpecificationList"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>IIServiceEffectSpecificationList</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="IList.Add"/> for details.</remarks>

        int Add(IServiceEffectSpecification value);

        #endregion
        #region Clear

        /// <summary>
        /// Removes all elements from the <see cref="IIServiceEffectSpecificationList"/>.
        /// </summary>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="IIServiceEffectSpecificationList"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>IIServiceEffectSpecificationList</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="IList.Clear"/> for details.</remarks>

        void Clear();

        #endregion
        #region Contains

        /// <summary>
        /// Determines whether the <see cref="IIServiceEffectSpecificationList"/>
        /// contains the specified <see cref="IServiceEffectSpecification"/> element.
        /// </summary>
        /// <param name="value">The <see cref="IServiceEffectSpecification"/> object
        /// to locate in the <see cref="IIServiceEffectSpecificationList"/>.
        /// This argument can be a null reference.
        /// </param>
        /// <returns><c>true</c> if <paramref name="value"/> is found in the
        /// <see cref="IIServiceEffectSpecificationList"/>; otherwise, <c>false</c>.</returns>
        /// <remarks>Please refer to <see cref="IList.Contains"/> for details.</remarks>

        bool Contains(IServiceEffectSpecification value);

        #endregion
        #region IndexOf

        /// <summary>
        /// Returns the zero-based index of the first occurrence of the specified
        /// <see cref="IServiceEffectSpecification"/> in the <see cref="IIServiceEffectSpecificationList"/>.
        /// </summary>
        /// <param name="value">The <see cref="IServiceEffectSpecification"/> object
        /// to locate in the <see cref="IIServiceEffectSpecificationList"/>.
        /// This argument can be a null reference.
        /// </param>
        /// <returns>
        /// The zero-based index of the first occurrence of <paramref name="value"/>
        /// in the <see cref="IIServiceEffectSpecificationList"/>, if found; otherwise, -1.
        /// </returns>
        /// <remarks>Please refer to <see cref="IList.IndexOf"/> for details.</remarks>

        int IndexOf(IServiceEffectSpecification value);

        #endregion
        #region Insert

        /// <summary>
        /// Inserts a <see cref="IServiceEffectSpecification"/> element into the
        /// <see cref="IIServiceEffectSpecificationList"/> at the specified index.
        /// </summary>
        /// <param name="index">The zero-based index at which
        /// <paramref name="value"/> should be inserted.</param>
        /// <param name="value">The <see cref="IServiceEffectSpecification"/> object
        /// to insert into the <see cref="IIServiceEffectSpecificationList"/>.
        /// This argument can be a null reference.
        /// </param>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para><paramref name="index"/> is less than zero.</para>
        /// <para>-or-</para>
        /// <para><paramref name="index"/> is greater than
        /// <see cref="IIServiceEffectSpecificationCollection.Count"/>.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="IIServiceEffectSpecificationList"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>IIServiceEffectSpecificationList</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="IList.Insert"/> for details.</remarks>

        void Insert(int index, IServiceEffectSpecification value);

        #endregion
        #region Remove

        /// <summary>
        /// Removes the first occurrence of the specified <see cref="IServiceEffectSpecification"/>
        /// from the <see cref="IIServiceEffectSpecificationList"/>.
        /// </summary>
        /// <param name="value">The <see cref="IServiceEffectSpecification"/> object
        /// to remove from the <see cref="IIServiceEffectSpecificationList"/>.
        /// This argument can be a null reference.
        /// </param>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="IIServiceEffectSpecificationList"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>IIServiceEffectSpecificationList</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="IList.Remove"/> for details.</remarks>

        void Remove(IServiceEffectSpecification value);

        #endregion
        #region RemoveAt

        /// <summary>
        /// Removes the element at the specified index of the
        /// <see cref="IIServiceEffectSpecificationList"/>.
        /// </summary>
        /// <param name="index">The zero-based index of the element to remove.</param>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para><paramref name="index"/> is less than zero.</para>
        /// <para>-or-</para>
        /// <para><paramref name="index"/> is equal to or greater than
        /// <see cref="IIServiceEffectSpecificationCollection.Count"/>.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="IIServiceEffectSpecificationList"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>IIServiceEffectSpecificationList</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="IList.RemoveAt"/> for details.</remarks>

        void RemoveAt(int index);

        #endregion
        #endregion
    }

    #endregion
    #region Interface IIServiceEffectSpecificationEnumerator

    /// <summary>
    /// Supports type-safe iteration over a collection that
    /// contains <see cref="IServiceEffectSpecification"/> elements.
    /// </summary>
    /// <remarks>
    /// <b>IIServiceEffectSpecificationEnumerator</b> provides an <see cref="IEnumerator"/>
    /// that is strongly typed for <see cref="IServiceEffectSpecification"/> elements.
    /// </remarks>

    internal interface IIServiceEffectSpecificationEnumerator {
        #region Properties
        #region Current

        /// <summary>
        /// Gets the current <see cref="IServiceEffectSpecification"/> element in the collection.
        /// </summary>
        /// <value>The current <see cref="IServiceEffectSpecification"/> element in the collection.</value>
        /// <exception cref="InvalidOperationException"><para>The enumerator is positioned
        /// before the first element of the collection or after the last element.</para>
        /// <para>-or-</para>
        /// <para>The collection was modified after the enumerator was created.</para></exception>
        /// <remarks>Please refer to <see cref="IEnumerator.Current"/> for details, but note
        /// that <b>Current</b> fails if the collection was modified since the last successful
        /// call to <see cref="MoveNext"/> or <see cref="Reset"/>.</remarks>

        IServiceEffectSpecification Current { get; }

        #endregion
        #endregion
        #region Methods
        #region MoveNext

        /// <summary>
        /// Advances the enumerator to the next element of the collection.
        /// </summary>
        /// <returns><c>true</c> if the enumerator was successfully advanced to the next element;
        /// <c>false</c> if the enumerator has passed the end of the collection.</returns>
        /// <exception cref="InvalidOperationException">
        /// The collection was modified after the enumerator was created.</exception>
        /// <remarks>Please refer to <see cref="IEnumerator.MoveNext"/> for details.</remarks>

        bool MoveNext();

        #endregion
        #region Reset

        /// <summary>
        /// Sets the enumerator to its initial position,
        /// which is before the first element in the collection.
        /// </summary>
        /// <exception cref="InvalidOperationException">
        /// The collection was modified after the enumerator was created.</exception>
        /// <remarks>Please refer to <see cref="IEnumerator.Reset"/> for details.</remarks>

        void Reset();

        #endregion
        #endregion
    }

    #endregion
    #region Interface IIExternalSignatureCollection

    /// <summary>
    /// Defines size, enumerators, and synchronization methods for strongly
    /// typed collections of <see cref="IExternalSignature"/> elements.
    /// </summary>
    /// <remarks>
    /// <b>IIExternalSignatureCollection</b> provides an <see cref="ICollection"/>
    /// that is strongly typed for <see cref="IExternalSignature"/> elements.
    /// </remarks>

    internal interface IIExternalSignatureCollection {
        #region Properties
        #region Count

        /// <summary>
        /// Gets the number of elements contained in the
        /// <see cref="IIExternalSignatureCollection"/>.
        /// </summary>
        /// <value>The number of elements contained in the
        /// <see cref="IIExternalSignatureCollection"/>.</value>
        /// <remarks>Please refer to <see cref="ICollection.Count"/> for details.</remarks>

        int Count { get; }

        #endregion
        #region IsSynchronized

        /// <summary>
        /// Gets a value indicating whether access to the
        /// <see cref="IIExternalSignatureCollection"/> is synchronized (thread-safe).
        /// </summary>
        /// <value><c>true</c> if access to the <see cref="IIExternalSignatureCollection"/> is
        /// synchronized (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.</value>
        /// <remarks>Please refer to <see cref="ICollection.IsSynchronized"/> for details.</remarks>

        bool IsSynchronized { get; }

        #endregion
        #region SyncRoot

        /// <summary>
        /// Gets an object that can be used to synchronize access
        /// to the <see cref="IIExternalSignatureCollection"/>.
        /// </summary>
        /// <value>An object that can be used to synchronize access
        /// to the <see cref="IIExternalSignatureCollection"/>.</value>
        /// <remarks>Please refer to <see cref="ICollection.SyncRoot"/> for details.</remarks>

        object SyncRoot { get; }

        #endregion
        #endregion
        #region Methods
        #region CopyTo

        /// <summary>
        /// Copies the entire <see cref="IIExternalSignatureCollection"/> to a one-dimensional <see cref="Array"/>
        /// of <see cref="IExternalSignature"/> elements, starting at the specified index of the target array.
        /// </summary>
        /// <param name="array">The one-dimensional <see cref="Array"/> that is the destination of the
        /// <see cref="IExternalSignature"/> elements copied from the <see cref="IIExternalSignatureCollection"/>.
        /// The <b>Array</b> must have zero-based indexing.</param>
        /// <param name="arrayIndex">The zero-based index in <paramref name="array"/>
        /// at which copying begins.</param>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="array"/> is a null reference.</exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <paramref name="arrayIndex"/> is less than zero.</exception>
        /// <exception cref="ArgumentException"><para>
        /// <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
        /// </para><para>-or-</para><para>
        /// The number of elements in the source <see cref="IIExternalSignatureCollection"/> is greater
        /// than the available space from <paramref name="arrayIndex"/> to the end of the destination
        /// <paramref name="array"/>.</para></exception>
        /// <remarks>Please refer to <see cref="ICollection.CopyTo"/> for details.</remarks>

        void CopyTo(IExternalSignature[] array, int arrayIndex);

        #endregion
        #region GetEnumerator

        /// <summary>
        /// Returns an <see cref="IIExternalSignatureEnumerator"/> that can
        /// iterate through the <see cref="IIExternalSignatureCollection"/>.
        /// </summary>
        /// <returns>An <see cref="IIExternalSignatureEnumerator"/>
        /// for the entire <see cref="IIExternalSignatureCollection"/>.</returns>
        /// <remarks>Please refer to <see cref="IEnumerable.GetEnumerator"/> for details.</remarks>

        IIExternalSignatureEnumerator GetEnumerator();

        #endregion
        #endregion
    }

    #endregion
    #region Interface IIExternalSignatureList

    /// <summary>
    /// Represents a strongly typed collection of <see cref="IExternalSignature"/>
    /// objects that can be individually accessed by index.
    /// </summary>
    /// <remarks>
    /// <b>IIExternalSignatureList</b> provides an <see cref="IList"/>
    /// that is strongly typed for <see cref="IExternalSignature"/> elements.
    /// </remarks>

    internal interface
        IIExternalSignatureList: IIExternalSignatureCollection {
        #region Properties
        #region IsFixedSize

        /// <summary>
        /// Gets a value indicating whether the <see cref="IIExternalSignatureList"/> has a fixed size.
        /// </summary>
        /// <value><c>true</c> if the <see cref="IIExternalSignatureList"/> has a fixed size;
        /// otherwise, <c>false</c>. The default is <c>false</c>.</value>
        /// <remarks>Please refer to <see cref="IList.IsFixedSize"/> for details.</remarks>

        bool IsFixedSize { get; }

        #endregion
        #region IsReadOnly

        /// <summary>
        /// Gets a value indicating whether the <see cref="IIExternalSignatureList"/> is read-only.
        /// </summary>
        /// <value><c>true</c> if the <see cref="IIExternalSignatureList"/> is read-only;
        /// otherwise, <c>false</c>. The default is <c>false</c>.</value>
        /// <remarks>Please refer to <see cref="IList.IsReadOnly"/> for details.</remarks>

        bool IsReadOnly { get; }

        #endregion
        #region Item

        /// <summary>
        /// Gets or sets the <see cref="IExternalSignature"/> element at the specified index.
        /// </summary>
        /// <param name="index">The zero-based index of the
        /// <see cref="IExternalSignature"/> element to get or set.</param>
        /// <value>
        /// The <see cref="IExternalSignature"/> element at the specified <paramref name="index"/>.
        /// </value>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para><paramref name="index"/> is less than zero.</para>
        /// <para>-or-</para>
        /// <para><paramref name="index"/> is equal to or greater than
        /// <see cref="IIExternalSignatureCollection.Count"/>.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// The property is set and the <see cref="IIExternalSignatureList"/> is read-only.</exception>
        /// <remarks>Please refer to <see cref="IList.this"/> for details.</remarks>

        IExternalSignature this[int index] { get; set; }

        #endregion
        #endregion
        #region Methods
        #region Add

        /// <summary>
        /// Adds a <see cref="IExternalSignature"/> to the end
        /// of the <see cref="IIExternalSignatureList"/>.
        /// </summary>
        /// <param name="value">The <see cref="IExternalSignature"/> object
        /// to be added to the end of the <see cref="IIExternalSignatureList"/>.
        /// This argument can be a null reference.
        /// </param>
        /// <returns>The <see cref="IIExternalSignatureList"/> index at which
        /// the <paramref name="value"/> has been added.</returns>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="IIExternalSignatureList"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>IIExternalSignatureList</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="IList.Add"/> for details.</remarks>

        int Add(IExternalSignature value);

        #endregion
        #region Clear

        /// <summary>
        /// Removes all elements from the <see cref="IIExternalSignatureList"/>.
        /// </summary>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="IIExternalSignatureList"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>IIExternalSignatureList</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="IList.Clear"/> for details.</remarks>

        void Clear();

        #endregion
        #region Contains

        /// <summary>
        /// Determines whether the <see cref="IIExternalSignatureList"/>
        /// contains the specified <see cref="IExternalSignature"/> element.
        /// </summary>
        /// <param name="value">The <see cref="IExternalSignature"/> object
        /// to locate in the <see cref="IIExternalSignatureList"/>.
        /// This argument can be a null reference.
        /// </param>
        /// <returns><c>true</c> if <paramref name="value"/> is found in the
        /// <see cref="IIExternalSignatureList"/>; otherwise, <c>false</c>.</returns>
        /// <remarks>Please refer to <see cref="IList.Contains"/> for details.</remarks>

        bool Contains(IExternalSignature value);

        #endregion
        #region IndexOf

        /// <summary>
        /// Returns the zero-based index of the first occurrence of the specified
        /// <see cref="IExternalSignature"/> in the <see cref="IIExternalSignatureList"/>.
        /// </summary>
        /// <param name="value">The <see cref="IExternalSignature"/> object
        /// to locate in the <see cref="IIExternalSignatureList"/>.
        /// This argument can be a null reference.
        /// </param>
        /// <returns>
        /// The zero-based index of the first occurrence of <paramref name="value"/>
        /// in the <see cref="IIExternalSignatureList"/>, if found; otherwise, -1.
        /// </returns>
        /// <remarks>Please refer to <see cref="IList.IndexOf"/> for details.</remarks>

        int IndexOf(IExternalSignature value);

        #endregion
        #region Insert

        /// <summary>
        /// Inserts a <see cref="IExternalSignature"/> element into the
        /// <see cref="IIExternalSignatureList"/> at the specified index.
        /// </summary>
        /// <param name="index">The zero-based index at which
        /// <paramref name="value"/> should be inserted.</param>
        /// <param name="value">The <see cref="IExternalSignature"/> object
        /// to insert into the <see cref="IIExternalSignatureList"/>.
        /// This argument can be a null reference.
        /// </param>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para><paramref name="index"/> is less than zero.</para>
        /// <para>-or-</para>
        /// <para><paramref name="index"/> is greater than
        /// <see cref="IIExternalSignatureCollection.Count"/>.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="IIExternalSignatureList"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>IIExternalSignatureList</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="IList.Insert"/> for details.</remarks>

        void Insert(int index, IExternalSignature value);

        #endregion
        #region Remove

        /// <summary>
        /// Removes the first occurrence of the specified <see cref="IExternalSignature"/>
        /// from the <see cref="IIExternalSignatureList"/>.
        /// </summary>
        /// <param name="value">The <see cref="IExternalSignature"/> object
        /// to remove from the <see cref="IIExternalSignatureList"/>.
        /// This argument can be a null reference.
        /// </param>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="IIExternalSignatureList"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>IIExternalSignatureList</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="IList.Remove"/> for details.</remarks>

        void Remove(IExternalSignature value);

        #endregion
        #region RemoveAt

        /// <summary>
        /// Removes the element at the specified index of the
        /// <see cref="IIExternalSignatureList"/>.
        /// </summary>
        /// <param name="index">The zero-based index of the element to remove.</param>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para><paramref name="index"/> is less than zero.</para>
        /// <para>-or-</para>
        /// <para><paramref name="index"/> is equal to or greater than
        /// <see cref="IIExternalSignatureCollection.Count"/>.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="IIExternalSignatureList"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>IIExternalSignatureList</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="IList.RemoveAt"/> for details.</remarks>

        void RemoveAt(int index);

        #endregion
        #endregion
    }

    #endregion
    #region Interface IIExternalSignatureEnumerator

    /// <summary>
    /// Supports type-safe iteration over a collection that
    /// contains <see cref="IExternalSignature"/> elements.
    /// </summary>
    /// <remarks>
    /// <b>IIExternalSignatureEnumerator</b> provides an <see cref="IEnumerator"/>
    /// that is strongly typed for <see cref="IExternalSignature"/> elements.
    /// </remarks>

    internal interface IIExternalSignatureEnumerator {
        #region Properties
        #region Current

        /// <summary>
        /// Gets the current <see cref="IExternalSignature"/> element in the collection.
        /// </summary>
        /// <value>The current <see cref="IExternalSignature"/> element in the collection.</value>
        /// <exception cref="InvalidOperationException"><para>The enumerator is positioned
        /// before the first element of the collection or after the last element.</para>
        /// <para>-or-</para>
        /// <para>The collection was modified after the enumerator was created.</para></exception>
        /// <remarks>Please refer to <see cref="IEnumerator.Current"/> for details, but note
        /// that <b>Current</b> fails if the collection was modified since the last successful
        /// call to <see cref="MoveNext"/> or <see cref="Reset"/>.</remarks>

        IExternalSignature Current { get; }

        #endregion
        #endregion
        #region Methods
        #region MoveNext

        /// <summary>
        /// Advances the enumerator to the next element of the collection.
        /// </summary>
        /// <returns><c>true</c> if the enumerator was successfully advanced to the next element;
        /// <c>false</c> if the enumerator has passed the end of the collection.</returns>
        /// <exception cref="InvalidOperationException">
        /// The collection was modified after the enumerator was created.</exception>
        /// <remarks>Please refer to <see cref="IEnumerator.MoveNext"/> for details.</remarks>

        bool MoveNext();

        #endregion
        #region Reset

        /// <summary>
        /// Sets the enumerator to its initial position,
        /// which is before the first element in the collection.
        /// </summary>
        /// <exception cref="InvalidOperationException">
        /// The collection was modified after the enumerator was created.</exception>
        /// <remarks>Please refer to <see cref="IEnumerator.Reset"/> for details.</remarks>

        void Reset();

        #endregion
        #endregion
    }

    #endregion
    #region Interface IIExternalSignatureIServiceEffectSpecificationCollection

    /// <summary>
    /// Defines size, enumerators, and synchronization methods for strongly
    /// typed collections of <see cref="IServiceEntry"/> elements.
    /// </summary>
    /// <remarks>
    /// <b>IIExternalSignatureIServiceEffectSpecificationCollection</b> provides an <see cref="ICollection"/>
    /// that is strongly typed for <see cref="IServiceEntry"/> elements.
    /// </remarks>

    internal interface IIExternalSignatureIServiceEffectSpecificationCollection {
        #region Properties
        #region Count

        /// <summary>
        /// Gets the number of elements contained in the
        /// <see cref="IIExternalSignatureIServiceEffectSpecificationCollection"/>.
        /// </summary>
        /// <value>The number of elements contained in the
        /// <see cref="IIExternalSignatureIServiceEffectSpecificationCollection"/>.</value>
        /// <remarks>Please refer to <see cref="ICollection.Count"/> for details.</remarks>

        int Count { get; }

        #endregion
        #region IsSynchronized

        /// <summary>
        /// Gets a value indicating whether access to the
        /// <see cref="IIExternalSignatureIServiceEffectSpecificationCollection"/> is synchronized (thread-safe).
        /// </summary>
        /// <value><c>true</c> if access to the <see cref="IIExternalSignatureIServiceEffectSpecificationCollection"/>
        /// is synchronized (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.</value>
        /// <remarks>Please refer to <see cref="ICollection.IsSynchronized"/> for details.</remarks>

        bool IsSynchronized { get; }

        #endregion
        #region SyncRoot

        /// <summary>
        /// Gets an object that can be used to synchronize access
        /// to the <see cref="IIExternalSignatureIServiceEffectSpecificationCollection"/>.
        /// </summary>
        /// <value>An object that can be used to synchronize access to the
        /// <see cref="IIExternalSignatureIServiceEffectSpecificationCollection"/>.</value>
        /// <remarks>Please refer to <see cref="ICollection.SyncRoot"/> for details.</remarks>

        object SyncRoot { get; }

        #endregion
        #endregion
        #region Methods
        #region CopyTo

        /// <summary>
        /// Copies the entire <see cref="IIExternalSignatureIServiceEffectSpecificationCollection"/>
        /// to a one-dimensional <see cref="Array"/> of <see cref="IServiceEntry"/> elements,
        /// starting at the specified index of the target array.
        /// </summary>
        /// <param name="array">The one-dimensional <see cref="Array"/> that is the
        /// destination of the <see cref="IServiceEntry"/> elements copied from the
        /// <see cref="IIExternalSignatureIServiceEffectSpecificationCollection"/>.
        /// The <b>Array</b> must have zero-based indexing.</param>
        /// <param name="arrayIndex">The zero-based index in <paramref name="array"/>
        /// at which copying begins.</param>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="array"/> is a null reference.</exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <paramref name="arrayIndex"/> is less than zero.</exception>
        /// <exception cref="ArgumentException"><para>
        /// <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
        /// </para><para>-or-</para><para>
        /// The number of elements in the source <see cref="IIExternalSignatureIServiceEffectSpecificationCollection"/>
        /// is greater than the available space from <paramref name="arrayIndex"/> to the end of the
        /// destination <paramref name="array"/>.</para></exception>
        /// <remarks>Please refer to <see cref="ICollection.CopyTo"/> for details.</remarks>

        void CopyTo(IServiceEntry[] array, int arrayIndex);

        #endregion
        #region GetEnumerator

        /// <summary>
        /// Returns an <see cref="IIExternalSignatureIServiceEffectSpecificationEnumerator"/> that can
        /// iterate through the <see cref="IIExternalSignatureIServiceEffectSpecificationCollection"/>.
        /// </summary>
        /// <returns>An <see cref="IIExternalSignatureIServiceEffectSpecificationEnumerator"/>
        /// for the entire <see cref="IIExternalSignatureIServiceEffectSpecificationCollection"/>.</returns>
        /// <remarks>Please refer to <see cref="IEnumerable.GetEnumerator"/> for details.</remarks>

        IIExternalSignatureIServiceEffectSpecificationEnumerator GetEnumerator();

        #endregion
        #endregion
    }

    #endregion
    #region Interface IIExternalSignatureIServiceEffectSpecificationDictionary

    /// <summary>
    /// Represents a strongly typed collection of
    /// <see cref="IServiceEntry"/> key-and-value pairs.
    /// </summary>
    /// <remarks>
    /// <b>IIExternalSignatureIServiceEffectSpecificationDictionary</b> provides an
    /// <see cref="IDictionary"/> that is strongly typed for
    /// <see cref="IExternalSignature"/> keys and <see cref="IServiceEffectSpecification"/> values.
    /// </remarks>

    internal interface
        IIExternalSignatureIServiceEffectSpecificationDictionary: IIExternalSignatureIServiceEffectSpecificationCollection {
        #region Properties
        #region IsFixedSize

        /// <summary>
        /// Gets a value indicating whether the
        /// <see cref="IIExternalSignatureIServiceEffectSpecificationDictionary"/> has a fixed size.
        /// </summary>
        /// <value><c>true</c> if the <see cref="IIExternalSignatureIServiceEffectSpecificationDictionary"/>
        /// has a fixed size; otherwise, <c>false</c>. The default is <c>false</c>.</value>
        /// <remarks>Please refer to <see cref="IDictionary.IsFixedSize"/> for details.</remarks>

        bool IsFixedSize { get; }

        #endregion
        #region IsReadOnly

        /// <summary>
        /// Gets a value indicating whether the
        /// <see cref="IIExternalSignatureIServiceEffectSpecificationDictionary"/> is read-only.
        /// </summary>
        /// <value><c>true</c> if the <see cref="IIExternalSignatureIServiceEffectSpecificationDictionary"/>
        /// is read-only; otherwise, <c>false</c>. The default is <c>false</c>.</value>
        /// <remarks>Please refer to <see cref="IDictionary.IsReadOnly"/> for details.</remarks>

        bool IsReadOnly { get; }

        #endregion
        #region Item

        /// <summary>
        /// Gets or sets the <see cref="IServiceEffectSpecification"/> value
        /// associated with the specified <see cref="IExternalSignature"/> key.
        /// </summary>
        /// <param name="key">The <see cref="IExternalSignature"/> key
        /// whose value to get or set.</param>
        /// <value>The <see cref="IServiceEffectSpecification"/> value associated with the specified
        /// <paramref name="key"/>. If the specified <paramref name="key"/> is not found,
        /// attempting to get it returns
        /// a null reference,
        /// and attempting to set it creates a new element using the specified
        /// <paramref name="key"/>.</value>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="key"/> is a null reference.</exception>
        /// <exception cref="NotSupportedException">
        /// <para>The property is set and the
        /// <see cref="IIExternalSignatureIServiceEffectSpecificationDictionary"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The property is set, <paramref name="key"/> does not exist in the collection,
        /// and the <b>IIExternalSignatureIServiceEffectSpecificationDictionary</b> has a fixed size.</para>
        /// </exception>
        /// <remarks>Please refer to <see cref="IDictionary.this"/> for details.</remarks>

        IServiceEffectSpecification this[IExternalSignature key] { get; set; }

        #endregion
        #region Keys

        /// <summary>
        /// Gets an <see cref="IIExternalSignatureCollection"/> containing the keys
        /// in the <see cref="IIExternalSignatureIServiceEffectSpecificationDictionary"/>.
        /// </summary>
        /// <value>An <see cref="IIExternalSignatureCollection"/> containing the keys
        /// in the <see cref="IIExternalSignatureIServiceEffectSpecificationDictionary"/>.</value>
        /// <remarks>Please refer to <see cref="IDictionary.Keys"/> for details.</remarks>

        IIExternalSignatureCollection Keys { get; }

        #endregion
        #region Values

        /// <summary>
        /// Gets an <see cref="IIServiceEffectSpecificationCollection"/> containing the values
        /// in the <see cref="IIExternalSignatureIServiceEffectSpecificationDictionary"/>.
        /// </summary>
        /// <value>An <see cref="IIServiceEffectSpecificationCollection"/> containing the values
        /// in the <see cref="IIExternalSignatureIServiceEffectSpecificationDictionary"/>.</value>
        /// <remarks>Please refer to <see cref="IDictionary.Values"/> for details.</remarks>

        IIServiceEffectSpecificationCollection Values { get; }

        #endregion
        #endregion
        #region Methods
        #region Add

        /// <summary>
        /// Adds an element with the specified <see cref="IExternalSignature"/>
        /// key and <see cref="IServiceEffectSpecification"/> value to the
        /// <see cref="IIExternalSignatureIServiceEffectSpecificationDictionary"/>.
        /// </summary>
        /// <param name="key">The <see cref="IExternalSignature"/> key of the element
        /// to add to the <see cref="IIExternalSignatureIServiceEffectSpecificationDictionary"/>.</param>
        /// <param name="value">The <see cref="IServiceEffectSpecification"/> value of the element
        /// to add to the <see cref="IIExternalSignatureIServiceEffectSpecificationDictionary"/>.
        /// This argument can be a null reference.
        /// </param>
        /// <exception cref="ArgumentException">
        /// <para>An element with the specified <paramref name="key"/> already exists
        /// in the <see cref="IIExternalSignatureIServiceEffectSpecificationDictionary"/>.</para>
        /// <para>-or-</para>
        /// <para>The <b>IIExternalSignatureIServiceEffectSpecificationDictionary</b> is set to use the
        /// <see cref="IComparable"/> interface, and <paramref name="key"/> does not
        /// implement the <b>IComparable</b> interface.</para></exception>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="key"/> is a null reference.</exception>
        /// <exception cref="InvalidOperationException">
        /// The comparer throws an exception.</exception>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="IIExternalSignatureIServiceEffectSpecificationDictionary"/> is read-only.
        /// </para><para>-or-</para>
        /// <para>The <b>IIExternalSignatureIServiceEffectSpecificationDictionary</b> has a fixed size.
        /// </para></exception>
        /// <remarks>Please refer to <see cref="IDictionary.Add"/> for details.</remarks>

        void Add(IExternalSignature key, IServiceEffectSpecification value);

        #endregion
        #region Clear

        /// <summary>
        /// Removes all elements from the <see cref="IIExternalSignatureIServiceEffectSpecificationDictionary"/>.
        /// </summary>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="IIExternalSignatureIServiceEffectSpecificationDictionary"/> is read-only.
        /// </para><para>-or-</para>
        /// <para>The <b>IIExternalSignatureIServiceEffectSpecificationDictionary</b> has a fixed size.
        /// </para></exception>
        /// <remarks>Please refer to <see cref="IDictionary.Clear"/> for details.</remarks>

        void Clear();

        #endregion
        #region Contains

        /// <summary>
        /// Determines whether the <see cref="IIExternalSignatureIServiceEffectSpecificationDictionary"/>
        /// contains the specified <see cref="IExternalSignature"/> key.
        /// </summary>
        /// <param name="key">The <see cref="IExternalSignature"/> key to locate
        /// in the <see cref="IIExternalSignatureIServiceEffectSpecificationDictionary"/>.</param>
        /// <returns><c>true</c> if the <see cref="IIExternalSignatureIServiceEffectSpecificationDictionary"/>
        /// contains an element with the specified <paramref name="key"/>; otherwise, <c>false</c>.
        /// </returns>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="key"/> is a null reference.</exception>
        /// <exception cref="InvalidOperationException">
        /// The comparer throws an exception.</exception>
        /// <remarks>Please refer to <see cref="IDictionary.Contains"/> for details.</remarks>

        bool Contains(IExternalSignature key);

        #endregion
        #region Remove

        /// <summary>
        /// Removes the element with the specified <see cref="IExternalSignature"/> key
        /// from the <see cref="IIExternalSignatureIServiceEffectSpecificationDictionary"/>.
        /// </summary>
        /// <param name="key">The <see cref="IExternalSignature"/> key of the element to remove
        /// from the <see cref="IIExternalSignatureIServiceEffectSpecificationDictionary"/>.</param>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="key"/> is a null reference.</exception>
        /// <exception cref="InvalidOperationException">
        /// The comparer throws an exception.</exception>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="IIExternalSignatureIServiceEffectSpecificationDictionary"/> is read-only.
        /// </para><para>-or-</para>
        /// <para>The <b>IIExternalSignatureIServiceEffectSpecificationDictionary</b> has a fixed size.
        /// </para></exception>
        /// <remarks>Please refer to <see cref="IDictionary.Remove"/> for details.</remarks>

        void Remove(IExternalSignature key);

        #endregion
        #endregion
    }

    #endregion
    #region Interface IIExternalSignatureIServiceEffectSpecificationList

    /// <summary>
    /// Represents a strongly typed collection of <see cref="IServiceEntry"/>
    /// objects that can be individually accessed by index.
    /// </summary>
    /// <remarks>
    /// <b>IIExternalSignatureIServiceEffectSpecificationList</b> provides an <see cref="IList"/>
    /// that is strongly typed for <see cref="IServiceEntry"/> elements.
    /// </remarks>

    internal interface
        IIExternalSignatureIServiceEffectSpecificationList: IIExternalSignatureIServiceEffectSpecificationCollection {
        #region Properties
        #region IsFixedSize

        /// <summary>
        /// Gets a value indicating whether the
        /// <see cref="IIExternalSignatureIServiceEffectSpecificationList"/> has a fixed size.
        /// </summary>
        /// <value><c>true</c> if the <see cref="IIExternalSignatureIServiceEffectSpecificationList"/>
        /// has a fixed size; otherwise, <c>false</c>. The default is <c>false</c>.</value>
        /// <remarks>Please refer to <see cref="IList.IsFixedSize"/> for details.</remarks>

        bool IsFixedSize { get; }

        #endregion
        #region IsReadOnly

        /// <summary>
        /// Gets a value indicating whether the
        /// <see cref="IIExternalSignatureIServiceEffectSpecificationList"/> is read-only.
        /// </summary>
        /// <value><c>true</c> if the <see cref="IIExternalSignatureIServiceEffectSpecificationList"/>
        /// is read-only; otherwise, <c>false</c>. The default is <c>false</c>.</value>
        /// <remarks>Please refer to <see cref="IList.IsReadOnly"/> for details.</remarks>

        bool IsReadOnly { get; }

        #endregion
        #region Item

        /// <summary>
        /// Gets or sets the <see cref="IServiceEntry"/> element at the specified index.
        /// </summary>
        /// <param name="index">The zero-based index of the
        /// <see cref="IServiceEntry"/> element to get or set.</param>
        /// <value>
        /// The <see cref="IServiceEntry"/> element at the specified <paramref name="index"/>.
        /// </value>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para><paramref name="index"/> is less than zero.</para>
        /// <para>-or-</para>
        /// <para><paramref name="index"/> is equal to or greater than
        /// <see cref="IIExternalSignatureIServiceEffectSpecificationCollection.Count"/>.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">The property is set and the
        /// <see cref="IIExternalSignatureIServiceEffectSpecificationList"/> is read-only.</exception>
        /// <remarks>Please refer to <see cref="IList.this"/> for details.</remarks>

        IServiceEntry this[int index] { get; set; }

        #endregion
        #endregion
        #region Methods
        #region Add

        /// <summary>
        /// Adds a <see cref="IServiceEntry"/> to the end
        /// of the <see cref="IIExternalSignatureIServiceEffectSpecificationList"/>.
        /// </summary>
        /// <param name="entry">The <see cref="IServiceEntry"/> object
        /// to be added to the end of the <see cref="IIExternalSignatureIServiceEffectSpecificationList"/>.
        /// </param>
        /// <returns>The <see cref="IIExternalSignatureIServiceEffectSpecificationList"/> index at which
        /// the <paramref name="entry"/> has been added.</returns>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="IIExternalSignatureIServiceEffectSpecificationList"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>IIExternalSignatureIServiceEffectSpecificationList</b> has a fixed size.</para>
        /// </exception>
        /// <remarks>Please refer to <see cref="IList.Add"/> for details.</remarks>

        int Add(IServiceEntry entry);

        #endregion
        #region Clear

        /// <summary>
        /// Removes all elements from the <see cref="IIExternalSignatureIServiceEffectSpecificationList"/>.
        /// </summary>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="IIExternalSignatureIServiceEffectSpecificationList"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>IIExternalSignatureIServiceEffectSpecificationList</b> has a fixed size.</para>
        /// </exception>
        /// <remarks>Please refer to <see cref="IList.Clear"/> for details.</remarks>

        void Clear();

        #endregion
        #region Contains

        /// <summary>
        /// Determines whether the <see cref="IIExternalSignatureIServiceEffectSpecificationList"/>
        /// contains the specified <see cref="IServiceEntry"/> element.
        /// </summary>
        /// <param name="entry">The <see cref="IServiceEntry"/> object
        /// to locate in the <see cref="IIExternalSignatureIServiceEffectSpecificationList"/>.</param>
        /// <returns><c>true</c> if <paramref name="entry"/> is found in the
        /// <see cref="IIExternalSignatureIServiceEffectSpecificationList"/>; otherwise, <c>false</c>.</returns>
        /// <remarks>Please refer to <see cref="IList.Contains"/> for details.</remarks>

        bool Contains(IServiceEntry entry);

        #endregion
        #region IndexOf

        /// <summary>
        /// Returns the zero-based index of the first occurrence of the specified
        /// <see cref="IServiceEntry"/> in the <see cref="IIExternalSignatureIServiceEffectSpecificationList"/>.
        /// </summary>
        /// <param name="entry">The <see cref="IServiceEntry"/> object
        /// to locate in the <see cref="IIExternalSignatureIServiceEffectSpecificationList"/>.</param>
        /// <returns>
        /// The zero-based index of the first occurrence of <paramref name="entry"/>
        /// in the <see cref="IIExternalSignatureIServiceEffectSpecificationList"/>, if found; otherwise, -1.
        /// </returns>
        /// <remarks>Please refer to <see cref="IList.IndexOf"/> for details.</remarks>

        int IndexOf(IServiceEntry entry);

        #endregion
        #region Insert

        /// <summary>
        /// Inserts a <see cref="IServiceEntry"/> element into the
        /// <see cref="IIExternalSignatureIServiceEffectSpecificationList"/> at the specified index.
        /// </summary>
        /// <param name="index">The zero-based index at which
        /// <paramref name="entry"/> should be inserted.</param>
        /// <param name="entry">The <see cref="IServiceEntry"/> object to insert
        /// into the <see cref="IIExternalSignatureIServiceEffectSpecificationList"/>.</param>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para><paramref name="index"/> is less than zero.</para>
        /// <para>-or-</para>
        /// <para><paramref name="index"/> is greater than
        /// <see cref="IIExternalSignatureIServiceEffectSpecificationCollection.Count"/>.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="IIExternalSignatureIServiceEffectSpecificationList"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>IIExternalSignatureIServiceEffectSpecificationList</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="IList.Insert"/> for details.</remarks>

        void Insert(int index, IServiceEntry entry);

        #endregion
        #region Remove

        /// <summary>
        /// Removes the first occurrence of the specified <see cref="IServiceEntry"/>
        /// from the <see cref="IIExternalSignatureIServiceEffectSpecificationList"/>.
        /// </summary>
        /// <param name="entry">The <see cref="IServiceEntry"/> object to remove
        /// from the <see cref="IIExternalSignatureIServiceEffectSpecificationList"/>.</param>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="IIExternalSignatureIServiceEffectSpecificationList"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>IIExternalSignatureIServiceEffectSpecificationList</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="IList.Remove"/> for details.</remarks>

        void Remove(IServiceEntry entry);

        #endregion
        #region RemoveAt

        /// <summary>
        /// Removes the element at the specified index of the
        /// <see cref="IIExternalSignatureIServiceEffectSpecificationList"/>.
        /// </summary>
        /// <param name="index">The zero-based index of the element to remove.</param>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para><paramref name="index"/> is less than zero.</para>
        /// <para>-or-</para>
        /// <para><paramref name="index"/> is equal to or greater than
        /// <see cref="IIExternalSignatureIServiceEffectSpecificationCollection.Count"/>.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="IIExternalSignatureIServiceEffectSpecificationList"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>IIExternalSignatureIServiceEffectSpecificationList</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="IList.RemoveAt"/> for details.</remarks>

        void RemoveAt(int index);

        #endregion
        #endregion
    }

    #endregion
    #region Interface IIExternalSignatureIServiceEffectSpecificationEnumerator

    /// <summary>
    /// Supports type-safe iteration over a dictionary that
    /// contains <see cref="IServiceEntry"/> elements.
    /// </summary>
    /// <remarks>
    /// <b>IIExternalSignatureIServiceEffectSpecificationEnumerator</b> provides an
    /// <see cref="IDictionaryEnumerator"/> that is strongly typed for
    /// <see cref="IExternalSignature"/> keys and <see cref="IServiceEffectSpecification"/> values.
    /// </remarks>

    internal interface IIExternalSignatureIServiceEffectSpecificationEnumerator {
        #region Properties
        #region Current

        /// <summary>
        /// Gets the current <see cref="IServiceEntry"/> element in the collection.
        /// </summary>
        /// <value>The current <see cref="IServiceEntry"/> element in the collection.</value>
        /// <exception cref="InvalidOperationException"><para>The enumerator is positioned
        /// before the first element of the collection or after the last element.</para>
        /// <para>-or-</para>
        /// <para>The collection was modified after the enumerator was created.</para></exception>
        /// <remarks>Please refer to <see cref="IEnumerator.Current"/> for details, but note
        /// that <b>Current</b> fails if the collection was modified since the last successful
        /// call to <see cref="MoveNext"/> or <see cref="Reset"/>.</remarks>

        IServiceEntry Current { get; }

        #endregion
        #region Entry

        /// <summary>
        /// Gets a <see cref="IServiceEntry"/> containing both
        /// the key and the value of the current dictionary entry.
        /// </summary>
        /// <value>A <see cref="IServiceEntry"/> containing both
        /// the key and the value of the current dictionary entry.</value>
        /// <exception cref="InvalidOperationException"><para>The enumerator is positioned
        /// before the first element of the dictionary or after the last element.</para>
        /// <para>-or-</para>
        /// <para>The dictionary was modified after the enumerator was created.</para></exception>
        /// <remarks>Please refer to <see cref="IDictionaryEnumerator.Entry"/> for details, but
        /// note that <b>Entry</b> fails if the collection was modified since the last successful
        /// call to <see cref="MoveNext"/> or <see cref="Reset"/>.</remarks>

        IServiceEntry Entry { get; }

        #endregion
        #region Key

        /// <summary>
        /// Gets the <see cref="IExternalSignature"/> key of the current dictionary entry.
        /// </summary>
        /// <value>The <see cref="IExternalSignature"/> key
        /// of the current element of the enumeration.</value>
        /// <exception cref="InvalidOperationException"><para>The enumerator is positioned
        /// before the first element of the dictionary or after the last element.</para>
        /// <para>-or-</para>
        /// <para>The dictionary was modified after the enumerator was created.</para></exception>
        /// <remarks>Please refer to <see cref="IDictionaryEnumerator.Key"/> for details, but
        /// note that <b>Key</b> fails if the collection was modified since the last successful
        /// call to <see cref="MoveNext"/> or <see cref="Reset"/>.</remarks>

        IExternalSignature Key { get; }

        #endregion
        #region Value

        /// <summary>
        /// Gets the <see cref="IServiceEffectSpecification"/> value of the current dictionary entry.
        /// </summary>
        /// <value>The <see cref="IServiceEffectSpecification"/> value
        /// of the current element of the enumeration.</value>
        /// <exception cref="InvalidOperationException"><para>The enumerator is positioned
        /// before the first element of the dictionary or after the last element.</para>
        /// <para>-or-</para>
        /// <para>The dictionary was modified after the enumerator was created.</para></exception>
        /// <remarks>Please refer to <see cref="IDictionaryEnumerator.Value"/> for details, but
        /// note that <b>Value</b> fails if the collection was modified since the last successful
        /// call to <see cref="MoveNext"/> or <see cref="Reset"/>.</remarks>

        IServiceEffectSpecification Value { get; }

        #endregion
        #endregion
        #region Methods
        #region MoveNext

        /// <summary>
        /// Advances the enumerator to the next element of the collection.
        /// </summary>
        /// <returns><c>true</c> if the enumerator was successfully advanced to the next element;
        /// <c>false</c> if the enumerator has passed the end of the collection.</returns>
        /// <exception cref="InvalidOperationException">
        /// The collection was modified after the enumerator was created.</exception>
        /// <remarks>Please refer to <see cref="IEnumerator.MoveNext"/> for details.</remarks>

        bool MoveNext();

        #endregion
        #region Reset

        /// <summary>
        /// Sets the enumerator to its initial position,
        /// which is before the first element in the collection.
        /// </summary>
        /// <exception cref="InvalidOperationException">
        /// The collection was modified after the enumerator was created.</exception>
        /// <remarks>Please refer to <see cref="IEnumerator.Reset"/> for details.</remarks>

        void Reset();

        #endregion
        #endregion
    }

    #endregion
    #region Struct IServiceEntry

    /// <summary>
    /// Implements a strongly typed pair of one <see cref="IExternalSignature"/>
    /// key and one <see cref="IServiceEffectSpecification"/> value.
    /// </summary>
    /// <remarks>
    /// <b>IServiceEntry</b> provides a <see cref="DictionaryEntry"/> that is strongly
    /// typed for <see cref="IExternalSignature"/> keys and <see cref="IServiceEffectSpecification"/> values.
    /// </remarks>

    [Serializable]
    internal struct IServiceEntry {
        #region Private Fields

        private IExternalSignature _key;
        private IServiceEffectSpecification _value;

        #endregion
        #region Public Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="IServiceEntry"/>
        /// class with the specified key and value.
        /// </summary>
        /// <param name="key">
        /// The <see cref="IExternalSignature"/> key in the key-and-value pair.</param>
        /// <param name="value">
        /// The <see cref="IServiceEffectSpecification"/> value in the key-and-value pair.
        /// This argument can be a null reference.
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="key"/> is a null reference.</exception>

        public IServiceEntry(IExternalSignature key, IServiceEffectSpecification value) {
            if ((object) key == null)
                throw new ArgumentNullException("key");

            this._key = key;
            this._value = value;
        }

        #endregion
        #region Public Properties
        #region Key

        /// <summary>
        /// Gets or sets the <see cref="IExternalSignature"/> key in the key-and-value pair.
        /// </summary>
        /// <value>
        /// The <see cref="IExternalSignature"/> key in the key-and-value pair.
        /// The default is a null reference.
        /// </value>
        /// <exception cref="ArgumentNullException">
        /// <b>Key</b> is set to a null reference.</exception>
        /// <remarks>
        /// <see cref="IServiceEntry"/> is a value type and therefore has an implicit default
        /// constructor that zeroes all data members. This means that the <b>Key</b> property of
        /// a default-constructed <b>IServiceEntry</b> contains a null reference by default,
        /// even though it is not possible to explicitly set <b>Key</b> to a null reference.
        /// </remarks>

        public IExternalSignature Key {
            get { return this._key; }
            set {
                if ((object) value == null)
                    throw new ArgumentNullException("value");
                this._key = value;
            }
        }

        #endregion
        #region Value

        /// <summary>
        /// Gets or sets the <see cref="IServiceEffectSpecification"/> value in the key-and-value pair.
        /// </summary>
        /// <value>
        /// The <see cref="IServiceEffectSpecification"/> value in the key-and-value pair.
        /// This value can be a null reference, which is also the default.
        /// </value>

        public IServiceEffectSpecification Value {
            get { return this._value; }
            set { this._value = value; }
        }

        #endregion
        #endregion
        #region Public Operators
        #region IServiceEntry(DictionaryEntry)

        /// <summary>
        /// Converts a <see cref="DictionaryEntry"/> to a <see cref="IServiceEntry"/>.
        /// </summary>
        /// <param name="entry">A <see cref="DictionaryEntry"/> object to convert.</param>
        /// <returns>A <see cref="IServiceEntry"/> object that represents
        /// the converted <paramref name="entry"/>.</returns>
        /// <exception cref="InvalidCastException">
        /// <para><paramref name="entry"/> contains a key that is not compatible
        /// with <see cref="IExternalSignature"/>.</para>
        /// <para>-or-</para>
        /// <para><paramref name="entry"/> contains a value that is not compatible
        /// with <see cref="IServiceEffectSpecification"/>.</para>
        /// </exception>

        public static implicit operator IServiceEntry(DictionaryEntry entry) {
            IServiceEntry pair = new IServiceEntry();
            if (entry.Key != null) pair.Key = (IExternalSignature) entry.Key;
            if (entry.Value != null) pair.Value = (IServiceEffectSpecification) entry.Value;
            return pair;
        }

        #endregion
        #region DictionaryEntry(IServiceEntry)

        /// <summary>
        /// Converts a <see cref="IServiceEntry"/> to a <see cref="DictionaryEntry"/>.
        /// </summary>
        /// <param name="pair">A <see cref="IServiceEntry"/> object to convert.</param>
        /// <returns>A <see cref="DictionaryEntry"/> object that
        /// represents the converted <paramref name="pair"/>.</returns>

        public static implicit operator DictionaryEntry(IServiceEntry pair) {
            DictionaryEntry entry = new DictionaryEntry();
            if (pair.Key != null) entry.Key = pair.Key;
            entry.Value = pair.Value;
            return entry;
        }

        #endregion
        #endregion
    }

    #endregion
    #region Class ServiceEffectHashmap

    /// <summary>
    /// Implements a strongly typed collection of <see cref="IServiceEntry"/>
    /// key-and-value pairs that are organized based on the hash code of the key.
    /// </summary>
    /// <remarks>
    /// <b>ServiceEffectHashmap</b> provides a <see cref="Hashtable"/> that is strongly typed
    /// for <see cref="IExternalSignature"/> keys and <see cref="IServiceEffectSpecification"/> values.
    /// </remarks>

    [Serializable]
    internal class ServiceEffectHashmap:
        IIExternalSignatureIServiceEffectSpecificationDictionary, IDictionary, ICloneable {
        #region Private Fields

        protected Hashmap _innerHash;
        private KeyList _keyList;
        private ValueList _valueList;

        #endregion
        #region Private Constructors

        // helper type to identify private ctor
        private enum Tag { Default }

        private ServiceEffectHashmap(Tag tag) { }

        #endregion
        #region Public Constructors
        #region ServiceEffectHashmap()

        /// <overloads>
        /// Initializes a new instance of the <see cref="ServiceEffectHashmap"/> class.
        /// </overloads>
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceEffectHashmap"/> class
        /// that is empty and has the default initial capacity, the default load factor,
        /// the default hash code provider and the default comparer.
        /// </summary>
        /// <remarks>Please refer to <see cref="Hashtable()"/> for details.</remarks>

        public ServiceEffectHashmap() {
            this._innerHash = new Hashmap();
        }

        #endregion
        #region ServiceEffectHashmap(IHashCodeProvider, IComparer)

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceEffectHashmap"/> class
        /// that is empty and has the default initial capacity, the default load factor,
        /// the specified hash code provider and the specified comparer.
        /// </summary>
        /// <param name="provider">
        /// <para>The <see cref="IHashCodeProvider"/> that supplies the hash codes
        /// for all keys in the <see cref="ServiceEffectHashmap"/>.</para>
        /// <para>-or-</para>
        /// <para>A null reference to use the default hash code provider, which is each key's
        /// implementation of <see cref="Object.GetHashCode"/>.</para></param>
        /// <param name="comparer">
        /// <para>The <see cref="IComparer"/> to use to determine whether two keys are equal.</para>
        /// <para>-or-</para>
        /// <para>A null reference to use the default comparer, which is each key's
        /// implementation of <see cref="Object.Equals"/>.</para></param>
        /// <remarks>
        /// Please refer to <see cref="Hashtable(IHashCodeProvider, IComparer)"/> for details.
        /// </remarks>

        public ServiceEffectHashmap(IHashCodeProvider provider, IComparer comparer) {
            this._innerHash = new Hashmap(provider, comparer);
        }

        #endregion
        #region ServiceEffectHashmap(Int32)

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceEffectHashmap"/> class
        /// that is empty and has the specified initial capacity, the default load factor,
        /// the default hash code provider and the default comparer.
        /// </summary>
        /// <param name="capacity">The approximate number of elements that the new
        /// <see cref="ServiceEffectHashmap"/> is initially capable of storing.</param>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <paramref name="capacity"/> is less than zero.</exception>
        /// <remarks>Please refer to <see cref="Hashtable(Int32)"/> for details.</remarks>

        public ServiceEffectHashmap(int capacity) {
            this._innerHash = new Hashmap(capacity);
        }

        #endregion
        #region ServiceEffectHashmap(Int32, IHashCodeProvider, IComparer)

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceEffectHashmap"/> class
        /// that is empty and has the specified initial capacity, the default load factor,
        /// the specified hash code provider and the specified comparer.
        /// </summary>
        /// <param name="capacity">The approximate number of elements that the new
        /// <see cref="ServiceEffectHashmap"/> is initially capable of storing.</param>
        /// <param name="provider">
        /// <para>The <see cref="IHashCodeProvider"/> that supplies the hash codes
        /// for all keys in the <see cref="ServiceEffectHashmap"/>.</para>
        /// <para>-or-</para>
        /// <para>A null reference to use the default hash code provider, which is each key's
        /// implementation of <see cref="Object.GetHashCode"/>.</para></param>
        /// <param name="comparer">
        /// <para>The <see cref="IComparer"/> to use to determine whether two keys are equal.</para>
        /// <para>-or-</para>
        /// <para>A null reference to use the default comparer, which is each key's
        /// implementation of <see cref="Object.Equals"/>.</para></param>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <paramref name="capacity"/> is less than zero.</exception>
        /// <remarks>
        /// Please refer to <see cref="Hashtable(Int32, IHashCodeProvider, IComparer)"/> for details.
        /// </remarks>

        public ServiceEffectHashmap(int capacity,
            IHashCodeProvider provider, IComparer comparer) {

            this._innerHash = new Hashmap(capacity, provider, comparer);
        }

        #endregion
        #region ServiceEffectHashmap(Int32, Single)

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceEffectHashmap"/> class
        /// that is empty and has the specified initial capacity, the specified load factor,
        /// the default hash code provider and the default comparer.
        /// </summary>
        /// <param name="capacity">The approximate number of elements that the new
        /// <see cref="ServiceEffectHashmap"/> is initially capable of storing.</param>
        /// <param name="loadFactor">A number in the range from 0.1 through 1.0
        /// indicating the maximum ratio of elements to buckets.</param>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para><paramref name="capacity"/> is less than zero.</para>
        /// <para>-or-</para>
        /// <para><paramref name="loadFactor"/> is less than 0.1.</para>
        /// <para>-or-</para>
        /// <para><paramref name="loadFactor"/> is greater than 1.0.</para></exception>
        /// <remarks>Please refer to <see cref="Hashtable(Int32, Single)"/> for details.</remarks>

        public ServiceEffectHashmap(int capacity, float loadFactor) {
            this._innerHash = new Hashmap(capacity, loadFactor);
        }

        #endregion
        #region ServiceEffectHashmap(Int32, Single, IHashCodeProvider, IComparer)

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceEffectHashmap"/> class
        /// that is empty and has the specified initial capacity, the specified load factor,
        /// the specified hash code provider and the specified comparer.
        /// </summary>
        /// <param name="capacity">The approximate number of elements that the new
        /// <see cref="ServiceEffectHashmap"/> is initially capable of storing.</param>
        /// <param name="loadFactor">A number in the range from 0.1 through 1.0
        /// indicating the maximum ratio of elements to buckets.</param>
        /// <param name="provider">
        /// <para>The <see cref="IHashCodeProvider"/> that supplies the hash codes
        /// for all keys in the <see cref="ServiceEffectHashmap"/>.</para>
        /// <para>-or-</para>
        /// <para>A null reference to use the default hash code provider, which is each key's
        /// implementation of <see cref="Object.GetHashCode"/>.</para></param>
        /// <param name="comparer">
        /// <para>The <see cref="IComparer"/> to use to determine whether two keys are equal.</para>
        /// <para>-or-</para>
        /// <para>A null reference to use the default comparer, which is each key's
        /// implementation of <see cref="Object.Equals"/>.</para></param>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para><paramref name="capacity"/> is less than zero.</para>
        /// <para>-or-</para>
        /// <para><paramref name="loadFactor"/> is less than 0.1.</para>
        /// <para>-or-</para>
        /// <para><paramref name="loadFactor"/> is greater than 1.0.</para></exception>
        /// <remarks>
        /// Please refer to <see cref="Hashtable(Int32, Single, IHashCodeProvider, IComparer)"/>
        /// for details.</remarks>

        public ServiceEffectHashmap(int capacity, float loadFactor,
            IHashCodeProvider provider, IComparer comparer) {

            this._innerHash = new Hashmap(capacity, loadFactor, provider, comparer);
        }

        #endregion
        #region ServiceEffectHashmap(ServiceEffectHashmap)

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceEffectHashmap"/> class
        /// that contains elements copied from the specified dictionary and
        /// that has the same initial capacity as the number of elements copied, the
        /// default load factor, the default hash code provider and the default comparer.
        /// </summary>
        /// <param name="dictionary">The <see cref="ServiceEffectHashmap"/>
        /// whose elements are copied to the new collection.</param>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="dictionary"/> is a null reference.</exception>
        /// <remarks>Please refer to <see cref="Hashtable(IDictionary)"/> for details.</remarks>

        public ServiceEffectHashmap(ServiceEffectHashmap dictionary) {
            if (dictionary == null)
                throw new ArgumentNullException("dictionary");

            this._innerHash = new Hashmap(dictionary._innerHash);
        }

        #endregion
        #region ServiceEffectHashmap(IDictionary)

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceEffectHashmap"/> class
        /// that contains elements copied from the specified <see cref="IDictionary"/>
        /// and that has the same initial capacity as the number of elements copied, the
        /// default load factor, the default hash code provider and the default comparer.
        /// </summary>
        /// <param name="dictionary">The <see cref="IDictionary"/>
        /// whose elements are copied to the new collection.</param>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="dictionary"/> is a null reference.</exception>
        /// <remarks>Please refer to <see cref="Hashtable(IDictionary)"/> for details.</remarks>

        public ServiceEffectHashmap(IDictionary dictionary) {
            this._innerHash = new Hashmap(dictionary);
        }

        #endregion
        #region ServiceEffectHashmap(IDictionary, IHashCodeProvider, IComparer)

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceEffectHashmap"/> class
        /// that contains elements copied from the specified <see cref="IDictionary"/>
        /// and that has the same initial capacity as the number of elements copied, the
        /// default load factor, the specified hash code provider and the specified comparer.
        /// </summary>
        /// <param name="dictionary">The <see cref="IDictionary"/>
        /// whose elements are copied to the new collection.</param>
        /// <param name="provider">
        /// <para>The <see cref="IHashCodeProvider"/> that supplies the hash codes
        /// for all keys in the <see cref="ServiceEffectHashmap"/>.</para>
        /// <para>-or-</para>
        /// <para>A null reference to use the default hash code provider, which is each key's
        /// implementation of <see cref="Object.GetHashCode"/>.</para></param>
        /// <param name="comparer">
        /// <para>The <see cref="IComparer"/> to use to determine whether two keys are equal.</para>
        /// <para>-or-</para>
        /// <para>A null reference to use the default comparer, which is each key's
        /// implementation of <see cref="Object.Equals"/>.</para></param>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="dictionary"/> is a null reference.</exception>
        /// <remarks>
        /// Please refer to <see cref="Hashtable(IDictionary, IHashCodeProvider, IComparer)"/>
        /// for details.</remarks>

        public ServiceEffectHashmap(IDictionary dictionary,
            IHashCodeProvider provider, IComparer comparer) {

            this._innerHash = new Hashmap(dictionary, provider, comparer);
        }

        #endregion
        #region ServiceEffectHashmap(IDictionary, Single)

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceEffectHashmap"/> class
        /// that contains elements copied from the specified <see cref="IDictionary"/>
        /// and that has the same initial capacity as the number of elements copied, the
        /// specified load factor, the default hash code provider and the default comparer.
        /// </summary>
        /// <param name="dictionary">The <see cref="IDictionary"/>
        /// whose elements are copied to the new collection.</param>
        /// <param name="loadFactor">A number in the range from 0.1 through 1.0
        /// indicating the maximum ratio of elements to buckets.</param>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="dictionary"/> is a null reference.</exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para><paramref name="loadFactor"/> is less than 0.1.</para>
        /// <para>-or-</para>
        /// <para><paramref name="loadFactor"/> is greater than 1.0.</para></exception>
        /// <remarks>
        /// Please refer to <see cref="Hashtable(IDictionary, Single)"/> for details.
        /// </remarks>

        public ServiceEffectHashmap(IDictionary dictionary, float loadFactor) {
            this._innerHash = new Hashmap(dictionary, loadFactor);
        }

        #endregion
        #region ServiceEffectHashmap(IDictionary, Single, IHashCodeProvider, IComparer)

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceEffectHashmap"/> class
        /// that contains elements copied from the specified <see cref="IDictionary"/>
        /// and that has the same initial capacity as the number of elements copied, the
        /// specified load factor, the specified hash code provider and the specified comparer.
        /// </summary>
        /// <param name="dictionary">The <see cref="IDictionary"/>
        /// whose elements are copied to the new collection.</param>
        /// <param name="loadFactor">A number in the range from 0.1 through 1.0
        /// indicating the maximum ratio of elements to buckets.</param>
        /// <param name="provider">
        /// <para>The <see cref="IHashCodeProvider"/> that supplies the hash codes
        /// for all keys in the <see cref="ServiceEffectHashmap"/>.</para>
        /// <para>-or-</para>
        /// <para>A null reference to use the default hash code provider, which is each key's
        /// implementation of <see cref="Object.GetHashCode"/>.</para></param>
        /// <param name="comparer">
        /// <para>The <see cref="IComparer"/> to use to determine whether two keys are equal.</para>
        /// <para>-or-</para>
        /// <para>A null reference to use the default comparer, which is each key's
        /// implementation of <see cref="Object.Equals"/>.</para></param>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="dictionary"/> is a null reference.</exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para><paramref name="loadFactor"/> is less than 0.1.</para>
        /// <para>-or-</para>
        /// <para><paramref name="loadFactor"/> is greater than 1.0.</para></exception>
        /// <remarks>
        /// Please refer to <see cref="Hashtable(IDictionary, Single, IHashCodeProvider, IComparer)"/>
        /// for details.</remarks>

        public ServiceEffectHashmap(IDictionary dictionary,
            float loadFactor, IHashCodeProvider provider, IComparer comparer) {

            this._innerHash = new Hashmap(dictionary, loadFactor, provider, comparer);
        }

        #endregion
        #endregion
        #region Public Properties
        #region Count

        /// <summary>
        /// Gets the number of key-and-value pairs contained in the <see cref="ServiceEffectHashmap"/>.
        /// </summary>
        /// <value>
        /// The number of key-and-value pairs contained in the <see cref="ServiceEffectHashmap"/>.
        /// </value>
        /// <remarks>Please refer to <see cref="Hashtable.Count"/> for details.</remarks>

        public int Count {
            get { return this._innerHash.Count; }
        }

        #endregion
        #region IsFixedSize

        /// <summary>
        /// Gets a value indicating whether the <see cref="ServiceEffectHashmap"/> has a fixed size.
        /// </summary>
        /// <value><c>true</c> if the <see cref="ServiceEffectHashmap"/> has a fixed size;
        /// otherwise, <c>false</c>. The default is <c>false</c>.</value>
        /// <remarks>Please refer to <see cref="Hashtable.IsFixedSize"/> for details.</remarks>

        public bool IsFixedSize {
            get { return this._innerHash.IsFixedSize; }
        }

        #endregion
        #region IsReadOnly

        /// <summary>
        /// Gets a value indicating whether the <see cref="ServiceEffectHashmap"/> is read-only.
        /// </summary>
        /// <value><c>true</c> if the <see cref="ServiceEffectHashmap"/> is read-only;
        /// otherwise, <c>false</c>. The default is <c>false</c>.</value>
        /// <remarks>Please refer to <see cref="Hashtable.IsReadOnly"/> for details.</remarks>

        public bool IsReadOnly {
            get { return this._innerHash.IsReadOnly; }
        }

        #endregion
        #region IsSynchronized

        /// <summary>
        /// Gets a value indicating whether access to the <see cref="ServiceEffectHashmap"/>
        /// is synchronized (thread-safe).
        /// </summary>
        /// <value><c>true</c> if access to the <see cref="ServiceEffectHashmap"/> is
        /// synchronized (thread-safe); otherwise, <c>false</c>. The default is <c>false</c>.</value>
        /// <remarks>Please refer to <see cref="Hashtable.IsSynchronized"/> for details.</remarks>

        public bool IsSynchronized {
            get { return this._innerHash.IsSynchronized; }
        }

        #endregion
        #region Item[IExternalSignature]: IServiceEffectSpecification

        /// <summary>
        /// Gets or sets the <see cref="IServiceEffectSpecification"/> value
        /// associated with the specified <see cref="IExternalSignature"/> key.
        /// </summary>
        /// <param name="key">The <see cref="IExternalSignature"/> key
        /// whose value to get or set.</param>
        /// <value>The <see cref="IServiceEffectSpecification"/> value associated with the specified
        /// <paramref name="key"/>. If the specified <paramref name="key"/> is not found,
        /// attempting to get it returns
        /// a null reference,
        /// and attempting to set it creates a new element using the specified
        /// <paramref name="key"/>.</value>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="key"/> is a null reference.</exception>
        /// <exception cref="NotSupportedException">
        /// <para>The property is set and the <see cref="ServiceEffectHashmap"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The property is set, <paramref name="key"/> does not exist in the collection,
        /// and the <b>ServiceEffectHashmap</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="Hashtable.this"/> for details.</remarks>

        public IServiceEffectSpecification this[IExternalSignature key] {
            get {
                return (IServiceEffectSpecification) this._innerHash[key];
            }
            set { this._innerHash[key] = value; }
        }

        #endregion
        #region IDictionary.Item[Object]: Object

        /// <summary>
        /// Gets or sets the value associated with the specified key.
        /// </summary>
        /// <param name="key">The key whose value to get or set.
        /// This argument must be compatible with <see cref="IExternalSignature"/>.</param>
        /// <value>
        /// The value associated with the specified <paramref name="key"/>. If the specified
        /// <paramref name="key"/> is not found, attempting to get it returns
        /// a null reference,
        /// and attempting to set it creates a new element using the specified <paramref name="key"/>.
        /// When set, this value must be compatible with <see cref="IServiceEffectSpecification"/>.
        /// </value>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="key"/> is a null reference.</exception>
        /// <exception cref="InvalidCastException">
        /// <para><paramref name="key"/> is not compatible with <see cref="IExternalSignature"/>.</para>
        /// <para>-or-</para>
        /// <para>The property is set to a value that is not compatible with
        /// <see cref="IServiceEffectSpecification"/>.</para></exception>
        /// <exception cref="NotSupportedException">
        /// <para>The property is set and the <see cref="ServiceEffectHashmap"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The property is set, <paramref name="key"/> does not exist in the collection,
        /// and the <b>ServiceEffectHashmap</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="Hashtable.this"/> for details.</remarks>

        object IDictionary.this[object key] {
            get { return this[(IExternalSignature) key]; }
            set { this[(IExternalSignature) key] = (IServiceEffectSpecification) value; }
        }

        #endregion
        #region Keys: IIExternalSignatureCollection

        /// <summary>
        /// Gets an <see cref="IIExternalSignatureCollection"/> containing
        /// the keys in the <see cref="ServiceEffectHashmap"/>.
        /// </summary>
        /// <value>An <see cref="IIExternalSignatureCollection"/> containing
        /// the keys in the <see cref="ServiceEffectHashmap"/>.</value>
        /// <remarks>Please refer to <see cref="Hashtable.Keys"/> for details.</remarks>

        public IIExternalSignatureCollection Keys {
            get {
                if (this._keyList == null)
                    this._keyList = new KeyList(this);
                return this._keyList;
            }
        }

        #endregion
        #region IDictionary.Keys: ICollection

        /// <summary>
        /// Gets an <see cref="ICollection"/> containing
        /// the keys in the <see cref="ServiceEffectHashmap"/>.
        /// </summary>
        /// <value>An <see cref="ICollection"/> containing
        /// the keys in the <see cref="ServiceEffectHashmap"/>.</value>
        /// <remarks>Please refer to <see cref="Hashtable.Keys"/> for details.</remarks>

        ICollection IDictionary.Keys {
            get { return (ICollection) Keys; }
        }

        #endregion
        #region SyncRoot

        /// <summary>
        /// Gets an object that can be used to synchronize
        /// access to the <see cref="ServiceEffectHashmap"/>.
        /// </summary>
        /// <value>An object that can be used to synchronize
        /// access to the <see cref="ServiceEffectHashmap"/>.</value>
        /// <remarks>Please refer to <see cref="Hashtable.SyncRoot"/> for details.</remarks>

        public object SyncRoot {
            get { return this._innerHash.SyncRoot; }
        }

        #endregion
        #region Values: IIServiceEffectSpecificationCollection

        /// <summary>
        /// Gets an <see cref="IIServiceEffectSpecificationCollection"/> containing
        /// the values in the <see cref="ServiceEffectHashmap"/>.
        /// </summary>
        /// <value>An <see cref="IIServiceEffectSpecificationCollection"/> containing
        /// the values in the <see cref="ServiceEffectHashmap"/>.</value>
        /// <remarks>Please refer to <see cref="Hashtable.Values"/> for details.</remarks>

        public virtual IIServiceEffectSpecificationCollection Values {
            get {
                if (this._valueList == null)
                    this._valueList = new ValueList(this);
                return this._valueList;
            }
        }

        #endregion
        #region IDictionary.Values: ICollection

        /// <summary>
        /// Gets an <see cref="ICollection"/> containing
        /// the values in the <see cref="ServiceEffectHashmap"/>.
        /// </summary>
        /// <value>An <see cref="ICollection"/> containing
        /// the values in the <see cref="ServiceEffectHashmap"/>.</value>
        /// <remarks>Please refer to <see cref="Hashtable.Values"/> for details.</remarks>

        ICollection IDictionary.Values {
            get { return (ICollection) Values; }
        }

        #endregion
        #endregion
        #region Public Methods
        
        public override bool Equals(object other)
        {
	    if (!(other is ServiceEffectHashmap)) return false;
	    if (other == this) return true;
	    ServiceEffectHashmap otherHashmap = (ServiceEffectHashmap)other;
	    return otherHashmap._innerHash.Equals(this._innerHash);
        }
        
        public override int GetHashCode()
        {
           return _innerHash.GetHashCode();
        }
        
        #region Add(IExternalSignature, IServiceEffectSpecification)

        /// <summary>
        /// Adds an element with the specified <see cref="IExternalSignature"/> key and
        /// <see cref="IServiceEffectSpecification"/> value to the <see cref="ServiceEffectHashmap"/>.
        /// </summary>
        /// <param name="key">The <see cref="IExternalSignature"/> key of the element
        /// to add to the <see cref="ServiceEffectHashmap"/>.</param>
        /// <param name="value">The <see cref="IServiceEffectSpecification"/> value of the element
        /// to add to the <see cref="ServiceEffectHashmap"/>.
        /// This argument can be a null reference.
        /// </param>
        /// <exception cref="ArgumentException">
        /// An element with the specified <paramref name="key"/>
        /// already exists in the <see cref="ServiceEffectHashmap"/>.</exception>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="key"/> is a null reference.</exception>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="ServiceEffectHashmap"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>ServiceEffectHashmap</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="Hashtable.Add"/> for details.</remarks>

        public void Add(IExternalSignature key, IServiceEffectSpecification value) {
            this._innerHash.Add(key, value);
        }

        #endregion
        #region IDictionary.Add(Object, Object)

        /// <summary>
        /// Adds an element with the specified key and value
        /// to the <see cref="ServiceEffectHashmap"/>.
        /// </summary>
        /// <param name="key">The key of the element to add to the <see cref="ServiceEffectHashmap"/>.
        /// This argument must be compatible with <see cref="IExternalSignature"/>.</param>
        /// <param name="value">The value of the element to add to the <see cref="ServiceEffectHashmap"/>.
        /// This argument must be compatible with <see cref="IServiceEffectSpecification"/>.
        /// This argument can be a null reference.
        /// </param>
        /// <exception cref="ArgumentException">
        /// An element with the specified <paramref name="key"/>
        /// already exists in the <see cref="ServiceEffectHashmap"/>.</exception>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="key"/> is a null reference.</exception>
        /// <exception cref="InvalidCastException">
        /// <para><paramref name="key"/> is not compatible with <see cref="IExternalSignature"/>.</para>
        /// <para>-or-</para>
        /// <para><paramref name="value"/> is not compatible with <see cref="IServiceEffectSpecification"/>.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="ServiceEffectHashmap"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>ServiceEffectHashmap</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="Hashtable.Add"/> for details.</remarks>

        void IDictionary.Add(object key, object value) {
            Add((IExternalSignature) key, (IServiceEffectSpecification) value);
        }

        #endregion
        #region Clear

        /// <summary>
        /// Removes all elements from the <see cref="ServiceEffectHashmap"/>.
        /// </summary>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="ServiceEffectHashmap"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>ServiceEffectHashmap</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="Hashtable.Clear"/> for details.</remarks>

        public void Clear() {
            this._innerHash.Clear();
        }

        #endregion
        #region Clone

        /// <summary>
        /// Creates a shallow copy of the <see cref="ServiceEffectHashmap"/>.
        /// </summary>
        /// <returns>A shallow copy of the <see cref="ServiceEffectHashmap"/>.</returns>
        /// <remarks>Please refer to <see cref="Hashtable.Clone"/> for details.</remarks>

        public object Clone() {
            ServiceEffectHashmap dictionary = new ServiceEffectHashmap(Tag.Default);
            dictionary._innerHash = (Hashmap) this._innerHash.Clone();
            return dictionary;
        }

        #endregion
        #region Contains(IExternalSignature)

        /// <summary>
        /// Determines whether the <see cref="ServiceEffectHashmap"/>
        /// contains the specified <see cref="IExternalSignature"/> key.
        /// </summary>
        /// <param name="key">The <see cref="IExternalSignature"/> key
        /// to locate in the <see cref="ServiceEffectHashmap"/>.</param>
        /// <returns><c>true</c> if the <see cref="ServiceEffectHashmap"/> contains an element
        /// with the specified <paramref name="key"/>; otherwise, <c>false</c>.</returns>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="key"/> is a null reference.</exception>
        /// <remarks>Please refer to <see cref="Hashtable.Contains"/> for details.</remarks>

        public bool Contains(IExternalSignature key) {
            return this._innerHash.Contains(key);
        }

        #endregion
        #region IDictionary.Contains(Object)

        /// <summary>
        /// Determines whether the <see cref="ServiceEffectHashmap"/> contains the specified key.
        /// </summary>
        /// <param name="key">The key to locate in the <see cref="ServiceEffectHashmap"/>.
        /// This argument must be compatible with <see cref="IExternalSignature"/>.</param>
        /// <returns><c>true</c> if the <see cref="ServiceEffectHashmap"/> contains an element
        /// with the specified <paramref name="key"/>; otherwise, <c>false</c>.</returns>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="key"/> is a null reference.</exception>
        /// <exception cref="InvalidCastException"><paramref name="key"/>
        /// is not compatible with <see cref="IExternalSignature"/>.</exception>
        /// <remarks>Please refer to <see cref="Hashtable.Contains"/> for details.</remarks>

        bool IDictionary.Contains(object key) {
            return Contains((IExternalSignature) key);
        }

        #endregion
        #region ContainsKey

        /// <summary>
        /// Determines whether the <see cref="ServiceEffectHashmap"/>
        /// contains the specified <see cref="IExternalSignature"/> key.
        /// </summary>
        /// <param name="key">The <see cref="IExternalSignature"/> key
        /// to locate in the <see cref="ServiceEffectHashmap"/>.</param>
        /// <returns><c>true</c> if the <see cref="ServiceEffectHashmap"/> contains an element
        /// with the specified <paramref name="key"/>; otherwise, <c>false</c>.</returns>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="key"/> is a null reference.</exception>
        /// <remarks>Please refer to <see cref="Hashtable.ContainsKey"/> for details.</remarks>

        public bool ContainsKey(IExternalSignature key) {
            return this._innerHash.ContainsKey(key);
        }

        #endregion
        #region ContainsValue

        /// <summary>
        /// Determines whether the <see cref="ServiceEffectHashmap"/>
        /// contains the specified <see cref="IServiceEffectSpecification"/> value.
        /// </summary>
        /// <param name="value">The <see cref="IServiceEffectSpecification"/> value
        /// to locate in the <see cref="ServiceEffectHashmap"/>.
        /// This argument can be a null reference.
        /// </param>
        /// <returns><c>true</c> if the <see cref="ServiceEffectHashmap"/> contains an element
        /// with the specified <paramref name="value"/>; otherwise, <c>false</c>.</returns>
        /// <remarks>Please refer to <see cref="Hashtable.ContainsValue"/> for details.</remarks>

        public bool ContainsValue(IServiceEffectSpecification value) {
            return this._innerHash.ContainsValue(value);
        }

        #endregion
        #region CopyTo(IServiceEntry[], Int32)

        /// <summary>
        /// Copies the entire <see cref="ServiceEffectHashmap"/> to a one-dimensional <see cref="Array"/> of
        /// <see cref="IServiceEntry"/> elements, starting at the specified index of the target array.
        /// </summary>
        /// <param name="array">The one-dimensional <see cref="Array"/> that is the destination of the
        /// <see cref="IServiceEntry"/> elements copied from the <see cref="ServiceEffectHashmap"/>.
        /// The <b>Array</b> must have zero-based indexing.</param>
        /// <param name="arrayIndex">The zero-based index in <paramref name="array"/>
        /// at which copying begins.</param>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="array"/> is a null reference.</exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <paramref name="arrayIndex"/> is less than zero.</exception>
        /// <exception cref="ArgumentException"><para>
        /// <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
        /// </para><para>-or-</para><para>
        /// The number of elements in the source <see cref="ServiceEffectHashmap"/> is greater than
        /// the available space from <paramref name="arrayIndex"/> to the end of the destination
        /// <paramref name="array"/>.</para></exception>
        /// <remarks>Please refer to <see cref="Hashtable.CopyTo"/> for details.</remarks>

        public void CopyTo(IServiceEntry[] array, int arrayIndex) {
            this._innerHash.CopyTo(array, arrayIndex);
        }

        #endregion
        #region ICollection.CopyTo(Array, Int32)

        /// <summary>
        /// Copies the entire <see cref="ServiceEffectHashmap"/> to a one-dimensional <see cref="Array"/>,
        /// starting at the specified index of the target array.
        /// </summary>
        /// <param name="array">The one-dimensional <see cref="Array"/> that is the destination of the
        /// <see cref="IServiceEntry"/> elements copied from the <see cref="ServiceEffectHashmap"/>.
        /// The <b>Array</b> must have zero-based indexing.</param>
        /// <param name="arrayIndex">The zero-based index in <paramref name="array"/>
        /// at which copying begins.</param>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="array"/> is a null reference.</exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <paramref name="arrayIndex"/> is less than zero.</exception>
        /// <exception cref="ArgumentException"><para>
        /// <paramref name="array"/> is multidimensional.
        /// </para><para>-or-</para><para>
        /// <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
        /// </para><para>-or-</para><para>
        /// The number of elements in the source <see cref="ServiceEffectHashmap"/> is greater than
        /// the available space from <paramref name="arrayIndex"/> to the end of the destination
        /// <paramref name="array"/>.</para></exception>
        /// <exception cref="InvalidCastException">
        /// The <see cref="IServiceEntry"/> type cannot be cast automatically
        /// to the type of the destination <paramref name="array"/>.</exception>
        /// <remarks>Please refer to <see cref="Hashtable.CopyTo"/> for details.</remarks>

        void ICollection.CopyTo(Array array, int arrayIndex) {
            CheckTargetArray(array, arrayIndex);
            CopyTo((IServiceEntry[]) array, arrayIndex);
        }

        #endregion
        #region GetEnumerator: IIExternalSignatureIServiceEffectSpecificationEnumerator

        /// <summary>
        /// Returns an <see cref="IIExternalSignatureIServiceEffectSpecificationEnumerator"/>
        /// that can iterate through the <see cref="ServiceEffectHashmap"/>.
        /// </summary>
        /// <returns>An <see cref="IIExternalSignatureIServiceEffectSpecificationEnumerator"/>
        /// for the entire <see cref="ServiceEffectHashmap"/>.</returns>
        /// <remarks>Please refer to <see cref="Hashtable.GetEnumerator"/> for details.</remarks>

        public IIExternalSignatureIServiceEffectSpecificationEnumerator GetEnumerator() {
            return new Enumerator(this);
        }

        #endregion
        #region IDictionary.GetEnumerator: IDictionaryEnumerator

        /// <summary>
        /// Returns an <see cref="IDictionaryEnumerator"/> that can
        /// iterate through the <see cref="ServiceEffectHashmap"/>.
        /// </summary>
        /// <returns>An <see cref="IDictionaryEnumerator"/>
        /// for the entire <see cref="ServiceEffectHashmap"/>.</returns>
        /// <remarks>Please refer to <see cref="Hashtable.GetEnumerator"/> for details.</remarks>

        IDictionaryEnumerator IDictionary.GetEnumerator() {
            return (IDictionaryEnumerator) GetEnumerator();
        }

        #endregion
        #region IEnumerable.GetEnumerator: IEnumerator

        /// <summary>
        /// Returns an <see cref="IEnumerator"/> that can
        /// iterate through the <see cref="ServiceEffectHashmap"/>.
        /// </summary>
        /// <returns>An <see cref="IEnumerator"/>
        /// for the entire <see cref="ServiceEffectHashmap"/>.</returns>
        /// <remarks>Please refer to <see cref="Hashtable.GetEnumerator"/> for details.</remarks>

        IEnumerator IEnumerable.GetEnumerator() {
            return (IEnumerator) GetEnumerator();
        }

        #endregion
        #region Remove(IExternalSignature)

        /// <summary>
        /// Removes the element with the specified <see cref="IExternalSignature"/> key
        /// from the <see cref="ServiceEffectHashmap"/>.
        /// </summary>
        /// <param name="key">The <see cref="IExternalSignature"/> key of the element
        /// to remove from the <see cref="ServiceEffectHashmap"/>.</param>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="key"/> is a null reference.</exception>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="ServiceEffectHashmap"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>ServiceEffectHashmap</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="Hashtable.Remove"/> for details.</remarks>

        public void Remove(IExternalSignature key) {
            this._innerHash.Remove(key);
        }

        #endregion
        #region IDictionary.Remove(Object)

        /// <summary>
        /// Removes the element with the specified key
        /// from the <see cref="ServiceEffectHashmap"/>.
        /// </summary>
        /// <param name="key">The key of the element to remove from the <see cref="ServiceEffectHashmap"/>.
        /// This argument must be compatible with <see cref="IExternalSignature"/>.</param>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="key"/> is a null reference.</exception>
        /// <exception cref="InvalidCastException"><paramref name="key"/>
        /// is not compatible with <see cref="IExternalSignature"/>.</exception>
        /// <exception cref="NotSupportedException">
        /// <para>The <see cref="ServiceEffectHashmap"/> is read-only.</para>
        /// <para>-or-</para>
        /// <para>The <b>ServiceEffectHashmap</b> has a fixed size.</para></exception>
        /// <remarks>Please refer to <see cref="Hashtable.Remove"/> for details.</remarks>

        void IDictionary.Remove(object key) {
            Remove((IExternalSignature) key);
        }

        #endregion
        #region Synchronized

        /// <summary>
        /// Returns a synchronized (thread-safe) wrapper
        /// for the specified <see cref="ServiceEffectHashmap"/>.
        /// </summary>
        /// <param name="dictionary">The <see cref="ServiceEffectHashmap"/> to synchronize.</param>
        /// <returns>A synchronized (thread-safe) wrapper around <paramref name="dictionary"/>.</returns>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="dictionary"/> is a null reference.</exception>
        /// <remarks>Please refer to <see cref="Hashtable.Synchronized"/> for details.</remarks>

        public static ServiceEffectHashmap Synchronized(ServiceEffectHashmap dictionary) {
            if (dictionary == null)
                throw new ArgumentNullException("dictionary");

            ServiceEffectHashmap sync = new ServiceEffectHashmap(Tag.Default);
            sync._innerHash = (Hashmap)Hashmap.Synchronized(dictionary._innerHash);
            return sync;
        }

        #endregion
        #endregion
        #region Private Methods
        #region CheckTargetArray

        private void CheckTargetArray(Array array, int arrayIndex) {
            if (array == null)
                throw new ArgumentNullException("array");
            if (array.Rank > 1)
                throw new ArgumentException(
                    "Argument cannot be multidimensional.", "array");

            if (arrayIndex < 0)
                throw new ArgumentOutOfRangeException("arrayIndex",
                    arrayIndex, "Argument cannot be negative.");
            if (arrayIndex >= array.Length)
                throw new ArgumentException(
                    "Argument must be less than array length.", "arrayIndex");

            if (this._innerHash.Count > array.Length - arrayIndex)
                throw new ArgumentException(
                    "Argument section must be large enough for collection.", "array");
        }

        #endregion
        #endregion
        #region Class Enumerator

        private sealed class Enumerator:
            IIExternalSignatureIServiceEffectSpecificationEnumerator, IDictionaryEnumerator {
            #region Private Fields

            private readonly IDictionaryEnumerator _innerEnumerator;

            #endregion
            #region Internal Constructors

            internal Enumerator(ServiceEffectHashmap dictionary) {
                this._innerEnumerator = dictionary._innerHash.GetEnumerator();
            }

            #endregion
            #region Public Properties

            public IServiceEntry Current {
                get { return new IServiceEntry(Key, Value); }
            }

            object IEnumerator.Current {
                get { return this._innerEnumerator.Current; }
            }

            public IServiceEntry Entry {
                get { return new IServiceEntry(Key, Value); }
            }

            DictionaryEntry IDictionaryEnumerator.Entry {
                get { return this._innerEnumerator.Entry; }
            }

            public IExternalSignature Key {
                get { return (IExternalSignature) this._innerEnumerator.Key; }
            }

            object IDictionaryEnumerator.Key {
                get { return this._innerEnumerator.Key; }
            }

            public IServiceEffectSpecification Value {
                get { return (IServiceEffectSpecification) this._innerEnumerator.Value; }
            }

            object IDictionaryEnumerator.Value {
                get { return this._innerEnumerator.Value; }
            }

            #endregion
            #region Public Methods

            public bool MoveNext() {
                return this._innerEnumerator.MoveNext();
            }

            public void Reset() {
                this._innerEnumerator.Reset();
            }

            #endregion
        }

        #endregion
        #region Class KeyList

        [Serializable]
        private sealed class KeyList:
            IIExternalSignatureCollection, ICollection {
            #region Private Fields

            private ServiceEffectHashmap _dictionary;

            #endregion
            #region Internal Constructors

            internal KeyList(ServiceEffectHashmap dictionary) {
                this._dictionary = dictionary;
            }

            #endregion
            #region Public Properties

            public int Count {
                get { return this._dictionary.Count; }
            }

            public bool IsSynchronized {
                get { return this._dictionary.IsSynchronized; }
            }

            public object SyncRoot {
                get { return this._dictionary.SyncRoot; }
            }

            #endregion
            #region Public Methods

            public void CopyTo(IExternalSignature[] array, int arrayIndex) {
                this._dictionary.CheckTargetArray(array, arrayIndex);
                foreach (IServiceEntry pair in this._dictionary)
                    array[arrayIndex++] = pair.Key;
            }

            void ICollection.CopyTo(Array array, int arrayIndex) {
                this._dictionary.CheckTargetArray(array, arrayIndex);
                CopyTo((IExternalSignature[]) array, arrayIndex);
            }

            public IIExternalSignatureEnumerator GetEnumerator() {
                return new KeyEnumerator(this._dictionary);
            }

            IEnumerator IEnumerable.GetEnumerator() {
                return (IEnumerator) GetEnumerator();
            }

            #endregion
        }

        #endregion
        #region Class KeyEnumerator

        [Serializable]
        private sealed class KeyEnumerator:
            IIExternalSignatureEnumerator, IEnumerator {
            #region Private Fields

            private readonly IEnumerator _innerEnumerator;

            #endregion
            #region Internal Constructors

            internal KeyEnumerator(ServiceEffectHashmap dictionary) {
                this._innerEnumerator = dictionary._innerHash.Keys.GetEnumerator();
            }

            #endregion
            #region Public Properties

            public IExternalSignature Current {
                get { return (IExternalSignature) this._innerEnumerator.Current; }
            }

            object IEnumerator.Current {
                get { return this._innerEnumerator.Current; }
            }

            #endregion
            #region Public Methods

            public bool MoveNext() {
                return this._innerEnumerator.MoveNext();
            }

            public void Reset() {
                this._innerEnumerator.Reset();
            }

            #endregion
        }

        #endregion
        #region Class ValueList

        [Serializable]
        private sealed class ValueList:
            IIServiceEffectSpecificationCollection, ICollection {
            #region Private Fields

            private ServiceEffectHashmap _dictionary;

            #endregion
            #region Internal Constructors

            internal ValueList(ServiceEffectHashmap dictionary) {
                this._dictionary = dictionary;
            }

            #endregion
            #region Public Properties

            public int Count {
                get { return this._dictionary.Count; }
            }

            public bool IsSynchronized {
                get { return this._dictionary.IsSynchronized; }
            }

            public object SyncRoot {
                get { return this._dictionary.SyncRoot; }
            }

            #endregion
            #region Public Methods

            public void CopyTo(IServiceEffectSpecification[] array, int arrayIndex) {
                this._dictionary.CheckTargetArray(array, arrayIndex);
                foreach (IServiceEntry pair in this._dictionary)
                    array[arrayIndex++] = pair.Value;
            }

            void ICollection.CopyTo(Array array, int arrayIndex) {
                this._dictionary.CheckTargetArray(array, arrayIndex);
                CopyTo((IServiceEffectSpecification[]) array, arrayIndex);
            }

            public IIServiceEffectSpecificationEnumerator GetEnumerator() {
                return new ValueEnumerator(this._dictionary);
            }

            IEnumerator IEnumerable.GetEnumerator() {
                return (IEnumerator) GetEnumerator();
            }

            #endregion
        }

        #endregion
        #region Class ValueEnumerator

        [Serializable]
        private sealed class ValueEnumerator:
            IIServiceEffectSpecificationEnumerator, IEnumerator {
            #region Private Fields

            private readonly IEnumerator _innerEnumerator;

            #endregion
            #region Internal Constructors

            internal ValueEnumerator(ServiceEffectHashmap dictionary) {
                this._innerEnumerator = dictionary._innerHash.Values.GetEnumerator();
            }

            #endregion
            #region Public Properties

            public IServiceEffectSpecification Current {
                get { return (IServiceEffectSpecification) this._innerEnumerator.Current; }
            }

            object IEnumerator.Current {
                get { return this._innerEnumerator.Current; }
            }

            #endregion
            #region Public Methods

            public bool MoveNext() {
                return this._innerEnumerator.MoveNext();
            }

            public void Reset() {
                this._innerEnumerator.Reset();
            }

            #endregion
        }

        #endregion
    }

    #endregion

}
