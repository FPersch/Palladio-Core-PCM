<%@ CodeTemplate Language="C#" TargetLanguage="C#" Description="Signatures template" %>
<%@ Property Name="ContainedSignatureType" Type="System.String" Category="Context" Description="The type of the signatures in the SignatureList" %>
<%@ Property Name="InterfaceName" Type="System.String" Category="Context" Description="Name of the interface to generate" %>
<%@ Property Name="InterfaceDescription" Type="System.String" Category="Context" Description="Name of the interface to generate" %>

	#region <%= InterfaceName %>
	/// <summary>
	/// An IInterfaceModel is the description of an interface (of a component).
	/// In our case an interface is a set of signatures
	/// which can be somehow related to each other.
	/// </summary>
	public interface <%= InterfaceName %> : ICloneable, IAttributable
	{
		/// <summary>
		/// A list of signatures contained in this <%= InterfaceName %>
		/// </summary>
		<%= ContainedSignatureType %> SignatureList
		{
			get;
		}
		
		/// <summary>
		/// Additional specification data like FSMs, Petri Nets, ....
		/// </summary>
		IAuxiliary<%= InterfaceDescription %>Specification[] AuxiliarySpecifications
		{
			get;
		}
		
		/// <summary>
		/// Add a new specification aspect to this interface, like a protocol spec.
		/// </summary>
		/// <param name="info">Additional specification data</param>
		void AddAuxiliarySpecification(IAuxiliary<%= InterfaceDescription %>Specification info);

		/// <summary>
		/// Get the auxiliary information of a given type
		/// </summary>
		/// <param name="type">Type of the additional information to retrieve</param>
		/// <returns>The requested information or an exception if the information is not
		/// available</returns>
		IAuxiliary<%= InterfaceDescription %>Specification GetAuxiliarySpecification(System.Type type);
	}
	#endregion
