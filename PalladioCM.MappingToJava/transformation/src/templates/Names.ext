import de::uka::ipd::sdq::pcm::core::entity;
import de::uka::ipd::sdq::pcm::repository;
import de::uka::ipd::sdq::pcm::system;

String stamp(entity::Entity e):
	"generated from model element: " + e.entityName + " [" + e.id + "]";

String stamp(repository::Repository r):
	"generated from the PCM repository: " + r.repositoryName + 
	"\n" + r.repositoryDescription;

// reference to component that implements the required interface
String reqRole(repository::Interface requiredI):
	"req" + requiredI.entityName;

// prevents oAW's compiler warning
String reqRole(emf::EObject o):
	"req";

String innerComponent(repository::ChildComponentContext context, repository::Interface interface):
	context.entityName + "_" + interface.entityName;

String className(repository::ProvidesComponentType c, repository::Interface i):
	i.entityName + "Port";

String className(system::SystemRequiredRole c, repository::Interface i):
	i.entityName + "Port";

String repository(repository::ProvidesComponentType c):
	c.eContainer.repositoryName.toLowerCase();

String repository(repository::Interface i):
	i.eContainer.repositoryName.toLowerCase();

// private
String subPackage(repository::Interface i):
	repository(i);

// private
String subPackage(repository::ProvidesComponentType c):
	repository(c) + "." + c.entityName.toLowerCase();

// private
String subDir(repository::ProvidesComponentType c):
	repository(c) + "/" + c.entityName.toLowerCase();

// Java-conform names
String fullQualifiedName(String basePackage, repository::Interface i):
	basePackage + "." + repository(i) + "." + i.entityName;

String packageName(String basePackage, repository::Interface i):
	basePackage + "." + subPackage(i);

String packageName(String basePackage, repository::ProvidesComponentType c):
	basePackage + "." + subPackage(c);

String fullQualifiedName(String basePackage, repository::ProvidesComponentType c):
	basePackage + "." + subPackage(c) + "." + c.entityName;

String fullQualifiedName(String basePackage, repository::ProvidesComponentType c, repository::Interface provided):
	basePackage + "." + subPackage(c) + provided.entityName + "Port";

String fqnAbstractClass(String basePackage, repository::ProvidesComponentType c):
	basePackage + "." + subPackage(c) + ".Abstract" + c.entityName;

// file and directory names
String fullQualifiedPath(String basePackage, repository::Interface i):
	basePackage + "/" + repository(i) + "/" + i.entityName + ".java";

String fullQualifiedPath(String basePackage, repository::ProvidesComponentType c, repository::Interface provided):
	basePackage + "/" + subDir(c) + "/" + provided.entityName + "Port" + ".java";

String fullQualifiedPath(String basePackage, repository::ProvidesComponentType c):
	basePackage + "/" + subDir(c) + "/" + c.entityName + ".java";

String fqpContext(String basePackage, repository::ProvidesComponentType c):
	basePackage + "/" + subDir(c) + "/" + c.entityName + "Context.java";

String abstractClass(String basePackage, repository::ProvidesComponentType c):
	basePackage + "/" + subDir(c) + "/Abstract" + c.entityName + ".java";

String beanClass(String basePackage, repository::ProvidesComponentType c, repository::Interface provided):
	basePackage + "/" + subDir(c) + "/" + provided.entityName + "Port" + "Bean.java";

String importFullPackage(String basePackage, repository::ProvidesComponentType c):
	"import " + basePackage + "." + subPackage(c) + ".*;";

String testName(String basePackage, repository::ProvidesComponentType c, repository::Interface provided):
	basePackage + "_" + c.entityName.toLowerCase() + "_" + provided.entityName;

// type hierarchie of PCM Components
String componentType(repository::ProvidesComponentType c):
	"runtime.util.ComponentType.BASIC";

String componentType(repository::CompositeComponent c):
	"runtime.util.ComponentType.COMPOSITE";

String componentType(system::SystemRequiredRole req):
	"runtime.util.ComponentType.BASIC";