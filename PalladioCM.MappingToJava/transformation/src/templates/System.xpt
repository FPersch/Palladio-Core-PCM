«EXTENSION templates::Debug»
«EXTENSION templates::Names»
«EXTENSION templates::SystemNames»
«EXTENSION templates::Todo»

«IMPORT templates»
«IMPORT de::uka::ipd::sdq::pcm::system»
«IMPORT de::uka::ipd::sdq::pcm::assembly»
«IMPORT de::uka::ipd::sdq::pcm::repository»

«REM»
f: PCM sytem -> complete system including jar-files 
				and deployment-scripts
«ENDREM»
«DEFINE main(String modelName, String basePackage) FOR system::System»
	«REM»	located on (Server - Local) JVM
			ports are used (SINGLE - MULTI) 
		move to properties- or some .ext-file
		and add parameters to this rule
	«ENDREM»
	«EXPAND DependencyInjection::glassfish(basePackage, "Local", "SINGLE") FOR this»
	«EXPAND ServiceLocator::file(basePackage, "Local", "SINGLE") FOR this»
	«EXPAND ResourceManager::file(basePackage) FOR this»
	«EXPAND gateway(basePackage) FOREACH systemRequiredRole_System»
	«EXPAND SkriptAnt::deploy(modelName, basePackage) FOR allocation_System»
	«REM» can be used if no Usagemodel::scenario is defined «ENDREM»
	«EXPAND Test::client(basePackage) FOR this»
«ENDDEFINE»

«REM» mapping for System Required Roles
f: Component -> ( interface (part of the plattform),
				abstract class, 
				implementation class <entityName>,
				enterprise java bean (optional) )
with delegation from the classes 
<entityName><providedInterface> to <entityName>
«ENDREM»
«DEFINE gateway(String basePackage) FOR system::SystemRequiredRole»
	«LET packageName(basePackage, this) AS package»
	«LET className(this, interface_SystemRequiredRole) AS className»
	«LET fullQualifiedName(basePackage, this) AS fqn»
		«FILE abstractClass(basePackage, this)»
			package «package»;

			/** «REM» informal description, no java inheritance «ENDREM»
			 * implements «fullQualifiedName(basePackage, interface_SystemRequiredRole)»
			 * this class has not a generated body
			 */
			public abstract class Abstract«entityName» extends runtime.ComponentInstance
			{
			}
		«ENDFILE»

		«REM» implementation class of a System Required Role «ENDREM»
		«FILE implClass(basePackage, this)»
			package «package»;

			/**
			 * this class does not have any generated tasks
			 * implementation is in the port class
			 * but you can insert code here and call it from the ports
			 */
			public class «entityName» extends Abstract«entityName»
			{
				«classStub()»

				/**
				 * standard constructor is empty
				 */
				public «entityName»() {
					//empty
				}

				/**
				 * Required interfaces are not set, as this class represents a facade 
				 * to other systems. 
				 */
				public void initRequiredInterfaces(String id) {
					//empty
				}
			}
		«ENDFILE»

«REM» begin rule_contextClass for a Component «ENDREM»
		«REM» f: Component -> ([..], [..], context class «entityName»Context) 
		one Provided Role, no Required Roles
		«ENDREM»
		«FILE fqpContext(basePackage, this)»
			package «package»;

			import java.util.*;
			import runtime.util.ComponentType;

			/** «REM» subclass that is the only implementation for the abstract class «ENDREM»
			 * «stamp(this)»
			 * Context of the component «entityName»
			 */
			public class «entityName»Context extends runtime.ComponentContext
			{
				/**
				 * shared by all instances
				 * but super class defines similar variables as protected
				 */
				private final static String m_packageName = "«package»";
				private final static String m_className = "«entityName»";
				private final static ComponentType m_ComponentType = «componentType(this)»;
				private	static Collection<Class> m_providedInterfaces = new LinkedList<Class>();
				private	static Collection<Class> m_requiredInterfaces = new LinkedList<Class>();
				static { // constructor
					m_providedInterfaces.add(«fullQualifiedName(basePackage, interface_SystemRequiredRole)».class);
				}

				public «entityName»Context(String contextId) {
					super(m_packageName, m_className, m_ComponentType, contextId);
				}
			}
		«ENDFILE»
«REM» end rule_contextClass for a Component «ENDREM»

		«REM» port of a System Required Role «ENDREM»
		«FILE fullQualifiedPath(basePackage, this)»
			package «package»;

			import org.jboss.logging.*;
			/**
			 * This class must be implemented as an gateway to other systems. 
			 * Insert additional, manual code here or in the class {@link «entityName»}
			 * In contrast to other ports, the implementation is provided 
			 * in this class to avoid one method call. 
			 */
			public class «className» extends runtime.ComponentPort implements «fullQualifiedName(basePackage, interface_SystemRequiredRole)»
			{
			protected Logger logger = Logger.getLogger(this.getClass());
			/**
			 * reference to "implementation class", just for consistent usage
			 */
			protected transient «entityName» component;

			«EXPAND Util::manualCode(package + "." + className)»

			/**
			 * standard constructor is empty
			 */
			public «className»() {
				//empty
			}

			@Override
			public void setComponentInstance(runtime.ComponentInstance impl) {
				component = («fqn») impl;
			}

			«EXPAND Method::provider(fqn) FOR this»
			}
		«ENDFILE»
		
		«REM» call template for the EJB implementation 
		J2EE Version 5 & EJB Version 3
		can be substituted by other technologies
		«ENDREM»
		«EXPAND Bean::Port(basePackage) FOR this»
	«ENDLET»
	«ENDLET»
	«ENDLET»
«ENDDEFINE»