import de.fzi.se.validation.effort.MathFunctionsLibrary;
import ProbabilityLib;

modeltype PCM_SEFF uses 'http://sdq.ipd.uka.de/PalladioComponentModel/SEFF/4.0';
modeltype EER uses 'http://se.fzi.de/ValidationEffortEstimation/0.5';

transformation behaviour2CRelaxedBasicPathTestsEffortEstimation(in inbehaviour : PCM_SEFF, 
									      			  out outdesc : EER) 
access library ProbabilityLib();

main() {
	log('RD-SEFF to EffortEstimationResult (CRelaxedBasicPathTests) transformation started.');
	inbehaviour.objects()[ResourceDemandingBehaviour]->map createEffortEstimation();
	log('RD-SEFF to EffortEstimationResult (CSTPTests) transformation finished.');
}

mapping ResourceDemandingBehaviour::createEffortEstimation() : EffortEstimationResult {
	log('Processing ' + self.metaClassName() + ' ' + self.id + ' ...');
	alpha := 0.5; // TODO: confidence?
	var n : Integer = 5; // TODO: configuration
	numberTestcases := self.CRelaxedBasicPathTests(alpha);
	resourceDemandingBehaviour := self;
}


query ResourceDemandingBehaviour::CRelaxedBasicPathTests(in confidence : Real) : Integer {
	var required : Integer = 1;
	self.steps_Behaviour->select(a | a.oclIsKindOf(AbstractAction))->forEach(action) {
		var altRequired = 0;
		altRequired := altRequired + action.getEffort(confidence);
		required := required * altRequired;
	};
	return required;
}

helper AbstractAction::getEffort(in confidence : Real) : Integer {
	return 1;
}

helper BranchAction::getEffort(in confidence : Real) : Integer {
	var r : Integer; // result
	self.branches_Branch->forEach(branch) {
		if (branch.oclIsKindOf(GuardedBranchTransition)) then {
			r := 1.max(branch.branchBehaviour_BranchTransition.CRelaxedBasicPathTests(confidence));
		} else { // ProbabilisticBranchCondition
			var probBranch : ProbabilisticBranchTransition = branch.oclAsType(ProbabilisticBranchTransition);
			r := 1.max(branch.branchBehaviour_BranchTransition.CRelaxedBasicPathTests(confidence));
			r := r * MinRequiredTests(probBranch.branchProbability, confidence);
		} endif;
	};
	return r;
}

helper LoopAction::getEffort(in confidence : Real) : Integer {
	var probFreqZero : Real = self.iterationCount_LoopAction.expression.ProbabilityZero();
	var r : Integer = MinRequiredTests(probFreqZero, confidence);
	var p : Integer = self.bodyBehaviour_Loop.CRelaxedBasicPathTests(confidence);
	p = p * MinRequiredTests(1.0 - probFreqZero, confidence);
	r = r + p;

	return r;
}

helper ForkAction::getEffort(in confidence : Real, in n : Integer) : Integer {
	var r : Integer = 1-self.asynchronousForkedBehaviours_ForkAction->size();
	self.asynchronousForkedBehaviours_ForkAction->forEach(fb) {
		r = r + fb.CRelaxedBasicPathTests(confidence);
	};
	return r;
}
