import de.fzi.se.validation.effort.MathFunctionsLibrary;
import ProbabilityLib;
import behaviour2CSimpleConditionTestsEffortEstimationResult;

modeltype PCM_SEFF uses 'http://sdq.ipd.uka.de/PalladioComponentModel/SEFF/4.0';
modeltype EER uses 'http://se.fzi.de/ValidationEffortEstimation/0.5';

transformation behaviour2CConditionDecisionTestsEffortEstimation(in inbehaviour : PCM_SEFF, 
									      			  inout outdesc : EER) 
access library ProbabilityLib();

main() {
	log('RD-SEFF to EffortEstimationResult (CConditionDecisionTests) transformation started.');
	inbehaviour.objects()[EffortEstimationResult]->map createEffortEstimation(inbehaviour);
	log('RD-SEFF to EffortEstimationResult (CConditionDecisionTests) transformation finished.');
}

mapping inout EffortEstimationResult::createEffortEstimation(in behaviour : PCM_SEFF) {
	log('Estimate started for targetId=' + self.targetId + ', alpha=' + self.alpha.toString());
	alpha := self.alpha;
	targetId := self.targetId;
	resourceDemandingBehaviour := behaviour.objects()[ResourceDemandingBehaviour]->selectOne(b : ResourceDemandingBehaviour | b.id = targetId);
	numberTestcases := resourceDemandingBehaviour.CSimpleConditionTests(alpha);
	log('Estimate complete. numberTestcases=' + self.numberTestcases.toString());
}
