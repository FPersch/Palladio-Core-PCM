import de.fzi.se.validation.effort.MathFunctionsLibrary;
import ProbabilityLib;

modeltype PCM_SEFF uses 'http://sdq.ipd.uka.de/PalladioComponentModel/SEFF/4.0';
modeltype EER uses 'http://se.fzi.de/ValidationEffortEstimation/SPT/0.5';

transformation behaviour2CSTPTestsEffortEstimation(in inbehaviour : PCM_SEFF, 
									      			  inout outdesc : EER) 
access library ProbabilityLib();

main() {
	log('RD-SEFF to SPTEffortEstimationResult (CSTPTests) transformation started.');
	inbehaviour.objects()[SPTEffortEstimationResult]->map createEffortEstimation(inbehaviour);
	log('RD-SEFF to SPTEffortEstimationResult (CSTPTests) transformation finished.');
}
mapping inout SPTEffortEstimationResult::createEffortEstimation(in behaviour : PCM_SEFF) {
	log('Estimate started for targetId=' + self.targetId + ', alpha=' + self.alpha.toString());
	alpha := self.alpha;
	targetId := self.targetId;
	resourceDemandingBehaviour := behaviour.objects()[ResourceDemandingBehaviour]->selectOne(b : ResourceDemandingBehaviour | b.id = targetId);
	n := self.n;
	numberTestcases := resourceDemandingBehaviour.CSPTTests(alpha, n);
	log('Estimate complete. numberTestcases=' + self.numberTestcases.toString());
}

query ResourceDemandingBehaviour::CSPTTests(in confidence : Real, in n : Integer) : Integer {
	var required : Integer = 1;
	self.steps_Behaviour->select(a | a.oclIsKindOf(AbstractAction))->forEach(action) {
		var altRequired = 0;
		altRequired := altRequired + action.getEffort(confidence, n);
		required := required * altRequired;
	};
	return required;
}

helper AbstractAction::getEffort(in confidence : Real, in n : Integer) : Integer {
	return 1;
}

helper BranchAction::getEffort(in confidence : Real, in n : Integer) : Integer {
	var r : Integer; // result
	self.branches_Branch->forEach(branch) {
		if (branch.oclIsKindOf(GuardedBranchTransition)) then {
			r := 1.max(branch.branchBehaviour_BranchTransition.CSPTTests(confidence, n));
		} else { // ProbabilisticBranchCondition
			var probBranch : ProbabilisticBranchTransition = branch.oclAsType(ProbabilisticBranchTransition);
			r := 1.max(branch.branchBehaviour_BranchTransition.CSPTTests(confidence, n));
			r := r * MinRequiredTests(probBranch.branchProbability, confidence);
		} endif;
	};
	return r;
}

helper LoopAction::getEffort(in confidence : Real, in n : Integer) : Integer {
	var probFreqZero : Real = self.iterationCount_LoopAction.expression.ProbabilityZero();
	var r : Integer = MinRequiredTests(probFreqZero, confidence);
	var probFreqK : Real;
	Set {1..n}->forEach(k) {
		r = r + self.bodyBehaviour_Loop.CSPTTests(confidence, n);
		probFreqK := self.iterationCount_LoopAction.expression.Probability(k);
		r = r * MinRequiredTests(probFreqK, confidence);
	};

	return r;
}

helper ForkAction::getEffort(in confidence : Real, in n : Integer) : Integer {
	var r : Integer = 1-self.asynchronousForkedBehaviours_ForkAction->size();
	self.asynchronousForkedBehaviours_ForkAction->forEach(fb) {
		r = r + fb.CSPTTests(confidence, n);
	};
	self.synchronisingBehaviours_ForkAction->forEach(fb) {
		fb.synchronousForkedBehaviours_SynchronisationPoint->forEach(b) {
			r := r + b.CSPTTests(confidence, n);
		};
	};
	return r;
}
