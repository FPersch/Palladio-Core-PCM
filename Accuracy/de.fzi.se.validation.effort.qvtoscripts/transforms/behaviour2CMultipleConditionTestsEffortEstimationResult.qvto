import de.fzi.se.validation.effort.MathFunctionsLibrary;
import ProbabilityLib;

modeltype PCM_SEFF uses 'http://sdq.ipd.uka.de/PalladioComponentModel/SEFF/4.0';
modeltype EER uses 'http://se.fzi.de/ValidationEffortEstimation/0.5';

transformation behaviour2CMultipleConditionTestsEffortEstimation(in inbehaviour : PCM_SEFF,
									      			  inout outdesc : EER);

main() {
	log('RD-SEFF to EffortEstimationResult (CMultipleConditionTests) transformation started.');
	outdesc.objects()[EffortEstimationResult]->map createEffortEstimation(inbehaviour);
	log('RD-SEFF to EffortEstimationResult (CMultipleConditionTests) transformation finished.');
}

mapping inout EffortEstimationResult::createEffortEstimation(in behaviour : PCM_SEFF) {
	log('Estimate started for targetId=' + self.targetId + ', alpha=' + self.alpha.toString());
	alpha := self.alpha;
	targetId := self.targetId;
	resourceDemandingBehaviour := behaviour.objects()[ResourceDemandingBehaviour]->selectOne(b : ResourceDemandingBehaviour | b.id = targetId);
	assert(resourceDemandingBehaviour != null) with log ('Could not find the ResourceDemandingBehaviour with the id specified in the targetId of the configuration. targetId=' + targetId);
	numberTestcases := resourceDemandingBehaviour.CMultipleConditionTests(alpha);
	log('Estimate complete. numberTestcases=' + self.numberTestcases.toString());
}

query ResourceDemandingBehaviour::CMultipleConditionTests(in confidence : Real) : Integer {
	log('Processing ResourceDemandingBehaviour with id=' + self.id);
	var required : Integer = 0;
	var atLeastOnce : Boolean = false;
	var testsForAction : Integer = 0;
	self.steps_Behaviour->select(a | a.oclIsKindOf(AbstractAction))->forEach(action) {
		testsForAction := action.getEffort(confidence);
		required := required + testsForAction - 1.min(required).min(testsForAction);
		if(testsForAction > 0) then {
			atLeastOnce := true;
		} endif;
	};
	if (required = 0 and atLeastOnce = true) then {
		required := 1;
	} endif;
	log('Processing ResourceDemandingBehaviour with id=' + self.id + ' requires ' + required.toString() + ' tests');
	return required;
}

helper AbstractAction::getEffort(in confidence : Real) : Integer {
	return 1;
}

helper BranchAction::getEffort(in confidence : Real) : Integer {
	var r : Integer = 0; // result
	self.branches_Branch->forEach(branch) {
		if (branch.oclIsKindOf(GuardedBranchTransition)) then {
			var guarded : GuardedBranchTransition = branch.oclAsType(GuardedBranchTransition);
			r := r + (pow(2, guarded.branchCondition_GuardedBranchTransition.expression.NumberOfConditionAtoms())).max(branch.branchBehaviour_BranchTransition.CMultipleConditionTests(confidence));
		} else { // ProbabilisticBranchCondition
			var probBranch : ProbabilisticBranchTransition = branch.oclAsType(ProbabilisticBranchTransition);
			log('prob=' + probBranch.branchProbability.toString() + ',name=' + probBranch.entityName);
			r := r + 1.max( branch.branchBehaviour_BranchTransition.CMultipleConditionTests(confidence) * MinRequiredTests(probBranch.branchProbability, confidence) );
		} endif;
	};
	return r;
}

helper LoopAction::getEffort(in confidence : Real) : Integer {
	var r : Integer = self.bodyBehaviour_Loop.CMultipleConditionTests(confidence);
	r := r * self.iterationCount_LoopAction.expression.getNumberTestsNonZero(confidence);
	return r;
}

helper ForkAction::getEffort(in confidence : Real) : Integer {
	var r : Integer = 0;
	self.asynchronousForkedBehaviours_ForkAction->forEach(fb) {
		r := r + fb.CMultipleConditionTests(confidence);
	};
	self.synchronisingBehaviours_ForkAction->forEach(fb) {
		fb.synchronousForkedBehaviours_SynchronisationPoint->forEach(b) {
			r := r + b.CMultipleConditionTests(confidence);
		};
	};
	return r;
}