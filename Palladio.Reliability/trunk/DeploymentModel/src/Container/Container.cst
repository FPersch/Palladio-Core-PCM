<%@ CodeTemplate Language="C#" TargetLanguage="C#" Description="Element Container Template" %>
<%@ Property Name="ContainerName" Type="System.String" Category="Context" Description="Name of the container." %>
<%@ Property Name="ConnectionName" Type="System.String" Category="Context" Description="Name of the connection." %>
<%@ Property Name="ElementType" Type="System.String" Category="Context" Description="Type of the contained elements." %>


	#region I<%= ConnectionName %>
	
	/// <summary>
	/// </summary>
	public interface I<%= ConnectionName %>
	{
		<%= ElementType %> Source { get; set; }
		<%= ElementType %> Destination { get; set; }
	}	
	
	#endregion	
	#region <%= ConnectionName %>
	
	/// <summary>
	/// </summary>
	internal class <%= ConnectionName %> : I<%= ConnectionName %>
	{
		private <%= ElementType %> source;
		private <%= ElementType %> destination;

		public <%= ElementType %> Source
		{
			get { return source; }
			set { source = value; }
		}

		public <%= ElementType %> Destination
		{
			get { return destination; }
			set { destination = value; }
		}

		public <%= ConnectionName %>()
		{
			source = destination = null;
		}

		public <%= ConnectionName %>(<%= ElementType %> source, <%= ElementType %> destination)
		{
			this.source = source;
			this.destination = destination;
		}
	}
	#endregion

	#region I<%= ContainerName %>

	public delegate void <%= ElementType %>AddedEventHandler( object sender, <%= ElementType %>AddedEventArgs e);
	public delegate void <%= ElementType %>RemovedEventHandler( object sender, <%= ElementType %>RemovedEventArgs e);

	/// <summary>
	/// </summary>
	public interface I<%= ContainerName %> : ICloneable
	{
		event <%= ElementType %>AddedEventHandler ElementAdded;
		event <%= ElementType %>RemovedEventHandler ElementRemoved;

		<%= ElementType %>[] Elements { get; }

		<%= ElementType %>[] Get(string name);
		<%= ElementType %> Get(IIdentifier id);

		bool Contains(string name);
		bool Contains(IIdentifier id);
		bool Contains(<%= ElementType %> element);

		I<%= ConnectionName %>[] Connections { get; }

		void Add(params <%= ElementType %>[] elements);

		void Remove(params string[] names);
		void Remove(params IIdentifier[] ids);
		void Remove(params <%= ElementType %>[] elements);
	}
	
	#endregion	
	#region <%= ContainerName %>WithConnections

	/// <summary>
	/// </summary>
	public interface I<%= ContainerName %>WithConnections : I<%= ContainerName %>
	{
		void AddConnections(params I<%= ConnectionName %>[] connections);
		void RemoveConnections(params I<%= ConnectionName %>[] connections);	

		bool ContainsConnection(I<%= ConnectionName %> connection);

		I<%= ConnectionName %>[] GetIncomingConnections(<%= ElementType %> element);
		I<%= ConnectionName %>[] GetOutgoingConnections(<%= ElementType %> element);
		<%= ElementType %>[] GetPredecessors(<%= ElementType %> element);
		<%= ElementType %>[] GetSuccessors(<%= ElementType %> element);
	}	
		
	#endregion	
	#region <%= ContainerName %>
	/// <summary>
	/// </summary>
	public class <%= ContainerName %> : I<%= ContainerName %>WithConnections
	{
		private ElementDataset elementDataset;
		private long nextElementID;
		private long nextConnectionID;
		private Hashmap elementHash;
		private Hashmap connectionHash;

		public <%= ContainerName %>()
		{
			elementDataset = new ElementDataset();
			nextElementID = 1;
			elementHash = new Hashmap();

			nextConnectionID = 1;
			connectionHash = new Hashmap();
		}

		protected <%= ContainerName %>(<%= ContainerName %> container)
		{
			elementDataset = container.elementDataset.Clone() as ElementDataset;
			elementDataset.Merge(container.elementDataset);
			nextElementID = container.nextElementID;
			elementHash = container.elementHash.Clone() as Hashmap;

			nextConnectionID = container.nextConnectionID;
			connectionHash = container.connectionHash as Hashmap;
			
			if (container.ElementAdded != null)
				ElementAdded = container.ElementAdded.Clone() as <%= ElementType %>AddedEventHandler;
			if (container.ElementRemoved != null)
				ElementRemoved = container.ElementRemoved.Clone() as <%= ElementType %>RemovedEventHandler;
		}

		public event <%= ElementType %>AddedEventHandler ElementAdded;
		public event <%= ElementType %>RemovedEventHandler ElementRemoved;

		public <%= ElementType %>[] Elements
		{
			get
			{
				<%= ElementType %>[] elements = new <%= ElementType %>[elementHash.Values.Count];
				elementHash.Values.CopyTo(elements, 0);
				return elements;
			}
		}

		public void Add(params <%= ElementType %>[] elements)
		{
			foreach (<%= ElementType %> element in elements)
			{
				if (Contains(element))
					throw new ApplicationException("Element '"+ element + "' is already in the container!");
				long id = nextElementID++;
				elementDataset.ElementTable.AddElementTableRow(id, element.Name, element.ID.ToString());
				elementHash[id] = element;
				OnElementAdded(element);
			}
		}

		public <%= ElementType %>[] Get(string name)
		{
			Vector result = SelectElements("Name = '" + name + "'");
			if (result.Count < 1)
				throw new ApplicationException("No element  with name '"+name+"' found!");
			return (<%= ElementType %>[]) result.ToArray(typeof(<%= ElementType %>));
		}

		public <%= ElementType %> Get(IIdentifier id)
		{
			Vector result = SelectElements("Identifier = '" + id.ToString() + "'");
			if (result.Count < 1)
				throw new ApplicationException("No element  with ID '"+id+"' found!");
			if (result.Count > 1)
				throw new ApplicationException("Multiple results found for identifier '" + id.ToString() + "'.");
			return (<%= ElementType %>) result[0];
		}

		public <%= ElementType %> Get(<%= ElementType %> element)
		{
			Vector result = SelectElements("(Identifier = '" + element.ID.ToString() + "') AND (Name = '" + element.Name + "')");
			if (result.Count < 1)
				return null;
			if (result.Count > 1)
				throw new ApplicationException("Multiple results found for identifier '" + element.ID.ToString() + "' and name '" + element.Name + "'.");
			return (<%= ElementType %>) result[0];
		}

		public void Remove(params <%= ElementType %>[] elements)
		{
			foreach (<%= ElementType %> element in elements)
			{
				RemoveElements("(Identifier = '" + element.ID.ToString() + "') AND (Name = '" + element.Name + "')");
			}
		}

		public void Remove(params string[] names)
		{
			foreach (string name in names)
			{
				RemoveElements("Name = '" + name + "'");
			}
		}

		public void Remove(params IIdentifier[] ids)
		{
			foreach (IIdentifier id in ids)
			{
				RemoveElements("Identifier = '" + id.ToString() + "'");
			}
		}



		public I<%= ConnectionName %>[] Connections
		{
			get
			{
				I<%= ConnectionName %>[] connections = new I<%= ConnectionName %>[connectionHash.Values.Count];
				connectionHash.Values.CopyTo(connections, 0);
				return connections;
			}
		}

		public bool ContainsConnection(I<%= ConnectionName %> connection)
		{
			long sourceID = GetElementID(connection.Source);
			long destinationID = GetElementID(connection.Destination);
			Vector connections = SelectConnections("(Source = "+ sourceID +") AND (Destination = " + destinationID+")");
			return connections.Count > 0;
		}

		public bool Contains(string name)
		{
			Vector result = SelectElements("Name = '" + name + "'");
			if (result.Count < 1)
				return false;
			return true;
		}

		public bool Contains(IIdentifier id)
		{
			Vector result = SelectElements("Identifier = '" + id.ToString() + "'");
			if (result.Count < 1)
				return false;
			return true;
		}

		public bool Contains(<%= ElementType %> element)
		{
			Vector result = SelectElements("(Identifier = '" + element.ID.ToString() + "') AND (Name = '" + element.Name + "')");
			if (result.Count < 1)
				return false;
			return true;
		}

		public I<%= ConnectionName %>[] GetIncomingConnections(<%= ElementType %> element)
		{
			long destinationID = GetElementID(element);
			Vector connections = SelectConnections("Destination = " + destinationID);
			return (I<%= ConnectionName %>[])connections.ToArray(typeof(I<%= ConnectionName %>));
		}

		public I<%= ConnectionName %>[] GetOutgoingConnections(<%= ElementType %> element)
		{
			long sourceID = GetElementID(element);
			Vector connections = SelectConnections("Source = " + sourceID);
			return (I<%= ConnectionName %>[])connections.ToArray(typeof(I<%= ConnectionName %>));
		}

		public <%= ElementType %>[] GetPredecessors(<%= ElementType %> element)
		{
			I<%= ConnectionName %>[] incoming = GetIncomingConnections(element);
			Set predecessors = new Set();
			foreach (I<%= ConnectionName %> connection in incoming)
			{
				predecessors.Add(connection.Source);
			}
			return (<%= ElementType %>[])predecessors.ToArray(typeof(<%= ElementType %>));
		}

		public <%= ElementType %>[] GetSuccessors(<%= ElementType %> element)
		{
			I<%= ConnectionName %>[] outgoing = GetOutgoingConnections(element);
			Set successors = new Set();
			foreach (I<%= ConnectionName %> connection in outgoing)
			{
				successors.Add(connection.Destination);
			}
			return (<%= ElementType %>[])successors.ToArray(typeof(<%= ElementType %>));
		}

		public void AddConnections(params I<%= ConnectionName %>[] connections)
		{
			foreach (I<%= ConnectionName %> connection in connections)
			{
				long sourceID = GetElementID(connection.Source);
				long destinationID = GetElementID(connection.Destination);
				long id = nextConnectionID++;
				elementDataset.ConnectionTable.AddConnectionTableRow(id, sourceID, destinationID);
				connectionHash[id] = connection;
			}
		}

		public void RemoveConnections(params I<%= ConnectionName %>[] connections)
		{
			foreach (I<%= ConnectionName %> connection in connections)
			{
				try
				{
					long sourceID = GetElementID(connection.Source);
					long destinationID = GetElementID(connection.Destination);
					RemoveConnection("(Source = " + sourceID + ") AND (Destination = "+destinationID+")");
				}
				catch( ApplicationException) {}
			}
		}

		private long GetElementID(<%= ElementType %> element)
		{
			ElementDataset.ElementTableRow[] rows = (ElementDataset.ElementTableRow[])
				elementDataset.ElementTable.Select("(Identifier = '" + element.ID.ToString() + "') AND (Name = '" + element.Name + "')");
			if (rows.Length > 0)
			{
				return rows[0].ID;
			}
			throw new ApplicationException("Element '" + element.ToString() + "' not found!");
		}

		internal void RemoveElements(string filterExpression)
		{
			ElementDataset.ElementTableRow[] rows = (ElementDataset.ElementTableRow[])
				elementDataset.ElementTable.Select(filterExpression);
			foreach (ElementDataset.ElementTableRow row in rows)
			{
				elementHash.Remove(row.ID);
				elementDataset.ElementTable.RemoveElementTableRow(row);
			}
			OnElementRemoved(filterExpression);
		}

		private Vector SelectElements(string filterExpression)
		{
			Vector result = new Vector();
			ElementDataset.ElementTableRow[] rows = (ElementDataset.ElementTableRow[]) elementDataset.ElementTable.Select(filterExpression);
			foreach (ElementDataset.ElementTableRow row in rows)
			{
				result.Add(elementHash[row.ID]);
			}
			return result;
		}

		private void RemoveConnection(string filterExpression)
		{
			ElementDataset.ConnectionTableRow[] rows = (ElementDataset.ConnectionTableRow[])
				elementDataset.ConnectionTable.Select(filterExpression);
			if (rows.Length > 0)
			{
				connectionHash.Remove(rows[0].ID);
				elementDataset.ConnectionTable.RemoveConnectionTableRow(rows[0]);
			}
		}

		private Vector SelectConnections(string filterExpression)
		{
			Vector result = new Vector();
			ElementDataset.ConnectionTableRow[] rows = (ElementDataset.ConnectionTableRow[]) 
				elementDataset.ConnectionTable.Select(filterExpression);
			foreach (ElementDataset.ConnectionTableRow row in rows)
			{
				result.Add(connectionHash[row.ID]);
			}
			return result;
		}

		protected virtual void OnElementAdded(<%= ElementType %> element)
		{
				if (ElementAdded != null)
				{
					ElementAdded(this, new <%= ElementType %>AddedEventArgs(element));
				}
		}

		protected virtual void OnElementRemoved(string filterExpression)
		{
			if (ElementRemoved != null)
			{
				ElementRemoved(this, new <%= ElementType %>RemovedEventArgs(filterExpression));
			}
		}

		public object Clone()
		{
			return new <%= ContainerName %>(this);
		}
	}

	public class <%= ElementType %>RemovedEventArgs : EventArgs
	{
		public string filterExpression;

		public string FilterExpression
		{
			get { return filterExpression; }
		}

		public <%= ElementType %>RemovedEventArgs(string filterExpression)
		{
			this.filterExpression = filterExpression;
		}
	}
	
	public class <%= ElementType %>AddedEventArgs : EventArgs
	{
		private <%= ElementType %> element;

		public <%= ElementType %> Element
		{
			get { return element; }
		}

		public <%= ElementType %>AddedEventArgs(<%= ElementType %> element)
		{
			this.element = element;
		}
	}
		
	#endregion
