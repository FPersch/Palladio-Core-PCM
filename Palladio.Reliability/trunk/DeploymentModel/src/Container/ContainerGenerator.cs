//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by CodeSmith.
//     Version: 2.5.14.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using Palladio.Identifier;
using Palladio.ComponentModel;
using Palladio.Utils.Collections;
using Palladio.DeploymentModel.src.Container;

namespace Palladio.DeploymentModel
{
	#region IArtifactConnection
	
	/// <summary>
	/// </summary>
	public interface IArtifactConnection
	{
		IArtifact Source { get; set; }
		IArtifact Destination { get; set; }
	}	
	
	#endregion	
	#region ArtifactConnection
	
	/// <summary>
	/// </summary>
	internal class ArtifactConnection : IArtifactConnection
	{
		private IArtifact source;
		private IArtifact destination;

		public IArtifact Source
		{
			get { return source; }
			set { source = value; }
		}

		public IArtifact Destination
		{
			get { return destination; }
			set { destination = value; }
		}

		public ArtifactConnection()
		{
			source = destination = null;
		}

		public ArtifactConnection(IArtifact source, IArtifact destination)
		{
			this.source = source;
			this.destination = destination;
		}
	}
	#endregion

	#region IArtifactContainer

	public delegate void IArtifactAddedEventHandler( object sender, IArtifactAddedEventArgs e);
	public delegate void IArtifactRemovedEventHandler( object sender, IArtifactRemovedEventArgs e);

	/// <summary>
	/// </summary>
	public interface IArtifactContainer : ICloneable
	{
		event IArtifactAddedEventHandler ElementAdded;
		event IArtifactRemovedEventHandler ElementRemoved;

		IArtifact[] Elements { get; }

		IArtifact[] Get(string name);
		IArtifact Get(IIdentifier id);

		bool Contains(string name);
		bool Contains(IIdentifier id);
		bool Contains(IArtifact element);

		IArtifactConnection[] Connections { get; }

		void Add(params IArtifact[] elements);

		void Remove(params string[] names);
		void Remove(params IIdentifier[] ids);
		void Remove(params IArtifact[] elements);
	}
	
	#endregion	
	#region ArtifactContainerWithConnections

	/// <summary>
	/// </summary>
	public interface IArtifactContainerWithConnections : IArtifactContainer
	{
		void AddConnections(params IArtifactConnection[] connections);
		void RemoveConnections(params IArtifactConnection[] connections);	

		bool ContainsConnection(IArtifactConnection connection);

		IArtifactConnection[] GetIncomingConnections(IArtifact element);
		IArtifactConnection[] GetOutgoingConnections(IArtifact element);
		IArtifact[] GetPredecessors(IArtifact element);
		IArtifact[] GetSuccessors(IArtifact element);
	}	
		
	#endregion	
	#region ArtifactContainer
	/// <summary>
	/// </summary>
	public class ArtifactContainer : IArtifactContainerWithConnections
	{
		private ElementDataset elementDataset;
		private long nextElementID;
		private long nextConnectionID;
		private Hashmap elementHash;
		private Hashmap connectionHash;

		public ArtifactContainer()
		{
			elementDataset = new ElementDataset();
			nextElementID = 1;
			elementHash = new Hashmap();

			nextConnectionID = 1;
			connectionHash = new Hashmap();
		}

		protected ArtifactContainer(ArtifactContainer container)
		{
			elementDataset = container.elementDataset.Clone() as ElementDataset;
			elementDataset.Merge(container.elementDataset);
			nextElementID = container.nextElementID;
			elementHash = container.elementHash.Clone() as Hashmap;

			nextConnectionID = container.nextConnectionID;
			connectionHash = container.connectionHash as Hashmap;
			
			if (container.ElementAdded != null)
				ElementAdded = container.ElementAdded.Clone() as IArtifactAddedEventHandler;
			if (container.ElementRemoved != null)
				ElementRemoved = container.ElementRemoved.Clone() as IArtifactRemovedEventHandler;
		}

		public event IArtifactAddedEventHandler ElementAdded;
		public event IArtifactRemovedEventHandler ElementRemoved;

		public IArtifact[] Elements
		{
			get
			{
				IArtifact[] elements = new IArtifact[elementHash.Values.Count];
				elementHash.Values.CopyTo(elements, 0);
				return elements;
			}
		}

		public void Add(params IArtifact[] elements)
		{
			foreach (IArtifact element in elements)
			{
				if (Contains(element))
					throw new ApplicationException("Element '"+ element + "' is already in the container!");
				long id = nextElementID++;
				elementDataset.ElementTable.AddElementTableRow(id, element.Name, element.ID.ToString());
				elementHash[id] = element;
				OnElementAdded(element);
			}
		}

		public IArtifact[] Get(string name)
		{
			Vector result = SelectElements("Name = '" + name + "'");
			if (result.Count < 1)
				throw new ApplicationException("No element  with name '"+name+"' found!");
			return (IArtifact[]) result.ToArray(typeof(IArtifact));
		}

		public IArtifact Get(IIdentifier id)
		{
			Vector result = SelectElements("Identifier = '" + id.ToString() + "'");
			if (result.Count < 1)
				throw new ApplicationException("No element  with ID '"+id+"' found!");
			if (result.Count > 1)
				throw new ApplicationException("Multiple results found for identifier '" + id.ToString() + "'.");
			return (IArtifact) result[0];
		}

		public IArtifact Get(IArtifact element)
		{
			Vector result = SelectElements("(Identifier = '" + element.ID.ToString() + "') AND (Name = '" + element.Name + "')");
			if (result.Count < 1)
				return null;
			if (result.Count > 1)
				throw new ApplicationException("Multiple results found for identifier '" + element.ID.ToString() + "' and name '" + element.Name + "'.");
			return (IArtifact) result[0];
		}

		public void Remove(params IArtifact[] elements)
		{
			foreach (IArtifact element in elements)
			{
				RemoveElements("(Identifier = '" + element.ID.ToString() + "') AND (Name = '" + element.Name + "')");
			}
		}

		public void Remove(params string[] names)
		{
			foreach (string name in names)
			{
				RemoveElements("Name = '" + name + "'");
			}
		}

		public void Remove(params IIdentifier[] ids)
		{
			foreach (IIdentifier id in ids)
			{
				RemoveElements("Identifier = '" + id.ToString() + "'");
			}
		}



		public IArtifactConnection[] Connections
		{
			get
			{
				IArtifactConnection[] connections = new IArtifactConnection[connectionHash.Values.Count];
				connectionHash.Values.CopyTo(connections, 0);
				return connections;
			}
		}

		public bool ContainsConnection(IArtifactConnection connection)
		{
			long sourceID = GetElementID(connection.Source);
			long destinationID = GetElementID(connection.Destination);
			Vector connections = SelectConnections("(Source = "+ sourceID +") AND (Destination = " + destinationID+")");
			return connections.Count > 0;
		}

		public bool Contains(string name)
		{
			Vector result = SelectElements("Name = '" + name + "'");
			if (result.Count < 1)
				return false;
			return true;
		}

		public bool Contains(IIdentifier id)
		{
			Vector result = SelectElements("Identifier = '" + id.ToString() + "'");
			if (result.Count < 1)
				return false;
			return true;
		}

		public bool Contains(IArtifact element)
		{
			Vector result = SelectElements("(Identifier = '" + element.ID.ToString() + "') AND (Name = '" + element.Name + "')");
			if (result.Count < 1)
				return false;
			return true;
		}

		public IArtifactConnection[] GetIncomingConnections(IArtifact element)
		{
			long destinationID = GetElementID(element);
			Vector connections = SelectConnections("Destination = " + destinationID);
			return (IArtifactConnection[])connections.ToArray(typeof(IArtifactConnection));
		}

		public IArtifactConnection[] GetOutgoingConnections(IArtifact element)
		{
			long sourceID = GetElementID(element);
			Vector connections = SelectConnections("Source = " + sourceID);
			return (IArtifactConnection[])connections.ToArray(typeof(IArtifactConnection));
		}

		public IArtifact[] GetPredecessors(IArtifact element)
		{
			IArtifactConnection[] incoming = GetIncomingConnections(element);
			Set predecessors = new Set();
			foreach (IArtifactConnection connection in incoming)
			{
				predecessors.Add(connection.Source);
			}
			return (IArtifact[])predecessors.ToArray(typeof(IArtifact));
		}

		public IArtifact[] GetSuccessors(IArtifact element)
		{
			IArtifactConnection[] outgoing = GetOutgoingConnections(element);
			Set successors = new Set();
			foreach (IArtifactConnection connection in outgoing)
			{
				successors.Add(connection.Destination);
			}
			return (IArtifact[])successors.ToArray(typeof(IArtifact));
		}

		public void AddConnections(params IArtifactConnection[] connections)
		{
			foreach (IArtifactConnection connection in connections)
			{
				long sourceID = GetElementID(connection.Source);
				long destinationID = GetElementID(connection.Destination);
				long id = nextConnectionID++;
				elementDataset.ConnectionTable.AddConnectionTableRow(id, sourceID, destinationID);
				connectionHash[id] = connection;
			}
		}

		public void RemoveConnections(params IArtifactConnection[] connections)
		{
			foreach (IArtifactConnection connection in connections)
			{
				try
				{
					long sourceID = GetElementID(connection.Source);
					long destinationID = GetElementID(connection.Destination);
					RemoveConnection("(Source = " + sourceID + ") AND (Destination = "+destinationID+")");
				}
				catch( ApplicationException) {}
			}
		}

		private long GetElementID(IArtifact element)
		{
			ElementDataset.ElementTableRow[] rows = (ElementDataset.ElementTableRow[])
				elementDataset.ElementTable.Select("(Identifier = '" + element.ID.ToString() + "') AND (Name = '" + element.Name + "')");
			if (rows.Length > 0)
			{
				return rows[0].ID;
			}
			throw new ApplicationException("Element '" + element.ToString() + "' not found!");
		}

		internal void RemoveElements(string filterExpression)
		{
			ElementDataset.ElementTableRow[] rows = (ElementDataset.ElementTableRow[])
				elementDataset.ElementTable.Select(filterExpression);
			foreach (ElementDataset.ElementTableRow row in rows)
			{
				elementHash.Remove(row.ID);
				elementDataset.ElementTable.RemoveElementTableRow(row);
			}
			OnElementRemoved(filterExpression);
		}

		private Vector SelectElements(string filterExpression)
		{
			Vector result = new Vector();
			ElementDataset.ElementTableRow[] rows = (ElementDataset.ElementTableRow[]) elementDataset.ElementTable.Select(filterExpression);
			foreach (ElementDataset.ElementTableRow row in rows)
			{
				result.Add(elementHash[row.ID]);
			}
			return result;
		}

		private void RemoveConnection(string filterExpression)
		{
			ElementDataset.ConnectionTableRow[] rows = (ElementDataset.ConnectionTableRow[])
				elementDataset.ConnectionTable.Select(filterExpression);
			if (rows.Length > 0)
			{
				connectionHash.Remove(rows[0].ID);
				elementDataset.ConnectionTable.RemoveConnectionTableRow(rows[0]);
			}
		}

		private Vector SelectConnections(string filterExpression)
		{
			Vector result = new Vector();
			ElementDataset.ConnectionTableRow[] rows = (ElementDataset.ConnectionTableRow[]) 
				elementDataset.ConnectionTable.Select(filterExpression);
			foreach (ElementDataset.ConnectionTableRow row in rows)
			{
				result.Add(connectionHash[row.ID]);
			}
			return result;
		}

		protected virtual void OnElementAdded(IArtifact element)
		{
				if (ElementAdded != null)
				{
					ElementAdded(this, new IArtifactAddedEventArgs(element));
				}
		}

		protected virtual void OnElementRemoved(string filterExpression)
		{
			if (ElementRemoved != null)
			{
				ElementRemoved(this, new IArtifactRemovedEventArgs(filterExpression));
			}
		}

		public object Clone()
		{
			return new ArtifactContainer(this);
		}
	}

	public class IArtifactRemovedEventArgs : EventArgs
	{
		public string filterExpression;

		public string FilterExpression
		{
			get { return filterExpression; }
		}

		public IArtifactRemovedEventArgs(string filterExpression)
		{
			this.filterExpression = filterExpression;
		}
	}
	
	public class IArtifactAddedEventArgs : EventArgs
	{
		private IArtifact element;

		public IArtifact Element
		{
			get { return element; }
		}

		public IArtifactAddedEventArgs(IArtifact element)
		{
			this.element = element;
		}
	}
		
	#endregion
	
	#region INodeConnection
	
	/// <summary>
	/// </summary>
	public interface INodeConnection
	{
		INode Source { get; set; }
		INode Destination { get; set; }
	}	
	
	#endregion	
	#region NodeConnection
	
	/// <summary>
	/// </summary>
	internal class NodeConnection : INodeConnection
	{
		private INode source;
		private INode destination;

		public INode Source
		{
			get { return source; }
			set { source = value; }
		}

		public INode Destination
		{
			get { return destination; }
			set { destination = value; }
		}

		public NodeConnection()
		{
			source = destination = null;
		}

		public NodeConnection(INode source, INode destination)
		{
			this.source = source;
			this.destination = destination;
		}
	}
	#endregion

	#region INodeContainer

	public delegate void INodeAddedEventHandler( object sender, INodeAddedEventArgs e);
	public delegate void INodeRemovedEventHandler( object sender, INodeRemovedEventArgs e);

	/// <summary>
	/// </summary>
	public interface INodeContainer : ICloneable
	{
		event INodeAddedEventHandler ElementAdded;
		event INodeRemovedEventHandler ElementRemoved;

		INode[] Elements { get; }

		INode[] Get(string name);
		INode Get(IIdentifier id);

		bool Contains(string name);
		bool Contains(IIdentifier id);
		bool Contains(INode element);

		INodeConnection[] Connections { get; }

		void Add(params INode[] elements);

		void Remove(params string[] names);
		void Remove(params IIdentifier[] ids);
		void Remove(params INode[] elements);
	}
	
	#endregion	
	#region NodeContainerWithConnections

	/// <summary>
	/// </summary>
	public interface INodeContainerWithConnections : INodeContainer
	{
		void AddConnections(params INodeConnection[] connections);
		void RemoveConnections(params INodeConnection[] connections);	

		bool ContainsConnection(INodeConnection connection);

		INodeConnection[] GetIncomingConnections(INode element);
		INodeConnection[] GetOutgoingConnections(INode element);
		INode[] GetPredecessors(INode element);
		INode[] GetSuccessors(INode element);
	}	
		
	#endregion	
	#region NodeContainer
	/// <summary>
	/// </summary>
	public class NodeContainer : INodeContainerWithConnections
	{
		private ElementDataset elementDataset;
		private long nextElementID;
		private long nextConnectionID;
		private Hashmap elementHash;
		private Hashmap connectionHash;

		public NodeContainer()
		{
			elementDataset = new ElementDataset();
			nextElementID = 1;
			elementHash = new Hashmap();

			nextConnectionID = 1;
			connectionHash = new Hashmap();
		}

		protected NodeContainer(NodeContainer container)
		{
			elementDataset = container.elementDataset.Clone() as ElementDataset;
			elementDataset.Merge(container.elementDataset);
			nextElementID = container.nextElementID;
			elementHash = container.elementHash.Clone() as Hashmap;

			nextConnectionID = container.nextConnectionID;
			connectionHash = container.connectionHash as Hashmap;
			
			if (container.ElementAdded != null)
				ElementAdded = container.ElementAdded.Clone() as INodeAddedEventHandler;
			if (container.ElementRemoved != null)
				ElementRemoved = container.ElementRemoved.Clone() as INodeRemovedEventHandler;
		}

		public event INodeAddedEventHandler ElementAdded;
		public event INodeRemovedEventHandler ElementRemoved;

		public INode[] Elements
		{
			get
			{
				INode[] elements = new INode[elementHash.Values.Count];
				elementHash.Values.CopyTo(elements, 0);
				return elements;
			}
		}

		public void Add(params INode[] elements)
		{
			foreach (INode element in elements)
			{
				if (Contains(element))
					throw new ApplicationException("Element '"+ element + "' is already in the container!");
				long id = nextElementID++;
				elementDataset.ElementTable.AddElementTableRow(id, element.Name, element.ID.ToString());
				elementHash[id] = element;
				OnElementAdded(element);
			}
		}

		public INode[] Get(string name)
		{
			Vector result = SelectElements("Name = '" + name + "'");
			if (result.Count < 1)
				throw new ApplicationException("No element  with name '"+name+"' found!");
			return (INode[]) result.ToArray(typeof(INode));
		}

		public INode Get(IIdentifier id)
		{
			Vector result = SelectElements("Identifier = '" + id.ToString() + "'");
			if (result.Count < 1)
				throw new ApplicationException("No element  with ID '"+id+"' found!");
			if (result.Count > 1)
				throw new ApplicationException("Multiple results found for identifier '" + id.ToString() + "'.");
			return (INode) result[0];
		}

		public INode Get(INode element)
		{
			Vector result = SelectElements("(Identifier = '" + element.ID.ToString() + "') AND (Name = '" + element.Name + "')");
			if (result.Count < 1)
				return null;
			if (result.Count > 1)
				throw new ApplicationException("Multiple results found for identifier '" + element.ID.ToString() + "' and name '" + element.Name + "'.");
			return (INode) result[0];
		}

		public void Remove(params INode[] elements)
		{
			foreach (INode element in elements)
			{
				RemoveElements("(Identifier = '" + element.ID.ToString() + "') AND (Name = '" + element.Name + "')");
			}
		}

		public void Remove(params string[] names)
		{
			foreach (string name in names)
			{
				RemoveElements("Name = '" + name + "'");
			}
		}

		public void Remove(params IIdentifier[] ids)
		{
			foreach (IIdentifier id in ids)
			{
				RemoveElements("Identifier = '" + id.ToString() + "'");
			}
		}



		public INodeConnection[] Connections
		{
			get
			{
				INodeConnection[] connections = new INodeConnection[connectionHash.Values.Count];
				connectionHash.Values.CopyTo(connections, 0);
				return connections;
			}
		}

		public bool ContainsConnection(INodeConnection connection)
		{
			long sourceID = GetElementID(connection.Source);
			long destinationID = GetElementID(connection.Destination);
			Vector connections = SelectConnections("(Source = "+ sourceID +") AND (Destination = " + destinationID+")");
			return connections.Count > 0;
		}

		public bool Contains(string name)
		{
			Vector result = SelectElements("Name = '" + name + "'");
			if (result.Count < 1)
				return false;
			return true;
		}

		public bool Contains(IIdentifier id)
		{
			Vector result = SelectElements("Identifier = '" + id.ToString() + "'");
			if (result.Count < 1)
				return false;
			return true;
		}

		public bool Contains(INode element)
		{
			Vector result = SelectElements("(Identifier = '" + element.ID.ToString() + "') AND (Name = '" + element.Name + "')");
			if (result.Count < 1)
				return false;
			return true;
		}

		public INodeConnection[] GetIncomingConnections(INode element)
		{
			long destinationID = GetElementID(element);
			Vector connections = SelectConnections("Destination = " + destinationID);
			return (INodeConnection[])connections.ToArray(typeof(INodeConnection));
		}

		public INodeConnection[] GetOutgoingConnections(INode element)
		{
			long sourceID = GetElementID(element);
			Vector connections = SelectConnections("Source = " + sourceID);
			return (INodeConnection[])connections.ToArray(typeof(INodeConnection));
		}

		public INode[] GetPredecessors(INode element)
		{
			INodeConnection[] incoming = GetIncomingConnections(element);
			Set predecessors = new Set();
			foreach (INodeConnection connection in incoming)
			{
				predecessors.Add(connection.Source);
			}
			return (INode[])predecessors.ToArray(typeof(INode));
		}

		public INode[] GetSuccessors(INode element)
		{
			INodeConnection[] outgoing = GetOutgoingConnections(element);
			Set successors = new Set();
			foreach (INodeConnection connection in outgoing)
			{
				successors.Add(connection.Destination);
			}
			return (INode[])successors.ToArray(typeof(INode));
		}

		public void AddConnections(params INodeConnection[] connections)
		{
			foreach (INodeConnection connection in connections)
			{
				long sourceID = GetElementID(connection.Source);
				long destinationID = GetElementID(connection.Destination);
				long id = nextConnectionID++;
				elementDataset.ConnectionTable.AddConnectionTableRow(id, sourceID, destinationID);
				connectionHash[id] = connection;
			}
		}

		public void RemoveConnections(params INodeConnection[] connections)
		{
			foreach (INodeConnection connection in connections)
			{
				try
				{
					long sourceID = GetElementID(connection.Source);
					long destinationID = GetElementID(connection.Destination);
					RemoveConnection("(Source = " + sourceID + ") AND (Destination = "+destinationID+")");
				}
				catch( ApplicationException) {}
			}
		}

		private long GetElementID(INode element)
		{
			ElementDataset.ElementTableRow[] rows = (ElementDataset.ElementTableRow[])
				elementDataset.ElementTable.Select("(Identifier = '" + element.ID.ToString() + "') AND (Name = '" + element.Name + "')");
			if (rows.Length > 0)
			{
				return rows[0].ID;
			}
			throw new ApplicationException("Element '" + element.ToString() + "' not found!");
		}

		internal void RemoveElements(string filterExpression)
		{
			ElementDataset.ElementTableRow[] rows = (ElementDataset.ElementTableRow[])
				elementDataset.ElementTable.Select(filterExpression);
			foreach (ElementDataset.ElementTableRow row in rows)
			{
				elementHash.Remove(row.ID);
				elementDataset.ElementTable.RemoveElementTableRow(row);
			}
			OnElementRemoved(filterExpression);
		}

		private Vector SelectElements(string filterExpression)
		{
			Vector result = new Vector();
			ElementDataset.ElementTableRow[] rows = (ElementDataset.ElementTableRow[]) elementDataset.ElementTable.Select(filterExpression);
			foreach (ElementDataset.ElementTableRow row in rows)
			{
				result.Add(elementHash[row.ID]);
			}
			return result;
		}

		private void RemoveConnection(string filterExpression)
		{
			ElementDataset.ConnectionTableRow[] rows = (ElementDataset.ConnectionTableRow[])
				elementDataset.ConnectionTable.Select(filterExpression);
			if (rows.Length > 0)
			{
				connectionHash.Remove(rows[0].ID);
				elementDataset.ConnectionTable.RemoveConnectionTableRow(rows[0]);
			}
		}

		private Vector SelectConnections(string filterExpression)
		{
			Vector result = new Vector();
			ElementDataset.ConnectionTableRow[] rows = (ElementDataset.ConnectionTableRow[]) 
				elementDataset.ConnectionTable.Select(filterExpression);
			foreach (ElementDataset.ConnectionTableRow row in rows)
			{
				result.Add(connectionHash[row.ID]);
			}
			return result;
		}

		protected virtual void OnElementAdded(INode element)
		{
				if (ElementAdded != null)
				{
					ElementAdded(this, new INodeAddedEventArgs(element));
				}
		}

		protected virtual void OnElementRemoved(string filterExpression)
		{
			if (ElementRemoved != null)
			{
				ElementRemoved(this, new INodeRemovedEventArgs(filterExpression));
			}
		}

		public object Clone()
		{
			return new NodeContainer(this);
		}
	}

	public class INodeRemovedEventArgs : EventArgs
	{
		public string filterExpression;

		public string FilterExpression
		{
			get { return filterExpression; }
		}

		public INodeRemovedEventArgs(string filterExpression)
		{
			this.filterExpression = filterExpression;
		}
	}
	
	public class INodeAddedEventArgs : EventArgs
	{
		private INode element;

		public INode Element
		{
			get { return element; }
		}

		public INodeAddedEventArgs(INode element)
		{
			this.element = element;
		}
	}
		
	#endregion
}
