//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by CodeSmith.
//     Version: 2.6.0.117
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System.Collections;
using Palladio.FiniteStateMachines;

namespace Palladio.Reliability.WebserverComponentModel
{
	/// <summary>
	/// </summary>
	public class WebserverProvidesFactory : WebserverModelHelper
	{
		#region IDispatcher

		public static void CreateProvidesFsmForIDispatcher(IEditableFiniteStateMachine fsm, Hashtable methodHash)
		{
			IState[] states = CreateStates(1, 2, 3);
			fsm.AddStates(states);
			fsm.StartState = GetState(1);
			fsm.FinalStates = new IState[] {GetState(3)};
			AddTransition(4, ref fsm, 1, 2, methodHash["Start"]);
			AddTransition(5, ref fsm, 2, 3, methodHash["Stop"]);
		}

		#endregion

		#region IConfigReader

		public static void CreateProvidesFsmForIConfigReader(IEditableFiniteStateMachine fsm, Hashtable methodHash)
		{
			IState[] states = CreateStates(1001);
			fsm.AddStates(states);
			fsm.StartState = GetState(1001);
			fsm.FinalStates = new IState[] {GetState(1001)};
			AddTransition(1002, ref fsm, 1001, 1001, methodHash["ReadConfiguration"]);
		}

		#endregion

		#region IConfiguration

		public static void CreateProvidesFsmForIConfiguration(IEditableFiniteStateMachine fsm, Hashtable methodHash)
		{
			IState[] states = CreateStates(2001);
			fsm.AddStates(states);
			fsm.StartState = GetState(2001);
			fsm.FinalStates = new IState[] {GetState(2001)};
			AddTransition(2002, ref fsm, 2001, 2001, methodHash["GetValue"]);
		}

		#endregion

		#region IWebserverConfiguration

		public static void CreateProvidesFsmForIWebserverConfiguration(IEditableFiniteStateMachine fsm, Hashtable methodHash)
		{
			IState[] states = CreateStates(3001);
			fsm.AddStates(states);
			fsm.StartState = GetState(3001);
			fsm.FinalStates = new IState[] {GetState(3001)};
			AddTransition(3002, ref fsm, 3001, 3001, methodHash["get_ConfigFilesPath"]);
			AddTransition(3003, ref fsm, 3001, 3001, methodHash["set_ConfigFilesPath"]);
			AddTransition(3004, ref fsm, 3001, 3001, methodHash["get_DebugFile"]);
			AddTransition(3005, ref fsm, 3001, 3001, methodHash["get_DocumentRoot"]);
			AddTransition(3006, ref fsm, 3001, 3001, methodHash["get_ListeningPorts"]);
			AddTransition(3007, ref fsm, 3001, 3001, methodHash["get_DefaultMimeType"]);
			AddTransition(3008, ref fsm, 3001, 3001, methodHash["get_ListenIP"]);
			AddTransition(3009, ref fsm, 3001, 3001, methodHash["get_LogFile"]);
			AddTransition(3010, ref fsm, 3001, 3001, methodHash["get_DefaultFileNames"]);
			AddTransition(3011, ref fsm, 3001, 3001, methodHash["GetMimeTypeFor"]);
		}

		#endregion

		#region IWebserverMonitor

		public static void CreateProvidesFsmForIWebserverMonitor(IEditableFiniteStateMachine fsm, Hashtable methodHash)
		{
			IState[] states = CreateStates(4001, 4002);
			fsm.AddStates(states);
			fsm.StartState = GetState(4001);
			fsm.FinalStates = new IState[] {GetState(4001)};
			AddTransition(4003, ref fsm, 4001, 4002, methodHash["InitializeWriteAccess"]);
			AddTransition(4004, ref fsm, 4002, 4001, methodHash["FinishWriteAccess"]);
			AddTransition(4005, ref fsm, 4002, 4002, methodHash["WriteLogEntry"]);
			AddTransition(4006, ref fsm, 4002, 4002, methodHash["WriteDebugMessage"]);
		}

		#endregion

		#region IFTPRequestProcessor

		public static void CreateProvidesFsmForIFTPRequestProcessor(IEditableFiniteStateMachine fsm, Hashtable methodHash)
		{
			IState[] states = CreateStates(5001);
			fsm.AddStates(states);
			fsm.StartState = GetState(5001);
			fsm.FinalStates = new IState[] {GetState(5001)};
		}

		#endregion

		#region IHTTPRequestProcessor

		public static void CreateProvidesFsmForIHTTPRequestProcessor(IEditableFiniteStateMachine fsm, Hashtable methodHash)
		{
			IState[] states = CreateStates(6001);
			fsm.AddStates(states);
			fsm.StartState = GetState(6001);
			fsm.FinalStates = new IState[] {GetState(6001)};
			AddTransition(6002, ref fsm, 6001, 6001, methodHash["HandleRequest"]);
		}

		#endregion

		#region IHTTPRequestProcessorTools

		public static void CreateProvidesFsmForIHTTPRequestProcessorTools(IEditableFiniteStateMachine fsm, Hashtable methodHash)
		{
			IState[] states = CreateStates(7001);
			fsm.AddStates(states);
			fsm.StartState = GetState(7001);
			fsm.FinalStates = new IState[] {GetState(7001)};
			AddTransition(7002, ref fsm, 7001, 7001, methodHash["OpenFile"]);
			AddTransition(7003, ref fsm, 7001, 7001, methodHash["GetFileMimeTypeFor"]);
			AddTransition(7004, ref fsm, 7001, 7001, methodHash["BuildCompletePath"]);
			AddTransition(7005, ref fsm, 7001, 7001, methodHash["SendContentDataToClient"]);
			AddTransition(7006, ref fsm, 7001, 7001, methodHash["SendContentToClient"]);
			AddTransition(7007, ref fsm, 7001, 7001, methodHash["SendHTTPError"]);
			AddTransition(7008, ref fsm, 7001, 7001, methodHash["SendHTTPHeader"]);
		}

		#endregion

		#region IRequestParser

		public static void CreateProvidesFsmForIRequestParser(IEditableFiniteStateMachine fsm, Hashtable methodHash)
		{
			IState[] states = CreateStates(8001);
			fsm.AddStates(states);
			fsm.StartState = GetState(8001);
			fsm.FinalStates = new IState[] {GetState(8001)};
			AddTransition(8002, ref fsm, 8001, 8001, methodHash["HandleRequest"]);
		}

		#endregion

		#region IRequestProcessor

		public static void CreateProvidesFsmForIRequestProcessor(IEditableFiniteStateMachine fsm, Hashtable methodHash)
		{
			IState[] states = CreateStates(9001);
			fsm.AddStates(states);
			fsm.StartState = GetState(9001);
			fsm.FinalStates = new IState[] {GetState(9001)};
		}

		#endregion

		#region IBibTexDB

		public static void CreateProvidesFsmForIBibTexDB(IEditableFiniteStateMachine fsm, Hashtable methodHash)
		{
			IState[] states = CreateStates(10001);
			fsm.AddStates(states);
			fsm.StartState = GetState(10001);
			fsm.FinalStates = new IState[] {GetState(10001)};
			AddTransition(10002, ref fsm, 10001, 10001, methodHash["get_ConnectionString"]);
			AddTransition(10003, ref fsm, 10001, 10001, methodHash["set_ConnectionString"]);
			AddTransition(10004, ref fsm, 10001, 10001, methodHash["AllEntries"]);
			AddTransition(10005, ref fsm, 10001, 10001, methodHash["Search"]);
		}

		#endregion

		#region IPortListener

		public static void CreateProvidesFsmForIPortListener(IEditableFiniteStateMachine fsm, Hashtable methodHash)
		{
			IState[] states = CreateStates(11001);
			fsm.AddStates(states);
			fsm.StartState = GetState(11001);
			fsm.FinalStates = new IState[] {GetState(11001)};
			AddTransition(11002, ref fsm, 11001, 11001, methodHash["StartListen"]);
			AddTransition(11003, ref fsm, 11001, 11001, methodHash["get_IsRunning"]);
			AddTransition(11004, ref fsm, 11001, 11001, methodHash["set_IsRunning"]);
			AddTransition(11005, ref fsm, 11001, 11001, methodHash["get_Port"]);
			AddTransition(11006, ref fsm, 11001, 11001, methodHash["get_Address"]);
		}

		#endregion

		private WebserverProvidesFactory()
		{
		}
	}
}