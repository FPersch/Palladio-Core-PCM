transformation ThreadPoolTransformation (source: pcm, target: pcm) {
	top relation CreateThreadPoolComponent {
		 
		checkonly domain source sourceRepository:pcm::repository::Repository{
		};

		enforce domain target targetBasicComponent:pcm::repository::BasicComponent{
			repository_RepositoryComponent = targetRepository : pcm::repository::Repository {},
			entityName = 'ThreadPool',
			providedRoles_InterfaceProvidingEntity = providedRole : pcm::repository::ProvidedRole {
				entityName = 'Provided_IThreadPool_ThreadPool',
				providedInterface__ProvidedRole = threadPoolInterface : pcm::repository::Interface {}
			},
			serviceEffectSpecifications__BasicComponent = acquire : pcm::seff::ResourceDemandingSEFF {
				describedService__SEFF = threadPoolInterfaceAcquire : pcm::repository::Signature {},
				steps_Behaviour = startAcquire : pcm::seff::StartAction {
					successor_AbstractAction = acquireAction : pcm::seff::AcquireAction {}
					},
				steps_Behaviour = stopAcquire : pcm::seff::StopAction {
					predecessor_AbstractAction =  acquireAction : pcm::seff::AcquireAction {}
				},
				steps_Behaviour = acquireAction : pcm::seff::AcquireAction {
					entityName = 'acquire',
					predecessor_AbstractAction =  startAcquire : pcm::seff::StartAction {},
					successor_AbstractAction =  stopAcquire : pcm::seff::StopAction {},
					passiveresource_AcquireAction =  threadPoolResource : pcm::repository::PassiveResource {}
				}
			},
			serviceEffectSpecifications__BasicComponent = release : pcm::seff::ResourceDemandingSEFF {
				describedService__SEFF = threadPoolInterfaceRelease : pcm::repository::Signature {},
				steps_Behaviour = startRelease : pcm::seff::StartAction {
					successor_AbstractAction = releaseAction : pcm::seff::ReleaseAction {}
					},
				steps_Behaviour = stopRelease : pcm::seff::StopAction {
					predecessor_AbstractAction =  releaseAction : pcm::seff::ReleaseAction {}
				},
				steps_Behaviour = releaseAction : pcm::seff::ReleaseAction {
					entityName = 'release',
					predecessor_AbstractAction =  startRelease : pcm::seff::StartAction {},
					successor_AbstractAction =  stopRelease : pcm::seff::StopAction {},
					passiveResource_ReleaseAction =  threadPoolResource : pcm::repository::PassiveResource {}
				}
			},
			passiveResource_BasicComponent = threadPoolResource : pcm::repository::PassiveResource {
				entityName = 'ThreadPool',
				capacity_PassiveResource = ThreadPoolSize : pcm::core::PCMRandomVariable {
					specification = '100'
				}
			}
			
        
		};
		when {
			Mark_repository_Repository(sourceRepository, targetRepository);
			CreateIThreadPoolInterface(sourceRepository, threadPoolInterface);
			CreateIThreadPoolInterfaceAcquire(sourceRepository, threadPoolInterfaceAcquire);
			CreateIThreadPoolInterfaceRelease(sourceRepository, threadPoolInterfaceRelease);
		}
		where {
			
		}		
	}
	
	top relation CreateIThreadPoolInterface {

		enforce domain source sourceRepository:pcm::repository::Repository  {
		};

		enforce domain target targetInterface:pcm::repository::Interface  {
			repository_Interface = targetRepository : pcm::repository::Repository {},
			entityName = 'IThreadPool',
			signatures__Interface = acquire : pcm::repository::Signature {},
			signatures__Interface = release : pcm::repository::Signature {}
		};
		
		when {
			Mark_repository_Repository(sourceRepository, targetRepository);
		}
		
		where {
			CreateIThreadPoolInterfaceAcquire(sourceRepository, acquire);
			CreateIThreadPoolInterfaceRelease(sourceRepository, release);
		}
	}
	
	relation CreateIThreadPoolInterfaceAcquire {

		enforce domain source sourceRepository:pcm::repository::Repository  {
		};

		enforce domain target acquire : pcm::repository::Signature {
			serviceName = 'acquire'
		};
	}
	relation CreateIThreadPoolInterfaceRelease {

		enforce domain source sourceRepository:pcm::repository::Repository  {
		};

		enforce domain target  release : pcm::repository::Signature {
			serviceName = 'release'
		};
	}
	
	top relation CreateWrapperComponent {
	
		checkonly domain source sourceRepository:pcm::repository::Repository{
		};
		 
		checkonly domain source sourceSystemProvidedDelegationConnector:pcm::core::composition::ProvidedDelegationConnector{
			innerProvidedRole_ProvidedDelegationConnector = innerProvidedRole : pcm::repository::ProvidedRole {
				providedInterface__ProvidedRole = serverComponentInterface : pcm::repository::Interface {}
			}
		};

		enforce domain target targetBasicComponent:pcm::repository::BasicComponent{
			entityName = 'TPWrapper',
			repository_RepositoryComponent = sourceRepositoryCopy : pcm::repository::Repository {},
			providedRoles_InterfaceProvidingEntity = providedRole : pcm::repository::ProvidedRole {
				entityName = 'Provided_IRequest_TPWrapper',
				providedInterface__ProvidedRole = serverComponentInterfaceCopy : pcm::repository::Interface {}
			},
			requiredRoles_InterfaceRequiringEntity =  requiredRoleTP : pcm::repository::RequiredRole {
				entityName = 'Required_IThreadPool_TPWrapper',
				requiredInterface__RequiredRole =  threadPoolInterface : pcm::repository::Interface {}
			},
			requiredRoles_InterfaceRequiringEntity =  requiredRoleTP : pcm::repository::RequiredRole {
				entityName = 'Required_BasicComponent_TPWrapper',
				requiredInterface__RequiredRole =  serverComponentInterfaceCopy : pcm::repository::Interface {}
			}        
		};
		when {	
			CreateIThreadPoolInterface(sourceRepository,threadPoolInterface);		
			Mark_repository_Interface(serverComponentInterface, serverComponentInterfaceCopy); 
			Mark_repository_Repository(sourceRepository, sourceRepositoryCopy);
		}
		where {
			
		}		
	}
	
	top relation createTPWrapperSeff {

		checkonly domain source sourceRepository:pcm::repository::Repository{
		};
		
		checkonly domain source sourceSystemProvidedDelegationConnector:pcm::core::composition::ProvidedDelegationConnector{
			innerProvidedRole_ProvidedDelegationConnector = innerProvidedRole : pcm::repository::ProvidedRole {
				providedInterface__ProvidedRole = serverComponentInterface : pcm::repository::Interface {
					signatures__Interface = signature : pcm::repository::Signature {}
				}
			}
		};
		
		enforce domain target targetComponent:pcm::repository::BasicComponent  {
		
			serviceEffectSpecifications__BasicComponent = signatureSeff : pcm::seff::ResourceDemandingSEFF {
				describedService__SEFF = signatureCopy : pcm::repository::Signature {},
				steps_Behaviour = start : pcm::seff::StartAction {
					successor_AbstractAction = acquireTPAction : pcm::seff::ExternalCallAction {}
					},
				steps_Behaviour = stop : pcm::seff::StopAction {
					predecessor_AbstractAction =  releaseTPAction : pcm::seff::ExternalCallAction {}
				},
				steps_Behaviour = acquireTPAction : pcm::seff::ExternalCallAction {
					entityName = 'acquire',
					predecessor_AbstractAction =  start : pcm::seff::StartAction {},
					successor_AbstractAction =  serverServiceAction : pcm::seff::ExternalCallAction{},
					calledService_ExternalService = acquireTPsignature : pcm::repository::Signature {}
				},
				steps_Behaviour = serverServiceAction : pcm::seff::ExternalCallAction {
					entityName = 'serverService',
					predecessor_AbstractAction =  acquireTPAction : pcm::seff::ExternalCallAction {},
					successor_AbstractAction =  releaseTPAction : pcm::seff::ExternalCallAction {},
					calledService_ExternalService = signatureCopy : pcm::repository::Signature {}
				},
				steps_Behaviour = releaseTPAction : pcm::seff::ExternalCallAction {
					entityName = 'release',
					predecessor_AbstractAction =  serverServiceAction : pcm::seff::ExternalCallAction {},
					successor_AbstractAction =  stop : pcm::seff::StopAction {},
					calledService_ExternalService = releaseTPsignature : pcm::repository::Signature {}
				}
			}	
		
		};

		when {
				CreateWrapperComponent(sourceRepository, sourceSystemProvidedDelegationConnector, targetComponent);
				CreateIThreadPoolInterfaceAcquire(sourceRepository,acquireTPsignature);
				CreateIThreadPoolInterfaceRelease(sourceRepository,releaseTPsignature);
				Mark_repository_Signature(signature, signatureCopy);
		}

	}
	
	
	
	top relation CopyReference_RandomVariable__ {

		checkonly domain source sourceRandomVariable:stoex::RandomVariable{
			_ = source__:stoex::Expression{
		}		};

		enforce domain target targetRandomVariable:stoex::RandomVariable{
			_ = target__:stoex::Expression{
		}		};
		when {
			MarkRandomVariable(sourceRandomVariable, targetRandomVariable);
			MarkExpression(source__, target__);
		}
	}

relation Mark_completions_CompletionRepository {

		checkonly domain source sourceCompletionRepository:completions::CompletionRepository{
		};

		checkonly domain target targetCompletionRepository:completions::CompletionRepository{
		};
	}

	top relation Copy_completions_CompletionRepository {

		checkonly domain source sourceCompletionRepository:completions::CompletionRepository{
		};

		enforce domain target targetCompletionRepository:completions::CompletionRepository{
		};
		where {
			Mark_completions_CompletionRepository(sourceCompletionRepository, targetCompletionRepository);
		}
	}

	relation Mark_identifier_Identifier {

		checkonly domain source sourceIdentifier:identifier::Identifier{
		};

		checkonly domain target targetIdentifier:identifier::Identifier{
		};
	}
	
	relation Mark_entity_NamedElement {

		checkonly domain source sourceNamedElement:pcm::core::entity::NamedElement{
		};

		checkonly domain target targetNamedElement:pcm::core::entity::NamedElement{
		};
	}

	relation Mark_entity_Entity {

		checkonly domain source sourceEntity:pcm::core::entity::Entity{
		};

		checkonly domain target targetEntity:pcm::core::entity::Entity{
		};
		where {
			Mark_identifier_Identifier(sourceEntity, targetEntity);
			Mark_entity_NamedElement(sourceEntity, targetEntity);
		}
	}

	relation Mark_entity_InterfaceProvidingEntity {

		checkonly domain source sourceInterfaceProvidingEntity:pcm::core::entity::InterfaceProvidingEntity{
		};

		checkonly domain target targetInterfaceProvidingEntity:pcm::core::entity::InterfaceProvidingEntity{
		};
		where {
			Mark_entity_Entity(sourceInterfaceProvidingEntity, targetInterfaceProvidingEntity);
		}
	}

	relation Mark_entity_InterfaceRequiringEntity {

		checkonly domain source sourceInterfaceRequiringEntity:pcm::core::entity::InterfaceRequiringEntity{
		};

		checkonly domain target targetInterfaceRequiringEntity:pcm::core::entity::InterfaceRequiringEntity{
		};
		where {
			Mark_entity_Entity(sourceInterfaceRequiringEntity, targetInterfaceRequiringEntity);
		}
	}

	relation Mark_entity_ResourceInterfaceRequiringEntity {

		checkonly domain source sourceResourceInterfaceRequiringEntity:pcm::core::entity::ResourceInterfaceRequiringEntity{
		};

		checkonly domain target targetResourceInterfaceRequiringEntity:pcm::core::entity::ResourceInterfaceRequiringEntity{
		};
		where {
			Mark_entity_Entity(sourceResourceInterfaceRequiringEntity, targetResourceInterfaceRequiringEntity);
		}
	}

	relation Mark_entity_InterfaceProvidingRequiringEntity {

		checkonly domain source sourceInterfaceProvidingRequiringEntity:pcm::core::entity::InterfaceProvidingRequiringEntity{
		};

		checkonly domain target targetInterfaceProvidingRequiringEntity:pcm::core::entity::InterfaceProvidingRequiringEntity{
		};
		where {
			Mark_entity_InterfaceProvidingEntity(sourceInterfaceProvidingRequiringEntity, targetInterfaceProvidingRequiringEntity);
			Mark_entity_InterfaceRequiringEntity(sourceInterfaceProvidingRequiringEntity, targetInterfaceProvidingRequiringEntity);
			Mark_entity_ResourceInterfaceRequiringEntity(sourceInterfaceProvidingRequiringEntity, targetInterfaceProvidingRequiringEntity);
		}
	}

	relation Mark_connectors_Connector {

		checkonly domain source sourceConnector:pcm::core::connectors::Connector{
		};

		checkonly domain target targetConnector:pcm::core::connectors::Connector{
		};
		where {
			Mark_entity_Entity(sourceConnector, targetConnector);
		}
	}

	relation Mark_composition_AssemblyContext {

		checkonly domain source sourceAssemblyContext:pcm::core::composition::AssemblyContext{
		};

		checkonly domain target targetAssemblyContext:pcm::core::composition::AssemblyContext{
		};
		where {
			Mark_entity_Entity(sourceAssemblyContext, targetAssemblyContext);
		}
	}

	top relation Copy_composition_AssemblyContext {

		checkonly domain source sourceAssemblyContext:pcm::core::composition::AssemblyContext{
		};

		enforce domain target targetAssemblyContext:pcm::core::composition::AssemblyContext{
		};
		where {
			Mark_composition_AssemblyContext(sourceAssemblyContext, targetAssemblyContext);
		}
	}

	relation Mark_composition_AssemblyConnector {

		checkonly domain source sourceAssemblyConnector:pcm::core::composition::AssemblyConnector{
		};

		checkonly domain target targetAssemblyConnector:pcm::core::composition::AssemblyConnector{
		};
		where {
			Mark_connectors_Connector(sourceAssemblyConnector, targetAssemblyConnector);
		}
	}

	top relation Copy_composition_AssemblyConnector {

		checkonly domain source sourceAssemblyConnector:pcm::core::composition::AssemblyConnector{
		};

		enforce domain target targetAssemblyConnector:pcm::core::composition::AssemblyConnector{
		};
		where {
			Mark_composition_AssemblyConnector(sourceAssemblyConnector, targetAssemblyConnector);
		}
	}

	relation Mark_composition_ResourceRequiredDelegationConnector {

		checkonly domain source sourceResourceRequiredDelegationConnector:pcm::core::composition::ResourceRequiredDelegationConnector{
		};

		checkonly domain target targetResourceRequiredDelegationConnector:pcm::core::composition::ResourceRequiredDelegationConnector{
		};
	}

	top relation Copy_composition_ResourceRequiredDelegationConnector {

		checkonly domain source sourceResourceRequiredDelegationConnector:pcm::core::composition::ResourceRequiredDelegationConnector{
		};

		enforce domain target targetResourceRequiredDelegationConnector:pcm::core::composition::ResourceRequiredDelegationConnector{
		};
		where {
			Mark_composition_ResourceRequiredDelegationConnector(sourceResourceRequiredDelegationConnector, targetResourceRequiredDelegationConnector);
		}
	}

	relation Mark_composition_ComposedStructure {

		checkonly domain source sourceComposedStructure:pcm::core::composition::ComposedStructure{
		};

		checkonly domain target targetComposedStructure:pcm::core::composition::ComposedStructure{
		};
		where {
			Mark_entity_Entity(sourceComposedStructure, targetComposedStructure);
		}
	}

	relation Mark_entity_ComposedProvidingRequiringEntity {

		checkonly domain source sourceComposedProvidingRequiringEntity:pcm::core::entity::ComposedProvidingRequiringEntity{
		};

		checkonly domain target targetComposedProvidingRequiringEntity:pcm::core::entity::ComposedProvidingRequiringEntity{
		};
		where {
			Mark_composition_ComposedStructure(sourceComposedProvidingRequiringEntity, targetComposedProvidingRequiringEntity);
			Mark_entity_InterfaceProvidingRequiringEntity(sourceComposedProvidingRequiringEntity, targetComposedProvidingRequiringEntity);
		}
	}

	relation Mark_repository_PassiveResource {

		checkonly domain source sourcePassiveResource:pcm::repository::PassiveResource{
		};

		checkonly domain target targetPassiveResource:pcm::repository::PassiveResource{
		};
		where {
			Mark_entity_Entity(sourcePassiveResource, targetPassiveResource);
		}
	}

	top relation Copy_repository_PassiveResource {

		checkonly domain source sourcePassiveResource:pcm::repository::PassiveResource{
		};

		enforce domain target targetPassiveResource:pcm::repository::PassiveResource{
		};
		where {
			Mark_repository_PassiveResource(sourcePassiveResource, targetPassiveResource);
		}
	}

	relation Mark_repository_Signature {

		checkonly domain source sourceSignature:pcm::repository::Signature{
		};

		checkonly domain target targetSignature:pcm::repository::Signature{
		};
	}

	top relation Copy_repository_Signature {

		checkonly domain source sourceSignature:pcm::repository::Signature{
		};

		enforce domain target targetSignature:pcm::repository::Signature{
		};
		where {
			Mark_repository_Signature(sourceSignature, targetSignature);
		}
	}

	relation Mark_repository_Parameter {

		checkonly domain source sourceParameter:pcm::repository::Parameter{
		};

		checkonly domain target targetParameter:pcm::repository::Parameter{
		};
	}

	top relation Copy_repository_Parameter {

		checkonly domain source sourceParameter:pcm::repository::Parameter{
		};

		enforce domain target targetParameter:pcm::repository::Parameter{
		};
		where {
			Mark_repository_Parameter(sourceParameter, targetParameter);
		}
	}

	relation Mark_repository_DataType {

		checkonly domain source sourceDataType:pcm::repository::DataType{
		};

		checkonly domain target targetDataType:pcm::repository::DataType{
		};
	}

	relation Mark_repository_Repository {

		checkonly domain source sourceRepository:pcm::repository::Repository{
		};

		checkonly domain target targetRepository:pcm::repository::Repository{
		};
		where {
			Mark_entity_Entity(sourceRepository, targetRepository);
		}
	}

	top relation Copy_repository_Repository {

		checkonly domain source sourceRepository:pcm::repository::Repository{
		};

		enforce domain target targetRepository:pcm::repository::Repository{
		};
		where {
			Mark_repository_Repository(sourceRepository, targetRepository);
		}
	}

	relation Mark_repository_RepositoryComponent {

		checkonly domain source sourceRepositoryComponent:pcm::repository::RepositoryComponent{
		};

		checkonly domain target targetRepositoryComponent:pcm::repository::RepositoryComponent{
		};
		where {
			Mark_entity_InterfaceProvidingRequiringEntity(sourceRepositoryComponent, targetRepositoryComponent);
		}
	}

	relation Mark_repository_Role {

		checkonly domain source sourceRole:pcm::repository::Role{
		};

		checkonly domain target targetRole:pcm::repository::Role{
		};
		where {
			Mark_entity_Entity(sourceRole, targetRole);
		}
	}

	relation Mark_repository_RequiredRole {

		checkonly domain source sourceRequiredRole:pcm::repository::RequiredRole{
		};

		checkonly domain target targetRequiredRole:pcm::repository::RequiredRole{
		};
		where {
			Mark_repository_Role(sourceRequiredRole, targetRequiredRole);
		}
	}

	top relation Copy_repository_RequiredRole {

		checkonly domain source sourceRequiredRole:pcm::repository::RequiredRole{
		};

		enforce domain target targetRequiredRole:pcm::repository::RequiredRole{
		};
		where {
			Mark_repository_RequiredRole(sourceRequiredRole, targetRequiredRole);
		}
	}

	relation Mark_repository_Interface {

		checkonly domain source sourceInterface:pcm::repository::Interface{
		};

		checkonly domain target targetInterface:pcm::repository::Interface{
		};
		where {
			Mark_entity_Entity(sourceInterface, targetInterface);
		}
	}

	top relation Copy_repository_Interface {

		checkonly domain source sourceInterface:pcm::repository::Interface{
		};

		enforce domain target targetInterface:pcm::repository::Interface{
		};
		where {
			Mark_repository_Interface(sourceInterface, targetInterface);
		}
	}

	relation Mark_repository_ResourceRequiredRole {

		checkonly domain source sourceResourceRequiredRole:pcm::repository::ResourceRequiredRole{
		};

		checkonly domain target targetResourceRequiredRole:pcm::repository::ResourceRequiredRole{
		};
		where {
			Mark_repository_Role(sourceResourceRequiredRole, targetResourceRequiredRole);
		}
	}

	top relation Copy_repository_ResourceRequiredRole {

		checkonly domain source sourceResourceRequiredRole:pcm::repository::ResourceRequiredRole{
		};

		enforce domain target targetResourceRequiredRole:pcm::repository::ResourceRequiredRole{
		};
		where {
			Mark_repository_ResourceRequiredRole(sourceResourceRequiredRole, targetResourceRequiredRole);
		}
	}

	relation Mark_repository_ExceptionType {

		checkonly domain source sourceExceptionType:pcm::repository::ExceptionType{
		};

		checkonly domain target targetExceptionType:pcm::repository::ExceptionType{
		};
	}

	top relation Copy_repository_ExceptionType {

		checkonly domain source sourceExceptionType:pcm::repository::ExceptionType{
		};

		enforce domain target targetExceptionType:pcm::repository::ExceptionType{
		};
		where {
			Mark_repository_ExceptionType(sourceExceptionType, targetExceptionType);
		}
	}

	relation Mark_repository_ProvidesComponentType {

		checkonly domain source sourceProvidesComponentType:pcm::repository::ProvidesComponentType{
		};

		checkonly domain target targetProvidesComponentType:pcm::repository::ProvidesComponentType{
		};
		where {
			Mark_repository_RepositoryComponent(sourceProvidesComponentType, targetProvidesComponentType);
		}
	}

	top relation Copy_repository_ProvidesComponentType {

		checkonly domain source sourceProvidesComponentType:pcm::repository::ProvidesComponentType{
		};

		enforce domain target targetProvidesComponentType:pcm::repository::ProvidesComponentType{
		};
		where {
			Mark_repository_ProvidesComponentType(sourceProvidesComponentType, targetProvidesComponentType);
		}
	}

	relation Mark_repository_ImplementationComponentType {

		checkonly domain source sourceImplementationComponentType:pcm::repository::ImplementationComponentType{
		};

		checkonly domain target targetImplementationComponentType:pcm::repository::ImplementationComponentType{
		};
		where {
			Mark_repository_RepositoryComponent(sourceImplementationComponentType, targetImplementationComponentType);
		}
	}

	relation Mark_completions_Completion {

		checkonly domain source sourceCompletion:completions::Completion{
		};

		checkonly domain target targetCompletion:completions::Completion{
		};
		where {
			Mark_entity_ComposedProvidingRequiringEntity(sourceCompletion, targetCompletion);
			Mark_repository_ImplementationComponentType(sourceCompletion, targetCompletion);
		}
	}

	top relation Copy_completions_Completion {

		checkonly domain source sourceCompletion:completions::Completion{
		};

		enforce domain target targetCompletion:completions::Completion{
		};
		where {
			Mark_completions_Completion(sourceCompletion, targetCompletion);
		}
	}

	relation Mark_repository_CompleteComponentType {

		checkonly domain source sourceCompleteComponentType:pcm::repository::CompleteComponentType{
		};

		checkonly domain target targetCompleteComponentType:pcm::repository::CompleteComponentType{
		};
		where {
			Mark_repository_RepositoryComponent(sourceCompleteComponentType, targetCompleteComponentType);
		}
	}

	top relation Copy_repository_CompleteComponentType {

		checkonly domain source sourceCompleteComponentType:pcm::repository::CompleteComponentType{
		};

		enforce domain target targetCompleteComponentType:pcm::repository::CompleteComponentType{
		};
		where {
			Mark_repository_CompleteComponentType(sourceCompleteComponentType, targetCompleteComponentType);
		}
	}

	relation Mark_repository_DelegationConnector {

		checkonly domain source sourceDelegationConnector:pcm::repository::DelegationConnector{
		};

		checkonly domain target targetDelegationConnector:pcm::repository::DelegationConnector{
		};
		where {
			Mark_connectors_Connector(sourceDelegationConnector, targetDelegationConnector);
		}
	}

	relation Mark_composition_RequiredDelegationConnector {

		checkonly domain source sourceRequiredDelegationConnector:pcm::core::composition::RequiredDelegationConnector{
		};

		checkonly domain target targetRequiredDelegationConnector:pcm::core::composition::RequiredDelegationConnector{
		};
		where {
			Mark_repository_DelegationConnector(sourceRequiredDelegationConnector, targetRequiredDelegationConnector);
		}
	}

	top relation Copy_composition_RequiredDelegationConnector {

		checkonly domain source sourceRequiredDelegationConnector:pcm::core::composition::RequiredDelegationConnector{
		};

		enforce domain target targetRequiredDelegationConnector:pcm::core::composition::RequiredDelegationConnector{
		};
		where {
			Mark_composition_RequiredDelegationConnector(sourceRequiredDelegationConnector, targetRequiredDelegationConnector);
		}
	}

	relation Mark_composition_ProvidedDelegationConnector {

		checkonly domain source sourceProvidedDelegationConnector:pcm::core::composition::ProvidedDelegationConnector{
		};

		checkonly domain target targetProvidedDelegationConnector:pcm::core::composition::ProvidedDelegationConnector{
		};
		where {
			Mark_repository_DelegationConnector(sourceProvidedDelegationConnector, targetProvidedDelegationConnector);
		}
	}

	top relation Copy_composition_ProvidedDelegationConnector {

		checkonly domain source sourceProvidedDelegationConnector:pcm::core::composition::ProvidedDelegationConnector{
		};

		enforce domain target targetProvidedDelegationConnector:pcm::core::composition::ProvidedDelegationConnector{
		};
		where {
			Mark_composition_ProvidedDelegationConnector(sourceProvidedDelegationConnector, targetProvidedDelegationConnector);
		}
	}

	relation Mark_repository_CompositeComponent {

		checkonly domain source sourceCompositeComponent:pcm::repository::CompositeComponent{
		};

		checkonly domain target targetCompositeComponent:pcm::repository::CompositeComponent{
		};
		where {
			Mark_entity_ComposedProvidingRequiringEntity(sourceCompositeComponent, targetCompositeComponent);
			Mark_repository_ImplementationComponentType(sourceCompositeComponent, targetCompositeComponent);
		}
	}

	top relation Copy_repository_CompositeComponent {

		checkonly domain source sourceCompositeComponent:pcm::repository::CompositeComponent{
		};

		enforce domain target targetCompositeComponent:pcm::repository::CompositeComponent{
		};
		where {
			Mark_repository_CompositeComponent(sourceCompositeComponent, targetCompositeComponent);
		}
	}

	relation Mark_repository_BasicComponent {

		checkonly domain source sourceBasicComponent:pcm::repository::BasicComponent{
		};

		checkonly domain target targetBasicComponent:pcm::repository::BasicComponent{
		};
		where {
			Mark_repository_ImplementationComponentType(sourceBasicComponent, targetBasicComponent);
		}
	}

	top relation Copy_repository_BasicComponent {

		checkonly domain source sourceBasicComponent:pcm::repository::BasicComponent{
		};

		enforce domain target targetBasicComponent:pcm::repository::BasicComponent{
		};
		where {
			Mark_repository_BasicComponent(sourceBasicComponent, targetBasicComponent);
		}
	}

	relation Mark_repository_PrimitiveDataType {

		checkonly domain source sourcePrimitiveDataType:pcm::repository::PrimitiveDataType{
		};

		checkonly domain target targetPrimitiveDataType:pcm::repository::PrimitiveDataType{
		};
		where {
			Mark_repository_DataType(sourcePrimitiveDataType, targetPrimitiveDataType);
		}
	}

	top relation Copy_repository_PrimitiveDataType {

		checkonly domain source sourcePrimitiveDataType:pcm::repository::PrimitiveDataType{
		};

		enforce domain target targetPrimitiveDataType:pcm::repository::PrimitiveDataType{
		};
		where {
			Mark_repository_PrimitiveDataType(sourcePrimitiveDataType, targetPrimitiveDataType);
		}
	}

	relation Mark_repository_CollectionDataType {

		checkonly domain source sourceCollectionDataType:pcm::repository::CollectionDataType{
		};

		checkonly domain target targetCollectionDataType:pcm::repository::CollectionDataType{
		};
		where {
			Mark_entity_Entity(sourceCollectionDataType, targetCollectionDataType);
			Mark_repository_DataType(sourceCollectionDataType, targetCollectionDataType);
		}
	}

	top relation Copy_repository_CollectionDataType {

		checkonly domain source sourceCollectionDataType:pcm::repository::CollectionDataType{
		};

		enforce domain target targetCollectionDataType:pcm::repository::CollectionDataType{
		};
		where {
			Mark_repository_CollectionDataType(sourceCollectionDataType, targetCollectionDataType);
		}
	}

	relation Mark_repository_CompositeDataType {

		checkonly domain source sourceCompositeDataType:pcm::repository::CompositeDataType{
		};

		checkonly domain target targetCompositeDataType:pcm::repository::CompositeDataType{
		};
		where {
			Mark_entity_Entity(sourceCompositeDataType, targetCompositeDataType);
			Mark_repository_DataType(sourceCompositeDataType, targetCompositeDataType);
		}
	}

	top relation Copy_repository_CompositeDataType {

		checkonly domain source sourceCompositeDataType:pcm::repository::CompositeDataType{
		};

		enforce domain target targetCompositeDataType:pcm::repository::CompositeDataType{
		};
		where {
			Mark_repository_CompositeDataType(sourceCompositeDataType, targetCompositeDataType);
		}
	}

	relation Mark_repository_InnerDeclaration {

		checkonly domain source sourceInnerDeclaration:pcm::repository::InnerDeclaration{
		};

		checkonly domain target targetInnerDeclaration:pcm::repository::InnerDeclaration{
		};
		where {
			Mark_entity_NamedElement(sourceInnerDeclaration, targetInnerDeclaration);
		}
	}

	top relation Copy_repository_InnerDeclaration {

		checkonly domain source sourceInnerDeclaration:pcm::repository::InnerDeclaration{
		};

		enforce domain target targetInnerDeclaration:pcm::repository::InnerDeclaration{
		};
		where {
			Mark_repository_InnerDeclaration(sourceInnerDeclaration, targetInnerDeclaration);
		}
	}

	relation Mark_repository_ProvidedRole {

		checkonly domain source sourceProvidedRole:pcm::repository::ProvidedRole{
		};

		checkonly domain target targetProvidedRole:pcm::repository::ProvidedRole{
		};
		where {
			Mark_repository_Role(sourceProvidedRole, targetProvidedRole);
		}
	}

	top relation Copy_repository_ProvidedRole {

		checkonly domain source sourceProvidedRole:pcm::repository::ProvidedRole{
		};

		enforce domain target targetProvidedRole:pcm::repository::ProvidedRole{
		};
		where {
			Mark_repository_ProvidedRole(sourceProvidedRole, targetProvidedRole);
		}
	}

	relation Mark_protocol_ServiceCall {

		checkonly domain source sourceServiceCall:pcm::protocol::ServiceCall{
		};

		checkonly domain target targetServiceCall:pcm::protocol::ServiceCall{
		};
	}

	relation Mark_protocol_Protocol {

		checkonly domain source sourceProtocol:pcm::protocol::Protocol{
		};

		checkonly domain target targetProtocol:pcm::protocol::Protocol{
		};
	}

	relation Mark_parameter_VariableCharacterisation {

		checkonly domain source sourceVariableCharacterisation:pcm::parameter::VariableCharacterisation{
		};

		checkonly domain target targetVariableCharacterisation:pcm::parameter::VariableCharacterisation{
		};
	}

	top relation Copy_parameter_VariableCharacterisation {

		checkonly domain source sourceVariableCharacterisation:pcm::parameter::VariableCharacterisation{
		};

		enforce domain target targetVariableCharacterisation:pcm::parameter::VariableCharacterisation{
		};
		where {
			Mark_parameter_VariableCharacterisation(sourceVariableCharacterisation, targetVariableCharacterisation);
		}
	}

	relation Mark_parameter_VariableUsage {

		checkonly domain source sourceVariableUsage:pcm::parameter::VariableUsage{
		};

		checkonly domain target targetVariableUsage:pcm::parameter::VariableUsage{
		};
	}

	top relation Copy_parameter_VariableUsage {

		checkonly domain source sourceVariableUsage:pcm::parameter::VariableUsage{
		};

		enforce domain target targetVariableUsage:pcm::parameter::VariableUsage{
		};
		where {
			Mark_parameter_VariableUsage(sourceVariableUsage, targetVariableUsage);
		}
	}

	relation Mark_seff_AbstractAction {

		checkonly domain source sourceAbstractAction:pcm::seff::AbstractAction{
		};

		checkonly domain target targetAbstractAction:pcm::seff::AbstractAction{
		};
		where {
			Mark_entity_Entity(sourceAbstractAction, targetAbstractAction);
		}
	}

	relation Mark_seff_AbstractInternalControlFlowAction {

		checkonly domain source sourceAbstractInternalControlFlowAction:pcm::seff::AbstractInternalControlFlowAction{
		};

		checkonly domain target targetAbstractInternalControlFlowAction:pcm::seff::AbstractInternalControlFlowAction{
		};
		where {
			Mark_seff_AbstractAction(sourceAbstractInternalControlFlowAction, targetAbstractInternalControlFlowAction);
		}
	}

	relation Mark_seff_StopAction {

		checkonly domain source sourceStopAction:pcm::seff::StopAction{
		};

		checkonly domain target targetStopAction:pcm::seff::StopAction{
		};
		where {
			Mark_seff_AbstractInternalControlFlowAction(sourceStopAction, targetStopAction);
		}
	}

	top relation Copy_seff_StopAction {

		checkonly domain source sourceStopAction:pcm::seff::StopAction{
		};

		enforce domain target targetStopAction:pcm::seff::StopAction{
		};
		where {
			Mark_seff_StopAction(sourceStopAction, targetStopAction);
		}
	}

	relation Mark_seff_StartAction {

		checkonly domain source sourceStartAction:pcm::seff::StartAction{
		};

		checkonly domain target targetStartAction:pcm::seff::StartAction{
		};
		where {
			Mark_seff_AbstractInternalControlFlowAction(sourceStartAction, targetStartAction);
		}
	}

	top relation Copy_seff_StartAction {

		checkonly domain source sourceStartAction:pcm::seff::StartAction{
		};

		enforce domain target targetStartAction:pcm::seff::StartAction{
		};
		where {
			Mark_seff_StartAction(sourceStartAction, targetStartAction);
		}
	}

	relation Mark_seff_ResourceDemandingBehaviour {

		checkonly domain source sourceResourceDemandingBehaviour:pcm::seff::ResourceDemandingBehaviour{
		};

		checkonly domain target targetResourceDemandingBehaviour:pcm::seff::ResourceDemandingBehaviour{
		};
	}

	top relation Copy_seff_ResourceDemandingBehaviour {

		checkonly domain source sourceResourceDemandingBehaviour:pcm::seff::ResourceDemandingBehaviour{
		};

		enforce domain target targetResourceDemandingBehaviour:pcm::seff::ResourceDemandingBehaviour{
		};
		when {
		not Mark_seff_ResourceDemandingSEFF(sourceResourceDemandingBehaviour, targetResourceDemandingBehaviour);
		}
		where {
			Mark_seff_ResourceDemandingBehaviour(sourceResourceDemandingBehaviour, targetResourceDemandingBehaviour);
		}
	}

	relation Mark_seff_ReleaseAction {

		checkonly domain source sourceReleaseAction:pcm::seff::ReleaseAction{
		};

		checkonly domain target targetReleaseAction:pcm::seff::ReleaseAction{
		};
		where {
			Mark_seff_AbstractInternalControlFlowAction(sourceReleaseAction, targetReleaseAction);
		}
	}

	top relation Copy_seff_ReleaseAction {

		checkonly domain source sourceReleaseAction:pcm::seff::ReleaseAction{
		};

		enforce domain target targetReleaseAction:pcm::seff::ReleaseAction{
		};
		where {
			Mark_seff_ReleaseAction(sourceReleaseAction, targetReleaseAction);
		}
	}

	relation Mark_seff_AbstractLoopAction {

		checkonly domain source sourceAbstractLoopAction:pcm::seff::AbstractLoopAction{
		};

		checkonly domain target targetAbstractLoopAction:pcm::seff::AbstractLoopAction{
		};
		where {
			Mark_seff_AbstractInternalControlFlowAction(sourceAbstractLoopAction, targetAbstractLoopAction);
		}
	}

	relation Mark_seff_LoopAction {

		checkonly domain source sourceLoopAction:pcm::seff::LoopAction{
		};

		checkonly domain target targetLoopAction:pcm::seff::LoopAction{
		};
		where {
			Mark_seff_AbstractLoopAction(sourceLoopAction, targetLoopAction);
		}
	}

	top relation Copy_seff_LoopAction {

		checkonly domain source sourceLoopAction:pcm::seff::LoopAction{
		};

		enforce domain target targetLoopAction:pcm::seff::LoopAction{
		};
		where {
			Mark_seff_LoopAction(sourceLoopAction, targetLoopAction);
		}
	}

	relation Mark_seff_InternalAction {

		checkonly domain source sourceInternalAction:pcm::seff::InternalAction{
		};

		checkonly domain target targetInternalAction:pcm::seff::InternalAction{
		};
		where {
			Mark_seff_AbstractInternalControlFlowAction(sourceInternalAction, targetInternalAction);
		}
	}

	top relation Copy_seff_InternalAction {

		checkonly domain source sourceInternalAction:pcm::seff::InternalAction{
		};

		enforce domain target targetInternalAction:pcm::seff::InternalAction{
		};
		where {
			Mark_seff_InternalAction(sourceInternalAction, targetInternalAction);
		}
	}

	relation Mark_seff_ForkAction {

		checkonly domain source sourceForkAction:pcm::seff::ForkAction{
		};

		checkonly domain target targetForkAction:pcm::seff::ForkAction{
		};
		where {
			Mark_seff_AbstractInternalControlFlowAction(sourceForkAction, targetForkAction);
		}
	}

	top relation Copy_seff_ForkAction {

		checkonly domain source sourceForkAction:pcm::seff::ForkAction{
		};

		enforce domain target targetForkAction:pcm::seff::ForkAction{
		};
		where {
			Mark_seff_ForkAction(sourceForkAction, targetForkAction);
		}
	}

	relation Mark_seff_ForkedBehaviour {

		checkonly domain source sourceForkedBehaviour:pcm::seff::ForkedBehaviour{
		};

		checkonly domain target targetForkedBehaviour:pcm::seff::ForkedBehaviour{
		};
		where {
			Mark_seff_ResourceDemandingBehaviour(sourceForkedBehaviour, targetForkedBehaviour);
		}
	}

	top relation Copy_seff_ForkedBehaviour {

		checkonly domain source sourceForkedBehaviour:pcm::seff::ForkedBehaviour{
		};

		enforce domain target targetForkedBehaviour:pcm::seff::ForkedBehaviour{
		};
		where {
			Mark_seff_ForkedBehaviour(sourceForkedBehaviour, targetForkedBehaviour);
		}
	}

	relation Mark_seff_SynchronisationPoint {

		checkonly domain source sourceSynchronisationPoint:pcm::seff::SynchronisationPoint{
		};

		checkonly domain target targetSynchronisationPoint:pcm::seff::SynchronisationPoint{
		};
	}

	top relation Copy_seff_SynchronisationPoint {

		checkonly domain source sourceSynchronisationPoint:pcm::seff::SynchronisationPoint{
		};

		enforce domain target targetSynchronisationPoint:pcm::seff::SynchronisationPoint{
		};
		where {
			Mark_seff_SynchronisationPoint(sourceSynchronisationPoint, targetSynchronisationPoint);
		}
	}

	relation Mark_seff_ExternalCallAction {

		checkonly domain source sourceExternalCallAction:pcm::seff::ExternalCallAction{
		};

		checkonly domain target targetExternalCallAction:pcm::seff::ExternalCallAction{
		};
		where {
			Mark_seff_AbstractAction(sourceExternalCallAction, targetExternalCallAction);
		}
	}

	relation Mark_completions_DelegatingExternalCallAction {

		checkonly domain source sourceDelegatingExternalCallAction:completions::DelegatingExternalCallAction{
		};

		checkonly domain target targetDelegatingExternalCallAction:completions::DelegatingExternalCallAction{
		};
		where {
			Mark_seff_ExternalCallAction(sourceDelegatingExternalCallAction, targetDelegatingExternalCallAction);
		}
	}

	top relation Copy_completions_DelegatingExternalCallAction {

		checkonly domain source sourceDelegatingExternalCallAction:completions::DelegatingExternalCallAction{
		};

		enforce domain target targetDelegatingExternalCallAction:completions::DelegatingExternalCallAction{
		};
		where {
			Mark_completions_DelegatingExternalCallAction(sourceDelegatingExternalCallAction, targetDelegatingExternalCallAction);
		}
	}

	top relation Copy_seff_ExternalCallAction {

		checkonly domain source sourceExternalCallAction:pcm::seff::ExternalCallAction{
		};

		enforce domain target targetExternalCallAction:pcm::seff::ExternalCallAction{
		};
		when {
		not Mark_completions_DelegatingExternalCallAction(sourceExternalCallAction, targetExternalCallAction);
		}
		where {
			Mark_seff_ExternalCallAction(sourceExternalCallAction, targetExternalCallAction);
		}
	}

	relation Mark_seff_AbstractBranchTransition {

		checkonly domain source sourceAbstractBranchTransition:pcm::seff::AbstractBranchTransition{
		};

		checkonly domain target targetAbstractBranchTransition:pcm::seff::AbstractBranchTransition{
		};
		where {
			Mark_identifier_Identifier(sourceAbstractBranchTransition, targetAbstractBranchTransition);
		}
	}

	relation Mark_seff_ProbabilisticBranchTransition {

		checkonly domain source sourceProbabilisticBranchTransition:pcm::seff::ProbabilisticBranchTransition{
		};

		checkonly domain target targetProbabilisticBranchTransition:pcm::seff::ProbabilisticBranchTransition{
		};
		where {
			Mark_seff_AbstractBranchTransition(sourceProbabilisticBranchTransition, targetProbabilisticBranchTransition);
		}
	}

	top relation Copy_seff_ProbabilisticBranchTransition {

		checkonly domain source sourceProbabilisticBranchTransition:pcm::seff::ProbabilisticBranchTransition{
		};

		enforce domain target targetProbabilisticBranchTransition:pcm::seff::ProbabilisticBranchTransition{
		};
		where {
			Mark_seff_ProbabilisticBranchTransition(sourceProbabilisticBranchTransition, targetProbabilisticBranchTransition);
		}
	}

	relation Mark_seff_BranchAction {

		checkonly domain source sourceBranchAction:pcm::seff::BranchAction{
		};

		checkonly domain target targetBranchAction:pcm::seff::BranchAction{
		};
		where {
			Mark_seff_AbstractInternalControlFlowAction(sourceBranchAction, targetBranchAction);
		}
	}

	top relation Copy_seff_BranchAction {

		checkonly domain source sourceBranchAction:pcm::seff::BranchAction{
		};

		enforce domain target targetBranchAction:pcm::seff::BranchAction{
		};
		where {
			Mark_seff_BranchAction(sourceBranchAction, targetBranchAction);
		}
	}

	relation Mark_seff_AcquireAction {

		checkonly domain source sourceAcquireAction:pcm::seff::AcquireAction{
		};

		checkonly domain target targetAcquireAction:pcm::seff::AcquireAction{
		};
		where {
			Mark_seff_AbstractInternalControlFlowAction(sourceAcquireAction, targetAcquireAction);
		}
	}

	top relation Copy_seff_AcquireAction {

		checkonly domain source sourceAcquireAction:pcm::seff::AcquireAction{
		};

		enforce domain target targetAcquireAction:pcm::seff::AcquireAction{
		};
		where {
			Mark_seff_AcquireAction(sourceAcquireAction, targetAcquireAction);
		}
	}

	relation Mark_seff_CollectionIteratorAction {

		checkonly domain source sourceCollectionIteratorAction:pcm::seff::CollectionIteratorAction{
		};

		checkonly domain target targetCollectionIteratorAction:pcm::seff::CollectionIteratorAction{
		};
		where {
			Mark_seff_AbstractLoopAction(sourceCollectionIteratorAction, targetCollectionIteratorAction);
		}
	}

	top relation Copy_seff_CollectionIteratorAction {

		checkonly domain source sourceCollectionIteratorAction:pcm::seff::CollectionIteratorAction{
		};

		enforce domain target targetCollectionIteratorAction:pcm::seff::CollectionIteratorAction{
		};
		where {
			Mark_seff_CollectionIteratorAction(sourceCollectionIteratorAction, targetCollectionIteratorAction);
		}
	}

	relation Mark_seff_GuardedBranchTransition {

		checkonly domain source sourceGuardedBranchTransition:pcm::seff::GuardedBranchTransition{
		};

		checkonly domain target targetGuardedBranchTransition:pcm::seff::GuardedBranchTransition{
		};
		where {
			Mark_seff_AbstractBranchTransition(sourceGuardedBranchTransition, targetGuardedBranchTransition);
		}
	}

	top relation Copy_seff_GuardedBranchTransition {

		checkonly domain source sourceGuardedBranchTransition:pcm::seff::GuardedBranchTransition{
		};

		enforce domain target targetGuardedBranchTransition:pcm::seff::GuardedBranchTransition{
		};
		where {
			Mark_seff_GuardedBranchTransition(sourceGuardedBranchTransition, targetGuardedBranchTransition);
		}
	}

	relation Mark_seff_SetVariableAction {

		checkonly domain source sourceSetVariableAction:pcm::seff::SetVariableAction{
		};

		checkonly domain target targetSetVariableAction:pcm::seff::SetVariableAction{
		};
		where {
			Mark_seff_AbstractInternalControlFlowAction(sourceSetVariableAction, targetSetVariableAction);
		}
	}

	top relation Copy_seff_SetVariableAction {

		checkonly domain source sourceSetVariableAction:pcm::seff::SetVariableAction{
		};

		enforce domain target targetSetVariableAction:pcm::seff::SetVariableAction{
		};
		where {
			Mark_seff_SetVariableAction(sourceSetVariableAction, targetSetVariableAction);
		}
	}

	relation Mark_seff_ServiceEffectSpecification {

		checkonly domain source sourceServiceEffectSpecification:pcm::seff::ServiceEffectSpecification{
		};

		checkonly domain target targetServiceEffectSpecification:pcm::seff::ServiceEffectSpecification{
		};
	}

	relation Mark_seff_ResourceDemandingSEFF {

		checkonly domain source sourceResourceDemandingSEFF:pcm::seff::ResourceDemandingSEFF{
		};

		checkonly domain target targetResourceDemandingSEFF:pcm::seff::ResourceDemandingSEFF{
		};
		where {
			Mark_identifier_Identifier(sourceResourceDemandingSEFF, targetResourceDemandingSEFF);
			Mark_seff_ServiceEffectSpecification(sourceResourceDemandingSEFF, targetResourceDemandingSEFF);
			Mark_seff_ResourceDemandingBehaviour(sourceResourceDemandingSEFF, targetResourceDemandingSEFF);
		}
	}

	top relation Copy_seff_ResourceDemandingSEFF {

		checkonly domain source sourceResourceDemandingSEFF:pcm::seff::ResourceDemandingSEFF{
		};

		enforce domain target targetResourceDemandingSEFF:pcm::seff::ResourceDemandingSEFF{
		};
		where {
			Mark_seff_ResourceDemandingSEFF(sourceResourceDemandingSEFF, targetResourceDemandingSEFF);
		}
	}

	relation Mark_performance_ParametricResourceDemand {

		checkonly domain source sourceParametricResourceDemand:pcm::seff::performance::ParametricResourceDemand{
		};

		checkonly domain target targetParametricResourceDemand:pcm::seff::performance::ParametricResourceDemand{
		};
	}

	top relation Copy_performance_ParametricResourceDemand {

		checkonly domain source sourceParametricResourceDemand:pcm::seff::performance::ParametricResourceDemand{
		};

		enforce domain target targetParametricResourceDemand:pcm::seff::performance::ParametricResourceDemand{
		};
		where {
			Mark_performance_ParametricResourceDemand(sourceParametricResourceDemand, targetParametricResourceDemand);
		}
	}

	relation Mark_resourcetype_ResourceRepository {

		checkonly domain source sourceResourceRepository:pcm::resourcetype::ResourceRepository{
		};

		checkonly domain target targetResourceRepository:pcm::resourcetype::ResourceRepository{
		};
	}

	top relation Copy_resourcetype_ResourceRepository {

		checkonly domain source sourceResourceRepository:pcm::resourcetype::ResourceRepository{
		};

		enforce domain target targetResourceRepository:pcm::resourcetype::ResourceRepository{
		};
		where {
			Mark_resourcetype_ResourceRepository(sourceResourceRepository, targetResourceRepository);
		}
	}

	relation Mark_allocation_AllocationContext {

		checkonly domain source sourceAllocationContext:pcm::allocation::AllocationContext{
		};

		checkonly domain target targetAllocationContext:pcm::allocation::AllocationContext{
		};
		where {
			Mark_entity_Entity(sourceAllocationContext, targetAllocationContext);
		}
	}

	top relation Copy_allocation_AllocationContext {

		checkonly domain source sourceAllocationContext:pcm::allocation::AllocationContext{
		};

		enforce domain target targetAllocationContext:pcm::allocation::AllocationContext{
		};
		where {
			Mark_allocation_AllocationContext(sourceAllocationContext, targetAllocationContext);
		}
	}

	relation Mark_allocation_Allocation {

		checkonly domain source sourceAllocation:pcm::allocation::Allocation{
		};

		checkonly domain target targetAllocation:pcm::allocation::Allocation{
		};
		where {
			Mark_entity_Entity(sourceAllocation, targetAllocation);
		}
	}

	top relation Copy_allocation_Allocation {

		checkonly domain source sourceAllocation:pcm::allocation::Allocation{
		};

		enforce domain target targetAllocation:pcm::allocation::Allocation{
		};
		where {
			Mark_allocation_Allocation(sourceAllocation, targetAllocation);
		}
	}

	relation Mark_resourceenvironment_ResourceEnvironment {

		checkonly domain source sourceResourceEnvironment:pcm::resourceenvironment::ResourceEnvironment{
		};

		checkonly domain target targetResourceEnvironment:pcm::resourceenvironment::ResourceEnvironment{
		};
	}

	top relation Copy_resourceenvironment_ResourceEnvironment {

		checkonly domain source sourceResourceEnvironment:pcm::resourceenvironment::ResourceEnvironment{
		};

		enforce domain target targetResourceEnvironment:pcm::resourceenvironment::ResourceEnvironment{
		};
		where {
			Mark_resourceenvironment_ResourceEnvironment(sourceResourceEnvironment, targetResourceEnvironment);
		}
	}

	relation Mark_resourceenvironment_LinkingResource {

		checkonly domain source sourceLinkingResource:pcm::resourceenvironment::LinkingResource{
		};

		checkonly domain target targetLinkingResource:pcm::resourceenvironment::LinkingResource{
		};
		where {
			Mark_entity_Entity(sourceLinkingResource, targetLinkingResource);
		}
	}

	top relation Copy_resourceenvironment_LinkingResource {

		checkonly domain source sourceLinkingResource:pcm::resourceenvironment::LinkingResource{
		};

		enforce domain target targetLinkingResource:pcm::resourceenvironment::LinkingResource{
		};
		where {
			Mark_resourceenvironment_LinkingResource(sourceLinkingResource, targetLinkingResource);
		}
	}

	relation Mark_resourceenvironment_CommunicationLinkResourceSpecification {

		checkonly domain source sourceCommunicationLinkResourceSpecification:pcm::resourceenvironment::CommunicationLinkResourceSpecification{
		};

		checkonly domain target targetCommunicationLinkResourceSpecification:pcm::resourceenvironment::CommunicationLinkResourceSpecification{
		};
	}

	top relation Copy_resourceenvironment_CommunicationLinkResourceSpecification {

		checkonly domain source sourceCommunicationLinkResourceSpecification:pcm::resourceenvironment::CommunicationLinkResourceSpecification{
		};

		enforce domain target targetCommunicationLinkResourceSpecification:pcm::resourceenvironment::CommunicationLinkResourceSpecification{
		};
		where {
			Mark_resourceenvironment_CommunicationLinkResourceSpecification(sourceCommunicationLinkResourceSpecification, targetCommunicationLinkResourceSpecification);
		}
	}

	relation Mark_resourceenvironment_ProcessingResourceSpecification {

		checkonly domain source sourceProcessingResourceSpecification:pcm::resourceenvironment::ProcessingResourceSpecification{
		};

		checkonly domain target targetProcessingResourceSpecification:pcm::resourceenvironment::ProcessingResourceSpecification{
		};
	}

	top relation Copy_resourceenvironment_ProcessingResourceSpecification {

		checkonly domain source sourceProcessingResourceSpecification:pcm::resourceenvironment::ProcessingResourceSpecification{
		};

		enforce domain target targetProcessingResourceSpecification:pcm::resourceenvironment::ProcessingResourceSpecification{
		};
		where {
			Mark_resourceenvironment_ProcessingResourceSpecification(sourceProcessingResourceSpecification, targetProcessingResourceSpecification);
		}
	}

	relation Mark_resourceenvironment_ResourceContainer {

		checkonly domain source sourceResourceContainer:pcm::resourceenvironment::ResourceContainer{
		};

		checkonly domain target targetResourceContainer:pcm::resourceenvironment::ResourceContainer{
		};
		where {
			Mark_entity_Entity(sourceResourceContainer, targetResourceContainer);
		}
	}

	top relation Copy_resourceenvironment_ResourceContainer {

		checkonly domain source sourceResourceContainer:pcm::resourceenvironment::ResourceContainer{
		};

		enforce domain target targetResourceContainer:pcm::resourceenvironment::ResourceContainer{
		};
		where {
			Mark_resourceenvironment_ResourceContainer(sourceResourceContainer, targetResourceContainer);
		}
	}

	relation Mark_system_System {

		checkonly domain source sourceSystem:pcm::system::System{
		};

		checkonly domain target targetSystem:pcm::system::System{
		};
		where {
			Mark_entity_Entity(sourceSystem, targetSystem);
			Mark_entity_ComposedProvidingRequiringEntity(sourceSystem, targetSystem);
		}
	}

	top relation Copy_system_System {

		checkonly domain source sourceSystem:pcm::system::System{
		};

		enforce domain target targetSystem:pcm::system::System{
		};
		where {
			Mark_system_System(sourceSystem, targetSystem);
		}
	}

	relation Mark_qosannotations_SpecifiedQoSAnnotation {

		checkonly domain source sourceSpecifiedQoSAnnotation:pcm::qosannotations::SpecifiedQoSAnnotation{
		};

		checkonly domain target targetSpecifiedQoSAnnotation:pcm::qosannotations::SpecifiedQoSAnnotation{
		};
	}

	relation Mark_qosannotations_SpecifiedOutputParameterAbstraction {

		checkonly domain source sourceSpecifiedOutputParameterAbstraction:pcm::qosannotations::SpecifiedOutputParameterAbstraction{
		};

		checkonly domain target targetSpecifiedOutputParameterAbstraction:pcm::qosannotations::SpecifiedOutputParameterAbstraction{
		};
	}

	relation Mark_qosannotations_QoSAnnotations {

		checkonly domain source sourceQoSAnnotations:pcm::qosannotations::QoSAnnotations{
		};

		checkonly domain target targetQoSAnnotations:pcm::qosannotations::QoSAnnotations{
		};
		where {
			Mark_entity_Entity(sourceQoSAnnotations, targetQoSAnnotations);
		}
	}

	top relation Copy_qosannotations_QoSAnnotations {

		checkonly domain source sourceQoSAnnotations:pcm::qosannotations::QoSAnnotations{
		};

		enforce domain target targetQoSAnnotations:pcm::qosannotations::QoSAnnotations{
		};
		where {
			Mark_qosannotations_QoSAnnotations(sourceQoSAnnotations, targetQoSAnnotations);
		}
	}

	relation Mark_performance_SystemSpecifiedExecutionTime {

		checkonly domain source sourceSystemSpecifiedExecutionTime:pcm::qosannotations::performance::SystemSpecifiedExecutionTime{
		};

		checkonly domain target targetSystemSpecifiedExecutionTime:pcm::qosannotations::performance::SystemSpecifiedExecutionTime{
		};
		where {
			Mark_qosannotations_SpecifiedQoSAnnotation(sourceSystemSpecifiedExecutionTime, targetSystemSpecifiedExecutionTime);
		}
	}

	top relation Copy_performance_SystemSpecifiedExecutionTime {

		checkonly domain source sourceSystemSpecifiedExecutionTime:pcm::qosannotations::performance::SystemSpecifiedExecutionTime{
		};

		enforce domain target targetSystemSpecifiedExecutionTime:pcm::qosannotations::performance::SystemSpecifiedExecutionTime{
		};
		where {
			Mark_performance_SystemSpecifiedExecutionTime(sourceSystemSpecifiedExecutionTime, targetSystemSpecifiedExecutionTime);
		}
	}

	relation Mark_performance_ComponentSpecifiedExecutionTime {

		checkonly domain source sourceComponentSpecifiedExecutionTime:pcm::qosannotations::performance::ComponentSpecifiedExecutionTime{
		};

		checkonly domain target targetComponentSpecifiedExecutionTime:pcm::qosannotations::performance::ComponentSpecifiedExecutionTime{
		};
		where {
			Mark_qosannotations_SpecifiedQoSAnnotation(sourceComponentSpecifiedExecutionTime, targetComponentSpecifiedExecutionTime);
		}
	}

	top relation Copy_performance_ComponentSpecifiedExecutionTime {

		checkonly domain source sourceComponentSpecifiedExecutionTime:pcm::qosannotations::performance::ComponentSpecifiedExecutionTime{
		};

		enforce domain target targetComponentSpecifiedExecutionTime:pcm::qosannotations::performance::ComponentSpecifiedExecutionTime{
		};
		where {
			Mark_performance_ComponentSpecifiedExecutionTime(sourceComponentSpecifiedExecutionTime, targetComponentSpecifiedExecutionTime);
		}
	}

	relation Mark_reliability_SpecifiedFailureProbability {

		checkonly domain source sourceSpecifiedFailureProbability:pcm::qosannotations::reliability::SpecifiedFailureProbability{
		};

		checkonly domain target targetSpecifiedFailureProbability:pcm::qosannotations::reliability::SpecifiedFailureProbability{
		};
		where {
			Mark_qosannotations_SpecifiedQoSAnnotation(sourceSpecifiedFailureProbability, targetSpecifiedFailureProbability);
		}
	}

	top relation Copy_reliability_SpecifiedFailureProbability {

		checkonly domain source sourceSpecifiedFailureProbability:pcm::qosannotations::reliability::SpecifiedFailureProbability{
		};

		enforce domain target targetSpecifiedFailureProbability:pcm::qosannotations::reliability::SpecifiedFailureProbability{
		};
		where {
			Mark_reliability_SpecifiedFailureProbability(sourceSpecifiedFailureProbability, targetSpecifiedFailureProbability);
		}
	}

	relation Mark_usagemodel_Workload {

		checkonly domain source sourceWorkload:pcm::usagemodel::Workload{
		};

		checkonly domain target targetWorkload:pcm::usagemodel::Workload{
		};
	}

	relation Mark_usagemodel_UsageScenario {

		checkonly domain source sourceUsageScenario:pcm::usagemodel::UsageScenario{
		};

		checkonly domain target targetUsageScenario:pcm::usagemodel::UsageScenario{
		};
		where {
			Mark_entity_Entity(sourceUsageScenario, targetUsageScenario);
		}
	}

	top relation Copy_usagemodel_UsageScenario {

		checkonly domain source sourceUsageScenario:pcm::usagemodel::UsageScenario{
		};

		enforce domain target targetUsageScenario:pcm::usagemodel::UsageScenario{
		};
		where {
			Mark_usagemodel_UsageScenario(sourceUsageScenario, targetUsageScenario);
		}
	}

	relation Mark_usagemodel_ScenarioBehaviour {

		checkonly domain source sourceScenarioBehaviour:pcm::usagemodel::ScenarioBehaviour{
		};

		checkonly domain target targetScenarioBehaviour:pcm::usagemodel::ScenarioBehaviour{
		};
		where {
			Mark_entity_Entity(sourceScenarioBehaviour, targetScenarioBehaviour);
		}
	}

	top relation Copy_usagemodel_ScenarioBehaviour {

		checkonly domain source sourceScenarioBehaviour:pcm::usagemodel::ScenarioBehaviour{
		};

		enforce domain target targetScenarioBehaviour:pcm::usagemodel::ScenarioBehaviour{
		};
		where {
			Mark_usagemodel_ScenarioBehaviour(sourceScenarioBehaviour, targetScenarioBehaviour);
		}
	}

	relation Mark_usagemodel_AbstractUserAction {

		checkonly domain source sourceAbstractUserAction:pcm::usagemodel::AbstractUserAction{
		};

		checkonly domain target targetAbstractUserAction:pcm::usagemodel::AbstractUserAction{
		};
		where {
			Mark_entity_Entity(sourceAbstractUserAction, targetAbstractUserAction);
		}
	}

	relation Mark_usagemodel_UsageModel {

		checkonly domain source sourceUsageModel:pcm::usagemodel::UsageModel{
		};

		checkonly domain target targetUsageModel:pcm::usagemodel::UsageModel{
		};
	}

	top relation Copy_usagemodel_UsageModel {

		checkonly domain source sourceUsageModel:pcm::usagemodel::UsageModel{
		};

		enforce domain target targetUsageModel:pcm::usagemodel::UsageModel{
		};
		where {
			Mark_usagemodel_UsageModel(sourceUsageModel, targetUsageModel);
		}
	}

	relation Mark_usagemodel_UserData {

		checkonly domain source sourceUserData:pcm::usagemodel::UserData{
		};

		checkonly domain target targetUserData:pcm::usagemodel::UserData{
		};
	}

	top relation Copy_usagemodel_UserData {

		checkonly domain source sourceUserData:pcm::usagemodel::UserData{
		};

		enforce domain target targetUserData:pcm::usagemodel::UserData{
		};
		where {
			Mark_usagemodel_UserData(sourceUserData, targetUserData);
		}
	}

	relation Mark_usagemodel_Stop {

		checkonly domain source sourceStop:pcm::usagemodel::Stop{
		};

		checkonly domain target targetStop:pcm::usagemodel::Stop{
		};
		where {
			Mark_usagemodel_AbstractUserAction(sourceStop, targetStop);
		}
	}

	top relation Copy_usagemodel_Stop {

		checkonly domain source sourceStop:pcm::usagemodel::Stop{
		};

		enforce domain target targetStop:pcm::usagemodel::Stop{
		};
		where {
			Mark_usagemodel_Stop(sourceStop, targetStop);
		}
	}

	relation Mark_usagemodel_Start {

		checkonly domain source sourceStart:pcm::usagemodel::Start{
		};

		checkonly domain target targetStart:pcm::usagemodel::Start{
		};
		where {
			Mark_usagemodel_AbstractUserAction(sourceStart, targetStart);
		}
	}

	top relation Copy_usagemodel_Start {

		checkonly domain source sourceStart:pcm::usagemodel::Start{
		};

		enforce domain target targetStart:pcm::usagemodel::Start{
		};
		where {
			Mark_usagemodel_Start(sourceStart, targetStart);
		}
	}

	relation Mark_usagemodel_OpenWorkload {

		checkonly domain source sourceOpenWorkload:pcm::usagemodel::OpenWorkload{
		};

		checkonly domain target targetOpenWorkload:pcm::usagemodel::OpenWorkload{
		};
		where {
			Mark_usagemodel_Workload(sourceOpenWorkload, targetOpenWorkload);
		}
	}

	top relation Copy_usagemodel_OpenWorkload {

		checkonly domain source sourceOpenWorkload:pcm::usagemodel::OpenWorkload{
		};

		enforce domain target targetOpenWorkload:pcm::usagemodel::OpenWorkload{
		};
		where {
			Mark_usagemodel_OpenWorkload(sourceOpenWorkload, targetOpenWorkload);
		}
	}

	relation Mark_usagemodel_Loop {

		checkonly domain source sourceLoop:pcm::usagemodel::Loop{
		};

		checkonly domain target targetLoop:pcm::usagemodel::Loop{
		};
		where {
			Mark_usagemodel_AbstractUserAction(sourceLoop, targetLoop);
		}
	}

	top relation Copy_usagemodel_Loop {

		checkonly domain source sourceLoop:pcm::usagemodel::Loop{
		};

		enforce domain target targetLoop:pcm::usagemodel::Loop{
		};
		where {
			Mark_usagemodel_Loop(sourceLoop, targetLoop);
		}
	}

	relation Mark_usagemodel_EntryLevelSystemCall {

		checkonly domain source sourceEntryLevelSystemCall:pcm::usagemodel::EntryLevelSystemCall{
		};

		checkonly domain target targetEntryLevelSystemCall:pcm::usagemodel::EntryLevelSystemCall{
		};
		where {
			Mark_usagemodel_AbstractUserAction(sourceEntryLevelSystemCall, targetEntryLevelSystemCall);
		}
	}

	top relation Copy_usagemodel_EntryLevelSystemCall {

		checkonly domain source sourceEntryLevelSystemCall:pcm::usagemodel::EntryLevelSystemCall{
		};

		enforce domain target targetEntryLevelSystemCall:pcm::usagemodel::EntryLevelSystemCall{
		};
		where {
			Mark_usagemodel_EntryLevelSystemCall(sourceEntryLevelSystemCall, targetEntryLevelSystemCall);
		}
	}

	relation Mark_usagemodel_ClosedWorkload {

		checkonly domain source sourceClosedWorkload:pcm::usagemodel::ClosedWorkload{
		};

		checkonly domain target targetClosedWorkload:pcm::usagemodel::ClosedWorkload{
		};
		where {
			Mark_usagemodel_Workload(sourceClosedWorkload, targetClosedWorkload);
		}
	}

	top relation Copy_usagemodel_ClosedWorkload {

		checkonly domain source sourceClosedWorkload:pcm::usagemodel::ClosedWorkload{
		};

		enforce domain target targetClosedWorkload:pcm::usagemodel::ClosedWorkload{
		};
		where {
			Mark_usagemodel_ClosedWorkload(sourceClosedWorkload, targetClosedWorkload);
		}
	}

	relation Mark_usagemodel_Branch {

		checkonly domain source sourceBranch:pcm::usagemodel::Branch{
		};

		checkonly domain target targetBranch:pcm::usagemodel::Branch{
		};
		where {
			Mark_usagemodel_AbstractUserAction(sourceBranch, targetBranch);
		}
	}

	top relation Copy_usagemodel_Branch {

		checkonly domain source sourceBranch:pcm::usagemodel::Branch{
		};

		enforce domain target targetBranch:pcm::usagemodel::Branch{
		};
		where {
			Mark_usagemodel_Branch(sourceBranch, targetBranch);
		}
	}

	relation Mark_usagemodel_BranchTransition {

		checkonly domain source sourceBranchTransition:pcm::usagemodel::BranchTransition{
		};

		checkonly domain target targetBranchTransition:pcm::usagemodel::BranchTransition{
		};
	}

	top relation Copy_usagemodel_BranchTransition {

		checkonly domain source sourceBranchTransition:pcm::usagemodel::BranchTransition{
		};

		enforce domain target targetBranchTransition:pcm::usagemodel::BranchTransition{
		};
		where {
			Mark_usagemodel_BranchTransition(sourceBranchTransition, targetBranchTransition);
		}
	}

	relation Mark_usagemodel_Delay {

		checkonly domain source sourceDelay:pcm::usagemodel::Delay{
		};

		checkonly domain target targetDelay:pcm::usagemodel::Delay{
		};
		where {
			Mark_usagemodel_AbstractUserAction(sourceDelay, targetDelay);
		}
	}

	top relation Copy_usagemodel_Delay {

		checkonly domain source sourceDelay:pcm::usagemodel::Delay{
		};

		enforce domain target targetDelay:pcm::usagemodel::Delay{
		};
		where {
			Mark_usagemodel_Delay(sourceDelay, targetDelay);
		}
	}

	relation Mark_subsystem_SubSystem {

		checkonly domain source sourceSubSystem:pcm::subsystem::SubSystem{
		};

		checkonly domain target targetSubSystem:pcm::subsystem::SubSystem{
		};
		where {
			Mark_entity_ComposedProvidingRequiringEntity(sourceSubSystem, targetSubSystem);
			Mark_repository_RepositoryComponent(sourceSubSystem, targetSubSystem);
		}
	}

	top relation Copy_subsystem_SubSystem {

		checkonly domain source sourceSubSystem:pcm::subsystem::SubSystem{
		};

		enforce domain target targetSubSystem:pcm::subsystem::SubSystem{
		};
		where {
			Mark_subsystem_SubSystem(sourceSubSystem, targetSubSystem);
		}
	}

	relation Mark_probfunction_ContinuousSample {

		checkonly domain source sourceContinuousSample:probfunction::ContinuousSample{
		};

		checkonly domain target targetContinuousSample:probfunction::ContinuousSample{
		};
	}

	top relation Copy_probfunction_ContinuousSample {

		checkonly domain source sourceContinuousSample:probfunction::ContinuousSample{
		};

		enforce domain target targetContinuousSample:probfunction::ContinuousSample{
		};
		where {
			Mark_probfunction_ContinuousSample(sourceContinuousSample, targetContinuousSample);
		}
	}

	relation Mark_probfunction_Sample {

		checkonly domain source sourceSample:probfunction::Sample{
		};

		checkonly domain target targetSample:probfunction::Sample{
		};
	}

	top relation Copy_probfunction_Sample {

		checkonly domain source sourceSample:probfunction::Sample{
		};

		enforce domain target targetSample:probfunction::Sample{
		};
		where {
			Mark_probfunction_Sample(sourceSample, targetSample);
		}
	}

	relation Mark_probfunction_Complex {

		checkonly domain source sourceComplex:probfunction::Complex{
		};

		checkonly domain target targetComplex:probfunction::Complex{
		};
	}

	top relation Copy_probfunction_Complex {

		checkonly domain source sourceComplex:probfunction::Complex{
		};

		enforce domain target targetComplex:probfunction::Complex{
		};
		where {
			Mark_probfunction_Complex(sourceComplex, targetComplex);
		}
	}

	relation Mark_stoex_AbstractNamedReference {

		checkonly domain source sourceAbstractNamedReference:stoex::AbstractNamedReference{
		};

		checkonly domain target targetAbstractNamedReference:stoex::AbstractNamedReference{
		};
	}

	relation Mark_stoex_VariableReference {

		checkonly domain source sourceVariableReference:stoex::VariableReference{
		};

		checkonly domain target targetVariableReference:stoex::VariableReference{
		};
		where {
			Mark_stoex_AbstractNamedReference(sourceVariableReference, targetVariableReference);
		}
	}

	top relation Copy_stoex_VariableReference {

		checkonly domain source sourceVariableReference:stoex::VariableReference{
		};

		enforce domain target targetVariableReference:stoex::VariableReference{
		};
		where {
			Mark_stoex_VariableReference(sourceVariableReference, targetVariableReference);
		}
	}

	relation Mark_stoex_NamespaceReference {

		checkonly domain source sourceNamespaceReference:stoex::NamespaceReference{
		};

		checkonly domain target targetNamespaceReference:stoex::NamespaceReference{
		};
		where {
			Mark_stoex_AbstractNamedReference(sourceNamespaceReference, targetNamespaceReference);
		}
	}

	top relation Copy_stoex_NamespaceReference {

		checkonly domain source sourceNamespaceReference:stoex::NamespaceReference{
		};

		enforce domain target targetNamespaceReference:stoex::NamespaceReference{
		};
		where {
			Mark_stoex_NamespaceReference(sourceNamespaceReference, targetNamespaceReference);
		}
	}

	relation Mark_stoex_Expression {

		checkonly domain source sourceExpression:stoex::Expression{
		};

		checkonly domain target targetExpression:stoex::Expression{
		};
	}

	relation Mark_stoex_IfElse {

		checkonly domain source sourceIfElse:stoex::IfElse{
		};

		checkonly domain target targetIfElse:stoex::IfElse{
		};
		where {
			Mark_stoex_Expression(sourceIfElse, targetIfElse);
		}
	}

	relation Mark_stoex_BooleanExpression {

		checkonly domain source sourceBooleanExpression:stoex::BooleanExpression{
		};

		checkonly domain target targetBooleanExpression:stoex::BooleanExpression{
		};
		where {
			Mark_stoex_IfElse(sourceBooleanExpression, targetBooleanExpression);
		}
	}

	relation Mark_stoex_Comparison {

		checkonly domain source sourceComparison:stoex::Comparison{
		};

		checkonly domain target targetComparison:stoex::Comparison{
		};
		where {
			Mark_stoex_BooleanExpression(sourceComparison, targetComparison);
		}
	}

	relation Mark_stoex_Term {

		checkonly domain source sourceTerm:stoex::Term{
		};

		checkonly domain target targetTerm:stoex::Term{
		};
		where {
			Mark_stoex_Comparison(sourceTerm, targetTerm);
		}
	}

	relation Mark_stoex_Product {

		checkonly domain source sourceProduct:stoex::Product{
		};

		checkonly domain target targetProduct:stoex::Product{
		};
		where {
			Mark_stoex_Term(sourceProduct, targetProduct);
		}
	}

	relation Mark_stoex_Power {

		checkonly domain source sourcePower:stoex::Power{
		};

		checkonly domain target targetPower:stoex::Power{
		};
		where {
			Mark_stoex_Product(sourcePower, targetPower);
		}
	}

	relation Mark_stoex_Unary {

		checkonly domain source sourceUnary:stoex::Unary{
		};

		checkonly domain target targetUnary:stoex::Unary{
		};
		where {
			Mark_stoex_Power(sourceUnary, targetUnary);
		}
	}

	relation Mark_stoex_Atom {

		checkonly domain source sourceAtom:stoex::Atom{
		};

		checkonly domain target targetAtom:stoex::Atom{
		};
		where {
			Mark_stoex_Unary(sourceAtom, targetAtom);
		}
	}

	relation Mark_stoex_Variable {

		checkonly domain source sourceVariable:stoex::Variable{
		};

		checkonly domain target targetVariable:stoex::Variable{
		};
		where {
			Mark_stoex_Atom(sourceVariable, targetVariable);
		}
	}

	relation Mark_parameter_CharacterisedVariable {

		checkonly domain source sourceCharacterisedVariable:pcm::parameter::CharacterisedVariable{
		};

		checkonly domain target targetCharacterisedVariable:pcm::parameter::CharacterisedVariable{
		};
		where {
			Mark_stoex_Variable(sourceCharacterisedVariable, targetCharacterisedVariable);
		}
	}

	top relation Copy_parameter_CharacterisedVariable {

		checkonly domain source sourceCharacterisedVariable:pcm::parameter::CharacterisedVariable{
		};

		enforce domain target targetCharacterisedVariable:pcm::parameter::CharacterisedVariable{
		};
		where {
			Mark_parameter_CharacterisedVariable(sourceCharacterisedVariable, targetCharacterisedVariable);
		}
	}

	top relation Copy_stoex_Variable {

		checkonly domain source sourceVariable:stoex::Variable{
		};

		enforce domain target targetVariable:stoex::Variable{
		};
		when {
		not Mark_parameter_CharacterisedVariable(sourceVariable, targetVariable);
		}
		where {
			Mark_stoex_Variable(sourceVariable, targetVariable);
		}
	}

	relation Mark_stoex_TermExpression {

		checkonly domain source sourceTermExpression:stoex::TermExpression{
		};

		checkonly domain target targetTermExpression:stoex::TermExpression{
		};
		where {
			Mark_stoex_Term(sourceTermExpression, targetTermExpression);
		}
	}

	top relation Copy_stoex_TermExpression {

		checkonly domain source sourceTermExpression:stoex::TermExpression{
		};

		enforce domain target targetTermExpression:stoex::TermExpression{
		};
		where {
			Mark_stoex_TermExpression(sourceTermExpression, targetTermExpression);
		}
	}

	relation Mark_stoex_ProductExpression {

		checkonly domain source sourceProductExpression:stoex::ProductExpression{
		};

		checkonly domain target targetProductExpression:stoex::ProductExpression{
		};
		where {
			Mark_stoex_Product(sourceProductExpression, targetProductExpression);
		}
	}

	top relation Copy_stoex_ProductExpression {

		checkonly domain source sourceProductExpression:stoex::ProductExpression{
		};

		enforce domain target targetProductExpression:stoex::ProductExpression{
		};
		where {
			Mark_stoex_ProductExpression(sourceProductExpression, targetProductExpression);
		}
	}

	relation Mark_stoex_ProbabilityFunctionLiteral {

		checkonly domain source sourceProbabilityFunctionLiteral:stoex::ProbabilityFunctionLiteral{
		};

		checkonly domain target targetProbabilityFunctionLiteral:stoex::ProbabilityFunctionLiteral{
		};
		where {
			Mark_stoex_Atom(sourceProbabilityFunctionLiteral, targetProbabilityFunctionLiteral);
		}
	}

	top relation Copy_stoex_ProbabilityFunctionLiteral {

		checkonly domain source sourceProbabilityFunctionLiteral:stoex::ProbabilityFunctionLiteral{
		};

		enforce domain target targetProbabilityFunctionLiteral:stoex::ProbabilityFunctionLiteral{
		};
		where {
			Mark_stoex_ProbabilityFunctionLiteral(sourceProbabilityFunctionLiteral, targetProbabilityFunctionLiteral);
		}
	}

	relation Mark_stoex_Parenthesis {

		checkonly domain source sourceParenthesis:stoex::Parenthesis{
		};

		checkonly domain target targetParenthesis:stoex::Parenthesis{
		};
		where {
			Mark_stoex_Atom(sourceParenthesis, targetParenthesis);
		}
	}

	top relation Copy_stoex_Parenthesis {

		checkonly domain source sourceParenthesis:stoex::Parenthesis{
		};

		enforce domain target targetParenthesis:stoex::Parenthesis{
		};
		where {
			Mark_stoex_Parenthesis(sourceParenthesis, targetParenthesis);
		}
	}

	relation Mark_stoex_CompareExpression {

		checkonly domain source sourceCompareExpression:stoex::CompareExpression{
		};

		checkonly domain target targetCompareExpression:stoex::CompareExpression{
		};
		where {
			Mark_stoex_Comparison(sourceCompareExpression, targetCompareExpression);
		}
	}

	top relation Copy_stoex_CompareExpression {

		checkonly domain source sourceCompareExpression:stoex::CompareExpression{
		};

		enforce domain target targetCompareExpression:stoex::CompareExpression{
		};
		where {
			Mark_stoex_CompareExpression(sourceCompareExpression, targetCompareExpression);
		}
	}

	relation Mark_stoex_BoolLiteral {

		checkonly domain source sourceBoolLiteral:stoex::BoolLiteral{
		};

		checkonly domain target targetBoolLiteral:stoex::BoolLiteral{
		};
		where {
			Mark_stoex_Atom(sourceBoolLiteral, targetBoolLiteral);
		}
	}

	top relation Copy_stoex_BoolLiteral {

		checkonly domain source sourceBoolLiteral:stoex::BoolLiteral{
		};

		enforce domain target targetBoolLiteral:stoex::BoolLiteral{
		};
		where {
			Mark_stoex_BoolLiteral(sourceBoolLiteral, targetBoolLiteral);
		}
	}

	relation Mark_stoex_StringLiteral {

		checkonly domain source sourceStringLiteral:stoex::StringLiteral{
		};

		checkonly domain target targetStringLiteral:stoex::StringLiteral{
		};
		where {
			Mark_stoex_Atom(sourceStringLiteral, targetStringLiteral);
		}
	}

	top relation Copy_stoex_StringLiteral {

		checkonly domain source sourceStringLiteral:stoex::StringLiteral{
		};

		enforce domain target targetStringLiteral:stoex::StringLiteral{
		};
		where {
			Mark_stoex_StringLiteral(sourceStringLiteral, targetStringLiteral);
		}
	}

	relation Mark_stoex_PowerExpression {

		checkonly domain source sourcePowerExpression:stoex::PowerExpression{
		};

		checkonly domain target targetPowerExpression:stoex::PowerExpression{
		};
		where {
			Mark_stoex_Power(sourcePowerExpression, targetPowerExpression);
		}
	}

	top relation Copy_stoex_PowerExpression {

		checkonly domain source sourcePowerExpression:stoex::PowerExpression{
		};

		enforce domain target targetPowerExpression:stoex::PowerExpression{
		};
		where {
			Mark_stoex_PowerExpression(sourcePowerExpression, targetPowerExpression);
		}
	}

	relation Mark_stoex_BooleanOperatorExpression {

		checkonly domain source sourceBooleanOperatorExpression:stoex::BooleanOperatorExpression{
		};

		checkonly domain target targetBooleanOperatorExpression:stoex::BooleanOperatorExpression{
		};
		where {
			Mark_stoex_BooleanExpression(sourceBooleanOperatorExpression, targetBooleanOperatorExpression);
		}
	}

	top relation Copy_stoex_BooleanOperatorExpression {

		checkonly domain source sourceBooleanOperatorExpression:stoex::BooleanOperatorExpression{
		};

		enforce domain target targetBooleanOperatorExpression:stoex::BooleanOperatorExpression{
		};
		where {
			Mark_stoex_BooleanOperatorExpression(sourceBooleanOperatorExpression, targetBooleanOperatorExpression);
		}
	}

	relation Mark_stoex_NotExpression {

		checkonly domain source sourceNotExpression:stoex::NotExpression{
		};

		checkonly domain target targetNotExpression:stoex::NotExpression{
		};
		where {
			Mark_stoex_Unary(sourceNotExpression, targetNotExpression);
		}
	}

	top relation Copy_stoex_NotExpression {

		checkonly domain source sourceNotExpression:stoex::NotExpression{
		};

		enforce domain target targetNotExpression:stoex::NotExpression{
		};
		where {
			Mark_stoex_NotExpression(sourceNotExpression, targetNotExpression);
		}
	}

	relation Mark_stoex_NegativeExpression {

		checkonly domain source sourceNegativeExpression:stoex::NegativeExpression{
		};

		checkonly domain target targetNegativeExpression:stoex::NegativeExpression{
		};
		where {
			Mark_stoex_Unary(sourceNegativeExpression, targetNegativeExpression);
		}
	}

	top relation Copy_stoex_NegativeExpression {

		checkonly domain source sourceNegativeExpression:stoex::NegativeExpression{
		};

		enforce domain target targetNegativeExpression:stoex::NegativeExpression{
		};
		where {
			Mark_stoex_NegativeExpression(sourceNegativeExpression, targetNegativeExpression);
		}
	}

	relation Mark_stoex_FunctionLiteral {

		checkonly domain source sourceFunctionLiteral:stoex::FunctionLiteral{
		};

		checkonly domain target targetFunctionLiteral:stoex::FunctionLiteral{
		};
		where {
			Mark_stoex_Atom(sourceFunctionLiteral, targetFunctionLiteral);
		}
	}

	top relation Copy_stoex_FunctionLiteral {

		checkonly domain source sourceFunctionLiteral:stoex::FunctionLiteral{
		};

		enforce domain target targetFunctionLiteral:stoex::FunctionLiteral{
		};
		where {
			Mark_stoex_FunctionLiteral(sourceFunctionLiteral, targetFunctionLiteral);
		}
	}

	relation Mark_stoex_IfElseExpression {

		checkonly domain source sourceIfElseExpression:stoex::IfElseExpression{
		};

		checkonly domain target targetIfElseExpression:stoex::IfElseExpression{
		};
		where {
			Mark_stoex_IfElse(sourceIfElseExpression, targetIfElseExpression);
		}
	}

	top relation Copy_stoex_IfElseExpression {

		checkonly domain source sourceIfElseExpression:stoex::IfElseExpression{
		};

		enforce domain target targetIfElseExpression:stoex::IfElseExpression{
		};
		where {
			Mark_stoex_IfElseExpression(sourceIfElseExpression, targetIfElseExpression);
		}
	}

	relation Mark_stoex_RandomVariable {

		checkonly domain source sourceRandomVariable:stoex::RandomVariable{
		};

		checkonly domain target targetRandomVariable:stoex::RandomVariable{
		};
	}

	relation Mark_core_PCMRandomVariable {

		checkonly domain source sourcePCMRandomVariable:pcm::core::PCMRandomVariable{
		};

		checkonly domain target targetPCMRandomVariable:pcm::core::PCMRandomVariable{
		};
		where {
			Mark_stoex_RandomVariable(sourcePCMRandomVariable, targetPCMRandomVariable);
		}
	}

	top relation Copy_core_PCMRandomVariable {

		checkonly domain source sourcePCMRandomVariable:pcm::core::PCMRandomVariable{
		};

		enforce domain target targetPCMRandomVariable:pcm::core::PCMRandomVariable{
		};
		where {
			Mark_core_PCMRandomVariable(sourcePCMRandomVariable, targetPCMRandomVariable);
		}
	}

	top relation Copy_stoex_RandomVariable {

		checkonly domain source sourceRandomVariable:stoex::RandomVariable{
		};

		enforce domain target targetRandomVariable:stoex::RandomVariable{
		};
		when {
		not Mark_core_PCMRandomVariable(sourceRandomVariable, targetRandomVariable);
		}
		where {
			Mark_stoex_RandomVariable(sourceRandomVariable, targetRandomVariable);
		}
	}

	relation Mark_units_UnitCarryingElement {

		checkonly domain source sourceUnitCarryingElement:units::UnitCarryingElement{
		};

		checkonly domain target targetUnitCarryingElement:units::UnitCarryingElement{
		};
	}

	relation Mark_stoex_NumericLiteral {

		checkonly domain source sourceNumericLiteral:stoex::NumericLiteral{
		};

		checkonly domain target targetNumericLiteral:stoex::NumericLiteral{
		};
		where {
			Mark_units_UnitCarryingElement(sourceNumericLiteral, targetNumericLiteral);
			Mark_stoex_Atom(sourceNumericLiteral, targetNumericLiteral);
		}
	}

	relation Mark_stoex_DoubleLiteral {

		checkonly domain source sourceDoubleLiteral:stoex::DoubleLiteral{
		};

		checkonly domain target targetDoubleLiteral:stoex::DoubleLiteral{
		};
		where {
			Mark_stoex_NumericLiteral(sourceDoubleLiteral, targetDoubleLiteral);
		}
	}

	top relation Copy_stoex_DoubleLiteral {

		checkonly domain source sourceDoubleLiteral:stoex::DoubleLiteral{
		};

		enforce domain target targetDoubleLiteral:stoex::DoubleLiteral{
		};
		where {
			Mark_stoex_DoubleLiteral(sourceDoubleLiteral, targetDoubleLiteral);
		}
	}

	relation Mark_stoex_IntLiteral {

		checkonly domain source sourceIntLiteral:stoex::IntLiteral{
		};

		checkonly domain target targetIntLiteral:stoex::IntLiteral{
		};
		where {
			Mark_stoex_NumericLiteral(sourceIntLiteral, targetIntLiteral);
		}
	}

	top relation Copy_stoex_IntLiteral {

		checkonly domain source sourceIntLiteral:stoex::IntLiteral{
		};

		enforce domain target targetIntLiteral:stoex::IntLiteral{
		};
		where {
			Mark_stoex_IntLiteral(sourceIntLiteral, targetIntLiteral);
		}
	}

	relation Mark_probfunction_ProbabilityFunction {

		checkonly domain source sourceProbabilityFunction:probfunction::ProbabilityFunction{
		};

		checkonly domain target targetProbabilityFunction:probfunction::ProbabilityFunction{
		};
		where {
			Mark_units_UnitCarryingElement(sourceProbabilityFunction, targetProbabilityFunction);
		}
	}

	relation Mark_probfunction_ProbabilityMassFunction {

		checkonly domain source sourceProbabilityMassFunction:probfunction::ProbabilityMassFunction{
		};

		checkonly domain target targetProbabilityMassFunction:probfunction::ProbabilityMassFunction{
		};
		where {
			Mark_probfunction_ProbabilityFunction(sourceProbabilityMassFunction, targetProbabilityMassFunction);
		}
	}

	top relation Copy_probfunction_ProbabilityMassFunction {

		checkonly domain source sourceProbabilityMassFunction:probfunction::ProbabilityMassFunction{
		};

		enforce domain target targetProbabilityMassFunction:probfunction::ProbabilityMassFunction{
		};
		where {
			Mark_probfunction_ProbabilityMassFunction(sourceProbabilityMassFunction, targetProbabilityMassFunction);
		}
	}

	relation Mark_probfunction_ProbabilityDensityFunction {

		checkonly domain source sourceProbabilityDensityFunction:probfunction::ProbabilityDensityFunction{
		};

		checkonly domain target targetProbabilityDensityFunction:probfunction::ProbabilityDensityFunction{
		};
		where {
			Mark_probfunction_ProbabilityFunction(sourceProbabilityDensityFunction, targetProbabilityDensityFunction);
		}
	}

	relation Mark_probfunction_ContinuousPDF {

		checkonly domain source sourceContinuousPDF:probfunction::ContinuousPDF{
		};

		checkonly domain target targetContinuousPDF:probfunction::ContinuousPDF{
		};
		where {
			Mark_probfunction_ProbabilityDensityFunction(sourceContinuousPDF, targetContinuousPDF);
		}
	}

	relation Mark_probfunction_NormalDistribution {

		checkonly domain source sourceNormalDistribution:probfunction::NormalDistribution{
		};

		checkonly domain target targetNormalDistribution:probfunction::NormalDistribution{
		};
		where {
			Mark_probfunction_ContinuousPDF(sourceNormalDistribution, targetNormalDistribution);
		}
	}

	top relation Copy_probfunction_NormalDistribution {

		checkonly domain source sourceNormalDistribution:probfunction::NormalDistribution{
		};

		enforce domain target targetNormalDistribution:probfunction::NormalDistribution{
		};
		where {
			Mark_probfunction_NormalDistribution(sourceNormalDistribution, targetNormalDistribution);
		}
	}

	relation Mark_probfunction_ExponentialDistribution {

		checkonly domain source sourceExponentialDistribution:probfunction::ExponentialDistribution{
		};

		checkonly domain target targetExponentialDistribution:probfunction::ExponentialDistribution{
		};
		where {
			Mark_probfunction_ContinuousPDF(sourceExponentialDistribution, targetExponentialDistribution);
		}
	}

	top relation Copy_probfunction_ExponentialDistribution {

		checkonly domain source sourceExponentialDistribution:probfunction::ExponentialDistribution{
		};

		enforce domain target targetExponentialDistribution:probfunction::ExponentialDistribution{
		};
		where {
			Mark_probfunction_ExponentialDistribution(sourceExponentialDistribution, targetExponentialDistribution);
		}
	}

	relation Mark_probfunction_SamplePDF {

		checkonly domain source sourceSamplePDF:probfunction::SamplePDF{
		};

		checkonly domain target targetSamplePDF:probfunction::SamplePDF{
		};
		where {
			Mark_probfunction_ProbabilityDensityFunction(sourceSamplePDF, targetSamplePDF);
		}
	}

	top relation Copy_probfunction_SamplePDF {

		checkonly domain source sourceSamplePDF:probfunction::SamplePDF{
		};

		enforce domain target targetSamplePDF:probfunction::SamplePDF{
		};
		where {
			Mark_probfunction_SamplePDF(sourceSamplePDF, targetSamplePDF);
		}
	}

	relation Mark_probfunction_BoxedPDF {

		checkonly domain source sourceBoxedPDF:probfunction::BoxedPDF{
		};

		checkonly domain target targetBoxedPDF:probfunction::BoxedPDF{
		};
		where {
			Mark_probfunction_ProbabilityDensityFunction(sourceBoxedPDF, targetBoxedPDF);
		}
	}

	top relation Copy_probfunction_BoxedPDF {

		checkonly domain source sourceBoxedPDF:probfunction::BoxedPDF{
		};

		enforce domain target targetBoxedPDF:probfunction::BoxedPDF{
		};
		where {
			Mark_probfunction_BoxedPDF(sourceBoxedPDF, targetBoxedPDF);
		}
	}

	relation Mark_resourcetype_ResourceType {

		checkonly domain source sourceResourceType:pcm::resourcetype::ResourceType{
		};

		checkonly domain target targetResourceType:pcm::resourcetype::ResourceType{
		};
		where {
			Mark_entity_Entity(sourceResourceType, targetResourceType);
			Mark_units_UnitCarryingElement(sourceResourceType, targetResourceType);
		}
	}

	relation Mark_resourcetype_ProcessingResourceType {

		checkonly domain source sourceProcessingResourceType:pcm::resourcetype::ProcessingResourceType{
		};

		checkonly domain target targetProcessingResourceType:pcm::resourcetype::ProcessingResourceType{
		};
		where {
			Mark_resourcetype_ResourceType(sourceProcessingResourceType, targetProcessingResourceType);
		}
	}

	relation Mark_resourcetype_CommunicationLinkResourceType {

		checkonly domain source sourceCommunicationLinkResourceType:pcm::resourcetype::CommunicationLinkResourceType{
		};

		checkonly domain target targetCommunicationLinkResourceType:pcm::resourcetype::CommunicationLinkResourceType{
		};
		where {
			Mark_resourcetype_ProcessingResourceType(sourceCommunicationLinkResourceType, targetCommunicationLinkResourceType);
		}
	}

	top relation Copy_resourcetype_CommunicationLinkResourceType {

		checkonly domain source sourceCommunicationLinkResourceType:pcm::resourcetype::CommunicationLinkResourceType{
		};

		enforce domain target targetCommunicationLinkResourceType:pcm::resourcetype::CommunicationLinkResourceType{
		};
		where {
			Mark_resourcetype_CommunicationLinkResourceType(sourceCommunicationLinkResourceType, targetCommunicationLinkResourceType);
		}
	}

	top relation Copy_resourcetype_ProcessingResourceType {

		checkonly domain source sourceProcessingResourceType:pcm::resourcetype::ProcessingResourceType{
		};

		enforce domain target targetProcessingResourceType:pcm::resourcetype::ProcessingResourceType{
		};
		when {
		not Mark_resourcetype_CommunicationLinkResourceType(sourceProcessingResourceType, targetProcessingResourceType);
		}
		where {
			Mark_resourcetype_ProcessingResourceType(sourceProcessingResourceType, targetProcessingResourceType);
		}
	}

	relation Mark_units_Unit {

		checkonly domain source sourceUnit:units::Unit{
		};

		checkonly domain target targetUnit:units::Unit{
		};
	}

	relation Mark_units_BaseUnit {

		checkonly domain source sourceBaseUnit:units::BaseUnit{
		};

		checkonly domain target targetBaseUnit:units::BaseUnit{
		};
	}

	top relation Copy_units_BaseUnit {

		checkonly domain source sourceBaseUnit:units::BaseUnit{
		};

		enforce domain target targetBaseUnit:units::BaseUnit{
		};
		where {
			Mark_units_BaseUnit(sourceBaseUnit, targetBaseUnit);
		}
	}

	relation Mark_units_UnitRepository {

		checkonly domain source sourceUnitRepository:units::UnitRepository{
		};

		checkonly domain target targetUnitRepository:units::UnitRepository{
		};
	}

	top relation Copy_units_UnitRepository {

		checkonly domain source sourceUnitRepository:units::UnitRepository{
		};

		enforce domain target targetUnitRepository:units::UnitRepository{
		};
		where {
			Mark_units_UnitRepository(sourceUnitRepository, targetUnitRepository);
		}
	}

	relation Mark_units_UnitMultiplication {

		checkonly domain source sourceUnitMultiplication:units::UnitMultiplication{
		};

		checkonly domain target targetUnitMultiplication:units::UnitMultiplication{
		};
		where {
			Mark_units_Unit(sourceUnitMultiplication, targetUnitMultiplication);
		}
	}

	top relation Copy_units_UnitMultiplication {

		checkonly domain source sourceUnitMultiplication:units::UnitMultiplication{
		};

		enforce domain target targetUnitMultiplication:units::UnitMultiplication{
		};
		where {
			Mark_units_UnitMultiplication(sourceUnitMultiplication, targetUnitMultiplication);
		}
	}

	relation Mark_units_UnitPower {

		checkonly domain source sourceUnitPower:units::UnitPower{
		};

		checkonly domain target targetUnitPower:units::UnitPower{
		};
		where {
			Mark_units_Unit(sourceUnitPower, targetUnitPower);
		}
	}

	top relation Copy_units_UnitPower {

		checkonly domain source sourceUnitPower:units::UnitPower{
		};

		enforce domain target targetUnitPower:units::UnitPower{
		};
		where {
			Mark_units_UnitPower(sourceUnitPower, targetUnitPower);
		}
	}

	relation Mark_units_UnitLiteral {

		checkonly domain source sourceUnitLiteral:units::UnitLiteral{
		};

		checkonly domain target targetUnitLiteral:units::UnitLiteral{
		};
		where {
			Mark_units_Unit(sourceUnitLiteral, targetUnitLiteral);
		}
	}

	top relation Copy_units_UnitLiteral {

		checkonly domain source sourceUnitLiteral:units::UnitLiteral{
		};

		enforce domain target targetUnitLiteral:units::UnitLiteral{
		};
		where {
			Mark_units_UnitLiteral(sourceUnitLiteral, targetUnitLiteral);
		}
	}

	top relation CopyAttribute_Identifier_id {
		local_idValue : ecore::EString;

		checkonly domain source sourceIdentifier:identifier::Identifier{
			id = local_idValue		};

		enforce domain target targetIdentifier:identifier::Identifier{
			id = local_idValue		};
		when {
			Mark_identifier_Identifier(sourceIdentifier, targetIdentifier);
		}
	}

	top relation CopyAttribute_NamedElement_entityName {
		local_entityNameValue : ecore::EString;

		checkonly domain source sourceNamedElement:pcm::core::entity::NamedElement{
			entityName = local_entityNameValue		};

		enforce domain target targetNamedElement:pcm::core::entity::NamedElement{
			entityName = local_entityNameValue		};
		when {
			Mark_entity_NamedElement(sourceNamedElement, targetNamedElement);
		}
	}

	top relation CopyAttribute_Signature_serviceName {
		local_serviceNameValue : ecore::EString;

		checkonly domain source sourceSignature:pcm::repository::Signature{
			serviceName = local_serviceNameValue		};

		enforce domain target targetSignature:pcm::repository::Signature{
			serviceName = local_serviceNameValue		};
		when {
			Mark_repository_Signature(sourceSignature, targetSignature);
		}
	}

	top relation CopyAttribute_Parameter_parameterName {
		local_parameterNameValue : ecore::EString;

		checkonly domain source sourceParameter:pcm::repository::Parameter{
			parameterName = local_parameterNameValue		};

		enforce domain target targetParameter:pcm::repository::Parameter{
			parameterName = local_parameterNameValue		};
		when {
			Mark_repository_Parameter(sourceParameter, targetParameter);
		}
	}

	top relation CopyAttribute_Parameter_modifier__Parameter {
		local_modifier__ParameterValue : pcm::repository::ParameterModifier;

		checkonly domain source sourceParameter:pcm::repository::Parameter{
			modifier__Parameter = local_modifier__ParameterValue		};

		enforce domain target targetParameter:pcm::repository::Parameter{
			modifier__Parameter = local_modifier__ParameterValue		};
		when {
			Mark_repository_Parameter(sourceParameter, targetParameter);
		}
	}

	top relation CopyAttribute_Repository_repositoryDescription {
		local_repositoryDescriptionValue : ecore::EString;

		checkonly domain source sourceRepository:pcm::repository::Repository{
			repositoryDescription = local_repositoryDescriptionValue		};

		enforce domain target targetRepository:pcm::repository::Repository{
			repositoryDescription = local_repositoryDescriptionValue		};
		when {
			Mark_repository_Repository(sourceRepository, targetRepository);
		}
	}

	top relation CopyAttribute_ExceptionType_exceptionName {
		local_exceptionNameValue : ecore::EString;

		checkonly domain source sourceExceptionType:pcm::repository::ExceptionType{
			exceptionName = local_exceptionNameValue		};

		enforce domain target targetExceptionType:pcm::repository::ExceptionType{
			exceptionName = local_exceptionNameValue		};
		when {
			Mark_repository_ExceptionType(sourceExceptionType, targetExceptionType);
		}
	}

	top relation CopyAttribute_ExceptionType_exceptionMessage {
		local_exceptionMessageValue : ecore::EString;

		checkonly domain source sourceExceptionType:pcm::repository::ExceptionType{
			exceptionMessage = local_exceptionMessageValue		};

		enforce domain target targetExceptionType:pcm::repository::ExceptionType{
			exceptionMessage = local_exceptionMessageValue		};
		when {
			Mark_repository_ExceptionType(sourceExceptionType, targetExceptionType);
		}
	}

	top relation CopyAttribute_PrimitiveDataType_type {
		local_typeValue : pcm::repository::PrimitiveTypeEnum;

		checkonly domain source sourcePrimitiveDataType:pcm::repository::PrimitiveDataType{
			type = local_typeValue		};

		enforce domain target targetPrimitiveDataType:pcm::repository::PrimitiveDataType{
			type = local_typeValue		};
		when {
			Mark_repository_PrimitiveDataType(sourcePrimitiveDataType, targetPrimitiveDataType);
		}
	}

	top relation CopyAttribute_Protocol_protocolTypeID {
		local_protocolTypeIDValue : ecore::EString;

		checkonly domain source sourceProtocol:pcm::protocol::Protocol{
			protocolTypeID = local_protocolTypeIDValue		};

		enforce domain target targetProtocol:pcm::protocol::Protocol{
			protocolTypeID = local_protocolTypeIDValue		};
		when {
			Mark_protocol_Protocol(sourceProtocol, targetProtocol);
		}
	}

	top relation CopyAttribute_VariableCharacterisation_type {
		local_typeValue : pcm::parameter::VariableCharacterisationType;

		checkonly domain source sourceVariableCharacterisation:pcm::parameter::VariableCharacterisation{
			type = local_typeValue		};

		enforce domain target targetVariableCharacterisation:pcm::parameter::VariableCharacterisation{
			type = local_typeValue		};
		when {
			Mark_parameter_VariableCharacterisation(sourceVariableCharacterisation, targetVariableCharacterisation);
		}
	}

	top relation CopyAttribute_CharacterisedVariable_characterisationType {
		local_characterisationTypeValue : pcm::parameter::VariableCharacterisationType;

		checkonly domain source sourceCharacterisedVariable:pcm::parameter::CharacterisedVariable{
			characterisationType = local_characterisationTypeValue		};

		enforce domain target targetCharacterisedVariable:pcm::parameter::CharacterisedVariable{
			characterisationType = local_characterisationTypeValue		};
		when {
			Mark_parameter_CharacterisedVariable(sourceCharacterisedVariable, targetCharacterisedVariable);
		}
	}

	top relation CopyAttribute_InternalAction_failureProbability {
		local_failureProbabilityValue : ecore::EDouble;

		checkonly domain source sourceInternalAction:pcm::seff::InternalAction{
			failureProbability = local_failureProbabilityValue		};

		enforce domain target targetInternalAction:pcm::seff::InternalAction{
			failureProbability = local_failureProbabilityValue		};
		when {
			Mark_seff_InternalAction(sourceInternalAction, targetInternalAction);
		}
	}

	top relation CopyAttribute_ProbabilisticBranchTransition_branchProbability {
		local_branchProbabilityValue : ecore::EDouble;

		checkonly domain source sourceProbabilisticBranchTransition:pcm::seff::ProbabilisticBranchTransition{
			branchProbability = local_branchProbabilityValue		};

		enforce domain target targetProbabilisticBranchTransition:pcm::seff::ProbabilisticBranchTransition{
			branchProbability = local_branchProbabilityValue		};
		when {
			Mark_seff_ProbabilisticBranchTransition(sourceProbabilisticBranchTransition, targetProbabilisticBranchTransition);
		}
	}

	top relation CopyAttribute_ServiceEffectSpecification_seffTypeID {
		local_seffTypeIDValue : ecore::EString;

		checkonly domain source sourceServiceEffectSpecification:pcm::seff::ServiceEffectSpecification{
			seffTypeID = local_seffTypeIDValue		};

		enforce domain target targetServiceEffectSpecification:pcm::seff::ServiceEffectSpecification{
			seffTypeID = local_seffTypeIDValue		};
		when {
			Mark_seff_ServiceEffectSpecification(sourceServiceEffectSpecification, targetServiceEffectSpecification);
		}
	}

	top relation CopyAttribute_CommunicationLinkResourceSpecification_failureProbability {
		local_failureProbabilityValue : ecore::EDouble;

		checkonly domain source sourceCommunicationLinkResourceSpecification:pcm::resourceenvironment::CommunicationLinkResourceSpecification{
			failureProbability = local_failureProbabilityValue		};

		enforce domain target targetCommunicationLinkResourceSpecification:pcm::resourceenvironment::CommunicationLinkResourceSpecification{
			failureProbability = local_failureProbabilityValue		};
		when {
			Mark_resourceenvironment_CommunicationLinkResourceSpecification(sourceCommunicationLinkResourceSpecification, targetCommunicationLinkResourceSpecification);
		}
	}

	top relation CopyAttribute_ProcessingResourceSpecification_MTTR {
		local_MTTRValue : ecore::EDouble;

		checkonly domain source sourceProcessingResourceSpecification:pcm::resourceenvironment::ProcessingResourceSpecification{
			MTTR = local_MTTRValue		};

		enforce domain target targetProcessingResourceSpecification:pcm::resourceenvironment::ProcessingResourceSpecification{
			MTTR = local_MTTRValue		};
		when {
			Mark_resourceenvironment_ProcessingResourceSpecification(sourceProcessingResourceSpecification, targetProcessingResourceSpecification);
		}
	}

	top relation CopyAttribute_ProcessingResourceSpecification_MTTF {
		local_MTTFValue : ecore::EDouble;

		checkonly domain source sourceProcessingResourceSpecification:pcm::resourceenvironment::ProcessingResourceSpecification{
			MTTF = local_MTTFValue		};

		enforce domain target targetProcessingResourceSpecification:pcm::resourceenvironment::ProcessingResourceSpecification{
			MTTF = local_MTTFValue		};
		when {
			Mark_resourceenvironment_ProcessingResourceSpecification(sourceProcessingResourceSpecification, targetProcessingResourceSpecification);
		}
	}

	top relation CopyAttribute_ProcessingResourceSpecification_schedulingPolicy {
		local_schedulingPolicyValue : pcm::resourceenvironment::SchedulingPolicy;

		checkonly domain source sourceProcessingResourceSpecification:pcm::resourceenvironment::ProcessingResourceSpecification{
			schedulingPolicy = local_schedulingPolicyValue		};

		enforce domain target targetProcessingResourceSpecification:pcm::resourceenvironment::ProcessingResourceSpecification{
			schedulingPolicy = local_schedulingPolicyValue		};
		when {
			Mark_resourceenvironment_ProcessingResourceSpecification(sourceProcessingResourceSpecification, targetProcessingResourceSpecification);
		}
	}

	top relation CopyAttribute_SpecifiedFailureProbability_failureProbability {
		local_failureProbabilityValue : ecore::EDouble;

		checkonly domain source sourceSpecifiedFailureProbability:pcm::qosannotations::reliability::SpecifiedFailureProbability{
			failureProbability = local_failureProbabilityValue		};

		enforce domain target targetSpecifiedFailureProbability:pcm::qosannotations::reliability::SpecifiedFailureProbability{
			failureProbability = local_failureProbabilityValue		};
		when {
			Mark_reliability_SpecifiedFailureProbability(sourceSpecifiedFailureProbability, targetSpecifiedFailureProbability);
		}
	}

	top relation CopyAttribute_ClosedWorkload_population {
		local_populationValue : ecore::EInt;

		checkonly domain source sourceClosedWorkload:pcm::usagemodel::ClosedWorkload{
			population = local_populationValue		};

		enforce domain target targetClosedWorkload:pcm::usagemodel::ClosedWorkload{
			population = local_populationValue		};
		when {
			Mark_usagemodel_ClosedWorkload(sourceClosedWorkload, targetClosedWorkload);
		}
	}

	top relation CopyAttribute_BranchTransition_branchProbability {
		local_branchProbabilityValue : ecore::EDouble;

		checkonly domain source sourceBranchTransition:pcm::usagemodel::BranchTransition{
			branchProbability = local_branchProbabilityValue		};

		enforce domain target targetBranchTransition:pcm::usagemodel::BranchTransition{
			branchProbability = local_branchProbabilityValue		};
		when {
			Mark_usagemodel_BranchTransition(sourceBranchTransition, targetBranchTransition);
		}
	}

	top relation CopyAttribute_ContinuousSample_value {
		local_valueValue : ecore::EDouble;

		checkonly domain source sourceContinuousSample:probfunction::ContinuousSample{
			value = local_valueValue		};

		enforce domain target targetContinuousSample:probfunction::ContinuousSample{
			value = local_valueValue		};
		when {
			Mark_probfunction_ContinuousSample(sourceContinuousSample, targetContinuousSample);
		}
	}

	top relation CopyAttribute_ContinuousSample_probability {
		local_probabilityValue : ecore::EDouble;

		checkonly domain source sourceContinuousSample:probfunction::ContinuousSample{
			probability = local_probabilityValue		};

		enforce domain target targetContinuousSample:probfunction::ContinuousSample{
			probability = local_probabilityValue		};
		when {
			Mark_probfunction_ContinuousSample(sourceContinuousSample, targetContinuousSample);
		}
	}

	top relation CopyAttribute_ProbabilityMassFunction_orderedDomain {
		local_orderedDomainValue : ecore::EBoolean;

		checkonly domain source sourceProbabilityMassFunction:probfunction::ProbabilityMassFunction{
			orderedDomain = local_orderedDomainValue		};

		enforce domain target targetProbabilityMassFunction:probfunction::ProbabilityMassFunction{
			orderedDomain = local_orderedDomainValue		};
		when {
			Mark_probfunction_ProbabilityMassFunction(sourceProbabilityMassFunction, targetProbabilityMassFunction);
		}
	}

	top relation CopyAttribute_Sample_probability {
		local_probabilityValue : ecore::EDouble;

		checkonly domain source sourceSample:probfunction::Sample{
			probability = local_probabilityValue		};

		enforce domain target targetSample:probfunction::Sample{
			probability = local_probabilityValue		};
		when {
			Mark_probfunction_Sample(sourceSample, targetSample);
		}
	}

	top relation CopyAttribute_SamplePDF_distance {
		local_distanceValue : ecore::EDouble;

		checkonly domain source sourceSamplePDF:probfunction::SamplePDF{
			distance = local_distanceValue		};

		enforce domain target targetSamplePDF:probfunction::SamplePDF{
			distance = local_distanceValue		};
		when {
			Mark_probfunction_SamplePDF(sourceSamplePDF, targetSamplePDF);
		}
	}

	top relation CopyAttribute_Complex_real {
		local_realValue : ecore::EDouble;

		checkonly domain source sourceComplex:probfunction::Complex{
			real = local_realValue		};

		enforce domain target targetComplex:probfunction::Complex{
			real = local_realValue		};
		when {
			Mark_probfunction_Complex(sourceComplex, targetComplex);
		}
	}

	top relation CopyAttribute_Complex_imaginary {
		local_imaginaryValue : ecore::EDouble;

		checkonly domain source sourceComplex:probfunction::Complex{
			imaginary = local_imaginaryValue		};

		enforce domain target targetComplex:probfunction::Complex{
			imaginary = local_imaginaryValue		};
		when {
			Mark_probfunction_Complex(sourceComplex, targetComplex);
		}
	}

	top relation CopyAttribute_ExponentialDistribution_rate {
		local_rateValue : ecore::EDouble;

		checkonly domain source sourceExponentialDistribution:probfunction::ExponentialDistribution{
			rate = local_rateValue		};

		enforce domain target targetExponentialDistribution:probfunction::ExponentialDistribution{
			rate = local_rateValue		};
		when {
			Mark_probfunction_ExponentialDistribution(sourceExponentialDistribution, targetExponentialDistribution);
		}
	}

	top relation CopyAttribute_NormalDistribution_mu {
		local_muValue : ecore::EDouble;

		checkonly domain source sourceNormalDistribution:probfunction::NormalDistribution{
			mu = local_muValue		};

		enforce domain target targetNormalDistribution:probfunction::NormalDistribution{
			mu = local_muValue		};
		when {
			Mark_probfunction_NormalDistribution(sourceNormalDistribution, targetNormalDistribution);
		}
	}

	top relation CopyAttribute_NormalDistribution_sigma {
		local_sigmaValue : ecore::EDouble;

		checkonly domain source sourceNormalDistribution:probfunction::NormalDistribution{
			sigma = local_sigmaValue		};

		enforce domain target targetNormalDistribution:probfunction::NormalDistribution{
			sigma = local_sigmaValue		};
		when {
			Mark_probfunction_NormalDistribution(sourceNormalDistribution, targetNormalDistribution);
		}
	}

	top relation CopyAttribute_AbstractNamedReference_referenceName {
		local_referenceNameValue : ecore::EString;

		checkonly domain source sourceAbstractNamedReference:stoex::AbstractNamedReference{
			referenceName = local_referenceNameValue		};

		enforce domain target targetAbstractNamedReference:stoex::AbstractNamedReference{
			referenceName = local_referenceNameValue		};
		when {
			Mark_stoex_AbstractNamedReference(sourceAbstractNamedReference, targetAbstractNamedReference);
		}
	}

	top relation CopyAttribute_TermExpression_operation {
		local_operationValue : stoex::TermOperations;

		checkonly domain source sourceTermExpression:stoex::TermExpression{
			operation = local_operationValue		};

		enforce domain target targetTermExpression:stoex::TermExpression{
			operation = local_operationValue		};
		when {
			Mark_stoex_TermExpression(sourceTermExpression, targetTermExpression);
		}
	}

	top relation CopyAttribute_ProductExpression_operation {
		local_operationValue : stoex::ProductOperations;

		checkonly domain source sourceProductExpression:stoex::ProductExpression{
			operation = local_operationValue		};

		enforce domain target targetProductExpression:stoex::ProductExpression{
			operation = local_operationValue		};
		when {
			Mark_stoex_ProductExpression(sourceProductExpression, targetProductExpression);
		}
	}

	top relation CopyAttribute_IntLiteral_value {
		local_valueValue : ecore::EInt;

		checkonly domain source sourceIntLiteral:stoex::IntLiteral{
			value = local_valueValue		};

		enforce domain target targetIntLiteral:stoex::IntLiteral{
			value = local_valueValue		};
		when {
			Mark_stoex_IntLiteral(sourceIntLiteral, targetIntLiteral);
		}
	}

	top relation CopyAttribute_DoubleLiteral_value {
		local_valueValue : ecore::EDouble;

		checkonly domain source sourceDoubleLiteral:stoex::DoubleLiteral{
			value = local_valueValue		};

		enforce domain target targetDoubleLiteral:stoex::DoubleLiteral{
			value = local_valueValue		};
		when {
			Mark_stoex_DoubleLiteral(sourceDoubleLiteral, targetDoubleLiteral);
		}
	}

	top relation CopyAttribute_CompareExpression_operation {
		local_operationValue : stoex::CompareOperations;

		checkonly domain source sourceCompareExpression:stoex::CompareExpression{
			operation = local_operationValue		};

		enforce domain target targetCompareExpression:stoex::CompareExpression{
			operation = local_operationValue		};
		when {
			Mark_stoex_CompareExpression(sourceCompareExpression, targetCompareExpression);
		}
	}

	top relation CopyAttribute_BoolLiteral_value {
		local_valueValue : ecore::EBoolean;

		checkonly domain source sourceBoolLiteral:stoex::BoolLiteral{
			value = local_valueValue		};

		enforce domain target targetBoolLiteral:stoex::BoolLiteral{
			value = local_valueValue		};
		when {
			Mark_stoex_BoolLiteral(sourceBoolLiteral, targetBoolLiteral);
		}
	}

	top relation CopyAttribute_StringLiteral_value {
		local_valueValue : ecore::EString;

		checkonly domain source sourceStringLiteral:stoex::StringLiteral{
			value = local_valueValue		};

		enforce domain target targetStringLiteral:stoex::StringLiteral{
			value = local_valueValue		};
		when {
			Mark_stoex_StringLiteral(sourceStringLiteral, targetStringLiteral);
		}
	}

	top relation CopyAttribute_BooleanOperatorExpression_operation {
		local_operationValue : stoex::BooleanOperations;

		checkonly domain source sourceBooleanOperatorExpression:stoex::BooleanOperatorExpression{
			operation = local_operationValue		};

		enforce domain target targetBooleanOperatorExpression:stoex::BooleanOperatorExpression{
			operation = local_operationValue		};
		when {
			Mark_stoex_BooleanOperatorExpression(sourceBooleanOperatorExpression, targetBooleanOperatorExpression);
		}
	}

	top relation CopyAttribute_FunctionLiteral_id {
		local_idValue : ecore::EString;

		checkonly domain source sourceFunctionLiteral:stoex::FunctionLiteral{
			id = local_idValue		};

		enforce domain target targetFunctionLiteral:stoex::FunctionLiteral{
			id = local_idValue		};
		when {
			Mark_stoex_FunctionLiteral(sourceFunctionLiteral, targetFunctionLiteral);
		}
	}

	top relation CopyAttribute_RandomVariable_specification {
		local_specificationValue : ecore::EString;

		checkonly domain source sourceRandomVariable:stoex::RandomVariable{
			specification = local_specificationValue		};

		enforce domain target targetRandomVariable:stoex::RandomVariable{
			specification = local_specificationValue		};
		when {
			Mark_stoex_RandomVariable(sourceRandomVariable, targetRandomVariable);
		}
	}

	top relation CopyAttribute_UnitCarryingElement_unitSpecification {
		local_unitSpecificationValue : ecore::EString;

		checkonly domain source sourceUnitCarryingElement:units::UnitCarryingElement{
			unitSpecification = local_unitSpecificationValue		};

		enforce domain target targetUnitCarryingElement:units::UnitCarryingElement{
			unitSpecification = local_unitSpecificationValue		};
		when {
			Mark_units_UnitCarryingElement(sourceUnitCarryingElement, targetUnitCarryingElement);
		}
	}

	top relation CopyAttribute_BaseUnit_name {
		local_nameValue : ecore::EString;

		checkonly domain source sourceBaseUnit:units::BaseUnit{
			name = local_nameValue		};

		enforce domain target targetBaseUnit:units::BaseUnit{
			name = local_nameValue		};
		when {
			Mark_units_BaseUnit(sourceBaseUnit, targetBaseUnit);
		}
	}

	top relation CopyAttribute_UnitPower_exponent {
		local_exponentValue : ecore::EInt;

		checkonly domain source sourceUnitPower:units::UnitPower{
			exponent = local_exponentValue		};

		enforce domain target targetUnitPower:units::UnitPower{
			exponent = local_exponentValue		};
		when {
			Mark_units_UnitPower(sourceUnitPower, targetUnitPower);
		}
	}

	top relation CopyReference_CompletionRepository_completions_CompletionRepository {

		checkonly domain source sourceCompletionRepository:completions::CompletionRepository{
			completions_CompletionRepository = source_completions_CompletionRepository:completions::Completion{
		}		};

		enforce domain target targetCompletionRepository:completions::CompletionRepository{
			completions_CompletionRepository = target_completions_CompletionRepository:completions::Completion{
		}		};
		when {
			Mark_completions_CompletionRepository(sourceCompletionRepository, targetCompletionRepository);
			Mark_completions_Completion(source_completions_CompletionRepository, target_completions_CompletionRepository);
		}
	}

	top relation CopyReference_InterfaceProvidingEntity_providedRoles_InterfaceProvidingEntity {

		checkonly domain source sourceInterfaceProvidingEntity:pcm::core::entity::InterfaceProvidingEntity{
			providedRoles_InterfaceProvidingEntity = source_providedRoles_InterfaceProvidingEntity:pcm::repository::ProvidedRole{
		}		};

		enforce domain target targetInterfaceProvidingEntity:pcm::core::entity::InterfaceProvidingEntity{
			providedRoles_InterfaceProvidingEntity = target_providedRoles_InterfaceProvidingEntity:pcm::repository::ProvidedRole{
		}		};
		when {
			Mark_entity_InterfaceProvidingEntity(sourceInterfaceProvidingEntity, targetInterfaceProvidingEntity);
			Mark_repository_ProvidedRole(source_providedRoles_InterfaceProvidingEntity, target_providedRoles_InterfaceProvidingEntity);
		}
	}

	top relation CopyReference_InterfaceRequiringEntity_requiredRoles_InterfaceRequiringEntity {

		checkonly domain source sourceInterfaceRequiringEntity:pcm::core::entity::InterfaceRequiringEntity{
			requiredRoles_InterfaceRequiringEntity = source_requiredRoles_InterfaceRequiringEntity:pcm::repository::RequiredRole{
		}		};

		enforce domain target targetInterfaceRequiringEntity:pcm::core::entity::InterfaceRequiringEntity{
			requiredRoles_InterfaceRequiringEntity = target_requiredRoles_InterfaceRequiringEntity:pcm::repository::RequiredRole{
		}		};
		when {
			Mark_entity_InterfaceRequiringEntity(sourceInterfaceRequiringEntity, targetInterfaceRequiringEntity);
			Mark_repository_RequiredRole(source_requiredRoles_InterfaceRequiringEntity, target_requiredRoles_InterfaceRequiringEntity);
		}
	}

	top relation CopyReference_ResourceInterfaceRequiringEntity_resourceRequiredRoles_ResourceInterfaceRequiringEntity {

		checkonly domain source sourceResourceInterfaceRequiringEntity:pcm::core::entity::ResourceInterfaceRequiringEntity{
			resourceRequiredRoles_ResourceInterfaceRequiringEntity = source_resourceRequiredRoles_ResourceInterfaceRequiringEntity:pcm::repository::ResourceRequiredRole{
		}		};

		enforce domain target targetResourceInterfaceRequiringEntity:pcm::core::entity::ResourceInterfaceRequiringEntity{
			resourceRequiredRoles_ResourceInterfaceRequiringEntity = target_resourceRequiredRoles_ResourceInterfaceRequiringEntity:pcm::repository::ResourceRequiredRole{
		}		};
		when {
			Mark_entity_ResourceInterfaceRequiringEntity(sourceResourceInterfaceRequiringEntity, targetResourceInterfaceRequiringEntity);
			Mark_repository_ResourceRequiredRole(source_resourceRequiredRoles_ResourceInterfaceRequiringEntity, target_resourceRequiredRoles_ResourceInterfaceRequiringEntity);
		}
	}

	top relation CopyReference_ProvidedDelegationConnector_innerProvidedRole_ProvidedDelegationConnector {

		checkonly domain source sourceProvidedDelegationConnector:pcm::core::composition::ProvidedDelegationConnector{
			innerProvidedRole_ProvidedDelegationConnector = source_innerProvidedRole_ProvidedDelegationConnector:pcm::repository::ProvidedRole{
		}		};

		enforce domain target targetProvidedDelegationConnector:pcm::core::composition::ProvidedDelegationConnector{
			innerProvidedRole_ProvidedDelegationConnector = target_innerProvidedRole_ProvidedDelegationConnector:pcm::repository::ProvidedRole{
		}		};
		when {
			Mark_composition_ProvidedDelegationConnector(sourceProvidedDelegationConnector, targetProvidedDelegationConnector);
			Mark_repository_ProvidedRole(source_innerProvidedRole_ProvidedDelegationConnector, target_innerProvidedRole_ProvidedDelegationConnector);
		}
	}

	top relation CopyReference_ProvidedDelegationConnector_outerProvidedRole_ProvidedDelegationConnector {

		checkonly domain source sourceProvidedDelegationConnector:pcm::core::composition::ProvidedDelegationConnector{
			outerProvidedRole_ProvidedDelegationConnector = source_outerProvidedRole_ProvidedDelegationConnector:pcm::repository::ProvidedRole{
		}		};

		enforce domain target targetProvidedDelegationConnector:pcm::core::composition::ProvidedDelegationConnector{
			outerProvidedRole_ProvidedDelegationConnector = target_outerProvidedRole_ProvidedDelegationConnector:pcm::repository::ProvidedRole{
		}		};
		when {
			Mark_composition_ProvidedDelegationConnector(sourceProvidedDelegationConnector, targetProvidedDelegationConnector);
			Mark_repository_ProvidedRole(source_outerProvidedRole_ProvidedDelegationConnector, target_outerProvidedRole_ProvidedDelegationConnector);
		}
	}

	top relation CopyReference_ProvidedDelegationConnector_assemblyContext_ProvidedDelegationConnector {

		checkonly domain source sourceProvidedDelegationConnector:pcm::core::composition::ProvidedDelegationConnector{
			assemblyContext_ProvidedDelegationConnector = source_assemblyContext_ProvidedDelegationConnector:pcm::core::composition::AssemblyContext{
		}		};

		enforce domain target targetProvidedDelegationConnector:pcm::core::composition::ProvidedDelegationConnector{
			assemblyContext_ProvidedDelegationConnector = target_assemblyContext_ProvidedDelegationConnector:pcm::core::composition::AssemblyContext{
		}		};
		when {
			Mark_composition_ProvidedDelegationConnector(sourceProvidedDelegationConnector, targetProvidedDelegationConnector);
			Mark_composition_AssemblyContext(source_assemblyContext_ProvidedDelegationConnector, target_assemblyContext_ProvidedDelegationConnector);
		}
	}

	top relation CopyReference_ProvidedDelegationConnector_parentStructure_ProvidedDelegationConnector {

		checkonly domain source sourceProvidedDelegationConnector:pcm::core::composition::ProvidedDelegationConnector{
			parentStructure_ProvidedDelegationConnector = source_parentStructure_ProvidedDelegationConnector:pcm::core::composition::ComposedStructure{
		}		};

		enforce domain target targetProvidedDelegationConnector:pcm::core::composition::ProvidedDelegationConnector{
			parentStructure_ProvidedDelegationConnector = target_parentStructure_ProvidedDelegationConnector:pcm::core::composition::ComposedStructure{
		}		};
		when {
			Mark_composition_ProvidedDelegationConnector(sourceProvidedDelegationConnector, targetProvidedDelegationConnector);
			Mark_composition_ComposedStructure(source_parentStructure_ProvidedDelegationConnector, target_parentStructure_ProvidedDelegationConnector);
		}
	}

	top relation CopyReference_AssemblyContext_encapsulatedComponent_AssemblyContext {

		checkonly domain source sourceAssemblyContext:pcm::core::composition::AssemblyContext{
			encapsulatedComponent_AssemblyContext = source_encapsulatedComponent_AssemblyContext:pcm::repository::RepositoryComponent{
		}		};

		enforce domain target targetAssemblyContext:pcm::core::composition::AssemblyContext{
			encapsulatedComponent_AssemblyContext = target_encapsulatedComponent_AssemblyContext:pcm::repository::RepositoryComponent{
		}		};
		when {
			Mark_composition_AssemblyContext(sourceAssemblyContext, targetAssemblyContext);
			Mark_repository_RepositoryComponent(source_encapsulatedComponent_AssemblyContext, target_encapsulatedComponent_AssemblyContext);
		}
	}

	top relation CopyReference_AssemblyContext_parentStructure_AssemblyContext {

		checkonly domain source sourceAssemblyContext:pcm::core::composition::AssemblyContext{
			parentStructure_AssemblyContext = source_parentStructure_AssemblyContext:pcm::core::composition::ComposedStructure{
		}		};

		enforce domain target targetAssemblyContext:pcm::core::composition::AssemblyContext{
			parentStructure_AssemblyContext = target_parentStructure_AssemblyContext:pcm::core::composition::ComposedStructure{
		}		};
		when {
			Mark_composition_AssemblyContext(sourceAssemblyContext, targetAssemblyContext);
			Mark_composition_ComposedStructure(source_parentStructure_AssemblyContext, target_parentStructure_AssemblyContext);
		}
	}

	top relation CopyReference_AssemblyContext_configParameterUsages_AssemblyContext {

		checkonly domain source sourceAssemblyContext:pcm::core::composition::AssemblyContext{
			configParameterUsages_AssemblyContext = source_configParameterUsages_AssemblyContext:pcm::parameter::VariableUsage{
		}		};

		enforce domain target targetAssemblyContext:pcm::core::composition::AssemblyContext{
			configParameterUsages_AssemblyContext = target_configParameterUsages_AssemblyContext:pcm::parameter::VariableUsage{
		}		};
		when {
			Mark_composition_AssemblyContext(sourceAssemblyContext, targetAssemblyContext);
			Mark_parameter_VariableUsage(source_configParameterUsages_AssemblyContext, target_configParameterUsages_AssemblyContext);
		}
	}

	top relation CopyReference_RequiredDelegationConnector_innerRequiredRole_RequiredDelegationConnector {

		checkonly domain source sourceRequiredDelegationConnector:pcm::core::composition::RequiredDelegationConnector{
			innerRequiredRole_RequiredDelegationConnector = source_innerRequiredRole_RequiredDelegationConnector:pcm::repository::RequiredRole{
		}		};

		enforce domain target targetRequiredDelegationConnector:pcm::core::composition::RequiredDelegationConnector{
			innerRequiredRole_RequiredDelegationConnector = target_innerRequiredRole_RequiredDelegationConnector:pcm::repository::RequiredRole{
		}		};
		when {
			Mark_composition_RequiredDelegationConnector(sourceRequiredDelegationConnector, targetRequiredDelegationConnector);
			Mark_repository_RequiredRole(source_innerRequiredRole_RequiredDelegationConnector, target_innerRequiredRole_RequiredDelegationConnector);
		}
	}

	top relation CopyReference_RequiredDelegationConnector_outerRequiredRole_RequiredDelegationConnector {

		checkonly domain source sourceRequiredDelegationConnector:pcm::core::composition::RequiredDelegationConnector{
			outerRequiredRole_RequiredDelegationConnector = source_outerRequiredRole_RequiredDelegationConnector:pcm::repository::RequiredRole{
		}		};

		enforce domain target targetRequiredDelegationConnector:pcm::core::composition::RequiredDelegationConnector{
			outerRequiredRole_RequiredDelegationConnector = target_outerRequiredRole_RequiredDelegationConnector:pcm::repository::RequiredRole{
		}		};
		when {
			Mark_composition_RequiredDelegationConnector(sourceRequiredDelegationConnector, targetRequiredDelegationConnector);
			Mark_repository_RequiredRole(source_outerRequiredRole_RequiredDelegationConnector, target_outerRequiredRole_RequiredDelegationConnector);
		}
	}

	top relation CopyReference_RequiredDelegationConnector_assemblyContext_RequiredDelegationConnector {

		checkonly domain source sourceRequiredDelegationConnector:pcm::core::composition::RequiredDelegationConnector{
			assemblyContext_RequiredDelegationConnector = source_assemblyContext_RequiredDelegationConnector:pcm::core::composition::AssemblyContext{
		}		};

		enforce domain target targetRequiredDelegationConnector:pcm::core::composition::RequiredDelegationConnector{
			assemblyContext_RequiredDelegationConnector = target_assemblyContext_RequiredDelegationConnector:pcm::core::composition::AssemblyContext{
		}		};
		when {
			Mark_composition_RequiredDelegationConnector(sourceRequiredDelegationConnector, targetRequiredDelegationConnector);
			Mark_composition_AssemblyContext(source_assemblyContext_RequiredDelegationConnector, target_assemblyContext_RequiredDelegationConnector);
		}
	}

	top relation CopyReference_RequiredDelegationConnector_parentStructure_RequiredDelegationConnector {

		checkonly domain source sourceRequiredDelegationConnector:pcm::core::composition::RequiredDelegationConnector{
			parentStructure_RequiredDelegationConnector = source_parentStructure_RequiredDelegationConnector:pcm::core::composition::ComposedStructure{
		}		};

		enforce domain target targetRequiredDelegationConnector:pcm::core::composition::RequiredDelegationConnector{
			parentStructure_RequiredDelegationConnector = target_parentStructure_RequiredDelegationConnector:pcm::core::composition::ComposedStructure{
		}		};
		when {
			Mark_composition_RequiredDelegationConnector(sourceRequiredDelegationConnector, targetRequiredDelegationConnector);
			Mark_composition_ComposedStructure(source_parentStructure_RequiredDelegationConnector, target_parentStructure_RequiredDelegationConnector);
		}
	}

	top relation CopyReference_AssemblyConnector_requiringAssemblyContext_AssemblyConnector {

		checkonly domain source sourceAssemblyConnector:pcm::core::composition::AssemblyConnector{
			requiringAssemblyContext_AssemblyConnector = source_requiringAssemblyContext_AssemblyConnector:pcm::core::composition::AssemblyContext{
		}		};

		enforce domain target targetAssemblyConnector:pcm::core::composition::AssemblyConnector{
			requiringAssemblyContext_AssemblyConnector = target_requiringAssemblyContext_AssemblyConnector:pcm::core::composition::AssemblyContext{
		}		};
		when {
			Mark_composition_AssemblyConnector(sourceAssemblyConnector, targetAssemblyConnector);
			Mark_composition_AssemblyContext(source_requiringAssemblyContext_AssemblyConnector, target_requiringAssemblyContext_AssemblyConnector);
		}
	}

	top relation CopyReference_AssemblyConnector_providingAssemblyContext_AssemblyConnector {

		checkonly domain source sourceAssemblyConnector:pcm::core::composition::AssemblyConnector{
			providingAssemblyContext_AssemblyConnector = source_providingAssemblyContext_AssemblyConnector:pcm::core::composition::AssemblyContext{
		}		};

		enforce domain target targetAssemblyConnector:pcm::core::composition::AssemblyConnector{
			providingAssemblyContext_AssemblyConnector = target_providingAssemblyContext_AssemblyConnector:pcm::core::composition::AssemblyContext{
		}		};
		when {
			Mark_composition_AssemblyConnector(sourceAssemblyConnector, targetAssemblyConnector);
			Mark_composition_AssemblyContext(source_providingAssemblyContext_AssemblyConnector, target_providingAssemblyContext_AssemblyConnector);
		}
	}

	top relation CopyReference_AssemblyConnector_providedRole_AssemblyConnector {

		checkonly domain source sourceAssemblyConnector:pcm::core::composition::AssemblyConnector{
			providedRole_AssemblyConnector = source_providedRole_AssemblyConnector:pcm::repository::ProvidedRole{
		}		};

		enforce domain target targetAssemblyConnector:pcm::core::composition::AssemblyConnector{
			providedRole_AssemblyConnector = target_providedRole_AssemblyConnector:pcm::repository::ProvidedRole{
		}		};
		when {
			Mark_composition_AssemblyConnector(sourceAssemblyConnector, targetAssemblyConnector);
			Mark_repository_ProvidedRole(source_providedRole_AssemblyConnector, target_providedRole_AssemblyConnector);
		}
	}

	top relation CopyReference_AssemblyConnector_requiredRole_AssemblyConnector {

		checkonly domain source sourceAssemblyConnector:pcm::core::composition::AssemblyConnector{
			requiredRole_AssemblyConnector = source_requiredRole_AssemblyConnector:pcm::repository::RequiredRole{
		}		};

		enforce domain target targetAssemblyConnector:pcm::core::composition::AssemblyConnector{
			requiredRole_AssemblyConnector = target_requiredRole_AssemblyConnector:pcm::repository::RequiredRole{
		}		};
		when {
			Mark_composition_AssemblyConnector(sourceAssemblyConnector, targetAssemblyConnector);
			Mark_repository_RequiredRole(source_requiredRole_AssemblyConnector, target_requiredRole_AssemblyConnector);
		}
	}

	top relation CopyReference_AssemblyConnector_parentStructure_AssemblyConnector {

		checkonly domain source sourceAssemblyConnector:pcm::core::composition::AssemblyConnector{
			parentStructure_AssemblyConnector = source_parentStructure_AssemblyConnector:pcm::core::composition::ComposedStructure{
		}		};

		enforce domain target targetAssemblyConnector:pcm::core::composition::AssemblyConnector{
			parentStructure_AssemblyConnector = target_parentStructure_AssemblyConnector:pcm::core::composition::ComposedStructure{
		}		};
		when {
			Mark_composition_AssemblyConnector(sourceAssemblyConnector, targetAssemblyConnector);
			Mark_composition_ComposedStructure(source_parentStructure_AssemblyConnector, target_parentStructure_AssemblyConnector);
		}
	}

	top relation CopyReference_ResourceRequiredDelegationConnector_parentStructure_ResourceRequiredDelegationConnector {

		checkonly domain source sourceResourceRequiredDelegationConnector:pcm::core::composition::ResourceRequiredDelegationConnector{
			parentStructure_ResourceRequiredDelegationConnector = source_parentStructure_ResourceRequiredDelegationConnector:pcm::core::composition::ComposedStructure{
		}		};

		enforce domain target targetResourceRequiredDelegationConnector:pcm::core::composition::ResourceRequiredDelegationConnector{
			parentStructure_ResourceRequiredDelegationConnector = target_parentStructure_ResourceRequiredDelegationConnector:pcm::core::composition::ComposedStructure{
		}		};
		when {
			Mark_composition_ResourceRequiredDelegationConnector(sourceResourceRequiredDelegationConnector, targetResourceRequiredDelegationConnector);
			Mark_composition_ComposedStructure(source_parentStructure_ResourceRequiredDelegationConnector, target_parentStructure_ResourceRequiredDelegationConnector);
		}
	}

	top relation CopyReference_ResourceRequiredDelegationConnector_innerResourceRequiredRole_ResourceRequiredDelegationConnector {

		checkonly domain source sourceResourceRequiredDelegationConnector:pcm::core::composition::ResourceRequiredDelegationConnector{
			innerResourceRequiredRole_ResourceRequiredDelegationConnector = source_innerResourceRequiredRole_ResourceRequiredDelegationConnector:pcm::repository::ResourceRequiredRole{
		}		};

		enforce domain target targetResourceRequiredDelegationConnector:pcm::core::composition::ResourceRequiredDelegationConnector{
			innerResourceRequiredRole_ResourceRequiredDelegationConnector = target_innerResourceRequiredRole_ResourceRequiredDelegationConnector:pcm::repository::ResourceRequiredRole{
		}		};
		when {
			Mark_composition_ResourceRequiredDelegationConnector(sourceResourceRequiredDelegationConnector, targetResourceRequiredDelegationConnector);
			Mark_repository_ResourceRequiredRole(source_innerResourceRequiredRole_ResourceRequiredDelegationConnector, target_innerResourceRequiredRole_ResourceRequiredDelegationConnector);
		}
	}

	top relation CopyReference_ResourceRequiredDelegationConnector_outerResourceRequiredRole_ResourceRequiredDelegationConnector {

		checkonly domain source sourceResourceRequiredDelegationConnector:pcm::core::composition::ResourceRequiredDelegationConnector{
			outerResourceRequiredRole_ResourceRequiredDelegationConnector = source_outerResourceRequiredRole_ResourceRequiredDelegationConnector:pcm::repository::ResourceRequiredRole{
		}		};

		enforce domain target targetResourceRequiredDelegationConnector:pcm::core::composition::ResourceRequiredDelegationConnector{
			outerResourceRequiredRole_ResourceRequiredDelegationConnector = target_outerResourceRequiredRole_ResourceRequiredDelegationConnector:pcm::repository::ResourceRequiredRole{
		}		};
		when {
			Mark_composition_ResourceRequiredDelegationConnector(sourceResourceRequiredDelegationConnector, targetResourceRequiredDelegationConnector);
			Mark_repository_ResourceRequiredRole(source_outerResourceRequiredRole_ResourceRequiredDelegationConnector, target_outerResourceRequiredRole_ResourceRequiredDelegationConnector);
		}
	}

	top relation CopyReference_ComposedStructure_assemblyContexts_ComposedStructure {

		checkonly domain source sourceComposedStructure:pcm::core::composition::ComposedStructure{
			assemblyContexts_ComposedStructure = source_assemblyContexts_ComposedStructure:pcm::core::composition::AssemblyContext{
		}		};

		enforce domain target targetComposedStructure:pcm::core::composition::ComposedStructure{
			assemblyContexts_ComposedStructure = target_assemblyContexts_ComposedStructure:pcm::core::composition::AssemblyContext{
		}		};
		when {
			Mark_composition_ComposedStructure(sourceComposedStructure, targetComposedStructure);
			Mark_composition_AssemblyContext(source_assemblyContexts_ComposedStructure, target_assemblyContexts_ComposedStructure);
		}
	}

	top relation CopyReference_ComposedStructure_providedDelegationConnectors_ComposedStructure {

		checkonly domain source sourceComposedStructure:pcm::core::composition::ComposedStructure{
			providedDelegationConnectors_ComposedStructure = source_providedDelegationConnectors_ComposedStructure:pcm::core::composition::ProvidedDelegationConnector{
		}		};

		enforce domain target targetComposedStructure:pcm::core::composition::ComposedStructure{
			providedDelegationConnectors_ComposedStructure = target_providedDelegationConnectors_ComposedStructure:pcm::core::composition::ProvidedDelegationConnector{
		}		};
		when {
			Mark_composition_ComposedStructure(sourceComposedStructure, targetComposedStructure);
			Mark_composition_ProvidedDelegationConnector(source_providedDelegationConnectors_ComposedStructure, target_providedDelegationConnectors_ComposedStructure);
		}
	}

	top relation CopyReference_ComposedStructure_requiredDelegationConnectors_ComposedStructure {

		checkonly domain source sourceComposedStructure:pcm::core::composition::ComposedStructure{
			requiredDelegationConnectors_ComposedStructure = source_requiredDelegationConnectors_ComposedStructure:pcm::core::composition::RequiredDelegationConnector{
		}		};

		enforce domain target targetComposedStructure:pcm::core::composition::ComposedStructure{
			requiredDelegationConnectors_ComposedStructure = target_requiredDelegationConnectors_ComposedStructure:pcm::core::composition::RequiredDelegationConnector{
		}		};
		when {
			Mark_composition_ComposedStructure(sourceComposedStructure, targetComposedStructure);
			Mark_composition_RequiredDelegationConnector(source_requiredDelegationConnectors_ComposedStructure, target_requiredDelegationConnectors_ComposedStructure);
		}
	}

	top relation CopyReference_ComposedStructure_assemblyConnectors_ComposedStructure {

		checkonly domain source sourceComposedStructure:pcm::core::composition::ComposedStructure{
			assemblyConnectors_ComposedStructure = source_assemblyConnectors_ComposedStructure:pcm::core::composition::AssemblyConnector{
		}		};

		enforce domain target targetComposedStructure:pcm::core::composition::ComposedStructure{
			assemblyConnectors_ComposedStructure = target_assemblyConnectors_ComposedStructure:pcm::core::composition::AssemblyConnector{
		}		};
		when {
			Mark_composition_ComposedStructure(sourceComposedStructure, targetComposedStructure);
			Mark_composition_AssemblyConnector(source_assemblyConnectors_ComposedStructure, target_assemblyConnectors_ComposedStructure);
		}
	}

	top relation CopyReference_ComposedStructure_resourceRequiredDelegationConnectors_ComposedStructure {

		checkonly domain source sourceComposedStructure:pcm::core::composition::ComposedStructure{
			resourceRequiredDelegationConnectors_ComposedStructure = source_resourceRequiredDelegationConnectors_ComposedStructure:pcm::core::composition::ResourceRequiredDelegationConnector{
		}		};

		enforce domain target targetComposedStructure:pcm::core::composition::ComposedStructure{
			resourceRequiredDelegationConnectors_ComposedStructure = target_resourceRequiredDelegationConnectors_ComposedStructure:pcm::core::composition::ResourceRequiredDelegationConnector{
		}		};
		when {
			Mark_composition_ComposedStructure(sourceComposedStructure, targetComposedStructure);
			Mark_composition_ResourceRequiredDelegationConnector(source_resourceRequiredDelegationConnectors_ComposedStructure, target_resourceRequiredDelegationConnectors_ComposedStructure);
		}
	}

	top relation CopyReference_PassiveResource_capacity_PassiveResource {

		checkonly domain source sourcePassiveResource:pcm::repository::PassiveResource{
			capacity_PassiveResource = source_capacity_PassiveResource:pcm::core::PCMRandomVariable{
		}		};

		enforce domain target targetPassiveResource:pcm::repository::PassiveResource{
			capacity_PassiveResource = target_capacity_PassiveResource:pcm::core::PCMRandomVariable{
		}		};
		when {
			Mark_repository_PassiveResource(sourcePassiveResource, targetPassiveResource);
			Mark_core_PCMRandomVariable(source_capacity_PassiveResource, target_capacity_PassiveResource);
		}
	}

	top relation CopyReference_Signature_parameters__Signature {

		checkonly domain source sourceSignature:pcm::repository::Signature{
			parameters__Signature = source_parameters__Signature:pcm::repository::Parameter{
		}		};

		enforce domain target targetSignature:pcm::repository::Signature{
			parameters__Signature = target_parameters__Signature:pcm::repository::Parameter{
		}		};
		when {
			Mark_repository_Signature(sourceSignature, targetSignature);
			Mark_repository_Parameter(source_parameters__Signature, target_parameters__Signature);
		}
	}

	top relation CopyReference_Signature_interface_Signature {

		checkonly domain source sourceSignature:pcm::repository::Signature{
			interface_Signature = source_interface_Signature:pcm::repository::Interface{
		}		};

		enforce domain target targetSignature:pcm::repository::Signature{
			interface_Signature = target_interface_Signature:pcm::repository::Interface{
		}		};
		when {
			Mark_repository_Signature(sourceSignature, targetSignature);
			Mark_repository_Interface(source_interface_Signature, target_interface_Signature);
		}
	}

	top relation CopyReference_Signature_returntype__Signature {

		checkonly domain source sourceSignature:pcm::repository::Signature{
			returntype__Signature = source_returntype__Signature:pcm::repository::DataType{
		}		};

		enforce domain target targetSignature:pcm::repository::Signature{
			returntype__Signature = target_returntype__Signature:pcm::repository::DataType{
		}		};
		when {
			Mark_repository_Signature(sourceSignature, targetSignature);
			Mark_repository_DataType(source_returntype__Signature, target_returntype__Signature);
		}
	}

	top relation CopyReference_Signature_exceptions__Signature {

		checkonly domain source sourceSignature:pcm::repository::Signature{
			exceptions__Signature = source_exceptions__Signature:pcm::repository::ExceptionType{
		}		};

		enforce domain target targetSignature:pcm::repository::Signature{
			exceptions__Signature = target_exceptions__Signature:pcm::repository::ExceptionType{
		}		};
		when {
			Mark_repository_Signature(sourceSignature, targetSignature);
			Mark_repository_ExceptionType(source_exceptions__Signature, target_exceptions__Signature);
		}
	}

	top relation CopyReference_Parameter_datatype__Parameter {

		checkonly domain source sourceParameter:pcm::repository::Parameter{
			datatype__Parameter = source_datatype__Parameter:pcm::repository::DataType{
		}		};

		enforce domain target targetParameter:pcm::repository::Parameter{
			datatype__Parameter = target_datatype__Parameter:pcm::repository::DataType{
		}		};
		when {
			Mark_repository_Parameter(sourceParameter, targetParameter);
			Mark_repository_DataType(source_datatype__Parameter, target_datatype__Parameter);
		}
	}

	top relation CopyReference_Parameter_signature_Parameter {

		checkonly domain source sourceParameter:pcm::repository::Parameter{
			signature_Parameter = source_signature_Parameter:pcm::repository::Signature{
		}		};

		enforce domain target targetParameter:pcm::repository::Parameter{
			signature_Parameter = target_signature_Parameter:pcm::repository::Signature{
		}		};
		when {
			Mark_repository_Parameter(sourceParameter, targetParameter);
			Mark_repository_Signature(source_signature_Parameter, target_signature_Parameter);
		}
	}

	top relation CopyReference_DataType_repository_DataType {

		checkonly domain source sourceDataType:pcm::repository::DataType{
			repository_DataType = source_repository_DataType:pcm::repository::Repository{
		}		};

		enforce domain target targetDataType:pcm::repository::DataType{
			repository_DataType = target_repository_DataType:pcm::repository::Repository{
		}		};
		when {
			Mark_repository_DataType(sourceDataType, targetDataType);
			Mark_repository_Repository(source_repository_DataType, target_repository_DataType);
		}
	}

	top relation CopyReference_Repository_components__Repository {

		checkonly domain source sourceRepository:pcm::repository::Repository{
			components__Repository = source_components__Repository:pcm::repository::RepositoryComponent{
		}		};

		enforce domain target targetRepository:pcm::repository::Repository{
			components__Repository = target_components__Repository:pcm::repository::RepositoryComponent{
		}		};
		when {
			Mark_repository_Repository(sourceRepository, targetRepository);
			Mark_repository_RepositoryComponent(source_components__Repository, target_components__Repository);
		}
	}

	top relation CopyReference_Repository_interfaces__Repository {

		checkonly domain source sourceRepository:pcm::repository::Repository{
			interfaces__Repository = source_interfaces__Repository:pcm::repository::Interface{
		}		};

		enforce domain target targetRepository:pcm::repository::Repository{
			interfaces__Repository = target_interfaces__Repository:pcm::repository::Interface{
		}		};
		when {
			Mark_repository_Repository(sourceRepository, targetRepository);
			Mark_repository_Interface(source_interfaces__Repository, target_interfaces__Repository);
		}
	}

	top relation CopyReference_Repository_datatypes_Repository {

		checkonly domain source sourceRepository:pcm::repository::Repository{
			datatypes_Repository = source_datatypes_Repository:pcm::repository::DataType{
		}		};

		enforce domain target targetRepository:pcm::repository::Repository{
			datatypes_Repository = target_datatypes_Repository:pcm::repository::DataType{
		}		};
		when {
			Mark_repository_Repository(sourceRepository, targetRepository);
			Mark_repository_DataType(source_datatypes_Repository, target_datatypes_Repository);
		}
	}

	top relation CopyReference_RepositoryComponent_repository_RepositoryComponent {

		checkonly domain source sourceRepositoryComponent:pcm::repository::RepositoryComponent{
			repository_RepositoryComponent = source_repository_RepositoryComponent:pcm::repository::Repository{
		}		};

		enforce domain target targetRepositoryComponent:pcm::repository::RepositoryComponent{
			repository_RepositoryComponent = target_repository_RepositoryComponent:pcm::repository::Repository{
		}		};
		when {
			Mark_repository_RepositoryComponent(sourceRepositoryComponent, targetRepositoryComponent);
			Mark_repository_Repository(source_repository_RepositoryComponent, target_repository_RepositoryComponent);
		}
	}

	top relation CopyReference_RequiredRole_requiredInterface__RequiredRole {

		checkonly domain source sourceRequiredRole:pcm::repository::RequiredRole{
			requiredInterface__RequiredRole = source_requiredInterface__RequiredRole:pcm::repository::Interface{
		}		};

		enforce domain target targetRequiredRole:pcm::repository::RequiredRole{
			requiredInterface__RequiredRole = target_requiredInterface__RequiredRole:pcm::repository::Interface{
		}		};
		when {
			Mark_repository_RequiredRole(sourceRequiredRole, targetRequiredRole);
			Mark_repository_Interface(source_requiredInterface__RequiredRole, target_requiredInterface__RequiredRole);
		}
	}

	top relation CopyReference_RequiredRole_requiringEntity_RequiredRole {

		checkonly domain source sourceRequiredRole:pcm::repository::RequiredRole{
			requiringEntity_RequiredRole = source_requiringEntity_RequiredRole:pcm::core::entity::InterfaceRequiringEntity{
		}		};

		enforce domain target targetRequiredRole:pcm::repository::RequiredRole{
			requiringEntity_RequiredRole = target_requiringEntity_RequiredRole:pcm::core::entity::InterfaceRequiringEntity{
		}		};
		when {
			Mark_repository_RequiredRole(sourceRequiredRole, targetRequiredRole);
			Mark_entity_InterfaceRequiringEntity(source_requiringEntity_RequiredRole, target_requiringEntity_RequiredRole);
		}
	}

	top relation CopyReference_Interface_parentInterface__Interface {

		checkonly domain source sourceInterface:pcm::repository::Interface{
			parentInterface__Interface = source_parentInterface__Interface:pcm::repository::Interface{
		}		};

		enforce domain target targetInterface:pcm::repository::Interface{
			parentInterface__Interface = target_parentInterface__Interface:pcm::repository::Interface{
		}		};
		when {
			Mark_repository_Interface(sourceInterface, targetInterface);
			Mark_repository_Interface(source_parentInterface__Interface, target_parentInterface__Interface);
		}
	}

	top relation CopyReference_Interface_ancestorInterfaces_Interface {

		checkonly domain source sourceInterface:pcm::repository::Interface{
			ancestorInterfaces_Interface = source_ancestorInterfaces_Interface:pcm::repository::Interface{
		}		};

		enforce domain target targetInterface:pcm::repository::Interface{
			ancestorInterfaces_Interface = target_ancestorInterfaces_Interface:pcm::repository::Interface{
		}		};
		when {
			Mark_repository_Interface(sourceInterface, targetInterface);
			Mark_repository_Interface(source_ancestorInterfaces_Interface, target_ancestorInterfaces_Interface);
		}
	}

	top relation CopyReference_Interface_protocols__Interface {

		checkonly domain source sourceInterface:pcm::repository::Interface{
			protocols__Interface = source_protocols__Interface:pcm::protocol::Protocol{
		}		};

		enforce domain target targetInterface:pcm::repository::Interface{
			protocols__Interface = target_protocols__Interface:pcm::protocol::Protocol{
		}		};
		when {
			Mark_repository_Interface(sourceInterface, targetInterface);
			Mark_protocol_Protocol(source_protocols__Interface, target_protocols__Interface);
		}
	}

	top relation CopyReference_Interface_signatures__Interface {

		checkonly domain source sourceInterface:pcm::repository::Interface{
			signatures__Interface = source_signatures__Interface:pcm::repository::Signature{
		}		};

		enforce domain target targetInterface:pcm::repository::Interface{
			signatures__Interface = target_signatures__Interface:pcm::repository::Signature{
		}		};
		when {
			Mark_repository_Interface(sourceInterface, targetInterface);
			Mark_repository_Signature(source_signatures__Interface, target_signatures__Interface);
		}
	}

	top relation CopyReference_Interface_repository_Interface {

		checkonly domain source sourceInterface:pcm::repository::Interface{
			repository_Interface = source_repository_Interface:pcm::repository::Repository{
		}		};

		enforce domain target targetInterface:pcm::repository::Interface{
			repository_Interface = target_repository_Interface:pcm::repository::Repository{
		}		};
		when {
			Mark_repository_Interface(sourceInterface, targetInterface);
			Mark_repository_Repository(source_repository_Interface, target_repository_Interface);
		}
	}

	top relation CopyReference_ResourceRequiredRole_requiredInterface_ResourceRequiredRole {

		checkonly domain source sourceResourceRequiredRole:pcm::repository::ResourceRequiredRole{
			requiredInterface_ResourceRequiredRole = source_requiredInterface_ResourceRequiredRole:pcm::repository::Interface{
		}		};

		enforce domain target targetResourceRequiredRole:pcm::repository::ResourceRequiredRole{
			requiredInterface_ResourceRequiredRole = target_requiredInterface_ResourceRequiredRole:pcm::repository::Interface{
		}		};
		when {
			Mark_repository_ResourceRequiredRole(sourceResourceRequiredRole, targetResourceRequiredRole);
			Mark_repository_Interface(source_requiredInterface_ResourceRequiredRole, target_requiredInterface_ResourceRequiredRole);
		}
	}

	top relation CopyReference_ResourceRequiredRole_resourceRequiringEntity_ResourceRequiredRole {

		checkonly domain source sourceResourceRequiredRole:pcm::repository::ResourceRequiredRole{
			resourceRequiringEntity_ResourceRequiredRole = source_resourceRequiringEntity_ResourceRequiredRole:pcm::core::entity::ResourceInterfaceRequiringEntity{
		}		};

		enforce domain target targetResourceRequiredRole:pcm::repository::ResourceRequiredRole{
			resourceRequiringEntity_ResourceRequiredRole = target_resourceRequiringEntity_ResourceRequiredRole:pcm::core::entity::ResourceInterfaceRequiringEntity{
		}		};
		when {
			Mark_repository_ResourceRequiredRole(sourceResourceRequiredRole, targetResourceRequiredRole);
			Mark_entity_ResourceInterfaceRequiringEntity(source_resourceRequiringEntity_ResourceRequiredRole, target_resourceRequiringEntity_ResourceRequiredRole);
		}
	}

	top relation CopyReference_ImplementationComponentType_parentCompleteComponentTypes {

		checkonly domain source sourceImplementationComponentType:pcm::repository::ImplementationComponentType{
			parentCompleteComponentTypes = source_parentCompleteComponentTypes:pcm::repository::CompleteComponentType{
		}		};

		enforce domain target targetImplementationComponentType:pcm::repository::ImplementationComponentType{
			parentCompleteComponentTypes = target_parentCompleteComponentTypes:pcm::repository::CompleteComponentType{
		}		};
		when {
			Mark_repository_ImplementationComponentType(sourceImplementationComponentType, targetImplementationComponentType);
			Mark_repository_CompleteComponentType(source_parentCompleteComponentTypes, target_parentCompleteComponentTypes);
		}
	}

	top relation CopyReference_ImplementationComponentType_componentParameterUsage_ImplementationComponentType {

		checkonly domain source sourceImplementationComponentType:pcm::repository::ImplementationComponentType{
			componentParameterUsage_ImplementationComponentType = source_componentParameterUsage_ImplementationComponentType:pcm::parameter::VariableUsage{
		}		};

		enforce domain target targetImplementationComponentType:pcm::repository::ImplementationComponentType{
			componentParameterUsage_ImplementationComponentType = target_componentParameterUsage_ImplementationComponentType:pcm::parameter::VariableUsage{
		}		};
		when {
			Mark_repository_ImplementationComponentType(sourceImplementationComponentType, targetImplementationComponentType);
			Mark_parameter_VariableUsage(source_componentParameterUsage_ImplementationComponentType, target_componentParameterUsage_ImplementationComponentType);
		}
	}

	top relation CopyReference_CompleteComponentType_parentProvidesComponentTypes {

		checkonly domain source sourceCompleteComponentType:pcm::repository::CompleteComponentType{
			parentProvidesComponentTypes = source_parentProvidesComponentTypes:pcm::repository::ProvidesComponentType{
		}		};

		enforce domain target targetCompleteComponentType:pcm::repository::CompleteComponentType{
			parentProvidesComponentTypes = target_parentProvidesComponentTypes:pcm::repository::ProvidesComponentType{
		}		};
		when {
			Mark_repository_CompleteComponentType(sourceCompleteComponentType, targetCompleteComponentType);
			Mark_repository_ProvidesComponentType(source_parentProvidesComponentTypes, target_parentProvidesComponentTypes);
		}
	}

	top relation CopyReference_BasicComponent_serviceEffectSpecifications__BasicComponent {

		checkonly domain source sourceBasicComponent:pcm::repository::BasicComponent{
			serviceEffectSpecifications__BasicComponent = source_serviceEffectSpecifications__BasicComponent:pcm::seff::ServiceEffectSpecification{
		}		};

		enforce domain target targetBasicComponent:pcm::repository::BasicComponent{
			serviceEffectSpecifications__BasicComponent = target_serviceEffectSpecifications__BasicComponent:pcm::seff::ServiceEffectSpecification{
		}		};
		when {
			Mark_repository_BasicComponent(sourceBasicComponent, targetBasicComponent);
			Mark_seff_ServiceEffectSpecification(source_serviceEffectSpecifications__BasicComponent, target_serviceEffectSpecifications__BasicComponent);
		}
	}

	top relation CopyReference_BasicComponent_passiveResource_BasicComponent {

		checkonly domain source sourceBasicComponent:pcm::repository::BasicComponent{
			passiveResource_BasicComponent = source_passiveResource_BasicComponent:pcm::repository::PassiveResource{
		}		};

		enforce domain target targetBasicComponent:pcm::repository::BasicComponent{
			passiveResource_BasicComponent = target_passiveResource_BasicComponent:pcm::repository::PassiveResource{
		}		};
		when {
			Mark_repository_BasicComponent(sourceBasicComponent, targetBasicComponent);
			Mark_repository_PassiveResource(source_passiveResource_BasicComponent, target_passiveResource_BasicComponent);
		}
	}

	top relation CopyReference_CollectionDataType_innerType_CollectionDataType {

		checkonly domain source sourceCollectionDataType:pcm::repository::CollectionDataType{
			innerType_CollectionDataType = source_innerType_CollectionDataType:pcm::repository::DataType{
		}		};

		enforce domain target targetCollectionDataType:pcm::repository::CollectionDataType{
			innerType_CollectionDataType = target_innerType_CollectionDataType:pcm::repository::DataType{
		}		};
		when {
			Mark_repository_CollectionDataType(sourceCollectionDataType, targetCollectionDataType);
			Mark_repository_DataType(source_innerType_CollectionDataType, target_innerType_CollectionDataType);
		}
	}

	top relation CopyReference_CompositeDataType_parentType_CompositeDataType {

		checkonly domain source sourceCompositeDataType:pcm::repository::CompositeDataType{
			parentType_CompositeDataType = source_parentType_CompositeDataType:pcm::repository::CompositeDataType{
		}		};

		enforce domain target targetCompositeDataType:pcm::repository::CompositeDataType{
			parentType_CompositeDataType = target_parentType_CompositeDataType:pcm::repository::CompositeDataType{
		}		};
		when {
			Mark_repository_CompositeDataType(sourceCompositeDataType, targetCompositeDataType);
			Mark_repository_CompositeDataType(source_parentType_CompositeDataType, target_parentType_CompositeDataType);
		}
	}

	top relation CopyReference_CompositeDataType_innerDeclaration_CompositeDataType {

		checkonly domain source sourceCompositeDataType:pcm::repository::CompositeDataType{
			innerDeclaration_CompositeDataType = source_innerDeclaration_CompositeDataType:pcm::repository::InnerDeclaration{
		}		};

		enforce domain target targetCompositeDataType:pcm::repository::CompositeDataType{
			innerDeclaration_CompositeDataType = target_innerDeclaration_CompositeDataType:pcm::repository::InnerDeclaration{
		}		};
		when {
			Mark_repository_CompositeDataType(sourceCompositeDataType, targetCompositeDataType);
			Mark_repository_InnerDeclaration(source_innerDeclaration_CompositeDataType, target_innerDeclaration_CompositeDataType);
		}
	}

	top relation CopyReference_InnerDeclaration_datatype_InnerDeclaration {

		checkonly domain source sourceInnerDeclaration:pcm::repository::InnerDeclaration{
			datatype_InnerDeclaration = source_datatype_InnerDeclaration:pcm::repository::DataType{
		}		};

		enforce domain target targetInnerDeclaration:pcm::repository::InnerDeclaration{
			datatype_InnerDeclaration = target_datatype_InnerDeclaration:pcm::repository::DataType{
		}		};
		when {
			Mark_repository_InnerDeclaration(sourceInnerDeclaration, targetInnerDeclaration);
			Mark_repository_DataType(source_datatype_InnerDeclaration, target_datatype_InnerDeclaration);
		}
	}

	top relation CopyReference_ProvidedRole_providedInterface__ProvidedRole {

		checkonly domain source sourceProvidedRole:pcm::repository::ProvidedRole{
			providedInterface__ProvidedRole = source_providedInterface__ProvidedRole:pcm::repository::Interface{
		}		};

		enforce domain target targetProvidedRole:pcm::repository::ProvidedRole{
			providedInterface__ProvidedRole = target_providedInterface__ProvidedRole:pcm::repository::Interface{
		}		};
		when {
			Mark_repository_ProvidedRole(sourceProvidedRole, targetProvidedRole);
			Mark_repository_Interface(source_providedInterface__ProvidedRole, target_providedInterface__ProvidedRole);
		}
	}

	top relation CopyReference_ProvidedRole_providingEntity_ProvidedRole {

		checkonly domain source sourceProvidedRole:pcm::repository::ProvidedRole{
			providingEntity_ProvidedRole = source_providingEntity_ProvidedRole:pcm::core::entity::InterfaceProvidingEntity{
		}		};

		enforce domain target targetProvidedRole:pcm::repository::ProvidedRole{
			providingEntity_ProvidedRole = target_providingEntity_ProvidedRole:pcm::core::entity::InterfaceProvidingEntity{
		}		};
		when {
			Mark_repository_ProvidedRole(sourceProvidedRole, targetProvidedRole);
			Mark_entity_InterfaceProvidingEntity(source_providingEntity_ProvidedRole, target_providingEntity_ProvidedRole);
		}
	}

	top relation CopyReference_ServiceCall_signature__ServiceCall {

		checkonly domain source sourceServiceCall:pcm::protocol::ServiceCall{
			signature__ServiceCall = source_signature__ServiceCall:pcm::repository::Signature{
		}		};

		enforce domain target targetServiceCall:pcm::protocol::ServiceCall{
			signature__ServiceCall = target_signature__ServiceCall:pcm::repository::Signature{
		}		};
		when {
			Mark_protocol_ServiceCall(sourceServiceCall, targetServiceCall);
			Mark_repository_Signature(source_signature__ServiceCall, target_signature__ServiceCall);
		}
	}

	top relation CopyReference_VariableCharacterisation_specification_VariableCharacterisation {

		checkonly domain source sourceVariableCharacterisation:pcm::parameter::VariableCharacterisation{
			specification_VariableCharacterisation = source_specification_VariableCharacterisation:pcm::core::PCMRandomVariable{
		}		};

		enforce domain target targetVariableCharacterisation:pcm::parameter::VariableCharacterisation{
			specification_VariableCharacterisation = target_specification_VariableCharacterisation:pcm::core::PCMRandomVariable{
		}		};
		when {
			Mark_parameter_VariableCharacterisation(sourceVariableCharacterisation, targetVariableCharacterisation);
			Mark_core_PCMRandomVariable(source_specification_VariableCharacterisation, target_specification_VariableCharacterisation);
		}
	}

	top relation CopyReference_VariableUsage_variableCharacterisation_VariableUsage {

		checkonly domain source sourceVariableUsage:pcm::parameter::VariableUsage{
			variableCharacterisation_VariableUsage = source_variableCharacterisation_VariableUsage:pcm::parameter::VariableCharacterisation{
		}		};

		enforce domain target targetVariableUsage:pcm::parameter::VariableUsage{
			variableCharacterisation_VariableUsage = target_variableCharacterisation_VariableUsage:pcm::parameter::VariableCharacterisation{
		}		};
		when {
			Mark_parameter_VariableUsage(sourceVariableUsage, targetVariableUsage);
			Mark_parameter_VariableCharacterisation(source_variableCharacterisation_VariableUsage, target_variableCharacterisation_VariableUsage);
		}
	}

	top relation CopyReference_VariableUsage_namedReference_VariableUsage {

		checkonly domain source sourceVariableUsage:pcm::parameter::VariableUsage{
			namedReference_VariableUsage = source_namedReference_VariableUsage:stoex::AbstractNamedReference{
		}		};

		enforce domain target targetVariableUsage:pcm::parameter::VariableUsage{
			namedReference_VariableUsage = target_namedReference_VariableUsage:stoex::AbstractNamedReference{
		}		};
		when {
			Mark_parameter_VariableUsage(sourceVariableUsage, targetVariableUsage);
			Mark_stoex_AbstractNamedReference(source_namedReference_VariableUsage, target_namedReference_VariableUsage);
		}
	}

	top relation CopyReference_AbstractInternalControlFlowAction_resourceDemand_Action {

		checkonly domain source sourceAbstractInternalControlFlowAction:pcm::seff::AbstractInternalControlFlowAction{
			resourceDemand_Action = source_resourceDemand_Action:pcm::seff::performance::ParametricResourceDemand{
		}		};

		enforce domain target targetAbstractInternalControlFlowAction:pcm::seff::AbstractInternalControlFlowAction{
			resourceDemand_Action = target_resourceDemand_Action:pcm::seff::performance::ParametricResourceDemand{
		}		};
		when {
			Mark_seff_AbstractInternalControlFlowAction(sourceAbstractInternalControlFlowAction, targetAbstractInternalControlFlowAction);
			Mark_performance_ParametricResourceDemand(source_resourceDemand_Action, target_resourceDemand_Action);
		}
	}

	top relation CopyReference_AbstractAction_predecessor_AbstractAction {

		checkonly domain source sourceAbstractAction:pcm::seff::AbstractAction{
			predecessor_AbstractAction = source_predecessor_AbstractAction:pcm::seff::AbstractAction{
		}		};

		enforce domain target targetAbstractAction:pcm::seff::AbstractAction{
			predecessor_AbstractAction = target_predecessor_AbstractAction:pcm::seff::AbstractAction{
		}		};
		when {
			Mark_seff_AbstractAction(sourceAbstractAction, targetAbstractAction);
			Mark_seff_AbstractAction(source_predecessor_AbstractAction, target_predecessor_AbstractAction);
		}
	}

	top relation CopyReference_AbstractAction_successor_AbstractAction {

		checkonly domain source sourceAbstractAction:pcm::seff::AbstractAction{
			successor_AbstractAction = source_successor_AbstractAction:pcm::seff::AbstractAction{
		}		};

		enforce domain target targetAbstractAction:pcm::seff::AbstractAction{
			successor_AbstractAction = target_successor_AbstractAction:pcm::seff::AbstractAction{
		}		};
		when {
			Mark_seff_AbstractAction(sourceAbstractAction, targetAbstractAction);
			Mark_seff_AbstractAction(source_successor_AbstractAction, target_successor_AbstractAction);
		}
	}

	top relation CopyReference_ResourceDemandingBehaviour_steps_Behaviour {

		checkonly domain source sourceResourceDemandingBehaviour:pcm::seff::ResourceDemandingBehaviour{
			steps_Behaviour = source_steps_Behaviour:pcm::seff::AbstractAction{
		}		};

		enforce domain target targetResourceDemandingBehaviour:pcm::seff::ResourceDemandingBehaviour{
			steps_Behaviour = target_steps_Behaviour:pcm::seff::AbstractAction{
		}		};
		when {
			Mark_seff_ResourceDemandingBehaviour(sourceResourceDemandingBehaviour, targetResourceDemandingBehaviour);
			Mark_seff_AbstractAction(source_steps_Behaviour, target_steps_Behaviour);
		}
	}

	top relation CopyReference_ReleaseAction_passiveResource_ReleaseAction {

		checkonly domain source sourceReleaseAction:pcm::seff::ReleaseAction{
			passiveResource_ReleaseAction = source_passiveResource_ReleaseAction:pcm::repository::PassiveResource{
		}		};

		enforce domain target targetReleaseAction:pcm::seff::ReleaseAction{
			passiveResource_ReleaseAction = target_passiveResource_ReleaseAction:pcm::repository::PassiveResource{
		}		};
		when {
			Mark_seff_ReleaseAction(sourceReleaseAction, targetReleaseAction);
			Mark_repository_PassiveResource(source_passiveResource_ReleaseAction, target_passiveResource_ReleaseAction);
		}
	}

	top relation CopyReference_LoopAction_iterationCount_LoopAction {

		checkonly domain source sourceLoopAction:pcm::seff::LoopAction{
			iterationCount_LoopAction = source_iterationCount_LoopAction:pcm::core::PCMRandomVariable{
		}		};

		enforce domain target targetLoopAction:pcm::seff::LoopAction{
			iterationCount_LoopAction = target_iterationCount_LoopAction:pcm::core::PCMRandomVariable{
		}		};
		when {
			Mark_seff_LoopAction(sourceLoopAction, targetLoopAction);
			Mark_core_PCMRandomVariable(source_iterationCount_LoopAction, target_iterationCount_LoopAction);
		}
	}

	top relation CopyReference_AbstractLoopAction_bodyBehaviour_Loop {

		checkonly domain source sourceAbstractLoopAction:pcm::seff::AbstractLoopAction{
			bodyBehaviour_Loop = source_bodyBehaviour_Loop:pcm::seff::ResourceDemandingBehaviour{
		}		};

		enforce domain target targetAbstractLoopAction:pcm::seff::AbstractLoopAction{
			bodyBehaviour_Loop = target_bodyBehaviour_Loop:pcm::seff::ResourceDemandingBehaviour{
		}		};
		when {
			Mark_seff_AbstractLoopAction(sourceAbstractLoopAction, targetAbstractLoopAction);
			Mark_seff_ResourceDemandingBehaviour(source_bodyBehaviour_Loop, target_bodyBehaviour_Loop);
		}
	}

	top relation CopyReference_ForkAction_asynchronousForkedBehaviours_ForkAction {

		checkonly domain source sourceForkAction:pcm::seff::ForkAction{
			asynchronousForkedBehaviours_ForkAction = source_asynchronousForkedBehaviours_ForkAction:pcm::seff::ForkedBehaviour{
		}		};

		enforce domain target targetForkAction:pcm::seff::ForkAction{
			asynchronousForkedBehaviours_ForkAction = target_asynchronousForkedBehaviours_ForkAction:pcm::seff::ForkedBehaviour{
		}		};
		when {
			Mark_seff_ForkAction(sourceForkAction, targetForkAction);
			Mark_seff_ForkedBehaviour(source_asynchronousForkedBehaviours_ForkAction, target_asynchronousForkedBehaviours_ForkAction);
		}
	}

	top relation CopyReference_ForkAction_synchronisingBehaviours_ForkAction {

		checkonly domain source sourceForkAction:pcm::seff::ForkAction{
			synchronisingBehaviours_ForkAction = source_synchronisingBehaviours_ForkAction:pcm::seff::SynchronisationPoint{
		}		};

		enforce domain target targetForkAction:pcm::seff::ForkAction{
			synchronisingBehaviours_ForkAction = target_synchronisingBehaviours_ForkAction:pcm::seff::SynchronisationPoint{
		}		};
		when {
			Mark_seff_ForkAction(sourceForkAction, targetForkAction);
			Mark_seff_SynchronisationPoint(source_synchronisingBehaviours_ForkAction, target_synchronisingBehaviours_ForkAction);
		}
	}

	top relation CopyReference_SynchronisationPoint_synchronousForkedBehaviours_SynchronisationPoint {

		checkonly domain source sourceSynchronisationPoint:pcm::seff::SynchronisationPoint{
			synchronousForkedBehaviours_SynchronisationPoint = source_synchronousForkedBehaviours_SynchronisationPoint:pcm::seff::ForkedBehaviour{
		}		};

		enforce domain target targetSynchronisationPoint:pcm::seff::SynchronisationPoint{
			synchronousForkedBehaviours_SynchronisationPoint = target_synchronousForkedBehaviours_SynchronisationPoint:pcm::seff::ForkedBehaviour{
		}		};
		when {
			Mark_seff_SynchronisationPoint(sourceSynchronisationPoint, targetSynchronisationPoint);
			Mark_seff_ForkedBehaviour(source_synchronousForkedBehaviours_SynchronisationPoint, target_synchronousForkedBehaviours_SynchronisationPoint);
		}
	}

	top relation CopyReference_SynchronisationPoint_outputParameterUsage_SynchronisationPoint {

		checkonly domain source sourceSynchronisationPoint:pcm::seff::SynchronisationPoint{
			outputParameterUsage_SynchronisationPoint = source_outputParameterUsage_SynchronisationPoint:pcm::parameter::VariableUsage{
		}		};

		enforce domain target targetSynchronisationPoint:pcm::seff::SynchronisationPoint{
			outputParameterUsage_SynchronisationPoint = target_outputParameterUsage_SynchronisationPoint:pcm::parameter::VariableUsage{
		}		};
		when {
			Mark_seff_SynchronisationPoint(sourceSynchronisationPoint, targetSynchronisationPoint);
			Mark_parameter_VariableUsage(source_outputParameterUsage_SynchronisationPoint, target_outputParameterUsage_SynchronisationPoint);
		}
	}

	top relation CopyReference_ExternalCallAction_calledService_ExternalService {

		checkonly domain source sourceExternalCallAction:pcm::seff::ExternalCallAction{
			calledService_ExternalService = source_calledService_ExternalService:pcm::repository::Signature{
		}		};

		enforce domain target targetExternalCallAction:pcm::seff::ExternalCallAction{
			calledService_ExternalService = target_calledService_ExternalService:pcm::repository::Signature{
		}		};
		when {
			Mark_seff_ExternalCallAction(sourceExternalCallAction, targetExternalCallAction);
			Mark_repository_Signature(source_calledService_ExternalService, target_calledService_ExternalService);
		}
	}

	top relation CopyReference_ExternalCallAction_inputParameterUsages_ExternalCallAction {

		checkonly domain source sourceExternalCallAction:pcm::seff::ExternalCallAction{
			inputParameterUsages_ExternalCallAction = source_inputParameterUsages_ExternalCallAction:pcm::parameter::VariableUsage{
		}		};

		enforce domain target targetExternalCallAction:pcm::seff::ExternalCallAction{
			inputParameterUsages_ExternalCallAction = target_inputParameterUsages_ExternalCallAction:pcm::parameter::VariableUsage{
		}		};
		when {
			Mark_seff_ExternalCallAction(sourceExternalCallAction, targetExternalCallAction);
			Mark_parameter_VariableUsage(source_inputParameterUsages_ExternalCallAction, target_inputParameterUsages_ExternalCallAction);
		}
	}

	top relation CopyReference_ExternalCallAction_outputVariableUsages_ExternalCallAction {

		checkonly domain source sourceExternalCallAction:pcm::seff::ExternalCallAction{
			outputVariableUsages_ExternalCallAction = source_outputVariableUsages_ExternalCallAction:pcm::parameter::VariableUsage{
		}		};

		enforce domain target targetExternalCallAction:pcm::seff::ExternalCallAction{
			outputVariableUsages_ExternalCallAction = target_outputVariableUsages_ExternalCallAction:pcm::parameter::VariableUsage{
		}		};
		when {
			Mark_seff_ExternalCallAction(sourceExternalCallAction, targetExternalCallAction);
			Mark_parameter_VariableUsage(source_outputVariableUsages_ExternalCallAction, target_outputVariableUsages_ExternalCallAction);
		}
	}

	top relation CopyReference_ExternalCallAction_role_ExternalService {

		checkonly domain source sourceExternalCallAction:pcm::seff::ExternalCallAction{
			role_ExternalService = source_role_ExternalService:pcm::repository::Role{
		}		};

		enforce domain target targetExternalCallAction:pcm::seff::ExternalCallAction{
			role_ExternalService = target_role_ExternalService:pcm::repository::Role{
		}		};
		when {
			Mark_seff_ExternalCallAction(sourceExternalCallAction, targetExternalCallAction);
			Mark_repository_Role(source_role_ExternalService, target_role_ExternalService);
		}
	}

	top relation CopyReference_AbstractBranchTransition_branchBehaviour_BranchTransition {

		checkonly domain source sourceAbstractBranchTransition:pcm::seff::AbstractBranchTransition{
			branchBehaviour_BranchTransition = source_branchBehaviour_BranchTransition:pcm::seff::ResourceDemandingBehaviour{
		}		};

		enforce domain target targetAbstractBranchTransition:pcm::seff::AbstractBranchTransition{
			branchBehaviour_BranchTransition = target_branchBehaviour_BranchTransition:pcm::seff::ResourceDemandingBehaviour{
		}		};
		when {
			Mark_seff_AbstractBranchTransition(sourceAbstractBranchTransition, targetAbstractBranchTransition);
			Mark_seff_ResourceDemandingBehaviour(source_branchBehaviour_BranchTransition, target_branchBehaviour_BranchTransition);
		}
	}

	top relation CopyReference_BranchAction_branches_Branch {

		checkonly domain source sourceBranchAction:pcm::seff::BranchAction{
			branches_Branch = source_branches_Branch:pcm::seff::AbstractBranchTransition{
		}		};

		enforce domain target targetBranchAction:pcm::seff::BranchAction{
			branches_Branch = target_branches_Branch:pcm::seff::AbstractBranchTransition{
		}		};
		when {
			Mark_seff_BranchAction(sourceBranchAction, targetBranchAction);
			Mark_seff_AbstractBranchTransition(source_branches_Branch, target_branches_Branch);
		}
	}

	top relation CopyReference_AcquireAction_passiveresource_AcquireAction {

		checkonly domain source sourceAcquireAction:pcm::seff::AcquireAction{
			passiveresource_AcquireAction = source_passiveresource_AcquireAction:pcm::repository::PassiveResource{
		}		};

		enforce domain target targetAcquireAction:pcm::seff::AcquireAction{
			passiveresource_AcquireAction = target_passiveresource_AcquireAction:pcm::repository::PassiveResource{
		}		};
		when {
			Mark_seff_AcquireAction(sourceAcquireAction, targetAcquireAction);
			Mark_repository_PassiveResource(source_passiveresource_AcquireAction, target_passiveresource_AcquireAction);
		}
	}

	top relation CopyReference_CollectionIteratorAction_parameter_CollectionIteratorAction {

		checkonly domain source sourceCollectionIteratorAction:pcm::seff::CollectionIteratorAction{
			parameter_CollectionIteratorAction = source_parameter_CollectionIteratorAction:pcm::repository::Parameter{
		}		};

		enforce domain target targetCollectionIteratorAction:pcm::seff::CollectionIteratorAction{
			parameter_CollectionIteratorAction = target_parameter_CollectionIteratorAction:pcm::repository::Parameter{
		}		};
		when {
			Mark_seff_CollectionIteratorAction(sourceCollectionIteratorAction, targetCollectionIteratorAction);
			Mark_repository_Parameter(source_parameter_CollectionIteratorAction, target_parameter_CollectionIteratorAction);
		}
	}

	top relation CopyReference_GuardedBranchTransition_branchCondition_GuardedBranchTransition {

		checkonly domain source sourceGuardedBranchTransition:pcm::seff::GuardedBranchTransition{
			branchCondition_GuardedBranchTransition = source_branchCondition_GuardedBranchTransition:pcm::core::PCMRandomVariable{
		}		};

		enforce domain target targetGuardedBranchTransition:pcm::seff::GuardedBranchTransition{
			branchCondition_GuardedBranchTransition = target_branchCondition_GuardedBranchTransition:pcm::core::PCMRandomVariable{
		}		};
		when {
			Mark_seff_GuardedBranchTransition(sourceGuardedBranchTransition, targetGuardedBranchTransition);
			Mark_core_PCMRandomVariable(source_branchCondition_GuardedBranchTransition, target_branchCondition_GuardedBranchTransition);
		}
	}

	top relation CopyReference_SetVariableAction_localVariableUsages_SetVariableAction {

		checkonly domain source sourceSetVariableAction:pcm::seff::SetVariableAction{
			localVariableUsages_SetVariableAction = source_localVariableUsages_SetVariableAction:pcm::parameter::VariableUsage{
		}		};

		enforce domain target targetSetVariableAction:pcm::seff::SetVariableAction{
			localVariableUsages_SetVariableAction = target_localVariableUsages_SetVariableAction:pcm::parameter::VariableUsage{
		}		};
		when {
			Mark_seff_SetVariableAction(sourceSetVariableAction, targetSetVariableAction);
			Mark_parameter_VariableUsage(source_localVariableUsages_SetVariableAction, target_localVariableUsages_SetVariableAction);
		}
	}

	top relation CopyReference_ServiceEffectSpecification_describedService__SEFF {

		checkonly domain source sourceServiceEffectSpecification:pcm::seff::ServiceEffectSpecification{
			describedService__SEFF = source_describedService__SEFF:pcm::repository::Signature{
		}		};

		enforce domain target targetServiceEffectSpecification:pcm::seff::ServiceEffectSpecification{
			describedService__SEFF = target_describedService__SEFF:pcm::repository::Signature{
		}		};
		when {
			Mark_seff_ServiceEffectSpecification(sourceServiceEffectSpecification, targetServiceEffectSpecification);
			Mark_repository_Signature(source_describedService__SEFF, target_describedService__SEFF);
		}
	}

	top relation CopyReference_ParametricResourceDemand_specification_ParametericResourceDemand {

		checkonly domain source sourceParametricResourceDemand:pcm::seff::performance::ParametricResourceDemand{
			specification_ParametericResourceDemand = source_specification_ParametericResourceDemand:pcm::core::PCMRandomVariable{
		}		};

		enforce domain target targetParametricResourceDemand:pcm::seff::performance::ParametricResourceDemand{
			specification_ParametericResourceDemand = target_specification_ParametericResourceDemand:pcm::core::PCMRandomVariable{
		}		};
		when {
			Mark_performance_ParametricResourceDemand(sourceParametricResourceDemand, targetParametricResourceDemand);
			Mark_core_PCMRandomVariable(source_specification_ParametericResourceDemand, target_specification_ParametericResourceDemand);
		}
	}

	top relation CopyReference_ParametricResourceDemand_requiredResource_ParametricResourceDemand {

		checkonly domain source sourceParametricResourceDemand:pcm::seff::performance::ParametricResourceDemand{
			requiredResource_ParametricResourceDemand = source_requiredResource_ParametricResourceDemand:pcm::resourcetype::ProcessingResourceType{
		}		};

		enforce domain target targetParametricResourceDemand:pcm::seff::performance::ParametricResourceDemand{
			requiredResource_ParametricResourceDemand = target_requiredResource_ParametricResourceDemand:pcm::resourcetype::ProcessingResourceType{
		}		};
		when {
			Mark_performance_ParametricResourceDemand(sourceParametricResourceDemand, targetParametricResourceDemand);
			Mark_resourcetype_ProcessingResourceType(source_requiredResource_ParametricResourceDemand, target_requiredResource_ParametricResourceDemand);
		}
	}

	top relation CopyReference_ParametricResourceDemand_action_ParametricResourceDemand {

		checkonly domain source sourceParametricResourceDemand:pcm::seff::performance::ParametricResourceDemand{
			action_ParametricResourceDemand = source_action_ParametricResourceDemand:pcm::seff::AbstractInternalControlFlowAction{
		}		};

		enforce domain target targetParametricResourceDemand:pcm::seff::performance::ParametricResourceDemand{
			action_ParametricResourceDemand = target_action_ParametricResourceDemand:pcm::seff::AbstractInternalControlFlowAction{
		}		};
		when {
			Mark_performance_ParametricResourceDemand(sourceParametricResourceDemand, targetParametricResourceDemand);
			Mark_seff_AbstractInternalControlFlowAction(source_action_ParametricResourceDemand, target_action_ParametricResourceDemand);
		}
	}

	top relation CopyReference_ResourceRepository_availableResourceTypes_ResourceRepository {

		checkonly domain source sourceResourceRepository:pcm::resourcetype::ResourceRepository{
			availableResourceTypes_ResourceRepository = source_availableResourceTypes_ResourceRepository:pcm::resourcetype::ResourceType{
		}		};

		enforce domain target targetResourceRepository:pcm::resourcetype::ResourceRepository{
			availableResourceTypes_ResourceRepository = target_availableResourceTypes_ResourceRepository:pcm::resourcetype::ResourceType{
		}		};
		when {
			Mark_resourcetype_ResourceRepository(sourceResourceRepository, targetResourceRepository);
			Mark_resourcetype_ResourceType(source_availableResourceTypes_ResourceRepository, target_availableResourceTypes_ResourceRepository);
		}
	}

	top relation CopyReference_AllocationContext_resourceContainer_AllocationContext {

		checkonly domain source sourceAllocationContext:pcm::allocation::AllocationContext{
			resourceContainer_AllocationContext = source_resourceContainer_AllocationContext:pcm::resourceenvironment::ResourceContainer{
		}		};

		enforce domain target targetAllocationContext:pcm::allocation::AllocationContext{
			resourceContainer_AllocationContext = target_resourceContainer_AllocationContext:pcm::resourceenvironment::ResourceContainer{
		}		};
		when {
			Mark_allocation_AllocationContext(sourceAllocationContext, targetAllocationContext);
			Mark_resourceenvironment_ResourceContainer(source_resourceContainer_AllocationContext, target_resourceContainer_AllocationContext);
		}
	}

	top relation CopyReference_AllocationContext_assemblyContext_AllocationContext {

		checkonly domain source sourceAllocationContext:pcm::allocation::AllocationContext{
			assemblyContext_AllocationContext = source_assemblyContext_AllocationContext:pcm::core::composition::AssemblyContext{
		}		};

		enforce domain target targetAllocationContext:pcm::allocation::AllocationContext{
			assemblyContext_AllocationContext = target_assemblyContext_AllocationContext:pcm::core::composition::AssemblyContext{
		}		};
		when {
			Mark_allocation_AllocationContext(sourceAllocationContext, targetAllocationContext);
			Mark_composition_AssemblyContext(source_assemblyContext_AllocationContext, target_assemblyContext_AllocationContext);
		}
	}

	top relation CopyReference_Allocation_allocationContexts_Allocation {

		checkonly domain source sourceAllocation:pcm::allocation::Allocation{
			allocationContexts_Allocation = source_allocationContexts_Allocation:pcm::allocation::AllocationContext{
		}		};

		enforce domain target targetAllocation:pcm::allocation::Allocation{
			allocationContexts_Allocation = target_allocationContexts_Allocation:pcm::allocation::AllocationContext{
		}		};
		when {
			Mark_allocation_Allocation(sourceAllocation, targetAllocation);
			Mark_allocation_AllocationContext(source_allocationContexts_Allocation, target_allocationContexts_Allocation);
		}
	}

	top relation CopyReference_Allocation_targetResourceEnvironment_Allocation {

		checkonly domain source sourceAllocation:pcm::allocation::Allocation{
			targetResourceEnvironment_Allocation = source_targetResourceEnvironment_Allocation:pcm::resourceenvironment::ResourceEnvironment{
		}		};

		enforce domain target targetAllocation:pcm::allocation::Allocation{
			targetResourceEnvironment_Allocation = target_targetResourceEnvironment_Allocation:pcm::resourceenvironment::ResourceEnvironment{
		}		};
		when {
			Mark_allocation_Allocation(sourceAllocation, targetAllocation);
			Mark_resourceenvironment_ResourceEnvironment(source_targetResourceEnvironment_Allocation, target_targetResourceEnvironment_Allocation);
		}
	}

	top relation CopyReference_Allocation_system_Allocation {

		checkonly domain source sourceAllocation:pcm::allocation::Allocation{
			system_Allocation = source_system_Allocation:pcm::system::System{
		}		};

		enforce domain target targetAllocation:pcm::allocation::Allocation{
			system_Allocation = target_system_Allocation:pcm::system::System{
		}		};
		when {
			Mark_allocation_Allocation(sourceAllocation, targetAllocation);
			Mark_system_System(source_system_Allocation, target_system_Allocation);
		}
	}

	top relation CopyReference_ResourceEnvironment_linkingresource {

		checkonly domain source sourceResourceEnvironment:pcm::resourceenvironment::ResourceEnvironment{
			linkingresource = source_linkingresource:pcm::resourceenvironment::LinkingResource{
		}		};

		enforce domain target targetResourceEnvironment:pcm::resourceenvironment::ResourceEnvironment{
			linkingresource = target_linkingresource:pcm::resourceenvironment::LinkingResource{
		}		};
		when {
			Mark_resourceenvironment_ResourceEnvironment(sourceResourceEnvironment, targetResourceEnvironment);
			Mark_resourceenvironment_LinkingResource(source_linkingresource, target_linkingresource);
		}
	}

	top relation CopyReference_ResourceEnvironment_resourceContainer_ResourceEnvironment {

		checkonly domain source sourceResourceEnvironment:pcm::resourceenvironment::ResourceEnvironment{
			resourceContainer_ResourceEnvironment = source_resourceContainer_ResourceEnvironment:pcm::resourceenvironment::ResourceContainer{
		}		};

		enforce domain target targetResourceEnvironment:pcm::resourceenvironment::ResourceEnvironment{
			resourceContainer_ResourceEnvironment = target_resourceContainer_ResourceEnvironment:pcm::resourceenvironment::ResourceContainer{
		}		};
		when {
			Mark_resourceenvironment_ResourceEnvironment(sourceResourceEnvironment, targetResourceEnvironment);
			Mark_resourceenvironment_ResourceContainer(source_resourceContainer_ResourceEnvironment, target_resourceContainer_ResourceEnvironment);
		}
	}

	top relation CopyReference_LinkingResource_toResourceContainer_LinkingResource {

		checkonly domain source sourceLinkingResource:pcm::resourceenvironment::LinkingResource{
			toResourceContainer_LinkingResource = source_toResourceContainer_LinkingResource:pcm::resourceenvironment::ResourceContainer{
		}		};

		enforce domain target targetLinkingResource:pcm::resourceenvironment::LinkingResource{
			toResourceContainer_LinkingResource = target_toResourceContainer_LinkingResource:pcm::resourceenvironment::ResourceContainer{
		}		};
		when {
			Mark_resourceenvironment_LinkingResource(sourceLinkingResource, targetLinkingResource);
			Mark_resourceenvironment_ResourceContainer(source_toResourceContainer_LinkingResource, target_toResourceContainer_LinkingResource);
		}
	}

	top relation CopyReference_LinkingResource_fromResourceContainer_LinkingResource {

		checkonly domain source sourceLinkingResource:pcm::resourceenvironment::LinkingResource{
			fromResourceContainer_LinkingResource = source_fromResourceContainer_LinkingResource:pcm::resourceenvironment::ResourceContainer{
		}		};

		enforce domain target targetLinkingResource:pcm::resourceenvironment::LinkingResource{
			fromResourceContainer_LinkingResource = target_fromResourceContainer_LinkingResource:pcm::resourceenvironment::ResourceContainer{
		}		};
		when {
			Mark_resourceenvironment_LinkingResource(sourceLinkingResource, targetLinkingResource);
			Mark_resourceenvironment_ResourceContainer(source_fromResourceContainer_LinkingResource, target_fromResourceContainer_LinkingResource);
		}
	}

	top relation CopyReference_LinkingResource_communicationLinkResourceSpecifications_LinkingResource {

		checkonly domain source sourceLinkingResource:pcm::resourceenvironment::LinkingResource{
			communicationLinkResourceSpecifications_LinkingResource = source_communicationLinkResourceSpecifications_LinkingResource:pcm::resourceenvironment::CommunicationLinkResourceSpecification{
		}		};

		enforce domain target targetLinkingResource:pcm::resourceenvironment::LinkingResource{
			communicationLinkResourceSpecifications_LinkingResource = target_communicationLinkResourceSpecifications_LinkingResource:pcm::resourceenvironment::CommunicationLinkResourceSpecification{
		}		};
		when {
			Mark_resourceenvironment_LinkingResource(sourceLinkingResource, targetLinkingResource);
			Mark_resourceenvironment_CommunicationLinkResourceSpecification(source_communicationLinkResourceSpecifications_LinkingResource, target_communicationLinkResourceSpecifications_LinkingResource);
		}
	}

	top relation CopyReference_CommunicationLinkResourceSpecification_communicationLinkResourceType_CommunicationLinkResourceSpecification {

		checkonly domain source sourceCommunicationLinkResourceSpecification:pcm::resourceenvironment::CommunicationLinkResourceSpecification{
			communicationLinkResourceType_CommunicationLinkResourceSpecification = source_communicationLinkResourceType_CommunicationLinkResourceSpecification:pcm::resourcetype::CommunicationLinkResourceType{
		}		};

		enforce domain target targetCommunicationLinkResourceSpecification:pcm::resourceenvironment::CommunicationLinkResourceSpecification{
			communicationLinkResourceType_CommunicationLinkResourceSpecification = target_communicationLinkResourceType_CommunicationLinkResourceSpecification:pcm::resourcetype::CommunicationLinkResourceType{
		}		};
		when {
			Mark_resourceenvironment_CommunicationLinkResourceSpecification(sourceCommunicationLinkResourceSpecification, targetCommunicationLinkResourceSpecification);
			Mark_resourcetype_CommunicationLinkResourceType(source_communicationLinkResourceType_CommunicationLinkResourceSpecification, target_communicationLinkResourceType_CommunicationLinkResourceSpecification);
		}
	}

	top relation CopyReference_CommunicationLinkResourceSpecification_latency_CommunicationLinkResourceSpecification {

		checkonly domain source sourceCommunicationLinkResourceSpecification:pcm::resourceenvironment::CommunicationLinkResourceSpecification{
			latency_CommunicationLinkResourceSpecification = source_latency_CommunicationLinkResourceSpecification:pcm::core::PCMRandomVariable{
		}		};

		enforce domain target targetCommunicationLinkResourceSpecification:pcm::resourceenvironment::CommunicationLinkResourceSpecification{
			latency_CommunicationLinkResourceSpecification = target_latency_CommunicationLinkResourceSpecification:pcm::core::PCMRandomVariable{
		}		};
		when {
			Mark_resourceenvironment_CommunicationLinkResourceSpecification(sourceCommunicationLinkResourceSpecification, targetCommunicationLinkResourceSpecification);
			Mark_core_PCMRandomVariable(source_latency_CommunicationLinkResourceSpecification, target_latency_CommunicationLinkResourceSpecification);
		}
	}

	top relation CopyReference_CommunicationLinkResourceSpecification_throughput_CommunicationLinkResourceSpecification {

		checkonly domain source sourceCommunicationLinkResourceSpecification:pcm::resourceenvironment::CommunicationLinkResourceSpecification{
			throughput_CommunicationLinkResourceSpecification = source_throughput_CommunicationLinkResourceSpecification:pcm::core::PCMRandomVariable{
		}		};

		enforce domain target targetCommunicationLinkResourceSpecification:pcm::resourceenvironment::CommunicationLinkResourceSpecification{
			throughput_CommunicationLinkResourceSpecification = target_throughput_CommunicationLinkResourceSpecification:pcm::core::PCMRandomVariable{
		}		};
		when {
			Mark_resourceenvironment_CommunicationLinkResourceSpecification(sourceCommunicationLinkResourceSpecification, targetCommunicationLinkResourceSpecification);
			Mark_core_PCMRandomVariable(source_throughput_CommunicationLinkResourceSpecification, target_throughput_CommunicationLinkResourceSpecification);
		}
	}

	top relation CopyReference_ProcessingResourceSpecification_activeResourceType_ActiveResourceSpecification {

		checkonly domain source sourceProcessingResourceSpecification:pcm::resourceenvironment::ProcessingResourceSpecification{
			activeResourceType_ActiveResourceSpecification = source_activeResourceType_ActiveResourceSpecification:pcm::resourcetype::ProcessingResourceType{
		}		};

		enforce domain target targetProcessingResourceSpecification:pcm::resourceenvironment::ProcessingResourceSpecification{
			activeResourceType_ActiveResourceSpecification = target_activeResourceType_ActiveResourceSpecification:pcm::resourcetype::ProcessingResourceType{
		}		};
		when {
			Mark_resourceenvironment_ProcessingResourceSpecification(sourceProcessingResourceSpecification, targetProcessingResourceSpecification);
			Mark_resourcetype_ProcessingResourceType(source_activeResourceType_ActiveResourceSpecification, target_activeResourceType_ActiveResourceSpecification);
		}
	}

	top relation CopyReference_ProcessingResourceSpecification_processingRate_ProcessingResourceSpecification {

		checkonly domain source sourceProcessingResourceSpecification:pcm::resourceenvironment::ProcessingResourceSpecification{
			processingRate_ProcessingResourceSpecification = source_processingRate_ProcessingResourceSpecification:pcm::core::PCMRandomVariable{
		}		};

		enforce domain target targetProcessingResourceSpecification:pcm::resourceenvironment::ProcessingResourceSpecification{
			processingRate_ProcessingResourceSpecification = target_processingRate_ProcessingResourceSpecification:pcm::core::PCMRandomVariable{
		}		};
		when {
			Mark_resourceenvironment_ProcessingResourceSpecification(sourceProcessingResourceSpecification, targetProcessingResourceSpecification);
			Mark_core_PCMRandomVariable(source_processingRate_ProcessingResourceSpecification, target_processingRate_ProcessingResourceSpecification);
		}
	}

	top relation CopyReference_ResourceContainer_activeResourceSpecifications_ResourceContainer {

		checkonly domain source sourceResourceContainer:pcm::resourceenvironment::ResourceContainer{
			activeResourceSpecifications_ResourceContainer = source_activeResourceSpecifications_ResourceContainer:pcm::resourceenvironment::ProcessingResourceSpecification{
		}		};

		enforce domain target targetResourceContainer:pcm::resourceenvironment::ResourceContainer{
			activeResourceSpecifications_ResourceContainer = target_activeResourceSpecifications_ResourceContainer:pcm::resourceenvironment::ProcessingResourceSpecification{
		}		};
		when {
			Mark_resourceenvironment_ResourceContainer(sourceResourceContainer, targetResourceContainer);
			Mark_resourceenvironment_ProcessingResourceSpecification(source_activeResourceSpecifications_ResourceContainer, target_activeResourceSpecifications_ResourceContainer);
		}
	}

	top relation CopyReference_System_qosAnnotations_System {

		checkonly domain source sourceSystem:pcm::system::System{
			qosAnnotations_System = source_qosAnnotations_System:pcm::qosannotations::QoSAnnotations{
		}		};

		enforce domain target targetSystem:pcm::system::System{
			qosAnnotations_System = target_qosAnnotations_System:pcm::qosannotations::QoSAnnotations{
		}		};
		when {
			Mark_system_System(sourceSystem, targetSystem);
			Mark_qosannotations_QoSAnnotations(source_qosAnnotations_System, target_qosAnnotations_System);
		}
	}

	top relation CopyReference_SpecifiedQoSAnnotation_signature_SpecifiedQoSAnnation {

		checkonly domain source sourceSpecifiedQoSAnnotation:pcm::qosannotations::SpecifiedQoSAnnotation{
			signature_SpecifiedQoSAnnation = source_signature_SpecifiedQoSAnnation:pcm::repository::Signature{
		}		};

		enforce domain target targetSpecifiedQoSAnnotation:pcm::qosannotations::SpecifiedQoSAnnotation{
			signature_SpecifiedQoSAnnation = target_signature_SpecifiedQoSAnnation:pcm::repository::Signature{
		}		};
		when {
			Mark_qosannotations_SpecifiedQoSAnnotation(sourceSpecifiedQoSAnnotation, targetSpecifiedQoSAnnotation);
			Mark_repository_Signature(source_signature_SpecifiedQoSAnnation, target_signature_SpecifiedQoSAnnation);
		}
	}

	top relation CopyReference_SpecifiedQoSAnnotation_role_SpecifiedQoSAnnotation {

		checkonly domain source sourceSpecifiedQoSAnnotation:pcm::qosannotations::SpecifiedQoSAnnotation{
			role_SpecifiedQoSAnnotation = source_role_SpecifiedQoSAnnotation:pcm::repository::Role{
		}		};

		enforce domain target targetSpecifiedQoSAnnotation:pcm::qosannotations::SpecifiedQoSAnnotation{
			role_SpecifiedQoSAnnotation = target_role_SpecifiedQoSAnnotation:pcm::repository::Role{
		}		};
		when {
			Mark_qosannotations_SpecifiedQoSAnnotation(sourceSpecifiedQoSAnnotation, targetSpecifiedQoSAnnotation);
			Mark_repository_Role(source_role_SpecifiedQoSAnnotation, target_role_SpecifiedQoSAnnotation);
		}
	}

	top relation CopyReference_SpecifiedQoSAnnotation_specification_SpecifiedExecutionTime {

		checkonly domain source sourceSpecifiedQoSAnnotation:pcm::qosannotations::SpecifiedQoSAnnotation{
			specification_SpecifiedExecutionTime = source_specification_SpecifiedExecutionTime:pcm::core::PCMRandomVariable{
		}		};

		enforce domain target targetSpecifiedQoSAnnotation:pcm::qosannotations::SpecifiedQoSAnnotation{
			specification_SpecifiedExecutionTime = target_specification_SpecifiedExecutionTime:pcm::core::PCMRandomVariable{
		}		};
		when {
			Mark_qosannotations_SpecifiedQoSAnnotation(sourceSpecifiedQoSAnnotation, targetSpecifiedQoSAnnotation);
			Mark_core_PCMRandomVariable(source_specification_SpecifiedExecutionTime, target_specification_SpecifiedExecutionTime);
		}
	}

	top relation CopyReference_SpecifiedOutputParameterAbstraction_signature_SpecifiedOutputParameterAbstraction {

		checkonly domain source sourceSpecifiedOutputParameterAbstraction:pcm::qosannotations::SpecifiedOutputParameterAbstraction{
			signature_SpecifiedOutputParameterAbstraction = source_signature_SpecifiedOutputParameterAbstraction:pcm::repository::Signature{
		}		};

		enforce domain target targetSpecifiedOutputParameterAbstraction:pcm::qosannotations::SpecifiedOutputParameterAbstraction{
			signature_SpecifiedOutputParameterAbstraction = target_signature_SpecifiedOutputParameterAbstraction:pcm::repository::Signature{
		}		};
		when {
			Mark_qosannotations_SpecifiedOutputParameterAbstraction(sourceSpecifiedOutputParameterAbstraction, targetSpecifiedOutputParameterAbstraction);
			Mark_repository_Signature(source_signature_SpecifiedOutputParameterAbstraction, target_signature_SpecifiedOutputParameterAbstraction);
		}
	}

	top relation CopyReference_SpecifiedOutputParameterAbstraction_role_SpecifiedOutputParameterAbstraction {

		checkonly domain source sourceSpecifiedOutputParameterAbstraction:pcm::qosannotations::SpecifiedOutputParameterAbstraction{
			role_SpecifiedOutputParameterAbstraction = source_role_SpecifiedOutputParameterAbstraction:pcm::repository::Role{
		}		};

		enforce domain target targetSpecifiedOutputParameterAbstraction:pcm::qosannotations::SpecifiedOutputParameterAbstraction{
			role_SpecifiedOutputParameterAbstraction = target_role_SpecifiedOutputParameterAbstraction:pcm::repository::Role{
		}		};
		when {
			Mark_qosannotations_SpecifiedOutputParameterAbstraction(sourceSpecifiedOutputParameterAbstraction, targetSpecifiedOutputParameterAbstraction);
			Mark_repository_Role(source_role_SpecifiedOutputParameterAbstraction, target_role_SpecifiedOutputParameterAbstraction);
		}
	}

	top relation CopyReference_SpecifiedOutputParameterAbstraction_expectedExternalOutputs_SpecifiedOutputParameterAbstraction {

		checkonly domain source sourceSpecifiedOutputParameterAbstraction:pcm::qosannotations::SpecifiedOutputParameterAbstraction{
			expectedExternalOutputs_SpecifiedOutputParameterAbstraction = source_expectedExternalOutputs_SpecifiedOutputParameterAbstraction:pcm::parameter::VariableUsage{
		}		};

		enforce domain target targetSpecifiedOutputParameterAbstraction:pcm::qosannotations::SpecifiedOutputParameterAbstraction{
			expectedExternalOutputs_SpecifiedOutputParameterAbstraction = target_expectedExternalOutputs_SpecifiedOutputParameterAbstraction:pcm::parameter::VariableUsage{
		}		};
		when {
			Mark_qosannotations_SpecifiedOutputParameterAbstraction(sourceSpecifiedOutputParameterAbstraction, targetSpecifiedOutputParameterAbstraction);
			Mark_parameter_VariableUsage(source_expectedExternalOutputs_SpecifiedOutputParameterAbstraction, target_expectedExternalOutputs_SpecifiedOutputParameterAbstraction);
		}
	}

	top relation CopyReference_QoSAnnotations_specifiedQoSAnnotations_QoSAnnotations {

		checkonly domain source sourceQoSAnnotations:pcm::qosannotations::QoSAnnotations{
			specifiedQoSAnnotations_QoSAnnotations = source_specifiedQoSAnnotations_QoSAnnotations:pcm::qosannotations::SpecifiedQoSAnnotation{
		}		};

		enforce domain target targetQoSAnnotations:pcm::qosannotations::QoSAnnotations{
			specifiedQoSAnnotations_QoSAnnotations = target_specifiedQoSAnnotations_QoSAnnotations:pcm::qosannotations::SpecifiedQoSAnnotation{
		}		};
		when {
			Mark_qosannotations_QoSAnnotations(sourceQoSAnnotations, targetQoSAnnotations);
			Mark_qosannotations_SpecifiedQoSAnnotation(source_specifiedQoSAnnotations_QoSAnnotations, target_specifiedQoSAnnotations_QoSAnnotations);
		}
	}

	top relation CopyReference_QoSAnnotations_specifiedOutputParameterAbstractions_QoSAnnotations {

		checkonly domain source sourceQoSAnnotations:pcm::qosannotations::QoSAnnotations{
			specifiedOutputParameterAbstractions_QoSAnnotations = source_specifiedOutputParameterAbstractions_QoSAnnotations:pcm::qosannotations::SpecifiedOutputParameterAbstraction{
		}		};

		enforce domain target targetQoSAnnotations:pcm::qosannotations::QoSAnnotations{
			specifiedOutputParameterAbstractions_QoSAnnotations = target_specifiedOutputParameterAbstractions_QoSAnnotations:pcm::qosannotations::SpecifiedOutputParameterAbstraction{
		}		};
		when {
			Mark_qosannotations_QoSAnnotations(sourceQoSAnnotations, targetQoSAnnotations);
			Mark_qosannotations_SpecifiedOutputParameterAbstraction(source_specifiedOutputParameterAbstractions_QoSAnnotations, target_specifiedOutputParameterAbstractions_QoSAnnotations);
		}
	}

	top relation CopyReference_ComponentSpecifiedExecutionTime_assemblyContext_ComponentSpecifiedExecutionTime {

		checkonly domain source sourceComponentSpecifiedExecutionTime:pcm::qosannotations::performance::ComponentSpecifiedExecutionTime{
			assemblyContext_ComponentSpecifiedExecutionTime = source_assemblyContext_ComponentSpecifiedExecutionTime:pcm::core::composition::AssemblyContext{
		}		};

		enforce domain target targetComponentSpecifiedExecutionTime:pcm::qosannotations::performance::ComponentSpecifiedExecutionTime{
			assemblyContext_ComponentSpecifiedExecutionTime = target_assemblyContext_ComponentSpecifiedExecutionTime:pcm::core::composition::AssemblyContext{
		}		};
		when {
			Mark_performance_ComponentSpecifiedExecutionTime(sourceComponentSpecifiedExecutionTime, targetComponentSpecifiedExecutionTime);
			Mark_composition_AssemblyContext(source_assemblyContext_ComponentSpecifiedExecutionTime, target_assemblyContext_ComponentSpecifiedExecutionTime);
		}
	}

	top relation CopyReference_UsageScenario_workload_UsageScenario {

		checkonly domain source sourceUsageScenario:pcm::usagemodel::UsageScenario{
			workload_UsageScenario = source_workload_UsageScenario:pcm::usagemodel::Workload{
		}		};

		enforce domain target targetUsageScenario:pcm::usagemodel::UsageScenario{
			workload_UsageScenario = target_workload_UsageScenario:pcm::usagemodel::Workload{
		}		};
		when {
			Mark_usagemodel_UsageScenario(sourceUsageScenario, targetUsageScenario);
			Mark_usagemodel_Workload(source_workload_UsageScenario, target_workload_UsageScenario);
		}
	}

	top relation CopyReference_UsageScenario_scenarioBehaviour_UsageScenario {

		checkonly domain source sourceUsageScenario:pcm::usagemodel::UsageScenario{
			scenarioBehaviour_UsageScenario = source_scenarioBehaviour_UsageScenario:pcm::usagemodel::ScenarioBehaviour{
		}		};

		enforce domain target targetUsageScenario:pcm::usagemodel::UsageScenario{
			scenarioBehaviour_UsageScenario = target_scenarioBehaviour_UsageScenario:pcm::usagemodel::ScenarioBehaviour{
		}		};
		when {
			Mark_usagemodel_UsageScenario(sourceUsageScenario, targetUsageScenario);
			Mark_usagemodel_ScenarioBehaviour(source_scenarioBehaviour_UsageScenario, target_scenarioBehaviour_UsageScenario);
		}
	}

	top relation CopyReference_ScenarioBehaviour_actions_ScenarioBehaviour {

		checkonly domain source sourceScenarioBehaviour:pcm::usagemodel::ScenarioBehaviour{
			actions_ScenarioBehaviour = source_actions_ScenarioBehaviour:pcm::usagemodel::AbstractUserAction{
		}		};

		enforce domain target targetScenarioBehaviour:pcm::usagemodel::ScenarioBehaviour{
			actions_ScenarioBehaviour = target_actions_ScenarioBehaviour:pcm::usagemodel::AbstractUserAction{
		}		};
		when {
			Mark_usagemodel_ScenarioBehaviour(sourceScenarioBehaviour, targetScenarioBehaviour);
			Mark_usagemodel_AbstractUserAction(source_actions_ScenarioBehaviour, target_actions_ScenarioBehaviour);
		}
	}

	top relation CopyReference_AbstractUserAction_successor {

		checkonly domain source sourceAbstractUserAction:pcm::usagemodel::AbstractUserAction{
			successor = source_successor:pcm::usagemodel::AbstractUserAction{
		}		};

		enforce domain target targetAbstractUserAction:pcm::usagemodel::AbstractUserAction{
			successor = target_successor:pcm::usagemodel::AbstractUserAction{
		}		};
		when {
			Mark_usagemodel_AbstractUserAction(sourceAbstractUserAction, targetAbstractUserAction);
			Mark_usagemodel_AbstractUserAction(source_successor, target_successor);
		}
	}

	top relation CopyReference_AbstractUserAction_predecessor {

		checkonly domain source sourceAbstractUserAction:pcm::usagemodel::AbstractUserAction{
			predecessor = source_predecessor:pcm::usagemodel::AbstractUserAction{
		}		};

		enforce domain target targetAbstractUserAction:pcm::usagemodel::AbstractUserAction{
			predecessor = target_predecessor:pcm::usagemodel::AbstractUserAction{
		}		};
		when {
			Mark_usagemodel_AbstractUserAction(sourceAbstractUserAction, targetAbstractUserAction);
			Mark_usagemodel_AbstractUserAction(source_predecessor, target_predecessor);
		}
	}

	top relation CopyReference_UsageModel_usageScenario_UsageModel {

		checkonly domain source sourceUsageModel:pcm::usagemodel::UsageModel{
			usageScenario_UsageModel = source_usageScenario_UsageModel:pcm::usagemodel::UsageScenario{
		}		};

		enforce domain target targetUsageModel:pcm::usagemodel::UsageModel{
			usageScenario_UsageModel = target_usageScenario_UsageModel:pcm::usagemodel::UsageScenario{
		}		};
		when {
			Mark_usagemodel_UsageModel(sourceUsageModel, targetUsageModel);
			Mark_usagemodel_UsageScenario(source_usageScenario_UsageModel, target_usageScenario_UsageModel);
		}
	}

	top relation CopyReference_UsageModel_userData_UsageModel {

		checkonly domain source sourceUsageModel:pcm::usagemodel::UsageModel{
			userData_UsageModel = source_userData_UsageModel:pcm::usagemodel::UserData{
		}		};

		enforce domain target targetUsageModel:pcm::usagemodel::UsageModel{
			userData_UsageModel = target_userData_UsageModel:pcm::usagemodel::UserData{
		}		};
		when {
			Mark_usagemodel_UsageModel(sourceUsageModel, targetUsageModel);
			Mark_usagemodel_UserData(source_userData_UsageModel, target_userData_UsageModel);
		}
	}

	top relation CopyReference_UserData_userDataParameterUsages_UserData {

		checkonly domain source sourceUserData:pcm::usagemodel::UserData{
			userDataParameterUsages_UserData = source_userDataParameterUsages_UserData:pcm::parameter::VariableUsage{
		}		};

		enforce domain target targetUserData:pcm::usagemodel::UserData{
			userDataParameterUsages_UserData = target_userDataParameterUsages_UserData:pcm::parameter::VariableUsage{
		}		};
		when {
			Mark_usagemodel_UserData(sourceUserData, targetUserData);
			Mark_parameter_VariableUsage(source_userDataParameterUsages_UserData, target_userDataParameterUsages_UserData);
		}
	}

	top relation CopyReference_UserData_assemblyContext_userData {

		checkonly domain source sourceUserData:pcm::usagemodel::UserData{
			assemblyContext_userData = source_assemblyContext_userData:pcm::core::composition::AssemblyContext{
		}		};

		enforce domain target targetUserData:pcm::usagemodel::UserData{
			assemblyContext_userData = target_assemblyContext_userData:pcm::core::composition::AssemblyContext{
		}		};
		when {
			Mark_usagemodel_UserData(sourceUserData, targetUserData);
			Mark_composition_AssemblyContext(source_assemblyContext_userData, target_assemblyContext_userData);
		}
	}

	top relation CopyReference_OpenWorkload_interArrivalTime_OpenWorkload {

		checkonly domain source sourceOpenWorkload:pcm::usagemodel::OpenWorkload{
			interArrivalTime_OpenWorkload = source_interArrivalTime_OpenWorkload:pcm::core::PCMRandomVariable{
		}		};

		enforce domain target targetOpenWorkload:pcm::usagemodel::OpenWorkload{
			interArrivalTime_OpenWorkload = target_interArrivalTime_OpenWorkload:pcm::core::PCMRandomVariable{
		}		};
		when {
			Mark_usagemodel_OpenWorkload(sourceOpenWorkload, targetOpenWorkload);
			Mark_core_PCMRandomVariable(source_interArrivalTime_OpenWorkload, target_interArrivalTime_OpenWorkload);
		}
	}

	top relation CopyReference_Loop_bodyBehaviour_Loop {

		checkonly domain source sourceLoop:pcm::usagemodel::Loop{
			bodyBehaviour_Loop = source_bodyBehaviour_Loop:pcm::usagemodel::ScenarioBehaviour{
		}		};

		enforce domain target targetLoop:pcm::usagemodel::Loop{
			bodyBehaviour_Loop = target_bodyBehaviour_Loop:pcm::usagemodel::ScenarioBehaviour{
		}		};
		when {
			Mark_usagemodel_Loop(sourceLoop, targetLoop);
			Mark_usagemodel_ScenarioBehaviour(source_bodyBehaviour_Loop, target_bodyBehaviour_Loop);
		}
	}

	top relation CopyReference_Loop_loopIteration_Loop {

		checkonly domain source sourceLoop:pcm::usagemodel::Loop{
			loopIteration_Loop = source_loopIteration_Loop:pcm::core::PCMRandomVariable{
		}		};

		enforce domain target targetLoop:pcm::usagemodel::Loop{
			loopIteration_Loop = target_loopIteration_Loop:pcm::core::PCMRandomVariable{
		}		};
		when {
			Mark_usagemodel_Loop(sourceLoop, targetLoop);
			Mark_core_PCMRandomVariable(source_loopIteration_Loop, target_loopIteration_Loop);
		}
	}

	top relation CopyReference_EntryLevelSystemCall_inputParameterUsages_EntryLevelSystemCall {

		checkonly domain source sourceEntryLevelSystemCall:pcm::usagemodel::EntryLevelSystemCall{
			inputParameterUsages_EntryLevelSystemCall = source_inputParameterUsages_EntryLevelSystemCall:pcm::parameter::VariableUsage{
		}		};

		enforce domain target targetEntryLevelSystemCall:pcm::usagemodel::EntryLevelSystemCall{
			inputParameterUsages_EntryLevelSystemCall = target_inputParameterUsages_EntryLevelSystemCall:pcm::parameter::VariableUsage{
		}		};
		when {
			Mark_usagemodel_EntryLevelSystemCall(sourceEntryLevelSystemCall, targetEntryLevelSystemCall);
			Mark_parameter_VariableUsage(source_inputParameterUsages_EntryLevelSystemCall, target_inputParameterUsages_EntryLevelSystemCall);
		}
	}

	top relation CopyReference_EntryLevelSystemCall_providedRole_EntryLevelSystemCall {

		checkonly domain source sourceEntryLevelSystemCall:pcm::usagemodel::EntryLevelSystemCall{
			providedRole_EntryLevelSystemCall = source_providedRole_EntryLevelSystemCall:pcm::repository::ProvidedRole{
		}		};

		enforce domain target targetEntryLevelSystemCall:pcm::usagemodel::EntryLevelSystemCall{
			providedRole_EntryLevelSystemCall = target_providedRole_EntryLevelSystemCall:pcm::repository::ProvidedRole{
		}		};
		when {
			Mark_usagemodel_EntryLevelSystemCall(sourceEntryLevelSystemCall, targetEntryLevelSystemCall);
			Mark_repository_ProvidedRole(source_providedRole_EntryLevelSystemCall, target_providedRole_EntryLevelSystemCall);
		}
	}

	top relation CopyReference_EntryLevelSystemCall_signature_EntryLevelSystemCall {

		checkonly domain source sourceEntryLevelSystemCall:pcm::usagemodel::EntryLevelSystemCall{
			signature_EntryLevelSystemCall = source_signature_EntryLevelSystemCall:pcm::repository::Signature{
		}		};

		enforce domain target targetEntryLevelSystemCall:pcm::usagemodel::EntryLevelSystemCall{
			signature_EntryLevelSystemCall = target_signature_EntryLevelSystemCall:pcm::repository::Signature{
		}		};
		when {
			Mark_usagemodel_EntryLevelSystemCall(sourceEntryLevelSystemCall, targetEntryLevelSystemCall);
			Mark_repository_Signature(source_signature_EntryLevelSystemCall, target_signature_EntryLevelSystemCall);
		}
	}

	top relation CopyReference_EntryLevelSystemCall_outputParameterUsages_EntryLevelSystemCall {

		checkonly domain source sourceEntryLevelSystemCall:pcm::usagemodel::EntryLevelSystemCall{
			outputParameterUsages_EntryLevelSystemCall = source_outputParameterUsages_EntryLevelSystemCall:pcm::parameter::VariableUsage{
		}		};

		enforce domain target targetEntryLevelSystemCall:pcm::usagemodel::EntryLevelSystemCall{
			outputParameterUsages_EntryLevelSystemCall = target_outputParameterUsages_EntryLevelSystemCall:pcm::parameter::VariableUsage{
		}		};
		when {
			Mark_usagemodel_EntryLevelSystemCall(sourceEntryLevelSystemCall, targetEntryLevelSystemCall);
			Mark_parameter_VariableUsage(source_outputParameterUsages_EntryLevelSystemCall, target_outputParameterUsages_EntryLevelSystemCall);
		}
	}

	top relation CopyReference_ClosedWorkload_thinkTime_ClosedWorkload {

		checkonly domain source sourceClosedWorkload:pcm::usagemodel::ClosedWorkload{
			thinkTime_ClosedWorkload = source_thinkTime_ClosedWorkload:pcm::core::PCMRandomVariable{
		}		};

		enforce domain target targetClosedWorkload:pcm::usagemodel::ClosedWorkload{
			thinkTime_ClosedWorkload = target_thinkTime_ClosedWorkload:pcm::core::PCMRandomVariable{
		}		};
		when {
			Mark_usagemodel_ClosedWorkload(sourceClosedWorkload, targetClosedWorkload);
			Mark_core_PCMRandomVariable(source_thinkTime_ClosedWorkload, target_thinkTime_ClosedWorkload);
		}
	}

	top relation CopyReference_Branch_branchTransitions_Branch {

		checkonly domain source sourceBranch:pcm::usagemodel::Branch{
			branchTransitions_Branch = source_branchTransitions_Branch:pcm::usagemodel::BranchTransition{
		}		};

		enforce domain target targetBranch:pcm::usagemodel::Branch{
			branchTransitions_Branch = target_branchTransitions_Branch:pcm::usagemodel::BranchTransition{
		}		};
		when {
			Mark_usagemodel_Branch(sourceBranch, targetBranch);
			Mark_usagemodel_BranchTransition(source_branchTransitions_Branch, target_branchTransitions_Branch);
		}
	}

	top relation CopyReference_BranchTransition_branchedBehaviour_BranchTransition {

		checkonly domain source sourceBranchTransition:pcm::usagemodel::BranchTransition{
			branchedBehaviour_BranchTransition = source_branchedBehaviour_BranchTransition:pcm::usagemodel::ScenarioBehaviour{
		}		};

		enforce domain target targetBranchTransition:pcm::usagemodel::BranchTransition{
			branchedBehaviour_BranchTransition = target_branchedBehaviour_BranchTransition:pcm::usagemodel::ScenarioBehaviour{
		}		};
		when {
			Mark_usagemodel_BranchTransition(sourceBranchTransition, targetBranchTransition);
			Mark_usagemodel_ScenarioBehaviour(source_branchedBehaviour_BranchTransition, target_branchedBehaviour_BranchTransition);
		}
	}

	top relation CopyReference_Delay_timeSpecification_Delay {

		checkonly domain source sourceDelay:pcm::usagemodel::Delay{
			timeSpecification_Delay = source_timeSpecification_Delay:pcm::core::PCMRandomVariable{
		}		};

		enforce domain target targetDelay:pcm::usagemodel::Delay{
			timeSpecification_Delay = target_timeSpecification_Delay:pcm::core::PCMRandomVariable{
		}		};
		when {
			Mark_usagemodel_Delay(sourceDelay, targetDelay);
			Mark_core_PCMRandomVariable(source_timeSpecification_Delay, target_timeSpecification_Delay);
		}
	}

	top relation CopyReference_BoxedPDF_samples {

		checkonly domain source sourceBoxedPDF:probfunction::BoxedPDF{
			samples = source_samples:probfunction::ContinuousSample{
		}		};

		enforce domain target targetBoxedPDF:probfunction::BoxedPDF{
			samples = target_samples:probfunction::ContinuousSample{
		}		};
		when {
			Mark_probfunction_BoxedPDF(sourceBoxedPDF, targetBoxedPDF);
			Mark_probfunction_ContinuousSample(source_samples, target_samples);
		}
	}

	top relation CopyReference_ProbabilityMassFunction_samples {

		checkonly domain source sourceProbabilityMassFunction:probfunction::ProbabilityMassFunction{
			samples = source_samples:probfunction::Sample{
		}		};

		enforce domain target targetProbabilityMassFunction:probfunction::ProbabilityMassFunction{
			samples = target_samples:probfunction::Sample{
		}		};
		when {
			Mark_probfunction_ProbabilityMassFunction(sourceProbabilityMassFunction, targetProbabilityMassFunction);
			Mark_probfunction_Sample(source_samples, target_samples);
		}
	}

	top relation CopyReference_SamplePDF_values {

		checkonly domain source sourceSamplePDF:probfunction::SamplePDF{
			values = source_values:probfunction::Complex{
		}		};

		enforce domain target targetSamplePDF:probfunction::SamplePDF{
			values = target_values:probfunction::Complex{
		}		};
		when {
			Mark_probfunction_SamplePDF(sourceSamplePDF, targetSamplePDF);
			Mark_probfunction_Complex(source_values, target_values);
		}
	}

	top relation CopyReference_NamespaceReference_innerReference_NamespaceReference {

		checkonly domain source sourceNamespaceReference:stoex::NamespaceReference{
			innerReference_NamespaceReference = source_innerReference_NamespaceReference:stoex::AbstractNamedReference{
		}		};

		enforce domain target targetNamespaceReference:stoex::NamespaceReference{
			innerReference_NamespaceReference = target_innerReference_NamespaceReference:stoex::AbstractNamedReference{
		}		};
		when {
			Mark_stoex_NamespaceReference(sourceNamespaceReference, targetNamespaceReference);
			Mark_stoex_AbstractNamedReference(source_innerReference_NamespaceReference, target_innerReference_NamespaceReference);
		}
	}

	top relation CopyReference_Variable_id_Variable {

		checkonly domain source sourceVariable:stoex::Variable{
			id_Variable = source_id_Variable:stoex::AbstractNamedReference{
		}		};

		enforce domain target targetVariable:stoex::Variable{
			id_Variable = target_id_Variable:stoex::AbstractNamedReference{
		}		};
		when {
			Mark_stoex_Variable(sourceVariable, targetVariable);
			Mark_stoex_AbstractNamedReference(source_id_Variable, target_id_Variable);
		}
	}

	top relation CopyReference_TermExpression_left {

		checkonly domain source sourceTermExpression:stoex::TermExpression{
			left = source_left:stoex::Term{
		}		};

		enforce domain target targetTermExpression:stoex::TermExpression{
			left = target_left:stoex::Term{
		}		};
		when {
			Mark_stoex_TermExpression(sourceTermExpression, targetTermExpression);
			Mark_stoex_Term(source_left, target_left);
		}
	}

	top relation CopyReference_TermExpression_right {

		checkonly domain source sourceTermExpression:stoex::TermExpression{
			right = source_right:stoex::Product{
		}		};

		enforce domain target targetTermExpression:stoex::TermExpression{
			right = target_right:stoex::Product{
		}		};
		when {
			Mark_stoex_TermExpression(sourceTermExpression, targetTermExpression);
			Mark_stoex_Product(source_right, target_right);
		}
	}

	top relation CopyReference_ProductExpression_left {

		checkonly domain source sourceProductExpression:stoex::ProductExpression{
			left = source_left:stoex::Product{
		}		};

		enforce domain target targetProductExpression:stoex::ProductExpression{
			left = target_left:stoex::Product{
		}		};
		when {
			Mark_stoex_ProductExpression(sourceProductExpression, targetProductExpression);
			Mark_stoex_Product(source_left, target_left);
		}
	}

	top relation CopyReference_ProductExpression_right {

		checkonly domain source sourceProductExpression:stoex::ProductExpression{
			right = source_right:stoex::Power{
		}		};

		enforce domain target targetProductExpression:stoex::ProductExpression{
			right = target_right:stoex::Power{
		}		};
		when {
			Mark_stoex_ProductExpression(sourceProductExpression, targetProductExpression);
			Mark_stoex_Power(source_right, target_right);
		}
	}

	top relation CopyReference_ProbabilityFunctionLiteral_function_ProbabilityFunctionLiteral {

		checkonly domain source sourceProbabilityFunctionLiteral:stoex::ProbabilityFunctionLiteral{
			function_ProbabilityFunctionLiteral = source_function_ProbabilityFunctionLiteral:probfunction::ProbabilityFunction{
		}		};

		enforce domain target targetProbabilityFunctionLiteral:stoex::ProbabilityFunctionLiteral{
			function_ProbabilityFunctionLiteral = target_function_ProbabilityFunctionLiteral:probfunction::ProbabilityFunction{
		}		};
		when {
			Mark_stoex_ProbabilityFunctionLiteral(sourceProbabilityFunctionLiteral, targetProbabilityFunctionLiteral);
			Mark_probfunction_ProbabilityFunction(source_function_ProbabilityFunctionLiteral, target_function_ProbabilityFunctionLiteral);
		}
	}

	top relation CopyReference_Parenthesis_innerExpression {

		checkonly domain source sourceParenthesis:stoex::Parenthesis{
			innerExpression = source_innerExpression:stoex::Expression{
		}		};

		enforce domain target targetParenthesis:stoex::Parenthesis{
			innerExpression = target_innerExpression:stoex::Expression{
		}		};
		when {
			Mark_stoex_Parenthesis(sourceParenthesis, targetParenthesis);
			Mark_stoex_Expression(source_innerExpression, target_innerExpression);
		}
	}

	top relation CopyReference_CompareExpression_left {

		checkonly domain source sourceCompareExpression:stoex::CompareExpression{
			left = source_left:stoex::Term{
		}		};

		enforce domain target targetCompareExpression:stoex::CompareExpression{
			left = target_left:stoex::Term{
		}		};
		when {
			Mark_stoex_CompareExpression(sourceCompareExpression, targetCompareExpression);
			Mark_stoex_Term(source_left, target_left);
		}
	}

	top relation CopyReference_CompareExpression_right {

		checkonly domain source sourceCompareExpression:stoex::CompareExpression{
			right = source_right:stoex::Term{
		}		};

		enforce domain target targetCompareExpression:stoex::CompareExpression{
			right = target_right:stoex::Term{
		}		};
		when {
			Mark_stoex_CompareExpression(sourceCompareExpression, targetCompareExpression);
			Mark_stoex_Term(source_right, target_right);
		}
	}

	top relation CopyReference_PowerExpression_base {

		checkonly domain source sourcePowerExpression:stoex::PowerExpression{
			base = source_base:stoex::Power{
		}		};

		enforce domain target targetPowerExpression:stoex::PowerExpression{
			base = target_base:stoex::Power{
		}		};
		when {
			Mark_stoex_PowerExpression(sourcePowerExpression, targetPowerExpression);
			Mark_stoex_Power(source_base, target_base);
		}
	}

	top relation CopyReference_PowerExpression_exponent {

		checkonly domain source sourcePowerExpression:stoex::PowerExpression{
			exponent = source_exponent:stoex::Unary{
		}		};

		enforce domain target targetPowerExpression:stoex::PowerExpression{
			exponent = target_exponent:stoex::Unary{
		}		};
		when {
			Mark_stoex_PowerExpression(sourcePowerExpression, targetPowerExpression);
			Mark_stoex_Unary(source_exponent, target_exponent);
		}
	}

	top relation CopyReference_BooleanOperatorExpression_left {

		checkonly domain source sourceBooleanOperatorExpression:stoex::BooleanOperatorExpression{
			left = source_left:stoex::BooleanExpression{
		}		};

		enforce domain target targetBooleanOperatorExpression:stoex::BooleanOperatorExpression{
			left = target_left:stoex::BooleanExpression{
		}		};
		when {
			Mark_stoex_BooleanOperatorExpression(sourceBooleanOperatorExpression, targetBooleanOperatorExpression);
			Mark_stoex_BooleanExpression(source_left, target_left);
		}
	}

	top relation CopyReference_BooleanOperatorExpression_right {

		checkonly domain source sourceBooleanOperatorExpression:stoex::BooleanOperatorExpression{
			right = source_right:stoex::BooleanExpression{
		}		};

		enforce domain target targetBooleanOperatorExpression:stoex::BooleanOperatorExpression{
			right = target_right:stoex::BooleanExpression{
		}		};
		when {
			Mark_stoex_BooleanOperatorExpression(sourceBooleanOperatorExpression, targetBooleanOperatorExpression);
			Mark_stoex_BooleanExpression(source_right, target_right);
		}
	}

	top relation CopyReference_NotExpression_inner {

		checkonly domain source sourceNotExpression:stoex::NotExpression{
			inner = source_inner:stoex::Unary{
		}		};

		enforce domain target targetNotExpression:stoex::NotExpression{
			inner = target_inner:stoex::Unary{
		}		};
		when {
			Mark_stoex_NotExpression(sourceNotExpression, targetNotExpression);
			Mark_stoex_Unary(source_inner, target_inner);
		}
	}

	top relation CopyReference_NegativeExpression_inner {

		checkonly domain source sourceNegativeExpression:stoex::NegativeExpression{
			inner = source_inner:stoex::Unary{
		}		};

		enforce domain target targetNegativeExpression:stoex::NegativeExpression{
			inner = target_inner:stoex::Unary{
		}		};
		when {
			Mark_stoex_NegativeExpression(sourceNegativeExpression, targetNegativeExpression);
			Mark_stoex_Unary(source_inner, target_inner);
		}
	}

	top relation CopyReference_FunctionLiteral_parameters_FunctionLiteral {

		checkonly domain source sourceFunctionLiteral:stoex::FunctionLiteral{
			parameters_FunctionLiteral = source_parameters_FunctionLiteral:stoex::Expression{
		}		};

		enforce domain target targetFunctionLiteral:stoex::FunctionLiteral{
			parameters_FunctionLiteral = target_parameters_FunctionLiteral:stoex::Expression{
		}		};
		when {
			Mark_stoex_FunctionLiteral(sourceFunctionLiteral, targetFunctionLiteral);
			Mark_stoex_Expression(source_parameters_FunctionLiteral, target_parameters_FunctionLiteral);
		}
	}

	top relation CopyReference_IfElseExpression_ifExpression {

		checkonly domain source sourceIfElseExpression:stoex::IfElseExpression{
			ifExpression = source_ifExpression:stoex::BooleanExpression{
		}		};

		enforce domain target targetIfElseExpression:stoex::IfElseExpression{
			ifExpression = target_ifExpression:stoex::BooleanExpression{
		}		};
		when {
			Mark_stoex_IfElseExpression(sourceIfElseExpression, targetIfElseExpression);
			Mark_stoex_BooleanExpression(source_ifExpression, target_ifExpression);
		}
	}

	top relation CopyReference_IfElseExpression_elseExpression {

		checkonly domain source sourceIfElseExpression:stoex::IfElseExpression{
			elseExpression = source_elseExpression:stoex::BooleanExpression{
		}		};

		enforce domain target targetIfElseExpression:stoex::IfElseExpression{
			elseExpression = target_elseExpression:stoex::BooleanExpression{
		}		};
		when {
			Mark_stoex_IfElseExpression(sourceIfElseExpression, targetIfElseExpression);
			Mark_stoex_BooleanExpression(source_elseExpression, target_elseExpression);
		}
	}

	top relation CopyReference_IfElseExpression_conditionExpression {

		checkonly domain source sourceIfElseExpression:stoex::IfElseExpression{
			conditionExpression = source_conditionExpression:stoex::BooleanExpression{
		}		};

		enforce domain target targetIfElseExpression:stoex::IfElseExpression{
			conditionExpression = target_conditionExpression:stoex::BooleanExpression{
		}		};
		when {
			Mark_stoex_IfElseExpression(sourceIfElseExpression, targetIfElseExpression);
			Mark_stoex_BooleanExpression(source_conditionExpression, target_conditionExpression);
		}
	}

	top relation CopyReference_RandomVariable_expression {

		checkonly domain source sourceRandomVariable:stoex::RandomVariable{
			expression = source_expression:stoex::Expression{
		}		};

		enforce domain target targetRandomVariable:stoex::RandomVariable{
			expression = target_expression:stoex::Expression{
		}		};
		when {
			Mark_stoex_RandomVariable(sourceRandomVariable, targetRandomVariable);
			Mark_stoex_Expression(source_expression, target_expression);
		}
	}

	top relation CopyReference_UnitCarryingElement_unit {

		checkonly domain source sourceUnitCarryingElement:units::UnitCarryingElement{
			unit = source_unit:units::Unit{
		}		};

		enforce domain target targetUnitCarryingElement:units::UnitCarryingElement{
			unit = target_unit:units::Unit{
		}		};
		when {
			Mark_units_UnitCarryingElement(sourceUnitCarryingElement, targetUnitCarryingElement);
			Mark_units_Unit(source_unit, target_unit);
		}
	}

	top relation CopyReference_UnitRepository_units {

		checkonly domain source sourceUnitRepository:units::UnitRepository{
			units = source_units:units::BaseUnit{
		}		};

		enforce domain target targetUnitRepository:units::UnitRepository{
			units = target_units:units::BaseUnit{
		}		};
		when {
			Mark_units_UnitRepository(sourceUnitRepository, targetUnitRepository);
			Mark_units_BaseUnit(source_units, target_units);
		}
	}

	top relation CopyReference_UnitMultiplication_units {

		checkonly domain source sourceUnitMultiplication:units::UnitMultiplication{
			units = source_units:units::Unit{
		}		};

		enforce domain target targetUnitMultiplication:units::UnitMultiplication{
			units = target_units:units::Unit{
		}		};
		when {
			Mark_units_UnitMultiplication(sourceUnitMultiplication, targetUnitMultiplication);
			Mark_units_Unit(source_units, target_units);
		}
	}

	top relation CopyReference_UnitPower_unit {

		checkonly domain source sourceUnitPower:units::UnitPower{
			unit = source_unit:units::Unit{
		}		};

		enforce domain target targetUnitPower:units::UnitPower{
			unit = target_unit:units::Unit{
		}		};
		when {
			Mark_units_UnitPower(sourceUnitPower, targetUnitPower);
			Mark_units_Unit(source_unit, target_unit);
		}
	}

	top relation CopyReference_UnitLiteral_baseUnit {

		checkonly domain source sourceUnitLiteral:units::UnitLiteral{
			baseUnit = source_baseUnit:units::BaseUnit{
		}		};

		enforce domain target targetUnitLiteral:units::UnitLiteral{
			baseUnit = target_baseUnit:units::BaseUnit{
		}		};
		when {
			Mark_units_UnitLiteral(sourceUnitLiteral, targetUnitLiteral);
			Mark_units_BaseUnit(source_baseUnit, target_baseUnit);
		}
	}

	top relation CopyReference_Sample_value {

		checkonly domain source sourceSample:probfunction::Sample{
			value = source_value:ecore::EObject{
		}		};

		enforce domain target targetSample:probfunction::Sample{
			value = target_value:ecore::EObject{
		}		};
		when {
			Mark_probfunction_Sample(sourceSample, targetSample);
		}
	}
}