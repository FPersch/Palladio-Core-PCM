<%@ CodeTemplate Language="C#" TargetLanguage="C#" Description="Builds a class for each class in the assembly, and a test stub for every method." %>
<%@ Property Name="AssemblyFile" Type="System.String" Default="" Category="Options" Description="The assembly to load." %>
<%@ Import NameSpace="System.Reflection" %>
<%@ Import NameSpace="System.Collections" %>
 
<script runat="template">
Assembly GetAssembly()
{
	return Assembly.LoadFile(AssemblyFile);
}

private struct PropertyInfo
{
	public bool IsGettable;
	public bool IsSettable;
	public string Name;
	public Type Type;

	public PropertyInfo(string name)
	{
		Name = name;
		IsGettable = false;
		IsSettable = false;
		Type = typeof(void);
	}
}
</script>
 
<%
Assembly assembly = GetAssembly();
foreach(Type T in assembly.GetTypes())
{
	if(T.IsInterface)
	{
		string className = T.Name.Remove(0,1) + "Interceptor";
%>

#region <%= T.Name%>

public class <%=className%> : <%=T.ToString()%>
{

	private <%=T.ToString()%> _target;
	
	public  <%=className%>(<%=T.ToString()%> target)
	{
		_target = target;
	}
	
<%
	MethodInfo[] methods = T.GetMethods ( BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static  );
	Hashtable propertyTable = new Hashtable();
	ArrayList methodList = new ArrayList();
	foreach (MethodInfo M in methods)
	{
		if (M.Name.StartsWith("get_"))
		{
			string name = M.Name.Remove(0,4);
			PropertyInfo pInfo = new PropertyInfo(name);
			if (propertyTable.Contains(name))
			{
				pInfo = (PropertyInfo)propertyTable[name];
				propertyTable.Remove(name);
			}
			pInfo.IsGettable = true;
			pInfo.Type = M.ReturnType;
			propertyTable.Add(name,pInfo);
		}
		else if (M.Name.StartsWith("set_"))
		{
			string name = M.Name.Remove(0,4);
			PropertyInfo pInfo = new PropertyInfo(name);
			if (propertyTable.Contains(name))
			{
				pInfo = (PropertyInfo)propertyTable[name];
				propertyTable.Remove(name);
			}
			pInfo.IsSettable = true;
			pInfo.Type = M.GetParameters()[0].ParameterType;
			propertyTable.Add(name,pInfo);
		}	
		else
		{
			methodList.Add(M);	
		}
	}
	
	%>
	#region Properties 
	
	<%

	foreach (PropertyInfo P in propertyTable.Values)
	{
	%>
	public <%=P.Type.ToString()%> <%=P.Name%>
	{
	<% if (P.IsGettable) { %>
		get 
		{ 
			MethodInfo method = _target.GetType().GetMethod("get_<%=P.Name%>");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, method);
			<%=P.Type.ToString()%> returnValue = _target.<%=P.Name%>; 
			InterceptorActions.AfterCall(id, method);
			return returnValue;
		}
	<% } %>
	<% if (P.IsSettable) { %>
		set 
		{ 
			MethodInfo method = _target.GetType().GetMethod("set_<%=P.Name%>");
			long id = InterceptorActions.GetNextCallID();
			InterceptorActions.BeforeCall(id, method);
			_target.<%=P.Name%> = value; 
			InterceptorActions.AfterCall(id, method);
		}
	<% } %>
	}
	
	<%
	}
	
	%>
	#endregion 
	
	#region Methods
	<%	
	
	foreach(MethodInfo M in methodList)
	{
		bool isVoid = M.ReturnType.Equals(typeof(void));
		string returnStr = M.ReturnType.FullName;
		
		string callStr = "";
		if (!isVoid)
		{
			callStr += M.ReturnType.ToString() + " returnValue = ";
		}
		else 
		{
			returnStr = "void";
		}
		
		callStr += "_target." + M.Name +"(";
		
		ParameterInfo[] parameters = M.GetParameters();
		string parameterStr = "";
		string paramTypeStr = "new Type[] {";
		for (int i=0; i<parameters.Length; i++ )
		{
			if (i!=0) 
			{ 
				parameterStr += ", ";
				callStr += ", ";
				paramTypeStr += ", ";
			}
			parameterStr += parameters[i].ParameterType.ToString();
			parameterStr += " ";
			parameterStr += parameters[i].Name;
			callStr += parameters[i].Name;
			paramTypeStr += "typeof("+parameters[i].ParameterType.ToString()+")";
		}
		callStr += ")";
		paramTypeStr += "}";
%>

	public <%=returnStr%> <%=M.Name%>( <%= parameterStr %>)
	{
		MethodInfo method = _target.GetType().GetMethod("<%=M.Name%>", <%=paramTypeStr%>);
		long id = InterceptorActions.GetNextCallID();
		InterceptorActions.BeforeCall(id, method);
		<%=callStr%>;
		InterceptorActions.AfterCall(id, method);
		<%
		if (!isVoid)
		{
		%>
		return returnValue;
		<%
		}
		%>
	}                                   
<%
	}
%>
	#endregion 

}

#endregion
<%
	}
}
%>