package de.uka.ipd.sdq.probespec.framework.test;

import java.util.Random;
import java.util.Vector;

import javax.measure.quantity.Quantity;

import junit.framework.TestCase;
import de.uka.ipd.sdq.pipesandfilters.framework.PipesAndFiltersManager;
import de.uka.ipd.sdq.pipesandfilters.framework.filters.ExampleFilter;
import de.uka.ipd.sdq.probespec.framework.ProbeSample;
import de.uka.ipd.sdq.probespec.framework.ProbeSetSample;
import de.uka.ipd.sdq.probespec.framework.RequestContextID;
import de.uka.ipd.sdq.probespec.framework.SampleBlackboard;
import de.uka.ipd.sdq.probespec.framework.calculator.CPUStateCalculator;
import de.uka.ipd.sdq.probespec.framework.calculator.ResponseTimeCalculator;
import de.uka.ipd.sdq.probespec.framework.probes.example.ASimpleActiveResource;
import de.uka.ipd.sdq.probespec.framework.probes.example.ExampleProbeStrategyFactory;
import de.uka.ipd.sdq.probespec.framework.probes.example.SimpleCPUResource;
import de.uka.ipd.sdq.probespec.framework.probes.example.SimpleSimulationContext;

public class FrameworkTest extends TestCase {

	private SampleBlackboard blackboard;
	private SimpleSimulationContext simCtx;
	private ExampleProbeStrategyFactory factory;

	private ResponseTimeCalculator respTimeCalc;
	private CPUStateCalculator cpuCalc;
	private PipesAndFiltersManager cpuPipeManager;
	private PipesAndFiltersManager respTimePipeManager;

	private static final String PROBE_SET_ID1 = "_probeSet1";
	private static final String PROBE_SET_ID2 = "_probeSet2";
	private static final String PROBE_SET_ID3 = "_probeSet3";

	private static final String CPU1_NAME = "CPU 1";

	@Override
	protected void setUp() throws Exception {
		super.setUp();

		// initialize the simulation and the measured model elements
		simCtx = new SimpleSimulationContext();
		SimpleCPUResource cpu = new SimpleCPUResource();
		simCtx.addActiveResource(CPU1_NAME, cpu);

		initialize();
	}

	// The code below would be generated by the M2T transformation
	private void initialize() {
		blackboard = new SampleBlackboard();
		factory = new ExampleProbeStrategyFactory(simCtx);

		cpuPipeManager = new PipesAndFiltersManager(new ExampleFilter());
		cpuCalc = new CPUStateCalculator(blackboard, PROBE_SET_ID3);
		cpuCalc.setPipesAndFiltersManager(cpuPipeManager);

		respTimePipeManager = new PipesAndFiltersManager(new ExampleFilter());
		respTimeCalc = new ResponseTimeCalculator(blackboard, PROBE_SET_ID1,
				PROBE_SET_ID2);
		respTimeCalc.setPipesAndFiltersManager(respTimePipeManager);
	}

	public void testFramework() {
		long simTime = 0;

		for (int i = 0; i < 20000; i++) {
			int duration = new Double(new Random(i).nextDouble() * 300.0)
					.intValue();

			// ----------------------------------------------------------------
			// Simulate the simulation time
			simCtx.setSimulatedTime(simTime);

			Vector<ProbeSample<?, ? extends Quantity>> psv1 = new Vector<ProbeSample<?, ? extends Quantity>>();
			
			// Take a current time measurement
			psv1.add(factory.getTakeCurrentTime().takeSample("probeID1"));

			// Generate a probe set sample from the probe sample
			ProbeSetSample pss1 = new ProbeSetSample(psv1,
					new RequestContextID(String.valueOf(i)), "", PROBE_SET_ID1);
			pss1.addToTimeToLive(1);

			// Publish the probe set sample on the blackboard
			blackboard.addProbeSetSample(pss1);
			// ----------------------------------------------------------------

			// ----------------------------------------------------------------
			// Simulate the CPU utilization
			int jobs = i % 100;
			simCtx.getActiveResource(CPU1_NAME).setJobs(jobs);

			Vector<ProbeSample<?, ? extends Quantity>> psv2 = new Vector<ProbeSample<?, ? extends Quantity>>();
			
			// Take a CPU state measurement
			ASimpleActiveResource cpuToMeasure = simCtx
					.getActiveResource(CPU1_NAME);
			psv2.add(factory.getTakeCPUState().takeSample(PROBE_SET_ID3, cpuToMeasure));

			// Take a current time measurement
			psv2.add(factory.getTakeCurrentTime().takeSample("probeID1"));

			// Generate a probe set sample from the probe samples
			ProbeSetSample pss2 = new ProbeSetSample(psv2,
					new RequestContextID(String.valueOf(i)), "", PROBE_SET_ID3);
			pss2.addToTimeToLive(1);

			// Publish probe sample on blackboard
			blackboard.addProbeSetSample(pss2);

			// Check whether correct values arrived at the first pipe element
			ExampleFilter filter1 = (ExampleFilter) cpuPipeManager
					.getStartElement();
			assertEquals(jobs, ((Integer) filter1.getLastArrivedData()
					.getTupleElement(1).getValue()).intValue());
			// ----------------------------------------------------------------

			simTime += duration;
			// ----------------------------------------------------------------
			// Simulate the simulation time
			simCtx.setSimulatedTime(simTime);

			Vector<ProbeSample<?, ? extends Quantity>> psv3 = new Vector<ProbeSample<?, ? extends Quantity>>();
			
			// Take a current time measurement
			psv3.add(factory.getTakeCurrentTime().takeSample("", "probeID2",
					PROBE_SET_ID2));

			// Generate a probe set sample from the probe sample
			ProbeSetSample pss3 = new ProbeSetSample(psv3,
					new RequestContextID(String.valueOf(i)), "", PROBE_SET_ID2);

			// Publish the probe set sample on the blackboard
			blackboard.addProbeSetSample(pss3);

			// Check whether correct values arrived at the first pipe element
			ExampleFilter filter2 = (ExampleFilter) respTimePipeManager
					.getStartElement();
			assertEquals(new Long(duration), ((Long) filter2
					.getLastArrivedData().getTupleElement(0).getValue()));
			// ----------------------------------------------------------------

		}
	}

	@Override
	protected void tearDown() throws Exception {
		super.tearDown();
	}

}
