import java.util.Collection;import java.util.Date;import java.util.Random;import java.util.Vector;import java.util.logging.Logger;import javax.measure.Measure;import javax.measure.quantity.Dimensionless;import javax.measure.unit.BaseUnit;import javax.measure.unit.SI;import javax.measure.unit.Unit;import de.uka.ipd.sdq.edp2.impl.MeasurementsUtility;import de.uka.ipd.sdq.edp2.models.emfmodel.BaseMetricDescription;import de.uka.ipd.sdq.edp2.models.emfmodel.CaptureType;import de.uka.ipd.sdq.edp2.models.emfmodel.Description;import de.uka.ipd.sdq.edp2.models.emfmodel.EmfmodelFactory;import de.uka.ipd.sdq.edp2.models.emfmodel.EmfmodelPackage;import de.uka.ipd.sdq.edp2.models.emfmodel.ExperimentGroup;import de.uka.ipd.sdq.edp2.models.emfmodel.ExperimentRun;import de.uka.ipd.sdq.edp2.models.emfmodel.ExperimentSetting;import de.uka.ipd.sdq.edp2.models.emfmodel.Measurement;import de.uka.ipd.sdq.edp2.models.emfmodel.MeasurementRange;import de.uka.ipd.sdq.edp2.models.emfmodel.MetricSetDescription;import de.uka.ipd.sdq.edp2.models.emfmodel.Monotonic;import de.uka.ipd.sdq.edp2.models.emfmodel.OrdinalMeasure;import de.uka.ipd.sdq.edp2.models.emfmodel.PersistenceKindOptions;import de.uka.ipd.sdq.edp2.models.emfmodel.RawMeasurements;import de.uka.ipd.sdq.edp2.models.emfmodel.Scale;/**This class demonstrates the use of EDP2 for storing measurements and creating descriptions. * The implemented example follows the EDP2 creation steps:  * <li> * <ul/>Step 1: Build ExperimentSetting * <ul/>Step 2: Prepare Experiment Run (Add Raw Measurements, AggregationFunctions) * <ul/>Step 3: Run the experiment and generate measurements * </li> * All Measurements are stored in a Measurements directory. * Additionally, all standard descriptions can be retrieved.
 * @author groenda
 */
public class ExampleData {	/** Logger for this class. */	private static Logger logger = Logger.getLogger(StoreExample.class.getCanonicalName());	/** EMF initialization. */	static EmfmodelPackage emfp = EmfmodelPackage.eINSTANCE;	/** Shortcut to factory. */	EmfmodelFactory f = EmfmodelFactory.eINSTANCE;		// Create default units	@SuppressWarnings("unchecked")	Unit timeUnit = SI.SECOND;	@SuppressWarnings("unchecked")	Unit numberUnit = new BaseUnit<Dimensionless>("Threads");	// Metric descriptions	private BaseMetricDescription SimTime;	private BaseMetricDescription ResponseTime;	private BaseMetricDescription DemandedTime;	private BaseMetricDescription WaitingTime;	private BaseMetricDescription AssignedThreads;	private BaseMetricDescription AbsoluteFrequency;	private MetricSetDescription ResponseTimeSimulated;	private MetricSetDescription DemandedTimeSimulated;	private MetricSetDescription WaitingTimeSimulated;	private MetricSetDescription AssignedThreadsSimulated;		/**Creates all descriptions available as default in EDP2.	 * @return A collection containing all descriptions.	 */	public Collection<Description> createDescriptions() {		createBaseMetricDescriptions();		createMetricSetDescriptions();		Vector<Description> list = new Vector<Description>();		list.add(SimTime);		list.add(ResponseTime);		list.add(DemandedTime);		list.add(WaitingTime);		list.add(AssignedThreads);		list.add(AbsoluteFrequency);		list.add(ResponseTimeSimulated);		list.add(DemandedTimeSimulated);		list.add(WaitingTimeSimulated);		list.add(AssignedThreadsSimulated);		return list;	}	/**Creates all metric set descriptions.	 */	private void createMetricSetDescriptions() {		MetricSetDescription msd = EmfmodelFactory.eINSTANCE.createMetricSetDescription(); 		msd.setUuid("_MenvIiUREd6gmLudJva2Dw");		msd.setName("Response Time (Simulated)");		msd.setTextualDescription("Response time determined in a simulation. Consists of the simulation time when the response time began and the response time itself.");		msd.getSubsumedMetrics().add(SimTime);		msd.getSubsumedMetrics().add(ResponseTime);		ResponseTimeSimulated = msd;		msd = EmfmodelFactory.eINSTANCE.createMetricSetDescription(); 		msd.setUuid("_tUkRciUREd6gmLudJva2Dw");		msd.setName("Demanded Time (Simulated)");		msd.setTextualDescription("Demanded time determined in a simulation. Consists of the simulation time when the time was demanded and the demanded time itself.");		msd.getSubsumedMetrics().add(SimTime);		msd.getSubsumedMetrics().add(DemandedTime);		DemandedTimeSimulated = msd;		msd = EmfmodelFactory.eINSTANCE.createMetricSetDescription(); 		msd.setUuid("_3cXn4iUREd6gmLudJva2Dw");		msd.setName("Waiting Time (Simulated)");		msd.setTextualDescription("Waiting time determined in a simulation. Consists of the simulation time when the waiting time is stored and the waiting time itself.");		msd.getSubsumedMetrics().add(SimTime);		msd.getSubsumedMetrics().add(WaitingTime);		WaitingTimeSimulated = msd;		msd = EmfmodelFactory.eINSTANCE.createMetricSetDescription(); 		msd.setUuid("_M3ynoiUSEd6gmLudJva2Dw");		msd.setName("Assigned Threads (Simulated)");		msd.setTextualDescription("Number of threads assigned to a processor within a simulation. Consists of the time when the number has changed and the new number of assigned threads itself.");		msd.getSubsumedMetrics().add(SimTime);		msd.getSubsumedMetrics().add(AssignedThreads);		AssignedThreadsSimulated = msd;		logger.info("Metric descriptions created.");	}	/**Creates all base metric descriptions.	 */	private void createBaseMetricDescriptions() {		BaseMetricDescription bmd = EmfmodelFactory.eINSTANCE.createBaseMetricDescription();		bmd.setUuid("_38mSASUPEd6gmLudJva2Dw");		bmd.setName("Simulation Time");		bmd.setTextualDescription("Time passed within a simulation. Starting with 0.0.");		bmd.setCaptureType(CaptureType.REAL_NUMBER);		bmd.setScale(Scale.INTERVAL);		bmd.setDefaultUnit(timeUnit);		bmd.setMonotonic(Monotonic.YES);		SimTime = bmd;		bmd = EmfmodelFactory.eINSTANCE.createBaseMetricDescription();		bmd.setUuid("_QC3ucCUQEd6gmLudJva2Dw");		bmd.setName("Response Time");		bmd.setTextualDescription("Response Time, for example of a service call.");		bmd.setCaptureType(CaptureType.REAL_NUMBER);		bmd.setScale(Scale.INTERVAL);		bmd.setDefaultUnit(timeUnit);		bmd.setMonotonic(Monotonic.NO);		ResponseTime = bmd;		bmd = EmfmodelFactory.eINSTANCE.createBaseMetricDescription();		bmd.setUuid("_AiroIZMbEd6Vw8NDgVSYcg");		bmd.setName("Frequency");		bmd.setTextualDescription("Absolute frequency of measurements or events. For example, of measurements lying within an interval of a histogram.");		bmd.setCaptureType(CaptureType.NATURAL_NUMBER);		bmd.setScale(Scale.RATIO);		bmd.setDefaultUnit(numberUnit);		bmd.setMonotonic(Monotonic.NO);		AbsoluteFrequency = bmd;		bmd = EmfmodelFactory.eINSTANCE.createBaseMetricDescription();		bmd.setUuid("_0xrYsCUQEd6gmLudJva2Dw");		bmd.setName("Assigned Threads");		bmd.setTextualDescription("Number of threads assigned to a processor. This includes active as well as waiting threads.");		bmd.setCaptureType(CaptureType.NATURAL_NUMBER);		bmd.setScale(Scale.INTERVAL);		bmd.setDefaultUnit(numberUnit);		bmd.setMonotonic(Monotonic.NO);		AssignedThreads = bmd;		bmd = EmfmodelFactory.eINSTANCE.createBaseMetricDescription();		bmd.setUuid("_nU2AICUQEd6gmLudJva2Dw");		bmd.setName("Waiting Time");		bmd.setTextualDescription("Overall time spend waiting during a single resource demand.");		bmd.setCaptureType(CaptureType.REAL_NUMBER);		bmd.setScale(Scale.INTERVAL);		bmd.setDefaultUnit(timeUnit);		bmd.setMonotonic(Monotonic.NO);		WaitingTime = bmd;		bmd = EmfmodelFactory.eINSTANCE.createBaseMetricDescription();		bmd.setUuid("_fvNrgCUQEd6gmLudJva2Dw");		bmd.setName("Demanded Time");		bmd.setTextualDescription("Time demanded at a resource for processing.");		bmd.setCaptureType(CaptureType.REAL_NUMBER);		bmd.setScale(Scale.INTERVAL);		bmd.setDefaultUnit(timeUnit);		bmd.setMonotonic(Monotonic.NO);		DemandedTime = bmd;	}	// Store for the experiment setup	private ExperimentGroup groupA;	private OrdinalMeasure serviceCallA;	private OrdinalMeasure cpuA;	private ExperimentSetting settingA;	private ExperimentRun runA0;	private Measurement measurementServiceCallA;		/**Creates all necessary data for an (exemplary) experimental setting.	 */	public ExperimentGroup createExperimentalGroupAndSetting() {		// create experiment group		groupA = f.createExperimentGroup();		groupA.setPurpose("Exemplary use of EDP2");		// create metrics		serviceCallA = f.createOrdinalMeasure();		serviceCallA.setPersistencyKind(PersistenceKindOptions.BINARY_PREFERRED);		serviceCallA.setMeasuredObject("Service Call A");		serviceCallA.setMetric(ResponseTimeSimulated);		groupA.getMeasure().add(serviceCallA);		cpuA = f.createOrdinalMeasure();		cpuA.setPersistencyKind(PersistenceKindOptions.BINARY_PREFERRED);		cpuA.setMeasuredObject("CPU A");		cpuA.setMetric(AssignedThreadsSimulated);		groupA.getMeasure().add(cpuA);		// create experiment settings		settingA = f.createExperimentSetting();		settingA.setDescription("Experiment Setting #1");		settingA.getMeasure().add(serviceCallA);		settingA.getMeasure().add(cpuA);		groupA.getExperimentSettings().add(settingA);		logger.info("Experimental setting created.");		return groupA;	}		/**Prepares everything for a run of experiment setting A.	 */	private void prepareExperimentRun() {		measurementServiceCallA = f.createMeasurement();		measurementServiceCallA.setMeasure(serviceCallA);		runA0 = f.createExperimentRun();		runA0.getMeasurement().add(measurementServiceCallA);		settingA.getExperimentRuns().add(runA0);		MeasurementRange range = MeasurementsUtility.addMeasurementRange(measurementServiceCallA);		RawMeasurements rm = f.createRawMeasurements();		range.setRawMeasurements(rm);		MeasurementsUtility.addDataSeries(rm);		logger.info("Experiment run prepared.");	}		/**Simulates the run of an experiment and generates (dummy) measurements.	 */	@SuppressWarnings("unchecked")	private void generateMeasurements() {		runA0.setStartTime(new Date());		Random random = new Random();		Object[] data;		// create 1000 dummy measurements		for (int i = 0; i < 1000; i++) {			data = new Object[2];			data[0] = Measure.valueOf(i, timeUnit);			data[1] = Measure.valueOf(random.nextDouble() * 10.0, timeUnit);			MeasurementsUtility.storeMeasurement(measurementServiceCallA, data);		}		logger.info("Measurements generated.");	}			/**Simulates running an experiment.	 */	public void simulateExperimentRun() {		prepareExperimentRun();		generateMeasurements();		logger.info("Example data created.");	}}			